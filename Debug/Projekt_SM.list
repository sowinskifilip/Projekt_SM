
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800630c  0800630c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800630c  0800630c  0001630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006314  08006314  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800631c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000070  0800638c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800638c  00020610  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175ca  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e05  00000000  00000000  00037668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029538  00000000  00000000  0003c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fcb  00000000  00000000  00065be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb07  00000000  00000000  0007cbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b6b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  0017b708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	080061a8 	.word	0x080061a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	080061a8 	.word	0x080061a8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b6e      	ldr	r3, [pc, #440]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a6d      	ldr	r2, [pc, #436]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b6b      	ldr	r3, [pc, #428]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	61bb      	str	r3, [r7, #24]
 800055c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b68      	ldr	r3, [pc, #416]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a67      	ldr	r2, [pc, #412]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b65      	ldr	r3, [pc, #404]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b62      	ldr	r3, [pc, #392]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a61      	ldr	r2, [pc, #388]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b5f      	ldr	r3, [pc, #380]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b5c      	ldr	r3, [pc, #368]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a5b      	ldr	r2, [pc, #364]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b59      	ldr	r3, [pc, #356]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	4b56      	ldr	r3, [pc, #344]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a55      	ldr	r2, [pc, #340]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b53      	ldr	r3, [pc, #332]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0310 	and.w	r3, r3, #16
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b50      	ldr	r3, [pc, #320]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a4f      	ldr	r2, [pc, #316]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b4d      	ldr	r3, [pc, #308]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005d6:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a49      	ldr	r2, [pc, #292]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	4843      	ldr	r0, [pc, #268]	; (8000704 <MX_GPIO_Init+0x1d4>)
 80005f6:	f001 f985 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4842      	ldr	r0, [pc, #264]	; (8000708 <MX_GPIO_Init+0x1d8>)
 8000600:	f001 f980 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	483c      	ldr	r0, [pc, #240]	; (800070c <MX_GPIO_Init+0x1dc>)
 800061c:	f000 ffc6 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000620:	2332      	movs	r3, #50	; 0x32
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000630:	230b      	movs	r3, #11
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <MX_GPIO_Init+0x1dc>)
 800063c:	f000 ffb6 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000640:	2386      	movs	r3, #134	; 0x86
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000650:	230b      	movs	r3, #11
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	482d      	ldr	r0, [pc, #180]	; (8000710 <MX_GPIO_Init+0x1e0>)
 800065c:	f000 ffa6 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000660:	f244 0381 	movw	r3, #16513	; 0x4081
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4822      	ldr	r0, [pc, #136]	; (8000704 <MX_GPIO_Init+0x1d4>)
 800067a:	f000 ff97 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <MX_GPIO_Init+0x1d4>)
 800069c:	f000 ff86 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <MX_GPIO_Init+0x1d8>)
 80006b8:	f000 ff78 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <MX_GPIO_Init+0x1d8>)
 80006d0:	f000 ff6c 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e6:	230b      	movs	r3, #11
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_GPIO_Init+0x1d8>)
 80006f2:	f000 ff5b 	bl	80015ac <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3730      	adds	r7, #48	; 0x30
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400
 8000708:	40021800 	.word	0x40021800
 800070c:	40020800 	.word	0x40020800
 8000710:	40020000 	.word	0x40020000

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fd23 	bl	8001162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f83c 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f7ff ff06 	bl	8000530 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000724:	f000 fbee 	bl	8000f04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000728:	f000 fc68 	bl	8000ffc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800072c:	f000 fa54 	bl	8000bd8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000730:	f000 f9f8 	bl	8000b24 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000734:	f000 fad2 	bl	8000cdc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // PWM CONFIG // CounterPeriod = 100
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <main+0x68>)
 800073c:	f002 fcae 	bl	800309c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000740:	2104      	movs	r1, #4
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <main+0x68>)
 8000744:	f002 fcaa 	bl	800309c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <main+0x6c>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <main+0x68>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <main+0x70>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <main+0x68>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	639a      	str	r2, [r3, #56]	; 0x38

  // UART CONFIG
  HAL_UART_Receive_IT(&huart3, &user_val, 4);
 8000760:	2204      	movs	r2, #4
 8000762:	4909      	ldr	r1, [pc, #36]	; (8000788 <main+0x74>)
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <main+0x78>)
 8000766:	f003 ff38 	bl	80045da <HAL_UART_Receive_IT>

  // ENCODER CONFIG
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800076a:	213c      	movs	r1, #60	; 0x3c
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <main+0x7c>)
 800076e:	f002 fe35 	bl	80033dc <HAL_TIM_Encoder_Start>

  // MAIN TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim6);
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <main+0x80>)
 8000774:	f002 fbb8 	bl	8002ee8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x64>
 800077a:	bf00      	nop
 800077c:	200000a0 	.word	0x200000a0
 8000780:	2000008c 	.word	0x2000008c
 8000784:	2000008e 	.word	0x2000008e
 8000788:	2000009c 	.word	0x2000009c
 800078c:	20000184 	.word	0x20000184
 8000790:	20000138 	.word	0x20000138
 8000794:	200000ec 	.word	0x200000ec

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0b8      	sub	sp, #224	; 0xe0
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fc68 	bl	800607c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2290      	movs	r2, #144	; 0x90
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 fc59 	bl	800607c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ca:	f001 f9fd 	bl	8001bc8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <SystemClock_Config+0x128>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <SystemClock_Config+0x128>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <SystemClock_Config+0x128>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <SystemClock_Config+0x12c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ee:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <SystemClock_Config+0x12c>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <SystemClock_Config+0x12c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000824:	2360      	movs	r3, #96	; 0x60
 8000826:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fa21 	bl	8001c88 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800084c:	f000 f8e6 	bl	8000a1c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000850:	f001 f9ca 	bl	8001be8 <HAL_PWREx_EnableOverDrive>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085a:	f000 f8df 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800087e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000882:	2103      	movs	r1, #3
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fcad 	bl	80021e4 <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000890:	f000 f8c4 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <SystemClock_Config+0x130>)
 8000896:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000898:	2300      	movs	r3, #0
 800089a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fe9e 	bl	80025e8 <HAL_RCCEx_PeriphCLKConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80008b2:	f000 f8b3 	bl	8000a1c <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	37e0      	adds	r7, #224	; 0xe0
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000
 80008c8:	00200100 	.word	0x00200100

080008cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// UART CONFIG // Przerobic na predkosc // TODO
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a39      	ldr	r2, [pc, #228]	; (80009bc <HAL_UART_RxCpltCallback+0xf0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d15f      	bne.n	800099c <HAL_UART_RxCpltCallback+0xd0>
		user_duty = atoi(user_val);
 80008dc:	4838      	ldr	r0, [pc, #224]	; (80009c0 <HAL_UART_RxCpltCallback+0xf4>)
 80008de:	f005 fb9f 	bl	8006020 <atoi>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a37      	ldr	r2, [pc, #220]	; (80009c4 <HAL_UART_RxCpltCallback+0xf8>)
 80008e6:	6013      	str	r3, [r2, #0]
		if(user_duty >= 25 && user_duty <= 100){
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <HAL_UART_RxCpltCallback+0xf8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b18      	cmp	r3, #24
 80008ee:	dd07      	ble.n	8000900 <HAL_UART_RxCpltCallback+0x34>
 80008f0:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <HAL_UART_RxCpltCallback+0xf8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b64      	cmp	r3, #100	; 0x64
 80008f6:	dc03      	bgt.n	8000900 <HAL_UART_RxCpltCallback+0x34>
			flag = 1;
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <HAL_UART_RxCpltCallback+0xfc>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	e008      	b.n	8000912 <HAL_UART_RxCpltCallback+0x46>
		}
		else{
			flag = 0;
 8000900:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <HAL_UART_RxCpltCallback+0xfc>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &error_2, strlen(error_2), 100);
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	220e      	movs	r2, #14
 800090a:	4930      	ldr	r1, [pc, #192]	; (80009cc <HAL_UART_RxCpltCallback+0x100>)
 800090c:	482b      	ldr	r0, [pc, #172]	; (80009bc <HAL_UART_RxCpltCallback+0xf0>)
 800090e:	f003 fdd1 	bl	80044b4 <HAL_UART_Transmit>
		}

		if(user_val[3] == 'R' && flag == 1){
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <HAL_UART_RxCpltCallback+0xf4>)
 8000914:	78db      	ldrb	r3, [r3, #3]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b52      	cmp	r3, #82	; 0x52
 800091a:	d119      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x84>
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <HAL_UART_RxCpltCallback+0xfc>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d114      	bne.n	8000950 <HAL_UART_RxCpltCallback+0x84>
			duty_A = (uint16_t)user_duty;
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <HAL_UART_RxCpltCallback+0xf8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <HAL_UART_RxCpltCallback+0x104>)
 800092e:	801a      	strh	r2, [r3, #0]
			duty_B = 0;
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <HAL_UART_RxCpltCallback+0x108>)
 8000932:	2200      	movs	r2, #0
 8000934:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <HAL_UART_RxCpltCallback+0x104>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_UART_RxCpltCallback+0x10c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_UART_RxCpltCallback+0x108>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <HAL_UART_RxCpltCallback+0x10c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	639a      	str	r2, [r3, #56]	; 0x38
 800094e:	e02b      	b.n	80009a8 <HAL_UART_RxCpltCallback+0xdc>
		}
		else if(user_val[3] == 'L' && flag == 1){
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_UART_RxCpltCallback+0xf4>)
 8000952:	78db      	ldrb	r3, [r3, #3]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b4c      	cmp	r3, #76	; 0x4c
 8000958:	d119      	bne.n	800098e <HAL_UART_RxCpltCallback+0xc2>
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <HAL_UART_RxCpltCallback+0xfc>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b01      	cmp	r3, #1
 8000962:	d114      	bne.n	800098e <HAL_UART_RxCpltCallback+0xc2>
			duty_B = (uint16_t)user_duty;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_UART_RxCpltCallback+0xf8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <HAL_UART_RxCpltCallback+0x108>)
 800096c:	801a      	strh	r2, [r3, #0]
			duty_A = 0;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_RxCpltCallback+0x104>)
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_UART_RxCpltCallback+0x104>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_UART_RxCpltCallback+0x10c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_UART_RxCpltCallback+0x108>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_UART_RxCpltCallback+0x10c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	639a      	str	r2, [r3, #56]	; 0x38
 800098c:	e00c      	b.n	80009a8 <HAL_UART_RxCpltCallback+0xdc>
		}
		else{
			HAL_UART_Transmit(&huart3, &error_1, strlen(error_1), 100);
 800098e:	2364      	movs	r3, #100	; 0x64
 8000990:	220c      	movs	r2, #12
 8000992:	4912      	ldr	r1, [pc, #72]	; (80009dc <HAL_UART_RxCpltCallback+0x110>)
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <HAL_UART_RxCpltCallback+0xf0>)
 8000996:	f003 fd8d 	bl	80044b4 <HAL_UART_Transmit>
 800099a:	e005      	b.n	80009a8 <HAL_UART_RxCpltCallback+0xdc>
		}
	}

	else{
		HAL_UART_Transmit(&huart3, &error_3, strlen(error_3), 100);
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	220c      	movs	r2, #12
 80009a0:	490f      	ldr	r1, [pc, #60]	; (80009e0 <HAL_UART_RxCpltCallback+0x114>)
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <HAL_UART_RxCpltCallback+0xf0>)
 80009a4:	f003 fd86 	bl	80044b4 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(&huart3, &user_val, 4);
 80009a8:	2204      	movs	r2, #4
 80009aa:	4905      	ldr	r1, [pc, #20]	; (80009c0 <HAL_UART_RxCpltCallback+0xf4>)
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <HAL_UART_RxCpltCallback+0xf0>)
 80009ae:	f003 fe14 	bl	80045da <HAL_UART_Receive_IT>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000184 	.word	0x20000184
 80009c0:	2000009c 	.word	0x2000009c
 80009c4:	20000090 	.word	0x20000090
 80009c8:	20000094 	.word	0x20000094
 80009cc:	080061d0 	.word	0x080061d0
 80009d0:	2000008c 	.word	0x2000008c
 80009d4:	2000008e 	.word	0x2000008e
 80009d8:	200000a0 	.word	0x200000a0
 80009dc:	080061c0 	.word	0x080061c0
 80009e0:	080061e0 	.word	0x080061e0

080009e4 <HAL_TIM_PeriodElapsedCallback>:

// MAIN TIMER CONFIG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		// ENCODER TEST
		counter = (uint16_t)__HAL_TIM_GET_COUNTER(&htim1);
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a02:	601a      	str	r2, [r3, #0]
	}
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40001000 	.word	0x40001000
 8000a14:	20000138 	.word	0x20000138
 8000a18:	20000098 	.word	0x20000098

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 fb8e 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM3_IRQHandler+0x10>)
 8000aca:	f002 fd15 	bl	80034f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000a0 	.word	0x200000a0

08000ad8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <USART3_IRQHandler+0x10>)
 8000ade:	f003 fdcb 	bl	8004678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000184 	.word	0x20000184

08000aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <TIM6_DAC_IRQHandler+0x10>)
 8000af2:	f002 fd01 	bl	80034f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000ec 	.word	0x200000ec

08000b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2224      	movs	r2, #36	; 0x24
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 faa2 	bl	800607c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b44:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <MX_TIM1_Init+0xb0>)
 8000b46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000b7e:	230f      	movs	r3, #15
 8000b80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b86:	2301      	movs	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000b8e:	230f      	movs	r3, #15
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	4619      	mov	r1, r3
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000b9a:	f002 fb79 	bl	8003290 <HAL_TIM_Encoder_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000ba4:	f7ff ff3a 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_TIM1_Init+0xac>)
 8000bba:	f003 fb81 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bc4:	f7ff ff2a 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000138 	.word	0x20000138
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <MX_TIM3_Init+0x100>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c12:	222f      	movs	r2, #47	; 0x2f
 8000c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c1e:	2263      	movs	r2, #99	; 0x63
 8000c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c2e:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c30:	f002 f902 	bl	8002e38 <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c3a:	f7ff feef 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4822      	ldr	r0, [pc, #136]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c4c:	f002 fe88 	bl	8003960 <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c56:	f7ff fee1 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c5c:	f002 f9bc 	bl	8002fd8 <HAL_TIM_PWM_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c66:	f7ff fed9 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000c7a:	f003 fb21 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c84:	f7ff feca 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c88:	2360      	movs	r3, #96	; 0x60
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000ca0:	f002 fd4a 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000caa:	f7ff feb7 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000cb6:	f002 fd3f 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000cc0:	f7ff feac 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <MX_TIM3_Init+0xfc>)
 8000cc6:	f000 f8c7 	bl	8000e58 <HAL_TIM_MspPostInit>

}
 8000cca:	bf00      	nop
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000a0 	.word	0x200000a0
 8000cd8:	40000400 	.word	0x40000400

08000cdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000cee:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <MX_TIM6_Init+0x6c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000cf4:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000cf8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000d02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000d10:	f002 f892 	bl	8002e38 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d1a:	f7ff fe7f 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000d2c:	f003 fac8 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d36:	f7ff fe71 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000ec 	.word	0x200000ec
 8000d48:	40001000 	.word	0x40001000

08000d4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d128      	bne.n	8000dc0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_TIM_Encoder_MspInit+0x80>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_TIM_Encoder_MspInit+0x80>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_TIM_Encoder_MspInit+0x80>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_TIM_Encoder_MspInit+0x80>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_TIM_Encoder_MspInit+0x80>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_TIM_Encoder_MspInit+0x80>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000d9e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_TIM_Encoder_MspInit+0x84>)
 8000dbc:	f000 fbf6 	bl	80015ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_TIM_Base_MspInit+0x78>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d114      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	201d      	movs	r0, #29
 8000e04:	f000 fb09 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f000 fb22 	bl	8001452 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e0e:	e018      	b.n	8000e42 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_TIM_Base_MspInit+0x80>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d113      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2036      	movs	r0, #54	; 0x36
 8000e38:	f000 faef 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e3c:	2036      	movs	r0, #54	; 0x36
 8000e3e:	f000 fb08 	bl	8001452 <HAL_NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40000400 	.word	0x40000400
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40001000 	.word	0x40001000

08000e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <HAL_TIM_MspPostInit+0x9c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d137      	bne.n	8000eea <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_TIM_MspPostInit+0xa0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <HAL_TIM_MspPostInit+0xa0>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_TIM_MspPostInit+0xa0>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_TIM_MspPostInit+0xa0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <HAL_TIM_MspPostInit+0xa0>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_TIM_MspPostInit+0xa0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eaa:	2340      	movs	r3, #64	; 0x40
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <HAL_TIM_MspPostInit+0xa4>)
 8000ec6:	f000 fb71 	bl	80015ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eda:	2302      	movs	r3, #2
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <HAL_TIM_MspPostInit+0xa8>)
 8000ee6:	f000 fb61 	bl	80015ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800

08000f04 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <MX_USART3_UART_Init+0x5c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_USART3_UART_Init+0x58>)
 8000f48:	f003 fa66 	bl	8004418 <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f52:	f7ff fd63 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000184 	.word	0x20000184
 8000f60:	40004800 	.word	0x40004800

08000f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d130      	bne.n	8000fe8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_UART_MspInit+0x90>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <HAL_UART_MspInit+0x94>)
 8000fd4:	f000 faea 	bl	80015ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2027      	movs	r0, #39	; 0x27
 8000fde:	f000 fa1c 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fe2:	2027      	movs	r0, #39	; 0x27
 8000fe4:	f000 fa35 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40004800 	.word	0x40004800
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020c00 	.word	0x40020c00

08000ffc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001006:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100a:	2206      	movs	r2, #6
 800100c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001010:	2202      	movs	r2, #2
 8001012:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101c:	2202      	movs	r2, #2
 800101e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001022:	2201      	movs	r2, #1
 8001024:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001034:	2201      	movs	r2, #1
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001040:	f000 fc79 	bl	8001936 <HAL_PCD_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800104a:	f7ff fce7 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000208 	.word	0x20000208

08001058 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001078:	d141      	bne.n	80010fe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001092:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010a4:	230a      	movs	r3, #10
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <HAL_PCD_MspInit+0xb4>)
 80010b0:	f000 fa7c 	bl	80015ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <HAL_PCD_MspInit+0xb4>)
 80010ca:	f000 fa6f 	bl	80015ac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6353      	str	r3, [r2, #52]	; 0x34
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_PCD_MspInit+0xb0>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopFillZerobss+0x26>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113a:	f7ff fce1 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f004 ff79 	bl	8006034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fae7 	bl	8000714 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001154:	0800631c 	.word	0x0800631c
  ldr r2, =_sbss
 8001158:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800115c:	20000610 	.word	0x20000610

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>

08001162 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001166:	2003      	movs	r0, #3
 8001168:	f000 f94c 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f805 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001172:	f7ff fc59 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f967 	bl	800146e <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f92f 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	2000060c 	.word	0x2000060c

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	2000060c 	.word	0x2000060c

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	4313      	orrs	r3, r2
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	05fa0000 	.word	0x05fa0000

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff feb6 	bl	8001204 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d008      	beq.n	80014b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e052      	b.n	800155e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0216 	bic.w	r2, r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d103      	bne.n	80014e8 <HAL_DMA_Abort+0x62>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0208 	bic.w	r2, r2, #8
 80014f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001508:	e013      	b.n	8001532 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800150a:	f7ff fe7b 	bl	8001204 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b05      	cmp	r3, #5
 8001516:	d90c      	bls.n	8001532 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2220      	movs	r2, #32
 800151c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e015      	b.n	800155e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e4      	bne.n	800150a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	223f      	movs	r2, #63	; 0x3f
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d004      	beq.n	8001584 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e00c      	b.n	800159e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2205      	movs	r2, #5
 8001588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	e175      	b.n	80018b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8164 	bne.w	80018b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d005      	beq.n	8001602 <HAL_GPIO_Init+0x56>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d130      	bne.n	8001664 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 0201 	and.w	r2, r3, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b03      	cmp	r3, #3
 800166e:	d017      	beq.n	80016a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d123      	bne.n	80016f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	08da      	lsrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3208      	adds	r2, #8
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	69b9      	ldr	r1, [r7, #24]
 80016f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80be 	beq.w	80018b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_GPIO_Init+0x324>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a65      	ldr	r2, [pc, #404]	; (80018d0 <HAL_GPIO_Init+0x324>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_GPIO_Init+0x324>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800174e:	4a61      	ldr	r2, [pc, #388]	; (80018d4 <HAL_GPIO_Init+0x328>)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_GPIO_Init+0x32c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d037      	beq.n	80017ea <HAL_GPIO_Init+0x23e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a57      	ldr	r2, [pc, #348]	; (80018dc <HAL_GPIO_Init+0x330>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d031      	beq.n	80017e6 <HAL_GPIO_Init+0x23a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a56      	ldr	r2, [pc, #344]	; (80018e0 <HAL_GPIO_Init+0x334>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d02b      	beq.n	80017e2 <HAL_GPIO_Init+0x236>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a55      	ldr	r2, [pc, #340]	; (80018e4 <HAL_GPIO_Init+0x338>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x232>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a54      	ldr	r2, [pc, #336]	; (80018e8 <HAL_GPIO_Init+0x33c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x22e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a53      	ldr	r2, [pc, #332]	; (80018ec <HAL_GPIO_Init+0x340>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x22a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_GPIO_Init+0x344>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x226>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a51      	ldr	r2, [pc, #324]	; (80018f4 <HAL_GPIO_Init+0x348>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x222>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a50      	ldr	r2, [pc, #320]	; (80018f8 <HAL_GPIO_Init+0x34c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x21e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4f      	ldr	r2, [pc, #316]	; (80018fc <HAL_GPIO_Init+0x350>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x21a>
 80017c2:	2309      	movs	r3, #9
 80017c4:	e012      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017c6:	230a      	movs	r3, #10
 80017c8:	e010      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017ca:	2308      	movs	r3, #8
 80017cc:	e00e      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e00c      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017d2:	2306      	movs	r3, #6
 80017d4:	e00a      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017d6:	2305      	movs	r3, #5
 80017d8:	e008      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017da:	2304      	movs	r3, #4
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017de:	2303      	movs	r3, #3
 80017e0:	e004      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017ea:	2300      	movs	r3, #0
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f002 0203 	and.w	r2, r2, #3
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	4093      	lsls	r3, r2
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017fc:	4935      	ldr	r1, [pc, #212]	; (80018d4 <HAL_GPIO_Init+0x328>)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_GPIO_Init+0x354>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182e:	4a34      	ldr	r2, [pc, #208]	; (8001900 <HAL_GPIO_Init+0x354>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_GPIO_Init+0x354>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001858:	4a29      	ldr	r2, [pc, #164]	; (8001900 <HAL_GPIO_Init+0x354>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <HAL_GPIO_Init+0x354>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_GPIO_Init+0x354>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_GPIO_Init+0x354>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ac:	4a14      	ldr	r2, [pc, #80]	; (8001900 <HAL_GPIO_Init+0x354>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3301      	adds	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	f67f ae86 	bls.w	80015cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40013800 	.word	0x40013800
 80018d8:	40020000 	.word	0x40020000
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40021400 	.word	0x40021400
 80018f0:	40021800 	.word	0x40021800
 80018f4:	40021c00 	.word	0x40021c00
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40022400 	.word	0x40022400
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001938:	b08f      	sub	sp, #60	; 0x3c
 800193a:	af0a      	add	r7, sp, #40	; 0x28
 800193c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e116      	b.n	8001b76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fb78 	bl	8001058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f004 f8b4 	bl	8005af4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	687e      	ldr	r6, [r7, #4]
 8001994:	466d      	mov	r5, sp
 8001996:	f106 0410 	add.w	r4, r6, #16
 800199a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019aa:	1d33      	adds	r3, r6, #4
 80019ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ae:	6838      	ldr	r0, [r7, #0]
 80019b0:	f004 f848 	bl	8005a44 <USB_CoreInit>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0d7      	b.n	8001b76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 f8a2 	bl	8005b16 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e04a      	b.n	8001a6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	333d      	adds	r3, #61	; 0x3d
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	333c      	adds	r3, #60	; 0x3c
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	b298      	uxth	r0, r3
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3342      	adds	r3, #66	; 0x42
 8001a14:	4602      	mov	r2, r0
 8001a16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	333f      	adds	r3, #63	; 0x3f
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3344      	adds	r3, #68	; 0x44
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3348      	adds	r3, #72	; 0x48
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3350      	adds	r3, #80	; 0x50
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d3af      	bcc.n	80019d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e044      	b.n	8001b08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3b5      	bcc.n	8001a7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	687e      	ldr	r6, [r7, #4]
 8001b1a:	466d      	mov	r5, sp
 8001b1c:	f106 0410 	add.w	r4, r6, #16
 8001b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b30:	1d33      	adds	r3, r6, #4
 8001b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b34:	6838      	ldr	r0, [r7, #0]
 8001b36:	f004 f83b 	bl	8005bb0 <USB_DevInit>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e014      	b.n	8001b76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f80b 	bl	8001b80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 f9f5 	bl	8005f5e <USB_DevDisconnect>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	10000003 	.word	0x10000003

08001bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40007000 	.word	0x40007000

08001be8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c16:	f7ff faf5 	bl	8001204 <HAL_GetTick>
 8001c1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c1c:	e009      	b.n	8001c32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c1e:	f7ff faf1 	bl	8001204 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c2c:	d901      	bls.n	8001c32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e022      	b.n	8001c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4c:	f7ff fada 	bl	8001204 <HAL_GetTick>
 8001c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c52:	e009      	b.n	8001c68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c54:	f7ff fad6 	bl	8001204 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c62:	d901      	bls.n	8001c68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e007      	b.n	8001c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c74:	d1ee      	bne.n	8001c54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e29b      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8087 	beq.w	8001dba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b96      	ldr	r3, [pc, #600]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb8:	4b93      	ldr	r3, [pc, #588]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d112      	bne.n	8001cea <HAL_RCC_OscConfig+0x62>
 8001cc4:	4b90      	ldr	r3, [pc, #576]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x130>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d168      	bne.n	8001db8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e275      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x7a>
 8001cf4:	4b84      	ldr	r3, [pc, #528]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a83      	ldr	r2, [pc, #524]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e02e      	b.n	8001d60 <HAL_RCC_OscConfig+0xd8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x9c>
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7b      	ldr	r2, [pc, #492]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xd8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0xc0>
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a75      	ldr	r2, [pc, #468]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a72      	ldr	r2, [pc, #456]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xd8>
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6b      	ldr	r2, [pc, #428]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff fa4c 	bl	8001204 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fa48 	bl	8001204 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e229      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe8>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fa38 	bl	8001204 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fa34 	bl	8001204 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e215      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x110>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d069      	beq.n	8001e9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd2:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x190>
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e1e9      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	493d      	ldr	r1, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	e040      	b.n	8001e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d023      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f9ea 	bl	8001204 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff f9e6 	bl	8001204 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1c7      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4929      	ldr	r1, [pc, #164]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f9c6 	bl	8001204 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff f9c2 	bl	8001204 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1a3      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d038      	beq.n	8001f18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f9a3 	bl	8001204 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f99f 	bl	8001204 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e180      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x23a>
 8001ee0:	e01a      	b.n	8001f18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7ff f989 	bl	8001204 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7ff f985 	bl	8001204 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d903      	bls.n	8001f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e166      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
 8001f08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	4b92      	ldr	r3, [pc, #584]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ee      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a4 	beq.w	800206e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b8c      	ldr	r3, [pc, #560]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a88      	ldr	r2, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b86      	ldr	r3, [pc, #536]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4e:	4b83      	ldr	r3, [pc, #524]	; (800215c <HAL_RCC_OscConfig+0x4d4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f5a:	4b80      	ldr	r3, [pc, #512]	; (800215c <HAL_RCC_OscConfig+0x4d4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7f      	ldr	r2, [pc, #508]	; (800215c <HAL_RCC_OscConfig+0x4d4>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7ff f94d 	bl	8001204 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7ff f949 	bl	8001204 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e12a      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0x4d4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x31a>
 8001f94:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a6f      	ldr	r2, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	e02d      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x33c>
 8001faa:	4b6b      	ldr	r3, [pc, #428]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a6a      	ldr	r2, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	4b68      	ldr	r3, [pc, #416]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a67      	ldr	r2, [pc, #412]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc2:	e01c      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d10c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x35e>
 8001fcc:	4b62      	ldr	r3, [pc, #392]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a61      	ldr	r2, [pc, #388]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	4a5e      	ldr	r2, [pc, #376]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a5b      	ldr	r2, [pc, #364]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a58      	ldr	r2, [pc, #352]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d015      	beq.n	8002032 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7ff f8fd 	bl	8001204 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7ff f8f9 	bl	8001204 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0d8      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ee      	beq.n	800200e <HAL_RCC_OscConfig+0x386>
 8002030:	e014      	b.n	800205c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7ff f8e7 	bl	8001204 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff f8e3 	bl	8001204 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0c2      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ee      	bne.n	800203a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d105      	bne.n	800206e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002062:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80ae 	beq.w	80021d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d06d      	beq.n	8002160 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d14b      	bne.n	8002124 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a31      	ldr	r2, [pc, #196]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff f8b4 	bl	8001204 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f8b0 	bl	8001204 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e091      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	3b01      	subs	r3, #1
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	061b      	lsls	r3, r3, #24
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	071b      	lsls	r3, r3, #28
 80020ea:	491b      	ldr	r1, [pc, #108]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff f882 	bl	8001204 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff f87e 	bl	8001204 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e05f      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x47c>
 8002122:	e057      	b.n	80021d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff f868 	bl	8001204 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7ff f864 	bl	8001204 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e045      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_RCC_OscConfig+0x4d0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x4b0>
 8002156:	e03d      	b.n	80021d4 <HAL_RCC_OscConfig+0x54c>
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_RCC_OscConfig+0x558>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d030      	beq.n	80021d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d129      	bne.n	80021d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d122      	bne.n	80021d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002190:	4013      	ands	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002196:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002198:	4293      	cmp	r3, r2
 800219a:	d119      	bne.n	80021d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	3b01      	subs	r3, #1
 80021aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d10f      	bne.n	80021d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0d0      	b.n	800239e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d910      	bls.n	800222c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 020f 	bic.w	r2, r3, #15
 8002212:	4965      	ldr	r1, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d040      	beq.n	8002308 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d115      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e073      	b.n	800239e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06b      	b.n	800239e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4936      	ldr	r1, [pc, #216]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d8:	f7fe ff94 	bl	8001204 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7fe ff90 	bl	8001204 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e053      	b.n	800239e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d210      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 020f 	bic.w	r2, r3, #15
 800231e:	4922      	ldr	r1, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fef0 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	080061f0 	.word	0x080061f0
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	2300      	movs	r3, #0
 80023ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d4:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d00d      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x40>
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	f200 80bd 	bhi.w	8002560 <HAL_RCC_GetSysClockFreq+0x1a4>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ee:	e0b7      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b61      	ldr	r3, [pc, #388]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023f2:	60bb      	str	r3, [r7, #8]
      break;
 80023f4:	e0b7      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80023f8:	60bb      	str	r3, [r7, #8]
      break;
 80023fa:	e0b4      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002406:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04d      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4b58      	ldr	r3, [pc, #352]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	461a      	mov	r2, r3
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002422:	f04f 0100 	mov.w	r1, #0
 8002426:	ea02 0800 	and.w	r8, r2, r0
 800242a:	ea03 0901 	and.w	r9, r3, r1
 800242e:	4640      	mov	r0, r8
 8002430:	4649      	mov	r1, r9
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	014b      	lsls	r3, r1, #5
 800243c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002440:	0142      	lsls	r2, r0, #5
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	ebb0 0008 	subs.w	r0, r0, r8
 800244a:	eb61 0109 	sbc.w	r1, r1, r9
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	018b      	lsls	r3, r1, #6
 8002458:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800245c:	0182      	lsls	r2, r0, #6
 800245e:	1a12      	subs	r2, r2, r0
 8002460:	eb63 0301 	sbc.w	r3, r3, r1
 8002464:	f04f 0000 	mov.w	r0, #0
 8002468:	f04f 0100 	mov.w	r1, #0
 800246c:	00d9      	lsls	r1, r3, #3
 800246e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002472:	00d0      	lsls	r0, r2, #3
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	eb12 0208 	adds.w	r2, r2, r8
 800247c:	eb43 0309 	adc.w	r3, r3, r9
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	0259      	lsls	r1, r3, #9
 800248a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800248e:	0250      	lsls	r0, r2, #9
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	461a      	mov	r2, r3
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	f7fd feca 	bl	8000238 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4613      	mov	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e04a      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	461a      	mov	r2, r3
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024be:	f04f 0100 	mov.w	r1, #0
 80024c2:	ea02 0400 	and.w	r4, r2, r0
 80024c6:	ea03 0501 	and.w	r5, r3, r1
 80024ca:	4620      	mov	r0, r4
 80024cc:	4629      	mov	r1, r5
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	014b      	lsls	r3, r1, #5
 80024d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024dc:	0142      	lsls	r2, r0, #5
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	1b00      	subs	r0, r0, r4
 80024e4:	eb61 0105 	sbc.w	r1, r1, r5
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	018b      	lsls	r3, r1, #6
 80024f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024f6:	0182      	lsls	r2, r0, #6
 80024f8:	1a12      	subs	r2, r2, r0
 80024fa:	eb63 0301 	sbc.w	r3, r3, r1
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	00d9      	lsls	r1, r3, #3
 8002508:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800250c:	00d0      	lsls	r0, r2, #3
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	1912      	adds	r2, r2, r4
 8002514:	eb45 0303 	adc.w	r3, r5, r3
 8002518:	f04f 0000 	mov.w	r0, #0
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	0299      	lsls	r1, r3, #10
 8002522:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002526:	0290      	lsls	r0, r2, #10
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	f7fd fe7e 	bl	8000238 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4613      	mov	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	3301      	adds	r3, #1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	60bb      	str	r3, [r7, #8]
      break;
 800255e:	e002      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002562:	60bb      	str	r3, [r7, #8]
      break;
 8002564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002566:	68bb      	ldr	r3, [r7, #8]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	00f42400 	.word	0x00f42400
 800257c:	007a1200 	.word	0x007a1200

08002580 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCC_GetHCLKFreq+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000000 	.word	0x20000000

08002598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800259c:	f7ff fff0 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0a9b      	lsrs	r3, r3, #10
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08006200 	.word	0x08006200

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c4:	f7ff ffdc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0b5b      	lsrs	r3, r3, #13
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08006200 	.word	0x08006200

080025e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d012      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002610:	4b69      	ldr	r3, [pc, #420]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a68      	ldr	r2, [pc, #416]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800261a:	6093      	str	r3, [r2, #8]
 800261c:	4b66      	ldr	r3, [pc, #408]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	4964      	ldr	r1, [pc, #400]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d017      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	4959      	ldr	r1, [pc, #356]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002660:	d101      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d017      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800267e:	4b4e      	ldr	r3, [pc, #312]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	494a      	ldr	r1, [pc, #296]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269c:	d101      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 808b 	beq.w	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	4a39      	ldr	r2, [pc, #228]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6413      	str	r3, [r2, #64]	; 0x40
 80026d8:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a34      	ldr	r2, [pc, #208]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fd88 	bl	8001204 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f8:	f7fe fd84 	bl	8001204 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e38f      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d035      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d02e      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800274a:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002754:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d114      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fd4c 	bl	8001204 <HAL_GetTick>
 800276c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe fd48 	bl	8001204 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e351      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ee      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800279e:	d111      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	4901      	ldr	r1, [pc, #4]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000
 80027c0:	0ffffcff 	.word	0x0ffffcff
 80027c4:	4bb3      	ldr	r3, [pc, #716]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4ab2      	ldr	r2, [pc, #712]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ce:	6093      	str	r3, [r2, #8]
 80027d0:	4bb0      	ldr	r3, [pc, #704]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027dc:	49ad      	ldr	r1, [pc, #692]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027ee:	4ba9      	ldr	r3, [pc, #676]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f4:	4aa7      	ldr	r2, [pc, #668]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027fe:	4ba5      	ldr	r3, [pc, #660]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002800:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	49a2      	ldr	r1, [pc, #648]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800281c:	4b9d      	ldr	r3, [pc, #628]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002822:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282a:	499a      	ldr	r1, [pc, #616]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800283e:	4b95      	ldr	r3, [pc, #596]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800284c:	4991      	ldr	r1, [pc, #580]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002860:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286e:	4989      	ldr	r1, [pc, #548]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002882:	4b84      	ldr	r3, [pc, #528]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4980      	ldr	r1, [pc, #512]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a4:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4978      	ldr	r1, [pc, #480]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028c6:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f023 020c 	bic.w	r2, r3, #12
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	496f      	ldr	r1, [pc, #444]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4967      	ldr	r1, [pc, #412]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800290a:	4b62      	ldr	r3, [pc, #392]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	495e      	ldr	r1, [pc, #376]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	4956      	ldr	r1, [pc, #344]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	494d      	ldr	r1, [pc, #308]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002970:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	4945      	ldr	r1, [pc, #276]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	493c      	ldr	r1, [pc, #240]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029b4:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c2:	4934      	ldr	r1, [pc, #208]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d011      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029d6:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e4:	492b      	ldr	r1, [pc, #172]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f4:	d101      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a16:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	491b      	ldr	r1, [pc, #108]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a38:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a48:	4912      	ldr	r1, [pc, #72]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6c:	4909      	ldr	r1, [pc, #36]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00f      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	e002      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	4986      	ldr	r1, [pc, #536]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002aac:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002abc:	497d      	ldr	r1, [pc, #500]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d006      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80d6 	beq.w	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ad8:	4b76      	ldr	r3, [pc, #472]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a75      	ldr	r2, [pc, #468]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fb8e 	bl	8001204 <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002aec:	f7fe fb8a 	bl	8001204 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e195      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002afe:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d021      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11d      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b32:	0e1b      	lsrs	r3, r3, #24
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	019a      	lsls	r2, r3, #6
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	061b      	lsls	r3, r3, #24
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	071b      	lsls	r3, r3, #28
 8002b52:	4958      	ldr	r1, [pc, #352]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02e      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b84:	d129      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	0f1b      	lsrs	r3, r3, #28
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	019a      	lsls	r2, r3, #6
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	071b      	lsls	r3, r3, #28
 8002bba:	493e      	ldr	r1, [pc, #248]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc8:	f023 021f 	bic.w	r2, r3, #31
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	4938      	ldr	r1, [pc, #224]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01d      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bec:	0e1b      	lsrs	r3, r3, #24
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf4:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfa:	0f1b      	lsrs	r3, r3, #28
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	019a      	lsls	r2, r3, #6
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	071b      	lsls	r3, r3, #28
 8002c1a:	4926      	ldr	r1, [pc, #152]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d011      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	019a      	lsls	r2, r3, #6
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	071b      	lsls	r3, r3, #28
 8002c4a:	491a      	ldr	r1, [pc, #104]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5e:	f7fe fad1 	bl	8001204 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c66:	f7fe facd 	bl	8001204 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b64      	cmp	r3, #100	; 0x64
 8002c72:	d901      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0d8      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 80ce 	bne.w	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c98:	f7fe fab4 	bl	8001204 <HAL_GetTick>
 8002c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca0:	f7fe fab0 	bl	8001204 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d904      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e0bb      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc4:	d0ec      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02e      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d12a      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cee:	4b51      	ldr	r3, [pc, #324]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	0f1b      	lsrs	r3, r3, #28
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	019a      	lsls	r2, r3, #6
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	061b      	lsls	r3, r3, #24
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	071b      	lsls	r3, r3, #28
 8002d22:	4944      	ldr	r1, [pc, #272]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d2a:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	493d      	ldr	r1, [pc, #244]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d022      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d58:	d11d      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	0e1b      	lsrs	r3, r3, #24
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	0f1b      	lsrs	r3, r3, #28
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	019a      	lsls	r2, r3, #6
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	071b      	lsls	r3, r3, #28
 8002d8e:	4929      	ldr	r1, [pc, #164]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	0e1b      	lsrs	r3, r3, #24
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	019a      	lsls	r2, r3, #6
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	071b      	lsls	r3, r3, #28
 8002dd6:	4917      	ldr	r1, [pc, #92]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4911      	ldr	r1, [pc, #68]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e00:	f7fe fa00 	bl	8001204 <HAL_GetTick>
 8002e04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e08:	f7fe f9fc 	bl	8001204 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e007      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e26:	d1ef      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e049      	b.n	8002ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd ffb8 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fe64 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d001      	beq.n	8002f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e054      	b.n	8002faa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d022      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d01d      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_TIM_Base_Start_IT+0xd4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_TIM_Base_Start_IT+0xe4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d115      	bne.n	8002f94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xec>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d015      	beq.n	8002fa6 <HAL_TIM_Base_Start_IT+0xbe>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d011      	beq.n	8002fa6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	e008      	b.n	8002fa6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e000      	b.n	8002fa8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40010400 	.word	0x40010400
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40001800 	.word	0x40001800
 8002fd4:	00010007 	.word	0x00010007

08002fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e049      	b.n	800307e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f841 	bl	8003086 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fd94 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_TIM_PWM_Start+0x24>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e03c      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d109      	bne.n	80030da <HAL_TIM_PWM_Start+0x3e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	bf14      	ite	ne
 80030d2:	2301      	movne	r3, #1
 80030d4:	2300      	moveq	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e02f      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d109      	bne.n	80030f4 <HAL_TIM_PWM_Start+0x58>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e022      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d109      	bne.n	800310e <HAL_TIM_PWM_Start+0x72>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	bf14      	ite	ne
 8003106:	2301      	movne	r3, #1
 8003108:	2300      	moveq	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	e015      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b10      	cmp	r3, #16
 8003112:	d109      	bne.n	8003128 <HAL_TIM_PWM_Start+0x8c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e008      	b.n	800313a <HAL_TIM_PWM_Start+0x9e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e092      	b.n	8003268 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0xb6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	e023      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0xc6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003160:	e01b      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xd6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003170:	e013      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0xe6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003180:	e00b      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b10      	cmp	r3, #16
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xf6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003190:	e003      	b.n	800319a <HAL_TIM_PWM_Start+0xfe>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f866 	bl	8004274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a30      	ldr	r2, [pc, #192]	; (8003270 <HAL_TIM_PWM_Start+0x1d4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_TIM_PWM_Start+0x120>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <HAL_TIM_PWM_Start+0x1d8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_TIM_PWM_Start+0x124>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_TIM_PWM_Start+0x126>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a25      	ldr	r2, [pc, #148]	; (8003270 <HAL_TIM_PWM_Start+0x1d4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <HAL_TIM_PWM_Start+0x18a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d01d      	beq.n	8003226 <HAL_TIM_PWM_Start+0x18a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a22      	ldr	r2, [pc, #136]	; (8003278 <HAL_TIM_PWM_Start+0x1dc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <HAL_TIM_PWM_Start+0x18a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <HAL_TIM_PWM_Start+0x1e0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_TIM_PWM_Start+0x18a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_TIM_PWM_Start+0x1e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_TIM_PWM_Start+0x18a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <HAL_TIM_PWM_Start+0x1d8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_TIM_PWM_Start+0x18a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_TIM_PWM_Start+0x1e8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_TIM_PWM_Start+0x18a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_TIM_PWM_Start+0x1ec>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d115      	bne.n	8003252 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_TIM_PWM_Start+0x1f0>)
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d015      	beq.n	8003264 <HAL_TIM_PWM_Start+0x1c8>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323e:	d011      	beq.n	8003264 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	e008      	b.n	8003264 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e000      	b.n	8003266 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40010000 	.word	0x40010000
 8003274:	40010400 	.word	0x40010400
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	40014000 	.word	0x40014000
 8003288:	40001800 	.word	0x40001800
 800328c:	00010007 	.word	0x00010007

08003290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e08f      	b.n	80033c4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fd47 	bl	8000d4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b3e      	ldr	r3, [pc, #248]	; (80033cc <HAL_TIM_Encoder_Init+0x13c>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f000 fc2f 	bl	8003b44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_TIM_Encoder_Init+0x140>)
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	4313      	orrs	r3, r2
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_TIM_Encoder_Init+0x144>)
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_TIM_Encoder_Init+0x148>)
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	4313      	orrs	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	011a      	lsls	r2, r3, #4
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	031b      	lsls	r3, r3, #12
 8003350:	4313      	orrs	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	4313      	orrs	r3, r2
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	fffebff8 	.word	0xfffebff8
 80033d0:	fffffcfc 	.word	0xfffffcfc
 80033d4:	fffff3f3 	.word	0xfffff3f3
 80033d8:	ffff0f0f 	.word	0xffff0f0f

080033dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003404:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d110      	bne.n	800342e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003412:	7b7b      	ldrb	r3, [r7, #13]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d001      	beq.n	800341c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e069      	b.n	80034f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342c:	e031      	b.n	8003492 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d110      	bne.n	8003456 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800343a:	7b3b      	ldrb	r3, [r7, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d001      	beq.n	8003444 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e055      	b.n	80034f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003454:	e01d      	b.n	8003492 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800345c:	7bbb      	ldrb	r3, [r7, #14]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003462:	7b7b      	ldrb	r3, [r7, #13]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003468:	7b3b      	ldrb	r3, [r7, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e03e      	b.n	80034f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_TIM_Encoder_Start+0xc4>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b04      	cmp	r3, #4
 800349c:	d008      	beq.n	80034b0 <HAL_TIM_Encoder_Start+0xd4>
 800349e:	e00f      	b.n	80034c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2201      	movs	r2, #1
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fee3 	bl	8004274 <TIM_CCxChannelCmd>
      break;
 80034ae:	e016      	b.n	80034de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	2104      	movs	r1, #4
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fedb 	bl	8004274 <TIM_CCxChannelCmd>
      break;
 80034be:	e00e      	b.n	80034de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2201      	movs	r2, #1
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fed3 	bl	8004274 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	2104      	movs	r1, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fecc 	bl	8004274 <TIM_CCxChannelCmd>
      break;
 80034dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0202 	mvn.w	r2, #2
 8003524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fae4 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fad6 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fae7 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0204 	mvn.w	r2, #4
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 faba 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 faac 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fabd 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d122      	bne.n	80035fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d11b      	bne.n	80035fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0208 	mvn.w	r2, #8
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa90 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa82 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fa93 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b10      	cmp	r3, #16
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0210 	mvn.w	r2, #16
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2208      	movs	r2, #8
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa66 	bl	8003b08 <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa58 	bl	8003af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa69 	bl	8003b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d10e      	bne.n	800367c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0201 	mvn.w	r2, #1
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd f9b4 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d10e      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b80      	cmp	r3, #128	; 0x80
 8003696:	d107      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fea4 	bl	80043f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b6:	d10e      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d107      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fe97 	bl	8004404 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d10e      	bne.n	8003702 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d107      	bne.n	8003702 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fa17 	bl	8003b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d10e      	bne.n	800372e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b20      	cmp	r3, #32
 800371c:	d107      	bne.n	800372e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0220 	mvn.w	r2, #32
 8003726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fe57 	bl	80043dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003752:	2302      	movs	r3, #2
 8003754:	e0ff      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b14      	cmp	r3, #20
 8003762:	f200 80f0 	bhi.w	8003946 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003766:	a201      	add	r2, pc, #4	; (adr r2, 800376c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376c:	080037c1 	.word	0x080037c1
 8003770:	08003947 	.word	0x08003947
 8003774:	08003947 	.word	0x08003947
 8003778:	08003947 	.word	0x08003947
 800377c:	08003801 	.word	0x08003801
 8003780:	08003947 	.word	0x08003947
 8003784:	08003947 	.word	0x08003947
 8003788:	08003947 	.word	0x08003947
 800378c:	08003843 	.word	0x08003843
 8003790:	08003947 	.word	0x08003947
 8003794:	08003947 	.word	0x08003947
 8003798:	08003947 	.word	0x08003947
 800379c:	08003883 	.word	0x08003883
 80037a0:	08003947 	.word	0x08003947
 80037a4:	08003947 	.word	0x08003947
 80037a8:	08003947 	.word	0x08003947
 80037ac:	080038c5 	.word	0x080038c5
 80037b0:	08003947 	.word	0x08003947
 80037b4:	08003947 	.word	0x08003947
 80037b8:	08003947 	.word	0x08003947
 80037bc:	08003905 	.word	0x08003905
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa5c 	bl	8003c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0208 	orr.w	r2, r2, #8
 80037da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6999      	ldr	r1, [r3, #24]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	619a      	str	r2, [r3, #24]
      break;
 80037fe:	e0a5      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 faae 	bl	8003d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6999      	ldr	r1, [r3, #24]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	021a      	lsls	r2, r3, #8
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	619a      	str	r2, [r3, #24]
      break;
 8003840:	e084      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fb05 	bl	8003e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0208 	orr.w	r2, r2, #8
 800385c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0204 	bic.w	r2, r2, #4
 800386c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69d9      	ldr	r1, [r3, #28]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	61da      	str	r2, [r3, #28]
      break;
 8003880:	e064      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fb5b 	bl	8003f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69d9      	ldr	r1, [r3, #28]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	61da      	str	r2, [r3, #28]
      break;
 80038c2:	e043      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fb92 	bl	8003ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0208 	orr.w	r2, r2, #8
 80038de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003902:	e023      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fbc4 	bl	8004098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003944:	e002      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
      break;
 800394a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop

08003960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_TIM_ConfigClockSource+0x1c>
 8003978:	2302      	movs	r3, #2
 800397a:	e0b4      	b.n	8003ae6 <HAL_TIM_ConfigClockSource+0x186>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_TIM_ConfigClockSource+0x190>)
 8003998:	4013      	ands	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b4:	d03e      	beq.n	8003a34 <HAL_TIM_ConfigClockSource+0xd4>
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ba:	f200 8087 	bhi.w	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	f000 8086 	beq.w	8003ad2 <HAL_TIM_ConfigClockSource+0x172>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	d87f      	bhi.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b70      	cmp	r3, #112	; 0x70
 80039ce:	d01a      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0xa6>
 80039d0:	2b70      	cmp	r3, #112	; 0x70
 80039d2:	d87b      	bhi.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b60      	cmp	r3, #96	; 0x60
 80039d6:	d050      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x11a>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d877      	bhi.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b50      	cmp	r3, #80	; 0x50
 80039de:	d03c      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0xfa>
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d873      	bhi.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d058      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x13a>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d86f      	bhi.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b30      	cmp	r3, #48	; 0x30
 80039ee:	d064      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0x15a>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d86b      	bhi.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d060      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0x15a>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d867      	bhi.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d05c      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0x15a>
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d05a      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0x15a>
 8003a04:	e062      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6899      	ldr	r1, [r3, #8]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f000 fc0d 	bl	8004234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	609a      	str	r2, [r3, #8]
      break;
 8003a32:	e04f      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6899      	ldr	r1, [r3, #8]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f000 fbf6 	bl	8004234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a56:	609a      	str	r2, [r3, #8]
      break;
 8003a58:	e03c      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f000 fb6a 	bl	8004140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2150      	movs	r1, #80	; 0x50
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fbc3 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003a78:	e02c      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6859      	ldr	r1, [r3, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f000 fb89 	bl	800419e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2160      	movs	r1, #96	; 0x60
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fbb3 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003a98:	e01c      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f000 fb4a 	bl	8004140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2140      	movs	r1, #64	; 0x40
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fba3 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003ab8:	e00c      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	f000 fb9a 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003aca:	e003      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	e000      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	fffeff88 	.word	0xfffeff88

08003af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a40      	ldr	r2, [pc, #256]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d00f      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3a      	ldr	r2, [pc, #232]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d027      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <TIM_Base_SetConfig+0x118>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d023      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <TIM_Base_SetConfig+0x11c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <TIM_Base_SetConfig+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <TIM_Base_SetConfig+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM_Base_SetConfig+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0x130>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0x134>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <TIM_Base_SetConfig+0x138>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <TIM_Base_SetConfig+0x13c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <TIM_Base_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0xf8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0x124>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d103      	bne.n	8003c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	615a      	str	r2, [r3, #20]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40010400 	.word	0x40010400
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	40001800 	.word	0x40001800
 8003c7c:	40001c00 	.word	0x40001c00
 8003c80:	40002000 	.word	0x40002000

08003c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <TIM_OC1_SetConfig+0xd8>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 0302 	bic.w	r3, r3, #2
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC1_SetConfig+0x64>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <TIM_OC1_SetConfig+0xe0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10c      	bne.n	8003d02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0308 	bic.w	r3, r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0304 	bic.w	r3, r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <TIM_OC1_SetConfig+0xdc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC1_SetConfig+0x8e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <TIM_OC1_SetConfig+0xe0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d111      	bne.n	8003d36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	fffeff8f 	.word	0xfffeff8f
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40010400 	.word	0x40010400

08003d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f023 0210 	bic.w	r2, r3, #16
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <TIM_OC2_SetConfig+0xe4>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0320 	bic.w	r3, r3, #32
 8003db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <TIM_OC2_SetConfig+0xe8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC2_SetConfig+0x68>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <TIM_OC2_SetConfig+0xec>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10d      	bne.n	8003dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <TIM_OC2_SetConfig+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC2_SetConfig+0x94>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <TIM_OC2_SetConfig+0xec>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d113      	bne.n	8003e24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	feff8fff 	.word	0xfeff8fff
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40010400 	.word	0x40010400

08003e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <TIM_OC3_SetConfig+0xe0>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <TIM_OC3_SetConfig+0xe4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC3_SetConfig+0x66>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <TIM_OC3_SetConfig+0xe8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10d      	bne.n	8003eda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <TIM_OC3_SetConfig+0xe4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_OC3_SetConfig+0x92>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <TIM_OC3_SetConfig+0xe8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d113      	bne.n	8003f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	fffeff8f 	.word	0xfffeff8f
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400

08003f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <TIM_OC4_SetConfig+0xa4>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	031b      	lsls	r3, r3, #12
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a13      	ldr	r2, [pc, #76]	; (8003fec <TIM_OC4_SetConfig+0xa8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC4_SetConfig+0x68>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <TIM_OC4_SetConfig+0xac>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d109      	bne.n	8003fc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	feff8fff 	.word	0xfeff8fff
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <TIM_OC5_SetConfig+0x98>)
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <TIM_OC5_SetConfig+0x9c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC5_SetConfig+0x5e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a11      	ldr	r2, [pc, #68]	; (8004094 <TIM_OC5_SetConfig+0xa0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d109      	bne.n	8004066 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004058:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	fffeff8f 	.word	0xfffeff8f
 8004090:	40010000 	.word	0x40010000
 8004094:	40010400 	.word	0x40010400

08004098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <TIM_OC6_SetConfig+0x9c>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <TIM_OC6_SetConfig+0xa0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC6_SetConfig+0x60>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <TIM_OC6_SetConfig+0xa4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d109      	bne.n	800410c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	feff8fff 	.word	0xfeff8fff
 8004138:	40010000 	.word	0x40010000
 800413c:	40010400 	.word	0x40010400

08004140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800416a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 030a 	bic.w	r3, r3, #10
 800417c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0210 	bic.w	r2, r3, #16
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	031b      	lsls	r3, r3, #12
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	f043 0307 	orr.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	021a      	lsls	r2, r3, #8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	431a      	orrs	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2201      	movs	r2, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e06d      	b.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a30      	ldr	r2, [pc, #192]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a20      	ldr	r2, [pc, #128]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434a:	d01d      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1a      	ldr	r2, [pc, #104]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d10c      	bne.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	4313      	orrs	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40010400 	.word	0x40010400
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40001800 	.word	0x40001800

080043dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e040      	b.n	80044ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fd92 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fc18 	bl	8004c8c <UART_SetConfig>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e022      	b.n	80044ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fe6e 	bl	8005150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fef5 	bl	8005294 <UART_CheckIdleState>
 80044aa:	4603      	mov	r3, r0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	f040 8081 	bne.w	80045d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_UART_Transmit+0x26>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e079      	b.n	80045d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Transmit+0x38>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e072      	b.n	80045d2 <HAL_UART_Transmit+0x11e>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2221      	movs	r2, #33	; 0x21
 8004500:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004502:	f7fc fe7f 	bl	8001204 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004520:	d108      	bne.n	8004534 <HAL_UART_Transmit+0x80>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	e003      	b.n	800453c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004544:	e02c      	b.n	80045a0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fee8 	bl	8005326 <UART_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e038      	b.n	80045d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	3302      	adds	r3, #2
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	e007      	b.n	800458e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	3301      	adds	r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1cc      	bne.n	8004546 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2140      	movs	r1, #64	; 0x40
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 feb5 	bl	8005326 <UART_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e005      	b.n	80045d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b08a      	sub	sp, #40	; 0x28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	4613      	mov	r3, r2
 80045e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d13d      	bne.n	800466c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Receive_IT+0x22>
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e036      	b.n	800466e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UART_Receive_IT+0x34>
 800460a:	2302      	movs	r3, #2
 800460c:	e02f      	b.n	800466e <HAL_UART_Receive_IT+0x94>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	613b      	str	r3, [r7, #16]
   return(result);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	69f9      	ldr	r1, [r7, #28]
 800464e:	6a3a      	ldr	r2, [r7, #32]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	61bb      	str	r3, [r7, #24]
   return(result);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	461a      	mov	r2, r3
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 ff24 	bl	80054b0 <UART_Start_Receive_IT>
 8004668:	4603      	mov	r3, r0
 800466a:	e000      	b.n	800466e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b0ba      	sub	sp, #232	; 0xe8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800469e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80046a6:	4013      	ands	r3, r2
 80046a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d115      	bne.n	80046e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00f      	beq.n	80046e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 82a4 	beq.w	8004c1e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
      }
      return;
 80046de:	e29e      	b.n	8004c1e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8117 	beq.w	8004918 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046fa:	4b85      	ldr	r3, [pc, #532]	; (8004910 <HAL_UART_IRQHandler+0x298>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 810a 	beq.w	8004918 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d011      	beq.n	8004734 <HAL_UART_IRQHandler+0xbc>
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d011      	beq.n	8004764 <HAL_UART_IRQHandler+0xec>
 8004740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2202      	movs	r2, #2
 8004752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d011      	beq.n	8004794 <HAL_UART_IRQHandler+0x11c>
 8004770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2204      	movs	r2, #4
 8004782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800478a:	f043 0202 	orr.w	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2208      	movs	r2, #8
 80047be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c6:	f043 0208 	orr.w	r2, r3, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d012      	beq.n	8004802 <HAL_UART_IRQHandler+0x18a>
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00c      	beq.n	8004802 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 820a 	beq.w	8004c22 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800480e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800481a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800483c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d005      	beq.n	800485a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800484e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004852:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004856:	2b00      	cmp	r3, #0
 8004858:	d04f      	beq.n	80048fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fef2 	bl	8005644 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d141      	bne.n	80048f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3308      	adds	r3, #8
 8004896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800489a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800489e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1d9      	bne.n	800486e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d013      	beq.n	80048ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <HAL_UART_IRQHandler+0x29c>)
 80048c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fc fe49 	bl	8001566 <HAL_DMA_Abort_IT>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d017      	beq.n	800490a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80048e4:	4610      	mov	r0, r2
 80048e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	e00f      	b.n	800490a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9ae 	bl	8004c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f0:	e00b      	b.n	800490a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f9aa 	bl	8004c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	e007      	b.n	800490a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f9a6 	bl	8004c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004908:	e18b      	b.n	8004c22 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490a:	bf00      	nop
    return;
 800490c:	e189      	b.n	8004c22 <HAL_UART_IRQHandler+0x5aa>
 800490e:	bf00      	nop
 8004910:	04000120 	.word	0x04000120
 8004914:	0800570b 	.word	0x0800570b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	2b01      	cmp	r3, #1
 800491e:	f040 8144 	bne.w	8004baa <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 813d 	beq.w	8004baa <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8136 	beq.w	8004baa <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2210      	movs	r2, #16
 8004944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	f040 80b2 	bne.w	8004aba <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004962:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 815d 	beq.w	8004c26 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004976:	429a      	cmp	r2, r3
 8004978:	f080 8155 	bcs.w	8004c26 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004982:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	f000 8085 	beq.w	8004a9e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1da      	bne.n	8004994 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e1      	bne.n	80049de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e3      	bne.n	8004a1a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e4      	bne.n	8004a5e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fc fcf4 	bl	8001486 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8d4 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ab8:	e0b5      	b.n	8004c26 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80a7 	beq.w	8004c2a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a2 	beq.w	8004c2a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e4      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3308      	adds	r3, #8
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b40:	633a      	str	r2, [r7, #48]	; 0x30
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e3      	bne.n	8004b1c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0310 	bic.w	r3, r3, #16
 8004b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	69b9      	ldr	r1, [r7, #24]
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	617b      	str	r3, [r7, #20]
   return(result);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e4      	bne.n	8004b66 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f85c 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ba8:	e03f      	b.n	8004c2a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x55c>
 8004bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f853 	bl	8004c78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bd2:	e02d      	b.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01c      	beq.n	8004c2e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
    }
    return;
 8004bfc:	e017      	b.n	8004c2e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d012      	beq.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
 8004c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fd8d 	bl	8005736 <UART_EndTransmit_IT>
    return;
 8004c1c:	e008      	b.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c1e:	bf00      	nop
 8004c20:	e006      	b.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004c22:	bf00      	nop
 8004c24:	e004      	b.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004c2e:	bf00      	nop
  }

}
 8004c30:	37e8      	adds	r7, #232	; 0xe8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop

08004c38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	4ba7      	ldr	r3, [pc, #668]	; (8004f54 <UART_SetConfig+0x2c8>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a95      	ldr	r2, [pc, #596]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d120      	bne.n	8004d4a <UART_SetConfig+0xbe>
 8004d08:	4b94      	ldr	r3, [pc, #592]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d816      	bhi.n	8004d44 <UART_SetConfig+0xb8>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x90>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d2d 	.word	0x08004d2d
 8004d20:	08004d39 	.word	0x08004d39
 8004d24:	08004d33 	.word	0x08004d33
 8004d28:	08004d3f 	.word	0x08004d3f
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e14f      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004d32:	2302      	movs	r3, #2
 8004d34:	77fb      	strb	r3, [r7, #31]
 8004d36:	e14c      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e149      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004d3e:	2308      	movs	r3, #8
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e146      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004d44:	2310      	movs	r3, #16
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e143      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a84      	ldr	r2, [pc, #528]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d132      	bne.n	8004dba <UART_SetConfig+0x12e>
 8004d54:	4b81      	ldr	r3, [pc, #516]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d828      	bhi.n	8004db4 <UART_SetConfig+0x128>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <UART_SetConfig+0xdc>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	08004db5 	.word	0x08004db5
 8004d70:	08004db5 	.word	0x08004db5
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004da9 	.word	0x08004da9
 8004d7c:	08004db5 	.word	0x08004db5
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004db5 	.word	0x08004db5
 8004d88:	08004da3 	.word	0x08004da3
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004db5 	.word	0x08004db5
 8004d98:	08004daf 	.word	0x08004daf
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e117      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e114      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004da8:	2304      	movs	r3, #4
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e111      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004dae:	2308      	movs	r3, #8
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e10e      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e10b      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a69      	ldr	r2, [pc, #420]	; (8004f64 <UART_SetConfig+0x2d8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d120      	bne.n	8004e06 <UART_SetConfig+0x17a>
 8004dc4:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dce:	2b30      	cmp	r3, #48	; 0x30
 8004dd0:	d013      	beq.n	8004dfa <UART_SetConfig+0x16e>
 8004dd2:	2b30      	cmp	r3, #48	; 0x30
 8004dd4:	d814      	bhi.n	8004e00 <UART_SetConfig+0x174>
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d009      	beq.n	8004dee <UART_SetConfig+0x162>
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d810      	bhi.n	8004e00 <UART_SetConfig+0x174>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <UART_SetConfig+0x15c>
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d006      	beq.n	8004df4 <UART_SetConfig+0x168>
 8004de6:	e00b      	b.n	8004e00 <UART_SetConfig+0x174>
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e0f1      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004dee:	2302      	movs	r3, #2
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e0ee      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004df4:	2304      	movs	r3, #4
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e0eb      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e0e8      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e00:	2310      	movs	r3, #16
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e0e5      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a57      	ldr	r2, [pc, #348]	; (8004f68 <UART_SetConfig+0x2dc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d120      	bne.n	8004e52 <UART_SetConfig+0x1c6>
 8004e10:	4b52      	ldr	r3, [pc, #328]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e1c:	d013      	beq.n	8004e46 <UART_SetConfig+0x1ba>
 8004e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e20:	d814      	bhi.n	8004e4c <UART_SetConfig+0x1c0>
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d009      	beq.n	8004e3a <UART_SetConfig+0x1ae>
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d810      	bhi.n	8004e4c <UART_SetConfig+0x1c0>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <UART_SetConfig+0x1a8>
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d006      	beq.n	8004e40 <UART_SetConfig+0x1b4>
 8004e32:	e00b      	b.n	8004e4c <UART_SetConfig+0x1c0>
 8004e34:	2300      	movs	r3, #0
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e0cb      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e0c8      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e40:	2304      	movs	r3, #4
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e0c5      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e46:	2308      	movs	r3, #8
 8004e48:	77fb      	strb	r3, [r7, #31]
 8004e4a:	e0c2      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	77fb      	strb	r3, [r7, #31]
 8004e50:	e0bf      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a45      	ldr	r2, [pc, #276]	; (8004f6c <UART_SetConfig+0x2e0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d125      	bne.n	8004ea8 <UART_SetConfig+0x21c>
 8004e5c:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6a:	d017      	beq.n	8004e9c <UART_SetConfig+0x210>
 8004e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e70:	d817      	bhi.n	8004ea2 <UART_SetConfig+0x216>
 8004e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e76:	d00b      	beq.n	8004e90 <UART_SetConfig+0x204>
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7c:	d811      	bhi.n	8004ea2 <UART_SetConfig+0x216>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <UART_SetConfig+0x1fe>
 8004e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e86:	d006      	beq.n	8004e96 <UART_SetConfig+0x20a>
 8004e88:	e00b      	b.n	8004ea2 <UART_SetConfig+0x216>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e0a0      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e90:	2302      	movs	r3, #2
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e09d      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e96:	2304      	movs	r3, #4
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e09a      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e097      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e094      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a30      	ldr	r2, [pc, #192]	; (8004f70 <UART_SetConfig+0x2e4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d125      	bne.n	8004efe <UART_SetConfig+0x272>
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec0:	d017      	beq.n	8004ef2 <UART_SetConfig+0x266>
 8004ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec6:	d817      	bhi.n	8004ef8 <UART_SetConfig+0x26c>
 8004ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ecc:	d00b      	beq.n	8004ee6 <UART_SetConfig+0x25a>
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d811      	bhi.n	8004ef8 <UART_SetConfig+0x26c>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0x254>
 8004ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004edc:	d006      	beq.n	8004eec <UART_SetConfig+0x260>
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x26c>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e075      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e072      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e06f      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e06c      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e069      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <UART_SetConfig+0x2e8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d137      	bne.n	8004f78 <UART_SetConfig+0x2ec>
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f16:	d017      	beq.n	8004f48 <UART_SetConfig+0x2bc>
 8004f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f1c:	d817      	bhi.n	8004f4e <UART_SetConfig+0x2c2>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	d00b      	beq.n	8004f3c <UART_SetConfig+0x2b0>
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d811      	bhi.n	8004f4e <UART_SetConfig+0x2c2>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <UART_SetConfig+0x2aa>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d006      	beq.n	8004f42 <UART_SetConfig+0x2b6>
 8004f34:	e00b      	b.n	8004f4e <UART_SetConfig+0x2c2>
 8004f36:	2300      	movs	r3, #0
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e04a      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e047      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004f42:	2304      	movs	r3, #4
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e044      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e041      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004f4e:	2310      	movs	r3, #16
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e03e      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004f54:	efff69f3 	.word	0xefff69f3
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40004400 	.word	0x40004400
 8004f64:	40004800 	.word	0x40004800
 8004f68:	40004c00 	.word	0x40004c00
 8004f6c:	40005000 	.word	0x40005000
 8004f70:	40011400 	.word	0x40011400
 8004f74:	40007800 	.word	0x40007800
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a71      	ldr	r2, [pc, #452]	; (8005144 <UART_SetConfig+0x4b8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d125      	bne.n	8004fce <UART_SetConfig+0x342>
 8004f82:	4b71      	ldr	r3, [pc, #452]	; (8005148 <UART_SetConfig+0x4bc>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f90:	d017      	beq.n	8004fc2 <UART_SetConfig+0x336>
 8004f92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f96:	d817      	bhi.n	8004fc8 <UART_SetConfig+0x33c>
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9c:	d00b      	beq.n	8004fb6 <UART_SetConfig+0x32a>
 8004f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa2:	d811      	bhi.n	8004fc8 <UART_SetConfig+0x33c>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <UART_SetConfig+0x324>
 8004fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fac:	d006      	beq.n	8004fbc <UART_SetConfig+0x330>
 8004fae:	e00b      	b.n	8004fc8 <UART_SetConfig+0x33c>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e00d      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e00a      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e007      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e004      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e001      	b.n	8004fd2 <UART_SetConfig+0x346>
 8004fce:	2310      	movs	r3, #16
 8004fd0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fda:	d15a      	bne.n	8005092 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004fdc:	7ffb      	ldrb	r3, [r7, #31]
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d827      	bhi.n	8005032 <UART_SetConfig+0x3a6>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x35c>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005015 	.word	0x08005015
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	08005033 	.word	0x08005033
 8004ff8:	08005023 	.word	0x08005023
 8004ffc:	08005033 	.word	0x08005033
 8005000:	08005033 	.word	0x08005033
 8005004:	08005033 	.word	0x08005033
 8005008:	0800502b 	.word	0x0800502b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800500c:	f7fd fac4 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 8005010:	61b8      	str	r0, [r7, #24]
        break;
 8005012:	e013      	b.n	800503c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005014:	f7fd fad4 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8005018:	61b8      	str	r0, [r7, #24]
        break;
 800501a:	e00f      	b.n	800503c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <UART_SetConfig+0x4c0>)
 800501e:	61bb      	str	r3, [r7, #24]
        break;
 8005020:	e00c      	b.n	800503c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005022:	f7fd f9cb 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8005026:	61b8      	str	r0, [r7, #24]
        break;
 8005028:	e008      	b.n	800503c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502e:	61bb      	str	r3, [r7, #24]
        break;
 8005030:	e004      	b.n	800503c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	77bb      	strb	r3, [r7, #30]
        break;
 800503a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d074      	beq.n	800512c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	005a      	lsls	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	441a      	add	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d916      	bls.n	800508c <UART_SetConfig+0x400>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d212      	bcs.n	800508c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f023 030f 	bic.w	r3, r3, #15
 800506e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	b29b      	uxth	r3, r3
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	b29a      	uxth	r2, r3
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	4313      	orrs	r3, r2
 8005080:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	89fa      	ldrh	r2, [r7, #14]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	e04f      	b.n	800512c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	77bb      	strb	r3, [r7, #30]
 8005090:	e04c      	b.n	800512c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005092:	7ffb      	ldrb	r3, [r7, #31]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d828      	bhi.n	80050ea <UART_SetConfig+0x45e>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <UART_SetConfig+0x414>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	080050eb 	.word	0x080050eb
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050eb 	.word	0x080050eb
 80050b8:	080050eb 	.word	0x080050eb
 80050bc:	080050eb 	.word	0x080050eb
 80050c0:	080050e3 	.word	0x080050e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c4:	f7fd fa68 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80050c8:	61b8      	str	r0, [r7, #24]
        break;
 80050ca:	e013      	b.n	80050f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050cc:	f7fd fa78 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 80050d0:	61b8      	str	r0, [r7, #24]
        break;
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d4:	4b1d      	ldr	r3, [pc, #116]	; (800514c <UART_SetConfig+0x4c0>)
 80050d6:	61bb      	str	r3, [r7, #24]
        break;
 80050d8:	e00c      	b.n	80050f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7fd f96f 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80050de:	61b8      	str	r0, [r7, #24]
        break;
 80050e0:	e008      	b.n	80050f4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	61bb      	str	r3, [r7, #24]
        break;
 80050e8:	e004      	b.n	80050f4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	77bb      	strb	r3, [r7, #30]
        break;
 80050f2:	bf00      	nop
    }

    if (pclk != 0U)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d018      	beq.n	800512c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	085a      	lsrs	r2, r3, #1
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	441a      	add	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d909      	bls.n	8005128 <UART_SetConfig+0x49c>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511a:	d205      	bcs.n	8005128 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	e001      	b.n	800512c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005138:	7fbb      	ldrb	r3, [r7, #30]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40007c00 	.word	0x40007c00
 8005148:	40023800 	.word	0x40023800
 800514c:	00f42400 	.word	0x00f42400

08005150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01a      	beq.n	8005266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524e:	d10a      	bne.n	8005266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  }
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052a4:	f7fb ffae 	bl	8001204 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d10e      	bne.n	80052d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f82d 	bl	8005326 <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e023      	b.n	800531e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d10e      	bne.n	8005302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f817 	bl	8005326 <UART_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e00d      	b.n	800531e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b09c      	sub	sp, #112	; 0x70
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	4613      	mov	r3, r2
 8005334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005336:	e0a5      	b.n	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	f000 80a1 	beq.w	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005342:	f7fb ff5f 	bl	8001204 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800534e:	429a      	cmp	r2, r3
 8005350:	d302      	bcc.n	8005358 <UART_WaitOnFlagUntilTimeout+0x32>
 8005352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005354:	2b00      	cmp	r3, #0
 8005356:	d13e      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800536c:	667b      	str	r3, [r7, #100]	; 0x64
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005378:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800537c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e6      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	663b      	str	r3, [r7, #96]	; 0x60
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e067      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d04f      	beq.n	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d147      	bne.n	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
 800541e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e6      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	66bb      	str	r3, [r7, #104]	; 0x68
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005450:	623a      	str	r2, [r7, #32]
 8005452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	61bb      	str	r3, [r7, #24]
   return(result);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e010      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	429a      	cmp	r2, r3
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	429a      	cmp	r2, r3
 80054a0:	f43f af4a 	beq.w	8005338 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3770      	adds	r7, #112	; 0x70
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b097      	sub	sp, #92	; 0x5c
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	d10e      	bne.n	8005502 <UART_Start_Receive_IT+0x52>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <UART_Start_Receive_IT+0x48>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054f6:	e02d      	b.n	8005554 <UART_Start_Receive_IT+0xa4>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	22ff      	movs	r2, #255	; 0xff
 80054fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005500:	e028      	b.n	8005554 <UART_Start_Receive_IT+0xa4>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <UART_Start_Receive_IT+0x76>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <UART_Start_Receive_IT+0x6c>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800551a:	e01b      	b.n	8005554 <UART_Start_Receive_IT+0xa4>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	227f      	movs	r2, #127	; 0x7f
 8005520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005524:	e016      	b.n	8005554 <UART_Start_Receive_IT+0xa4>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800552e:	d10d      	bne.n	800554c <UART_Start_Receive_IT+0x9c>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <UART_Start_Receive_IT+0x92>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	227f      	movs	r2, #127	; 0x7f
 800553c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005540:	e008      	b.n	8005554 <UART_Start_Receive_IT+0xa4>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	223f      	movs	r2, #63	; 0x3f
 8005546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800554a:	e003      	b.n	8005554 <UART_Start_Receive_IT+0xa4>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2222      	movs	r2, #34	; 0x22
 8005560:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	657b      	str	r3, [r7, #84]	; 0x54
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005582:	64ba      	str	r2, [r7, #72]	; 0x48
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d107      	bne.n	80055b0 <UART_Start_Receive_IT+0x100>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a24      	ldr	r2, [pc, #144]	; (800563c <UART_Start_Receive_IT+0x18c>)
 80055ac:	665a      	str	r2, [r3, #100]	; 0x64
 80055ae:	e002      	b.n	80055b6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a23      	ldr	r2, [pc, #140]	; (8005640 <UART_Start_Receive_IT+0x190>)
 80055b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d019      	beq.n	80055fa <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	637b      	str	r3, [r7, #52]	; 0x34
 80055e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e6      	bne.n	80055c6 <UART_Start_Receive_IT+0x116>
 80055f8:	e018      	b.n	800562c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	613b      	str	r3, [r7, #16]
   return(result);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f043 0320 	orr.w	r3, r3, #32
 800560e:	653b      	str	r3, [r7, #80]	; 0x50
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	69f9      	ldr	r1, [r7, #28]
 800561e:	6a3a      	ldr	r2, [r7, #32]
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	61bb      	str	r3, [r7, #24]
   return(result);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	375c      	adds	r7, #92	; 0x5c
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	080058e7 	.word	0x080058e7
 8005640:	0800578b 	.word	0x0800578b

08005644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b095      	sub	sp, #84	; 0x54
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566a:	643b      	str	r3, [r7, #64]	; 0x40
 800566c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e6      	bne.n	800564c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3308      	adds	r3, #8
 8005684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	61fb      	str	r3, [r7, #28]
   return(result);
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	64bb      	str	r3, [r7, #72]	; 0x48
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800569e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d118      	bne.n	80056ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f023 0310 	bic.w	r3, r3, #16
 80056ce:	647b      	str	r3, [r7, #68]	; 0x44
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6979      	ldr	r1, [r7, #20]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	613b      	str	r3, [r7, #16]
   return(result);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056fe:	bf00      	nop
 8005700:	3754      	adds	r7, #84	; 0x54
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff fa8f 	bl	8004c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b088      	sub	sp, #32
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60bb      	str	r3, [r7, #8]
   return(result);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6979      	ldr	r1, [r7, #20]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	613b      	str	r3, [r7, #16]
   return(result);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e6      	bne.n	800573e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff fa5b 	bl	8004c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005782:	bf00      	nop
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b096      	sub	sp, #88	; 0x58
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005798:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a0:	2b22      	cmp	r3, #34	; 0x22
 80057a2:	f040 8094 	bne.w	80058ce <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057b0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057b4:	b2d9      	uxtb	r1, r3
 80057b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	400a      	ands	r2, r1
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d177      	bne.n	80058de <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005802:	653b      	str	r3, [r7, #80]	; 0x50
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580c:	647b      	str	r3, [r7, #68]	; 0x44
 800580e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	623b      	str	r3, [r7, #32]
   return(result);
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005840:	633a      	str	r2, [r7, #48]	; 0x30
 8005842:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e5      	bne.n	8005820 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	2b01      	cmp	r3, #1
 8005866:	d12e      	bne.n	80058c6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	60fb      	str	r3, [r7, #12]
   return(result);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0310 	bic.w	r3, r3, #16
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69b9      	ldr	r1, [r7, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e6      	bne.n	800586e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d103      	bne.n	80058b6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2210      	movs	r2, #16
 80058b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff f9ce 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058c4:	e00b      	b.n	80058de <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fb f800 	bl	80008cc <HAL_UART_RxCpltCallback>
}
 80058cc:	e007      	b.n	80058de <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0208 	orr.w	r2, r2, #8
 80058dc:	619a      	str	r2, [r3, #24]
}
 80058de:	bf00      	nop
 80058e0:	3758      	adds	r7, #88	; 0x58
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b096      	sub	sp, #88	; 0x58
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fc:	2b22      	cmp	r3, #34	; 0x22
 80058fe:	f040 8094 	bne.w	8005a2a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005912:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005916:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800591a:	4013      	ands	r3, r2
 800591c:	b29a      	uxth	r2, r3
 800591e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005920:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	1c9a      	adds	r2, r3, #2
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d177      	bne.n	8005a3a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800595e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
 800596a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800596e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	61fb      	str	r3, [r7, #28]
   return(result);
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	64bb      	str	r3, [r7, #72]	; 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d12e      	bne.n	8005a22 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0310 	bic.w	r3, r3, #16
 80059de:	647b      	str	r3, [r7, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	613b      	str	r3, [r7, #16]
   return(result);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d103      	bne.n	8005a12 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff f920 	bl	8004c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a20:	e00b      	b.n	8005a3a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fa ff52 	bl	80008cc <HAL_UART_RxCpltCallback>
}
 8005a28:	e007      	b.n	8005a3a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0208 	orr.w	r2, r2, #8
 8005a38:	619a      	str	r2, [r3, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	3758      	adds	r7, #88	; 0x58
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a44:	b084      	sub	sp, #16
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	f107 001c 	add.w	r0, r7, #28
 8005a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d120      	bne.n	8005a9e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <USB_CoreInit+0xac>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d105      	bne.n	8005a92 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa92 	bl	8005fbc <USB_CoreReset>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]
 8005a9c:	e010      	b.n	8005ac0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa86 	bl	8005fbc <USB_CoreReset>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10b      	bne.n	8005ade <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f043 0206 	orr.w	r2, r3, #6
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aea:	b004      	add	sp, #16
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	ffbdffbf 	.word	0xffbdffbf

08005af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f023 0201 	bic.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d115      	bne.n	8005b64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7fb fb69 	bl	800121c <HAL_Delay>
      ms++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa25 	bl	8005fa0 <USB_GetMode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d01e      	beq.n	8005b9a <USB_SetCurrentMode+0x84>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b31      	cmp	r3, #49	; 0x31
 8005b60:	d9f0      	bls.n	8005b44 <USB_SetCurrentMode+0x2e>
 8005b62:	e01a      	b.n	8005b9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b64:	78fb      	ldrb	r3, [r7, #3]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d115      	bne.n	8005b96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b76:	2001      	movs	r0, #1
 8005b78:	f7fb fb50 	bl	800121c <HAL_Delay>
      ms++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa0c 	bl	8005fa0 <USB_GetMode>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <USB_SetCurrentMode+0x84>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b31      	cmp	r3, #49	; 0x31
 8005b92:	d9f0      	bls.n	8005b76 <USB_SetCurrentMode+0x60>
 8005b94:	e001      	b.n	8005b9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e005      	b.n	8005ba6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b32      	cmp	r3, #50	; 0x32
 8005b9e:	d101      	bne.n	8005ba4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	e009      	b.n	8005be4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3340      	adds	r3, #64	; 0x40
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	3301      	adds	r3, #1
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b0e      	cmp	r3, #14
 8005be8:	d9f2      	bls.n	8005bd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d11c      	bne.n	8005c2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bfe:	f043 0302 	orr.w	r3, r3, #2
 8005c02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e005      	b.n	8005c36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	461a      	mov	r2, r3
 8005c52:	680b      	ldr	r3, [r1, #0]
 8005c54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d10c      	bne.n	8005c76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c62:	2100      	movs	r1, #0
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f961 	bl	8005f2c <USB_SetDevSpeed>
 8005c6a:	e008      	b.n	8005c7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f95c 	bl	8005f2c <USB_SetDevSpeed>
 8005c74:	e003      	b.n	8005c7e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c76:	2103      	movs	r1, #3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f957 	bl	8005f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c7e:	2110      	movs	r1, #16
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f8f3 	bl	8005e6c <USB_FlushTxFifo>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f91d 	bl	8005ed0 <USB_FlushRxFifo>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	e043      	b.n	8005d52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce0:	d118      	bne.n	8005d14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e013      	b.n	8005d26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	e008      	b.n	8005d26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	461a      	mov	r2, r3
 8005d22:	2300      	movs	r3, #0
 8005d24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	461a      	mov	r2, r3
 8005d34:	2300      	movs	r3, #0
 8005d36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	461a      	mov	r2, r3
 8005d46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d3b7      	bcc.n	8005cca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	e043      	b.n	8005de8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d76:	d118      	bne.n	8005daa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e013      	b.n	8005dbc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	461a      	mov	r2, r3
 8005da2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e008      	b.n	8005dbc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005de0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3301      	adds	r3, #1
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d3b7      	bcc.n	8005d60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f043 0210 	orr.w	r2, r3, #16
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <USB_DevInit+0x2b4>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f043 0208 	orr.w	r2, r3, #8
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <USB_DevInit+0x2b8>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr
 8005e64:	803c3800 	.word	0x803c3800
 8005e68:	40000004 	.word	0x40000004

08005e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	4a12      	ldr	r2, [pc, #72]	; (8005ecc <USB_FlushTxFifo+0x60>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e01a      	b.n	8005ec0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	daf3      	bge.n	8005e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <USB_FlushTxFifo+0x60>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e006      	b.n	8005ec0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d0f1      	beq.n	8005ea2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	00030d40 	.word	0x00030d40

08005ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	4a11      	ldr	r2, [pc, #68]	; (8005f28 <USB_FlushRxFifo+0x58>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d901      	bls.n	8005eec <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e017      	b.n	8005f1c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	daf3      	bge.n	8005edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2210      	movs	r2, #16
 8005efc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <USB_FlushRxFifo+0x58>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e006      	b.n	8005f1c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d0f1      	beq.n	8005efe <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	00030d40 	.word	0x00030d40

08005f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f78:	f023 0303 	bic.w	r3, r3, #3
 8005f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
 8005f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0301 	and.w	r3, r3, #1
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	4a13      	ldr	r2, [pc, #76]	; (800601c <USB_CoreReset+0x60>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d901      	bls.n	8005fd8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e01a      	b.n	800600e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	daf3      	bge.n	8005fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f043 0201 	orr.w	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	4a09      	ldr	r2, [pc, #36]	; (800601c <USB_CoreReset+0x60>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d901      	bls.n	8006000 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e006      	b.n	800600e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d0f1      	beq.n	8005ff0 <USB_CoreReset+0x34>

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	00030d40 	.word	0x00030d40

08006020 <atoi>:
 8006020:	220a      	movs	r2, #10
 8006022:	2100      	movs	r1, #0
 8006024:	f000 b8b6 	b.w	8006194 <strtol>

08006028 <__errno>:
 8006028:	4b01      	ldr	r3, [pc, #4]	; (8006030 <__errno+0x8>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2000000c 	.word	0x2000000c

08006034 <__libc_init_array>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4d0d      	ldr	r5, [pc, #52]	; (800606c <__libc_init_array+0x38>)
 8006038:	4c0d      	ldr	r4, [pc, #52]	; (8006070 <__libc_init_array+0x3c>)
 800603a:	1b64      	subs	r4, r4, r5
 800603c:	10a4      	asrs	r4, r4, #2
 800603e:	2600      	movs	r6, #0
 8006040:	42a6      	cmp	r6, r4
 8006042:	d109      	bne.n	8006058 <__libc_init_array+0x24>
 8006044:	4d0b      	ldr	r5, [pc, #44]	; (8006074 <__libc_init_array+0x40>)
 8006046:	4c0c      	ldr	r4, [pc, #48]	; (8006078 <__libc_init_array+0x44>)
 8006048:	f000 f8ae 	bl	80061a8 <_init>
 800604c:	1b64      	subs	r4, r4, r5
 800604e:	10a4      	asrs	r4, r4, #2
 8006050:	2600      	movs	r6, #0
 8006052:	42a6      	cmp	r6, r4
 8006054:	d105      	bne.n	8006062 <__libc_init_array+0x2e>
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	f855 3b04 	ldr.w	r3, [r5], #4
 800605c:	4798      	blx	r3
 800605e:	3601      	adds	r6, #1
 8006060:	e7ee      	b.n	8006040 <__libc_init_array+0xc>
 8006062:	f855 3b04 	ldr.w	r3, [r5], #4
 8006066:	4798      	blx	r3
 8006068:	3601      	adds	r6, #1
 800606a:	e7f2      	b.n	8006052 <__libc_init_array+0x1e>
 800606c:	08006314 	.word	0x08006314
 8006070:	08006314 	.word	0x08006314
 8006074:	08006314 	.word	0x08006314
 8006078:	08006318 	.word	0x08006318

0800607c <memset>:
 800607c:	4402      	add	r2, r0
 800607e:	4603      	mov	r3, r0
 8006080:	4293      	cmp	r3, r2
 8006082:	d100      	bne.n	8006086 <memset+0xa>
 8006084:	4770      	bx	lr
 8006086:	f803 1b01 	strb.w	r1, [r3], #1
 800608a:	e7f9      	b.n	8006080 <memset+0x4>

0800608c <_strtol_l.isra.0>:
 800608c:	2b01      	cmp	r3, #1
 800608e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006092:	d001      	beq.n	8006098 <_strtol_l.isra.0+0xc>
 8006094:	2b24      	cmp	r3, #36	; 0x24
 8006096:	d906      	bls.n	80060a6 <_strtol_l.isra.0+0x1a>
 8006098:	f7ff ffc6 	bl	8006028 <__errno>
 800609c:	2316      	movs	r3, #22
 800609e:	6003      	str	r3, [r0, #0]
 80060a0:	2000      	movs	r0, #0
 80060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a6:	4f3a      	ldr	r7, [pc, #232]	; (8006190 <_strtol_l.isra.0+0x104>)
 80060a8:	468e      	mov	lr, r1
 80060aa:	4676      	mov	r6, lr
 80060ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80060b0:	5de5      	ldrb	r5, [r4, r7]
 80060b2:	f015 0508 	ands.w	r5, r5, #8
 80060b6:	d1f8      	bne.n	80060aa <_strtol_l.isra.0+0x1e>
 80060b8:	2c2d      	cmp	r4, #45	; 0x2d
 80060ba:	d134      	bne.n	8006126 <_strtol_l.isra.0+0x9a>
 80060bc:	f89e 4000 	ldrb.w	r4, [lr]
 80060c0:	f04f 0801 	mov.w	r8, #1
 80060c4:	f106 0e02 	add.w	lr, r6, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d05c      	beq.n	8006186 <_strtol_l.isra.0+0xfa>
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d10c      	bne.n	80060ea <_strtol_l.isra.0+0x5e>
 80060d0:	2c30      	cmp	r4, #48	; 0x30
 80060d2:	d10a      	bne.n	80060ea <_strtol_l.isra.0+0x5e>
 80060d4:	f89e 4000 	ldrb.w	r4, [lr]
 80060d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80060dc:	2c58      	cmp	r4, #88	; 0x58
 80060de:	d14d      	bne.n	800617c <_strtol_l.isra.0+0xf0>
 80060e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80060e4:	2310      	movs	r3, #16
 80060e6:	f10e 0e02 	add.w	lr, lr, #2
 80060ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80060ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80060f2:	2600      	movs	r6, #0
 80060f4:	fbbc f9f3 	udiv	r9, ip, r3
 80060f8:	4635      	mov	r5, r6
 80060fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80060fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006102:	2f09      	cmp	r7, #9
 8006104:	d818      	bhi.n	8006138 <_strtol_l.isra.0+0xac>
 8006106:	463c      	mov	r4, r7
 8006108:	42a3      	cmp	r3, r4
 800610a:	dd24      	ble.n	8006156 <_strtol_l.isra.0+0xca>
 800610c:	2e00      	cmp	r6, #0
 800610e:	db1f      	blt.n	8006150 <_strtol_l.isra.0+0xc4>
 8006110:	45a9      	cmp	r9, r5
 8006112:	d31d      	bcc.n	8006150 <_strtol_l.isra.0+0xc4>
 8006114:	d101      	bne.n	800611a <_strtol_l.isra.0+0x8e>
 8006116:	45a2      	cmp	sl, r4
 8006118:	db1a      	blt.n	8006150 <_strtol_l.isra.0+0xc4>
 800611a:	fb05 4503 	mla	r5, r5, r3, r4
 800611e:	2601      	movs	r6, #1
 8006120:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006124:	e7eb      	b.n	80060fe <_strtol_l.isra.0+0x72>
 8006126:	2c2b      	cmp	r4, #43	; 0x2b
 8006128:	bf08      	it	eq
 800612a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800612e:	46a8      	mov	r8, r5
 8006130:	bf08      	it	eq
 8006132:	f106 0e02 	addeq.w	lr, r6, #2
 8006136:	e7c7      	b.n	80060c8 <_strtol_l.isra.0+0x3c>
 8006138:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800613c:	2f19      	cmp	r7, #25
 800613e:	d801      	bhi.n	8006144 <_strtol_l.isra.0+0xb8>
 8006140:	3c37      	subs	r4, #55	; 0x37
 8006142:	e7e1      	b.n	8006108 <_strtol_l.isra.0+0x7c>
 8006144:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006148:	2f19      	cmp	r7, #25
 800614a:	d804      	bhi.n	8006156 <_strtol_l.isra.0+0xca>
 800614c:	3c57      	subs	r4, #87	; 0x57
 800614e:	e7db      	b.n	8006108 <_strtol_l.isra.0+0x7c>
 8006150:	f04f 36ff 	mov.w	r6, #4294967295
 8006154:	e7e4      	b.n	8006120 <_strtol_l.isra.0+0x94>
 8006156:	2e00      	cmp	r6, #0
 8006158:	da05      	bge.n	8006166 <_strtol_l.isra.0+0xda>
 800615a:	2322      	movs	r3, #34	; 0x22
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	4665      	mov	r5, ip
 8006160:	b942      	cbnz	r2, 8006174 <_strtol_l.isra.0+0xe8>
 8006162:	4628      	mov	r0, r5
 8006164:	e79d      	b.n	80060a2 <_strtol_l.isra.0+0x16>
 8006166:	f1b8 0f00 	cmp.w	r8, #0
 800616a:	d000      	beq.n	800616e <_strtol_l.isra.0+0xe2>
 800616c:	426d      	negs	r5, r5
 800616e:	2a00      	cmp	r2, #0
 8006170:	d0f7      	beq.n	8006162 <_strtol_l.isra.0+0xd6>
 8006172:	b10e      	cbz	r6, 8006178 <_strtol_l.isra.0+0xec>
 8006174:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006178:	6011      	str	r1, [r2, #0]
 800617a:	e7f2      	b.n	8006162 <_strtol_l.isra.0+0xd6>
 800617c:	2430      	movs	r4, #48	; 0x30
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1b3      	bne.n	80060ea <_strtol_l.isra.0+0x5e>
 8006182:	2308      	movs	r3, #8
 8006184:	e7b1      	b.n	80060ea <_strtol_l.isra.0+0x5e>
 8006186:	2c30      	cmp	r4, #48	; 0x30
 8006188:	d0a4      	beq.n	80060d4 <_strtol_l.isra.0+0x48>
 800618a:	230a      	movs	r3, #10
 800618c:	e7ad      	b.n	80060ea <_strtol_l.isra.0+0x5e>
 800618e:	bf00      	nop
 8006190:	08006209 	.word	0x08006209

08006194 <strtol>:
 8006194:	4613      	mov	r3, r2
 8006196:	460a      	mov	r2, r1
 8006198:	4601      	mov	r1, r0
 800619a:	4802      	ldr	r0, [pc, #8]	; (80061a4 <strtol+0x10>)
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f7ff bf75 	b.w	800608c <_strtol_l.isra.0>
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c

080061a8 <_init>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	bf00      	nop
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr

080061b4 <_fini>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	bf00      	nop
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr
