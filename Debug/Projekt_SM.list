
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bce4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800bee8  0800bee8  0001bee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c41c  0800c41c  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c41c  0800c41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c424  0800c424  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c424  0800c424  0001c424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c428  0800c428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800c42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  200002e0  0800c70c  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  0800c70c  00020b60  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e49d  00000000  00000000  0002030e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f9e  00000000  00000000  0003e7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00042750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  00043c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba7c  00000000  00000000  00044f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf95  00000000  00000000  000709b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106fcb  00000000  00000000  0008c949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00193914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c4  00000000  00000000  001939e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000df5  00000000  00000000  0019a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e0 	.word	0x200002e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800becc 	.word	0x0800becc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e4 	.word	0x200002e4
 800023c:	0800becc 	.word	0x0800becc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MX_ADC1_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <MX_ADC1_Init+0xa0>)
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a32:	f001 fb05 	bl	8002040 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f000 fd26 	bl	800148c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a40:	2309      	movs	r3, #9
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a52:	f001 fd43 	bl	80024dc <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f000 fd16 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000043c 	.word	0x2000043c
 8000a6c:	40012000 	.word	0x40012000
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_ADC_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12b      	bne.n	8000aee <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	2303      	movs	r3, #3
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <HAL_ADC_MspInit+0x8c>)
 8000ada:	f002 f8fd 	bl	8002cd8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2012      	movs	r0, #18
 8000ae4:	f002 f82f 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ae8:	2012      	movs	r0, #18
 8000aea:	f002 f848 	bl	8002b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40012000 	.word	0x40012000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b6e      	ldr	r3, [pc, #440]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a6d      	ldr	r2, [pc, #436]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b68      	ldr	r3, [pc, #416]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a67      	ldr	r2, [pc, #412]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b65      	ldr	r3, [pc, #404]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a61      	ldr	r2, [pc, #388]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b5f      	ldr	r3, [pc, #380]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b5c      	ldr	r3, [pc, #368]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a5b      	ldr	r2, [pc, #364]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a55      	ldr	r2, [pc, #340]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bc8:	4843      	ldr	r0, [pc, #268]	; (8000cd8 <MX_GPIO_Init+0x1d4>)
 8000bca:	f002 fa31 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	4842      	ldr	r0, [pc, #264]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000bd4:	f002 fa2c 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	483c      	ldr	r0, [pc, #240]	; (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000bf0:	f002 f872 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf4:	2332      	movs	r3, #50	; 0x32
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4834      	ldr	r0, [pc, #208]	; (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000c10:	f002 f862 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c14:	2386      	movs	r3, #134	; 0x86
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482d      	ldr	r0, [pc, #180]	; (8000ce4 <MX_GPIO_Init+0x1e0>)
 8000c30:	f002 f852 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <MX_GPIO_Init+0x1d4>)
 8000c4e:	f002 f843 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481a      	ldr	r0, [pc, #104]	; (8000cd8 <MX_GPIO_Init+0x1d4>)
 8000c70:	f002 f832 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4814      	ldr	r0, [pc, #80]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000c8c:	f002 f824 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000ca4:	f002 f818 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ca8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000cc6:	f002 f807 	bl	8002cd8 <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40021800 	.word	0x40021800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <SpeedCalculation>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SpeedCalculation(int16_t count){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	speed = (float32_t)((count * TIMER_FREQENCY * MINUTE_IN_SECOND)/
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d06:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000d30 <SpeedCalculation+0x48>
 8000d0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <SpeedCalculation+0x50>)
 8000d14:	edc3 7a00 	vstr	s15, [r3]
			(ENCODER_RESOLUTION*TIMER_CONF_BOTH_EDGE_T1T2));

	arm_fir_f32(&Speed_Fir, &speed, &speed_filtered, 1);
 8000d18:	2301      	movs	r3, #1
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <SpeedCalculation+0x54>)
 8000d1c:	4906      	ldr	r1, [pc, #24]	; (8000d38 <SpeedCalculation+0x50>)
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <SpeedCalculation+0x58>)
 8000d20:	f006 fd40 	bl	80077a4 <arm_fir_f32>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	f3af 8000 	nop.w
 8000d30:	cccccccd 	.word	0xcccccccd
 8000d34:	408c0ccc 	.word	0x408c0ccc
 8000d38:	2000031c 	.word	0x2000031c
 8000d3c:	20000324 	.word	0x20000324
 8000d40:	200004b8 	.word	0x200004b8

08000d44 <SetDutyPID>:

void SetDutyPID(arm_pid_instance_f32* pid, float32_t y_ref, float32_t y){
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d50:	edc7 0a01 	vstr	s1, [r7, #4]

	PID_Error = y_ref - y; //Error calc
 8000d54:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d60:	4b4b      	ldr	r3, [pc, #300]	; (8000e90 <SetDutyPID+0x14c>)
 8000d62:	edc3 7a00 	vstr	s15, [r3]
	PID_Output = arm_pid_f32(pid, PID_Error); // Output PID signal
 8000d66:	4b4a      	ldr	r3, [pc, #296]	; (8000e90 <SetDutyPID+0x14c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	61fa      	str	r2, [r7, #28]
 8000d6e:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	ed93 7a00 	vldr	s14, [r3]
 8000d76:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <SetDutyPID+0x150>)
 8000dcc:	6013      	str	r3, [r2, #0]

	if(PID_Output > 0){
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <SetDutyPID+0x150>)
 8000dd0:	edd3 7a00 	vldr	s15, [r3]
 8000dd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	dd29      	ble.n	8000e32 <SetDutyPID+0xee>
		// SATURATION
		if (PID_Output > 1000){
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <SetDutyPID+0x150>)
 8000de0:	edd3 7a00 	vldr	s15, [r3]
 8000de4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000e98 <SetDutyPID+0x154>
 8000de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df0:	dd02      	ble.n	8000df8 <SetDutyPID+0xb4>
			PID_Output = 1000;
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <SetDutyPID+0x150>)
 8000df4:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <SetDutyPID+0x158>)
 8000df6:	601a      	str	r2, [r3, #0]
		}

		duty_A = (uint16_t)(abs(PID_Output));
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <SetDutyPID+0x150>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e02:	ee17 3a90 	vmov	r3, s15
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	bfb8      	it	lt
 8000e0a:	425b      	neglt	r3, r3
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <SetDutyPID+0x15c>)
 8000e10:	801a      	strh	r2, [r3, #0]
		duty_B = 0;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <SetDutyPID+0x160>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <SetDutyPID+0x15c>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <SetDutyPID+0x164>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <SetDutyPID+0x160>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <SetDutyPID+0x164>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
	}


}
 8000e30:	e028      	b.n	8000e84 <SetDutyPID+0x140>
		if (PID_Output < -1000){
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <SetDutyPID+0x150>)
 8000e34:	edd3 7a00 	vldr	s15, [r3]
 8000e38:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000eac <SetDutyPID+0x168>
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	d502      	bpl.n	8000e4c <SetDutyPID+0x108>
			PID_Output = -1000;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <SetDutyPID+0x150>)
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <SetDutyPID+0x16c>)
 8000e4a:	601a      	str	r2, [r3, #0]
		duty_A = 0;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <SetDutyPID+0x15c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
		duty_B = (uint16_t)(abs(PID_Output));;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <SetDutyPID+0x150>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e5c:	ee17 3a90 	vmov	r3, s15
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bfb8      	it	lt
 8000e64:	425b      	neglt	r3, r3
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SetDutyPID+0x160>)
 8000e6a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <SetDutyPID+0x15c>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <SetDutyPID+0x164>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <SetDutyPID+0x160>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <SetDutyPID+0x164>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e84:	bf00      	nop
 8000e86:	3724      	adds	r7, #36	; 0x24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	2000032c 	.word	0x2000032c
 8000e94:	20000328 	.word	0x20000328
 8000e98:	447a0000 	.word	0x447a0000
 8000e9c:	447a0000 	.word	0x447a0000
 8000ea0:	200002fc 	.word	0x200002fc
 8000ea4:	200002fe 	.word	0x200002fe
 8000ea8:	20000594 	.word	0x20000594
 8000eac:	c47a0000 	.word	0xc47a0000
 8000eb0:	c47a0000 	.word	0xc47a0000

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	// PID CONTROLER INIT
	PID.Kp = PID_KP;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <main+0xbc>)
 8000ebc:	4a2d      	ldr	r2, [pc, #180]	; (8000f74 <main+0xc0>)
 8000ebe:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_KI;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <main+0xbc>)
 8000ec2:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <main+0xc4>)
 8000ec4:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_KD;
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <main+0xbc>)
 8000ec8:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <main+0xc8>)
 8000eca:	621a      	str	r2, [r3, #32]

	arm_pid_init_f32(&PID, 1);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4828      	ldr	r0, [pc, #160]	; (8000f70 <main+0xbc>)
 8000ed0:	f006 fc3c 	bl	800774c <arm_pid_init_f32>

	// FIR INIT
	arm_fir_init_f32(&ADC_Fir, FIR1_NumTaps, fir_b_1, fir_x_1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <main+0xcc>)
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <main+0xd0>)
 8000edc:	213a      	movs	r1, #58	; 0x3a
 8000ede:	482a      	ldr	r0, [pc, #168]	; (8000f88 <main+0xd4>)
 8000ee0:	f006 fc52 	bl	8007788 <arm_fir_init_f32>
	arm_fir_init_f32(&Speed_Fir, FIR2_NumTaps, fir_b_2, fir_x_2, 1);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <main+0xd8>)
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <main+0xdc>)
 8000eec:	2106      	movs	r1, #6
 8000eee:	4829      	ldr	r0, [pc, #164]	; (8000f94 <main+0xe0>)
 8000ef0:	f006 fc4a 	bl	8007788 <arm_fir_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f001 f823 	bl	8001f3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f860 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f7ff fe02 	bl	8000b04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f00:	f000 feee 	bl	8001ce0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f04:	f000 ff68 	bl	8001dd8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000f08:	f000 fc8c 	bl	8001824 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000f0c:	f000 fc30 	bl	8001770 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000f10:	f000 fd5a 	bl	80019c8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000f14:	f000 fd90 	bl	8001a38 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000f18:	f7ff fd5a 	bl	80009d0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000f1c:	f000 fd04 	bl	8001928 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // PWM CONFIG // CounterPeriod = 1000
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f20:	2100      	movs	r1, #0
 8000f22:	481d      	ldr	r0, [pc, #116]	; (8000f98 <main+0xe4>)
 8000f24:	f003 fc50 	bl	80047c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f28:	2104      	movs	r1, #4
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <main+0xe4>)
 8000f2c:	f003 fc4c 	bl	80047c8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <main+0xe8>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <main+0xe4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <main+0xec>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <main+0xe4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38

  // UART CONFIG
  HAL_UART_Receive_IT(&huart3, user_val, 4);
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4916      	ldr	r1, [pc, #88]	; (8000fa4 <main+0xf0>)
 8000f4c:	4816      	ldr	r0, [pc, #88]	; (8000fa8 <main+0xf4>)
 8000f4e:	f004 feda 	bl	8005d06 <HAL_UART_Receive_IT>

  // ENCODER CONFIG
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f52:	213c      	movs	r1, #60	; 0x3c
 8000f54:	4815      	ldr	r0, [pc, #84]	; (8000fac <main+0xf8>)
 8000f56:	f003 fdd7 	bl	8004b08 <HAL_TIM_Encoder_Start>

  // MAIN TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim6);
 8000f5a:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <main+0xfc>)
 8000f5c:	f003 fb5a 	bl	8004614 <HAL_TIM_Base_Start_IT>

  // DATA TRANSMIT TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim7);
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <main+0x100>)
 8000f62:	f003 fb57 	bl	8004614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <main+0x104>)
 8000f68:	f003 fb54 	bl	8004614 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0xb8>
 8000f6e:	bf00      	nop
 8000f70:	20000490 	.word	0x20000490
 8000f74:	3f99999a 	.word	0x3f99999a
 8000f78:	3dcccccd 	.word	0x3dcccccd
 8000f7c:	3e4ccccd 	.word	0x3e4ccccd
 8000f80:	20000330 	.word	0x20000330
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000484 	.word	0x20000484
 8000f8c:	20000418 	.word	0x20000418
 8000f90:	200000e8 	.word	0x200000e8
 8000f94:	200004b8 	.word	0x200004b8
 8000f98:	20000594 	.word	0x20000594
 8000f9c:	200002fc 	.word	0x200002fc
 8000fa0:	200002fe 	.word	0x200002fe
 8000fa4:	200004c4 	.word	0x200004c4
 8000fa8:	200006c4 	.word	0x200006c4
 8000fac:	2000062c 	.word	0x2000062c
 8000fb0:	200005e0 	.word	0x200005e0
 8000fb4:	20000678 	.word	0x20000678
 8000fb8:	20000548 	.word	0x20000548

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0b8      	sub	sp, #224	; 0xe0
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fc6:	2234      	movs	r2, #52	; 0x34
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f006 feac 	bl	8007d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	2290      	movs	r2, #144	; 0x90
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 fe9d 	bl	8007d28 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fee:	f002 f981 	bl	80032f4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <SystemClock_Config+0x128>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a3b      	ldr	r2, [pc, #236]	; (80010e4 <SystemClock_Config+0x128>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <SystemClock_Config+0x128>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <SystemClock_Config+0x12c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001012:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <SystemClock_Config+0x12c>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <SystemClock_Config+0x12c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001026:	2301      	movs	r3, #1
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800102c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001042:	2304      	movs	r3, #4
 8001044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001054:	2304      	movs	r3, #4
 8001056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001064:	4618      	mov	r0, r3
 8001066:	f002 f9a5 	bl	80033b4 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001070:	f000 fa0c 	bl	800148c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001074:	f002 f94e 	bl	8003314 <HAL_PWREx_EnableOverDrive>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800107e:	f000 fa05 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010a6:	2103      	movs	r1, #3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fc31 	bl	8003910 <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80010b4:	f000 f9ea 	bl	800148c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <SystemClock_Config+0x130>)
 80010ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fe22 	bl	8003d14 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80010d6:	f000 f9d9 	bl	800148c <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	37e0      	adds	r7, #224	; 0xe0
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000
 80010ec:	00200100 	.word	0x00200100

080010f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// UART CONFIG
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a42      	ldr	r2, [pc, #264]	; (8001204 <HAL_UART_RxCpltCallback+0x114>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d178      	bne.n	80011f2 <HAL_UART_RxCpltCallback+0x102>

		// STATE READ
		if(strncmp(user_val, uart_state, 4) == 0){
 8001100:	2204      	movs	r2, #4
 8001102:	4941      	ldr	r1, [pc, #260]	; (8001208 <HAL_UART_RxCpltCallback+0x118>)
 8001104:	4841      	ldr	r0, [pc, #260]	; (800120c <HAL_UART_RxCpltCallback+0x11c>)
 8001106:	f007 fa79 	bl	80085fc <strncmp>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <HAL_UART_RxCpltCallback+0x28>
			state = 0;
 8001110:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_UART_RxCpltCallback+0x120>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e06c      	b.n	80011f2 <HAL_UART_RxCpltCallback+0x102>
		}

		else if(strncmp(user_val, adc_state, 4) == 0){
 8001118:	2204      	movs	r2, #4
 800111a:	493e      	ldr	r1, [pc, #248]	; (8001214 <HAL_UART_RxCpltCallback+0x124>)
 800111c:	483b      	ldr	r0, [pc, #236]	; (800120c <HAL_UART_RxCpltCallback+0x11c>)
 800111e:	f007 fa6d 	bl	80085fc <strncmp>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <HAL_UART_RxCpltCallback+0x40>
			state = 1;
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_UART_RxCpltCallback+0x120>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e060      	b.n	80011f2 <HAL_UART_RxCpltCallback+0x102>
		}

		else{
			// USER SPEED READ
			if(state == 0){
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_UART_RxCpltCallback+0x120>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d155      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0xf6>
				user_speed = (float32_t)(atof(user_val));
 800113a:	4834      	ldr	r0, [pc, #208]	; (800120c <HAL_UART_RxCpltCallback+0x11c>)
 800113c:	f006 fdc6 	bl	8007ccc <atof>
 8001140:	eeb0 7b40 	vmov.f64	d7, d0
 8001144:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001148:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_UART_RxCpltCallback+0x128>)
 800114a:	edc3 7a00 	vstr	s15, [r3]
				if(user_speed >= min_speed && user_speed <= max_speed){
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <HAL_UART_RxCpltCallback+0x128>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	db37      	blt.n	80011d2 <HAL_UART_RxCpltCallback+0xe2>
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_UART_RxCpltCallback+0x128>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800121c <HAL_UART_RxCpltCallback+0x12c>
 800116c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d82d      	bhi.n	80011d2 <HAL_UART_RxCpltCallback+0xe2>
					flag = 1;
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_UART_RxCpltCallback+0x130>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
					if(user_val[3] == 'R' && flag == 1){
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_UART_RxCpltCallback+0x11c>)
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	2b52      	cmp	r3, #82	; 0x52
 8001182:	d109      	bne.n	8001198 <HAL_UART_RxCpltCallback+0xa8>
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_UART_RxCpltCallback+0x130>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d104      	bne.n	8001198 <HAL_UART_RxCpltCallback+0xa8>
						reference_speed = user_speed;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_UART_RxCpltCallback+0x128>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a24      	ldr	r2, [pc, #144]	; (8001224 <HAL_UART_RxCpltCallback+0x134>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01b      	b.n	80011d0 <HAL_UART_RxCpltCallback+0xe0>
					}
					else if(user_val[3] == 'L' && flag == 1){
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_UART_RxCpltCallback+0x11c>)
 800119a:	78db      	ldrb	r3, [r3, #3]
 800119c:	2b4c      	cmp	r3, #76	; 0x4c
 800119e:	d10d      	bne.n	80011bc <HAL_UART_RxCpltCallback+0xcc>
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <HAL_UART_RxCpltCallback+0x130>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <HAL_UART_RxCpltCallback+0xcc>
						reference_speed = -(user_speed);
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_UART_RxCpltCallback+0x128>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eef1 7a67 	vneg.f32	s15, s15
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_UART_RxCpltCallback+0x134>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]
 80011ba:	e009      	b.n	80011d0 <HAL_UART_RxCpltCallback+0xe0>
					}
					else{
						flag = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_UART_RxCpltCallback+0x130>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart3, error_1, strlen(error_1), 100);
 80011c2:	2364      	movs	r3, #100	; 0x64
 80011c4:	220c      	movs	r2, #12
 80011c6:	4918      	ldr	r1, [pc, #96]	; (8001228 <HAL_UART_RxCpltCallback+0x138>)
 80011c8:	480e      	ldr	r0, [pc, #56]	; (8001204 <HAL_UART_RxCpltCallback+0x114>)
 80011ca:	f004 fd09 	bl	8005be0 <HAL_UART_Transmit>
					if(user_val[3] == 'R' && flag == 1){
 80011ce:	e010      	b.n	80011f2 <HAL_UART_RxCpltCallback+0x102>
 80011d0:	e00f      	b.n	80011f2 <HAL_UART_RxCpltCallback+0x102>
					}
				}
				else{
					flag = 0;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_UART_RxCpltCallback+0x130>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, error_2, strlen(error_2), 100);
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	220e      	movs	r2, #14
 80011dc:	4913      	ldr	r1, [pc, #76]	; (800122c <HAL_UART_RxCpltCallback+0x13c>)
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <HAL_UART_RxCpltCallback+0x114>)
 80011e0:	f004 fcfe 	bl	8005be0 <HAL_UART_Transmit>
 80011e4:	e005      	b.n	80011f2 <HAL_UART_RxCpltCallback+0x102>
				}
			}
			else{
				HAL_UART_Transmit(&huart3, error_3, strlen(error_3), 100);
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	220c      	movs	r2, #12
 80011ea:	4911      	ldr	r1, [pc, #68]	; (8001230 <HAL_UART_RxCpltCallback+0x140>)
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_UART_RxCpltCallback+0x114>)
 80011ee:	f004 fcf7 	bl	8005be0 <HAL_UART_Transmit>
			}
		}
	}

	HAL_UART_Receive_IT(&huart3, user_val, 4);
 80011f2:	2204      	movs	r2, #4
 80011f4:	4905      	ldr	r1, [pc, #20]	; (800120c <HAL_UART_RxCpltCallback+0x11c>)
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <HAL_UART_RxCpltCallback+0x114>)
 80011f8:	f004 fd85 	bl	8005d06 <HAL_UART_Receive_IT>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200006c4 	.word	0x200006c4
 8001208:	0800bf44 	.word	0x0800bf44
 800120c:	200004c4 	.word	0x200004c4
 8001210:	20000305 	.word	0x20000305
 8001214:	0800bf4c 	.word	0x0800bf4c
 8001218:	20000300 	.word	0x20000300
 800121c:	43820000 	.word	0x43820000
 8001220:	20000304 	.word	0x20000304
 8001224:	20000320 	.word	0x20000320
 8001228:	0800bf14 	.word	0x0800bf14
 800122c:	0800bf24 	.word	0x0800bf24
 8001230:	0800bf34 	.word	0x0800bf34

08001234 <HAL_ADC_ConvCpltCallback>:

// ADC CONFIG
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_ADC_ConvCpltCallback+0xc8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d156      	bne.n	80012f2 <HAL_ADC_ConvCpltCallback+0xbe>
		ADC_measurement = HAL_ADC_GetValue(&hadc1);
 8001244:	482d      	ldr	r0, [pc, #180]	; (80012fc <HAL_ADC_ConvCpltCallback+0xc8>)
 8001246:	f001 f927 	bl	8002498 <HAL_ADC_GetValue>
 800124a:	4603      	mov	r3, r0
 800124c:	4a2c      	ldr	r2, [pc, #176]	; (8001300 <HAL_ADC_ConvCpltCallback+0xcc>)
 800124e:	6013      	str	r3, [r2, #0]
		ADC_voltage = ((float32_t)ADC_measurement / (float32_t)ADC_REG_MAX) * ADC_VOLTAGE_MAX;
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800125c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001304 <HAL_ADC_ConvCpltCallback+0xd0>
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001268:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001308 <HAL_ADC_ConvCpltCallback+0xd4>
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001272:	edc3 7a00 	vstr	s15, [r3]

		// FILTRATION
		arm_fir_f32(&ADC_Fir, &ADC_voltage, &Filtered_voltage, 1);
 8001276:	2301      	movs	r3, #1
 8001278:	4a25      	ldr	r2, [pc, #148]	; (8001310 <HAL_ADC_ConvCpltCallback+0xdc>)
 800127a:	4924      	ldr	r1, [pc, #144]	; (800130c <HAL_ADC_ConvCpltCallback+0xd8>)
 800127c:	4825      	ldr	r0, [pc, #148]	; (8001314 <HAL_ADC_ConvCpltCallback+0xe0>)
 800127e:	f006 fa91 	bl	80077a4 <arm_fir_f32>


		if(state == 1){
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d132      	bne.n	80012f2 <HAL_ADC_ConvCpltCallback+0xbe>
			reference_speed = (uint16_t)((ADC_voltage * max_speed)/ADC_VOLTAGE_MAX);
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_ADC_ConvCpltCallback+0xd8>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800131c <HAL_ADC_ConvCpltCallback+0xe8>
 8001296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800129a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001308 <HAL_ADC_ConvCpltCallback+0xd4>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a6:	ee17 3a90 	vmov	r3, s15
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_ADC_ConvCpltCallback+0xec>)
 80012b6:	edc3 7a00 	vstr	s15, [r3]

			if(reference_speed < min_speed){
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_ADC_ConvCpltCallback+0xec>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80012c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d503      	bpl.n	80012d6 <HAL_ADC_ConvCpltCallback+0xa2>
				reference_speed = min_speed;
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_ADC_ConvCpltCallback+0xf0>)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_ADC_ConvCpltCallback+0xec>)
 80012d2:	601a      	str	r2, [r3, #0]
				reference_speed = max_speed;
			}
		}

	}
}
 80012d4:	e00d      	b.n	80012f2 <HAL_ADC_ConvCpltCallback+0xbe>
			else if(reference_speed > max_speed){
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_ADC_ConvCpltCallback+0xec>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800131c <HAL_ADC_ConvCpltCallback+0xe8>
 80012e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	dc00      	bgt.n	80012ec <HAL_ADC_ConvCpltCallback+0xb8>
}
 80012ea:	e002      	b.n	80012f2 <HAL_ADC_ConvCpltCallback+0xbe>
				reference_speed = max_speed;
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_ADC_ConvCpltCallback+0xf4>)
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_ADC_ConvCpltCallback+0xec>)
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000043c 	.word	0x2000043c
 8001300:	20000308 	.word	0x20000308
 8001304:	00000fff 	.word	0x00000fff
 8001308:	40533333 	.word	0x40533333
 800130c:	2000030c 	.word	0x2000030c
 8001310:	20000310 	.word	0x20000310
 8001314:	20000484 	.word	0x20000484
 8001318:	20000305 	.word	0x20000305
 800131c:	43820000 	.word	0x43820000
 8001320:	20000320 	.word	0x20000320
 8001324:	41f00000 	.word	0x41f00000
 8001328:	43820000 	.word	0x43820000

0800132c <HAL_TIM_PeriodElapsedCallback>:

// TIMER CONFIG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af04      	add	r7, sp, #16
 8001332:	6078      	str	r0, [r7, #4]
	// MAIN TIMER CONFIG
	if(htim -> Instance == TIM6)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a44      	ldr	r2, [pc, #272]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d123      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		HAL_ADC_Start_IT(&hadc1);
 800133e:	4844      	ldr	r0, [pc, #272]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001340:	f000 fec2 	bl	80020c8 <HAL_ADC_Start_IT>

		// SPEED CALCULATION
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 8001344:	4b43      	ldr	r3, [pc, #268]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800134c:	6013      	str	r3, [r2, #0]
		count = (int16_t)counter;
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001356:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001358:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
		SpeedCalculation(count);
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fcbe 	bl	8000ce8 <SpeedCalculation>

		// SPEED REGULATION
		SetDutyPID(&PID, reference_speed, speed_filtered);
 800136c:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	eef0 0a47 	vmov.f32	s1, s14
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	4839      	ldr	r0, [pc, #228]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001382:	f7ff fcdf 	bl	8000d44 <SetDutyPID>
	}

	// DATA TRANSMIT TIMER CONFIG
	if(htim -> Instance == TIM7 && state == 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a38      	ldr	r2, [pc, #224]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d129      	bne.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d124      	bne.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		length = sprintf(data_msg, " POM: %.3f  , REF: %.3f  , STER: %.3f \r\n", (float)speed_filtered,  (float)reference_speed, (float)PID_Output);
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013b0:	edd3 6a00 	vldr	s13, [r3]
 80013b4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80013b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80013bc:	ed8d 7b00 	vstr	d7, [sp]
 80013c0:	ec53 2b15 	vmov	r2, r3, d5
 80013c4:	492c      	ldr	r1, [pc, #176]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80013c6:	482d      	ldr	r0, [pc, #180]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80013c8:	f007 f8f8 	bl	80085bc <siprintf>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80013d0:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013dc:	4927      	ldr	r1, [pc, #156]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80013de:	4829      	ldr	r0, [pc, #164]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80013e0:	f004 fbfe 	bl	8005be0 <HAL_UART_Transmit>
	}

	if(htim -> Instance == TIM4 && state == 1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d129      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x116>
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d124      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x116>
		{
			length = sprintf(data_msg, " POM: %.3f  , REF: %.3f  , STER: %.3f \r\n", (float)speed_filtered,  (float)reference_speed, (float)PID_Output);
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800140e:	edd3 6a00 	vldr	s13, [r3]
 8001412:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001416:	ed8d 6b02 	vstr	d6, [sp, #8]
 800141a:	ed8d 7b00 	vstr	d7, [sp]
 800141e:	ec53 2b15 	vmov	r2, r3, d5
 8001422:	4915      	ldr	r1, [pc, #84]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001424:	4815      	ldr	r0, [pc, #84]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001426:	f007 f8c9 	bl	80085bc <siprintf>
 800142a:	4603      	mov	r3, r0
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800142e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29a      	uxth	r2, r3
 8001436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143a:	4910      	ldr	r1, [pc, #64]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800143e:	f004 fbcf 	bl	8005be0 <HAL_UART_Transmit>
		}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40001000 	.word	0x40001000
 8001450:	2000043c 	.word	0x2000043c
 8001454:	2000062c 	.word	0x2000062c
 8001458:	20000314 	.word	0x20000314
 800145c:	20000318 	.word	0x20000318
 8001460:	20000320 	.word	0x20000320
 8001464:	20000324 	.word	0x20000324
 8001468:	20000490 	.word	0x20000490
 800146c:	40001400 	.word	0x40001400
 8001470:	20000305 	.word	0x20000305
 8001474:	20000328 	.word	0x20000328
 8001478:	0800bee8 	.word	0x0800bee8
 800147c:	200004c8 	.word	0x200004c8
 8001480:	200004b4 	.word	0x200004b4
 8001484:	200006c4 	.word	0x200006c4
 8001488:	40000800 	.word	0x40000800

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>
	...

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x44>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x44>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x44>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x44>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_MspInit+0x44>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_MspInit+0x44>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 fd44 	bl	8001fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <ADC_IRQHandler+0x10>)
 800153a:	f000 fe9d 	bl	8002278 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000043c 	.word	0x2000043c

08001548 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800154e:	f003 fb69 	bl	8004c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000062c 	.word	0x2000062c

0800155c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM3_IRQHandler+0x10>)
 8001562:	f003 fb5f 	bl	8004c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000594 	.word	0x20000594

08001570 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <TIM4_IRQHandler+0x10>)
 8001576:	f003 fb55 	bl	8004c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000548 	.word	0x20000548

08001584 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <USART3_IRQHandler+0x10>)
 800158a:	f004 fc0b 	bl	8005da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200006c4 	.word	0x200006c4

08001598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM6_DAC_IRQHandler+0x10>)
 800159e:	f003 fb41 	bl	8004c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200005e0 	.word	0x200005e0

080015ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <TIM7_IRQHandler+0x10>)
 80015b2:	f003 fb37 	bl	8004c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000678 	.word	0x20000678

080015c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
	return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015da:	f006 fb7b 	bl	8007cd4 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
	return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:

void _exit (int status)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001602:	e7fe      	b.n	8001602 <_exit+0x12>

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
	}

return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e009      	b.n	8001664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf1      	blt.n	8001650 <_write+0x12>
	}
	return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:

int _close(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
	return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_isatty>:

int _isatty(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f006 fae0 	bl	8007cd4 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20080000 	.word	0x20080000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000430 	.word	0x20000430
 8001748:	20000b60 	.word	0x20000b60

0800174c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f006 fad2 	bl	8007d28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <MX_TIM1_Init+0xac>)
 8001790:	4a23      	ldr	r2, [pc, #140]	; (8001820 <MX_TIM1_Init+0xb0>)
 8001792:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <MX_TIM1_Init+0xac>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <MX_TIM1_Init+0xac>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_TIM1_Init+0xac>)
 80017a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM1_Init+0xac>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_TIM1_Init+0xac>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_TIM1_Init+0xac>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017ba:	2303      	movs	r3, #3
 80017bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017c2:	2301      	movs	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80017ca:	230f      	movs	r3, #15
 80017cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017d2:	2301      	movs	r3, #1
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80017da:	230f      	movs	r3, #15
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4619      	mov	r1, r3
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_TIM1_Init+0xac>)
 80017e6:	f003 f8e9 	bl	80049bc <HAL_TIM_Encoder_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80017f0:	f7ff fe4c 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_TIM1_Init+0xac>)
 8001806:	f004 f8f1 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001810:	f7ff fe3c 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	; 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000062c 	.word	0x2000062c
 8001820:	40010000 	.word	0x40010000

08001824 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <MX_TIM3_Init+0xfc>)
 8001858:	4a32      	ldr	r2, [pc, #200]	; (8001924 <MX_TIM3_Init+0x100>)
 800185a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <MX_TIM3_Init+0xfc>)
 800185e:	2203      	movs	r2, #3
 8001860:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <MX_TIM3_Init+0xfc>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <MX_TIM3_Init+0xfc>)
 800186a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800186e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <MX_TIM3_Init+0xfc>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <MX_TIM3_Init+0xfc>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800187c:	4828      	ldr	r0, [pc, #160]	; (8001920 <MX_TIM3_Init+0xfc>)
 800187e:	f002 fe71 	bl	8004564 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001888:	f7ff fe00 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001896:	4619      	mov	r1, r3
 8001898:	4821      	ldr	r0, [pc, #132]	; (8001920 <MX_TIM3_Init+0xfc>)
 800189a:	f003 fbf7 	bl	800508c <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018a4:	f7ff fdf2 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018a8:	481d      	ldr	r0, [pc, #116]	; (8001920 <MX_TIM3_Init+0xfc>)
 80018aa:	f002 ff2b 	bl	8004704 <HAL_TIM_PWM_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018b4:	f7ff fdea 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <MX_TIM3_Init+0xfc>)
 80018c8:	f004 f890 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018d2:	f7ff fddb 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d6:	2360      	movs	r3, #96	; 0x60
 80018d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <MX_TIM3_Init+0xfc>)
 80018ee:	f003 fab9 	bl	8004e64 <HAL_TIM_PWM_ConfigChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018f8:	f7ff fdc8 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018fc:	463b      	mov	r3, r7
 80018fe:	2204      	movs	r2, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM3_Init+0xfc>)
 8001904:	f003 faae 	bl	8004e64 <HAL_TIM_PWM_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800190e:	f7ff fdbd 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001912:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM3_Init+0xfc>)
 8001914:	f000 f98e 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001918:	bf00      	nop
 800191a:	3738      	adds	r7, #56	; 0x38
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000594 	.word	0x20000594
 8001924:	40000400 	.word	0x40000400

08001928 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001948:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <MX_TIM4_Init+0x9c>)
 800194a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 959;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_TIM4_Init+0x98>)
 800194e:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_TIM4_Init+0x98>)
 800195c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_TIM4_Init+0x98>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <MX_TIM4_Init+0x98>)
 8001970:	f002 fdf8 	bl	8004564 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800197a:	f7ff fd87 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_TIM4_Init+0x98>)
 800198c:	f003 fb7e 	bl	800508c <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001996:	f7ff fd79 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_TIM4_Init+0x98>)
 80019a8:	f004 f820 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80019b2:	f7ff fd6b 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000548 	.word	0x20000548
 80019c4:	40000800 	.word	0x40000800

080019c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_TIM6_Init+0x68>)
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <MX_TIM6_Init+0x6c>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_TIM6_Init+0x68>)
 80019e0:	f240 32bf 	movw	r2, #959	; 0x3bf
 80019e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_TIM6_Init+0x68>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <MX_TIM6_Init+0x68>)
 80019ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80019f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_TIM6_Init+0x68>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019fa:	480d      	ldr	r0, [pc, #52]	; (8001a30 <MX_TIM6_Init+0x68>)
 80019fc:	f002 fdb2 	bl	8004564 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001a06:	f7ff fd41 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <MX_TIM6_Init+0x68>)
 8001a18:	f003 ffe8 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001a22:	f7ff fd33 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200005e0 	.word	0x200005e0
 8001a34:	40001000 	.word	0x40001000

08001a38 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_TIM7_Init+0x68>)
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <MX_TIM7_Init+0x6c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9599;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_TIM7_Init+0x68>)
 8001a50:	f242 527f 	movw	r2, #9599	; 0x257f
 8001a54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_TIM7_Init+0x68>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_TIM7_Init+0x68>)
 8001a5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_TIM7_Init+0x68>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM7_Init+0x68>)
 8001a6c:	f002 fd7a 	bl	8004564 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001a76:	f7ff fd09 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM7_Init+0x68>)
 8001a88:	f003 ffb0 	bl	80059ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001a92:	f7ff fcfb 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000678 	.word	0x20000678
 8001aa4:	40001400 	.word	0x40001400

08001aa8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d130      	bne.n	8001b2c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x90>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x90>)
 8001ae8:	f043 0310 	orr.w	r3, r3, #16
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x90>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001afa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4809      	ldr	r0, [pc, #36]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x94>)
 8001b18:	f001 f8de 	bl	8002cd8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2019      	movs	r0, #25
 8001b22:	f001 f810 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b26:	2019      	movs	r0, #25
 8001b28:	f001 f829 	bl	8002b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a34      	ldr	r2, [pc, #208]	; (8001c20 <HAL_TIM_Base_MspInit+0xe0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d114      	bne.n	8001b7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	201d      	movs	r0, #29
 8001b70:	f000 ffe9 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b74:	201d      	movs	r0, #29
 8001b76:	f001 f802 	bl	8002b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001b7a:	e04c      	b.n	8001c16 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <HAL_TIM_Base_MspInit+0xe8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d114      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b86:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	201e      	movs	r0, #30
 8001ba4:	f000 ffcf 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ba8:	201e      	movs	r0, #30
 8001baa:	f000 ffe8 	bl	8002b7e <HAL_NVIC_EnableIRQ>
}
 8001bae:	e032      	b.n	8001c16 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM6)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_TIM_Base_MspInit+0xec>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d114      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a19      	ldr	r2, [pc, #100]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001bc0:	f043 0310 	orr.w	r3, r3, #16
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2036      	movs	r0, #54	; 0x36
 8001bd8:	f000 ffb5 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bdc:	2036      	movs	r0, #54	; 0x36
 8001bde:	f000 ffce 	bl	8002b7e <HAL_NVIC_EnableIRQ>
}
 8001be2:	e018      	b.n	8001c16 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_TIM_Base_MspInit+0xf0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d113      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0xe4>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2037      	movs	r0, #55	; 0x37
 8001c0c:	f000 ff9b 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c10:	2037      	movs	r0, #55	; 0x37
 8001c12:	f000 ffb4 	bl	8002b7e <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40001000 	.word	0x40001000
 8001c30:	40001400 	.word	0x40001400

08001c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_TIM_MspPostInit+0x9c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d137      	bne.n	8001cc6 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_TIM_MspPostInit+0xa0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_TIM_MspPostInit+0xa0>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_TIM_MspPostInit+0xa0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_TIM_MspPostInit+0xa0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_TIM_MspPostInit+0xa0>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_TIM_MspPostInit+0xa0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c86:	2340      	movs	r3, #64	; 0x40
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c96:	2302      	movs	r3, #2
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <HAL_TIM_MspPostInit+0xa4>)
 8001ca2:	f001 f819 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4806      	ldr	r0, [pc, #24]	; (8001cdc <HAL_TIM_MspPostInit+0xa8>)
 8001cc2:	f001 f809 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020800 	.word	0x40020800

08001ce0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <MX_USART3_UART_Init+0x5c>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001cec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USART3_UART_Init+0x58>)
 8001d24:	f003 ff0e 	bl	8005b44 <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d2e:	f7ff fbad 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200006c4 	.word	0x200006c4
 8001d3c:	40004800 	.word	0x40004800

08001d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <HAL_UART_MspInit+0x8c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d130      	bne.n	8001dc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_UART_MspInit+0x90>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_UART_MspInit+0x90>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_UART_MspInit+0x90>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_UART_MspInit+0x90>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <HAL_UART_MspInit+0x90>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_UART_MspInit+0x90>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001da4:	2307      	movs	r3, #7
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <HAL_UART_MspInit+0x94>)
 8001db0:	f000 ff92 	bl	8002cd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2027      	movs	r0, #39	; 0x27
 8001dba:	f000 fec4 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dbe:	2027      	movs	r0, #39	; 0x27
 8001dc0:	f000 fedd 	bl	8002b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020c00 	.word	0x40020c00

08001dd8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001de2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de6:	2206      	movs	r2, #6
 8001de8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1c:	f001 f921 	bl	8003062 <HAL_PCD_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e26:	f7ff fb31 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000748 	.word	0x20000748

08001e34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e54:	d141      	bne.n	8001eda <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e80:	230a      	movs	r3, #10
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <HAL_PCD_MspInit+0xb4>)
 8001e8c:	f000 ff24 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <HAL_PCD_MspInit+0xb4>)
 8001ea6:	f000 ff17 	bl	8002cd8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb4:	6353      	str	r3, [r2, #52]	; 0x34
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_PCD_MspInit+0xb0>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ef2:	490e      	ldr	r1, [pc, #56]	; (8001f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f08:	4c0b      	ldr	r4, [pc, #44]	; (8001f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f16:	f7ff fc19 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f005 fee1 	bl	8007ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1e:	f7fe ffc9 	bl	8000eb4 <main>
  bx  lr    
 8001f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001f30:	0800c42c 	.word	0x0800c42c
  ldr r2, =_sbss
 8001f34:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001f38:	20000b60 	.word	0x20000b60

08001f3c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <CAN1_RX0_IRQHandler>

08001f3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f000 fdf4 	bl	8002b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 f805 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4e:	f7ff faa3 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x54>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x58>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fe0f 	bl	8002b9a <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00e      	b.n	8001fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d80a      	bhi.n	8001fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f000 fdd7 	bl	8002b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <HAL_InitTick+0x5c>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000100 	.word	0x20000100
 8001fb0:	20000108 	.word	0x20000108
 8001fb4:	20000104 	.word	0x20000104

08001fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000108 	.word	0x20000108
 8001fdc:	20000b4c 	.word	0x20000b4c

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000b4c 	.word	0x20000b4c

08001ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d005      	beq.n	800201e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_Delay+0x44>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201e:	bf00      	nop
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d8f7      	bhi.n	8002020 <HAL_Delay+0x28>
  {
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000108 	.word	0x20000108

08002040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e031      	b.n	80020ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fd08 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_ADC_Init+0x84>)
 8002084:	4013      	ands	r3, r2
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fb7a 	bl	8002788 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
 80020aa:	e001      	b.n	80020b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	ffffeefd 	.word	0xffffeefd

080020c8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Start_IT+0x1a>
 80020de:	2302      	movs	r3, #2
 80020e0:	e0b5      	b.n	800224e <HAL_ADC_Start_IT+0x186>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d018      	beq.n	800212a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002108:	4b54      	ldr	r3, [pc, #336]	; (800225c <HAL_ADC_Start_IT+0x194>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_ADC_Start_IT+0x198>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0c9a      	lsrs	r2, r3, #18
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800211c:	e002      	b.n	8002124 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3b01      	subs	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f9      	bne.n	800211e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d17d      	bne.n	8002234 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213c:	4b49      	ldr	r3, [pc, #292]	; (8002264 <HAL_ADC_Start_IT+0x19c>)
 800213e:	4013      	ands	r3, r2
 8002140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	d106      	bne.n	8002182 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f023 0206 	bic.w	r2, r3, #6
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
 8002180:	e002      	b.n	8002188 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002198:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_ADC_Start_IT+0x1a0>)
 80021a6:	430b      	orrs	r3, r1
 80021a8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_ADC_Start_IT+0x1a4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d143      	bne.n	800224c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	e03a      	b.n	800224c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <HAL_ADC_Start_IT+0x1a8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d10e      	bne.n	80021fe <HAL_ADC_Start_IT+0x136>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021fc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_ADC_Start_IT+0x1a4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d120      	bne.n	800224c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_ADC_Start_IT+0x1ac>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d11b      	bne.n	800224c <HAL_ADC_Start_IT+0x184>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d114      	bne.n	800224c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	e00b      	b.n	800224c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000100 	.word	0x20000100
 8002260:	431bde83 	.word	0x431bde83
 8002264:	fffff8fe 	.word	0xfffff8fe
 8002268:	04000020 	.word	0x04000020
 800226c:	40012300 	.word	0x40012300
 8002270:	40012000 	.word	0x40012000
 8002274:	40012200 	.word	0x40012200

08002278 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d049      	beq.n	8002342 <HAL_ADC_IRQHandler+0xca>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d046      	beq.n	8002342 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d12b      	bne.n	8002332 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d127      	bne.n	8002332 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d119      	bne.n	8002332 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0220 	bic.w	r2, r2, #32
 800230c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe ff7e 	bl	8001234 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0212 	mvn.w	r2, #18
 8002340:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d057      	beq.n	8002408 <HAL_ADC_IRQHandler+0x190>
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d054      	beq.n	8002408 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d139      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800239c:	2b00      	cmp	r3, #0
 800239e:	d12b      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d124      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11d      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d119      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fabf 	bl	800297c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 020c 	mvn.w	r2, #12
 8002406:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d017      	beq.n	800244e <HAL_ADC_IRQHandler+0x1d6>
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d014      	beq.n	800244e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10d      	bne.n	800244e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f837 	bl	80024b2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0201 	mvn.w	r2, #1
 800244c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_ADC_IRQHandler+0x218>
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f043 0202 	orr.w	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f06f 0220 	mvn.w	r2, #32
 800247e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f820 	bl	80024c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0220 	mvn.w	r2, #32
 800248e:	601a      	str	r2, [r3, #0]
  }
}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1c>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e136      	b.n	8002766 <HAL_ADC_ConfigChannel+0x28a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b09      	cmp	r3, #9
 8002506:	d93a      	bls.n	800257e <HAL_ADC_ConfigChannel+0xa2>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002510:	d035      	beq.n	800257e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68d9      	ldr	r1, [r3, #12]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	3b1e      	subs	r3, #30
 8002528:	2207      	movs	r2, #7
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a8d      	ldr	r2, [pc, #564]	; (8002774 <HAL_ADC_ConfigChannel+0x298>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10a      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68d9      	ldr	r1, [r3, #12]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	061a      	lsls	r2, r3, #24
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002556:	e035      	b.n	80025c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68d9      	ldr	r1, [r3, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	4603      	mov	r3, r0
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4403      	add	r3, r0
 8002570:	3b1e      	subs	r3, #30
 8002572:	409a      	lsls	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257c:	e022      	b.n	80025c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6919      	ldr	r1, [r3, #16]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	2207      	movs	r2, #7
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43da      	mvns	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	400a      	ands	r2, r1
 80025a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6919      	ldr	r1, [r3, #16]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	4603      	mov	r3, r0
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4403      	add	r3, r0
 80025ba:	409a      	lsls	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d824      	bhi.n	8002616 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3b05      	subs	r3, #5
 80025de:	221f      	movs	r2, #31
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43da      	mvns	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	400a      	ands	r2, r1
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	3b05      	subs	r3, #5
 8002608:	fa00 f203 	lsl.w	r2, r0, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	635a      	str	r2, [r3, #52]	; 0x34
 8002614:	e04c      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d824      	bhi.n	8002668 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	3b23      	subs	r3, #35	; 0x23
 8002630:	221f      	movs	r2, #31
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	3b23      	subs	r3, #35	; 0x23
 800265a:	fa00 f203 	lsl.w	r2, r0, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
 8002666:	e023      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3b41      	subs	r3, #65	; 0x41
 800267a:	221f      	movs	r2, #31
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43da      	mvns	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	400a      	ands	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	4618      	mov	r0, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b41      	subs	r3, #65	; 0x41
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_ADC_ConfigChannel+0x29c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1f4>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a2c      	ldr	r2, [pc, #176]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	; (8002778 <HAL_ADC_ConfigChannel+0x29c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d10f      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x21e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b12      	cmp	r3, #18
 80026e0:	d10b      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a22      	ldr	r2, [pc, #136]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 80026f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_ADC_ConfigChannel+0x29c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d12b      	bne.n	800275c <HAL_ADC_ConfigChannel+0x280>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <HAL_ADC_ConfigChannel+0x298>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d003      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x23a>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b11      	cmp	r3, #17
 8002714:	d122      	bne.n	800275c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 800271c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002720:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <HAL_ADC_ConfigChannel+0x2a0>)
 8002728:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800272c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <HAL_ADC_ConfigChannel+0x298>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d111      	bne.n	800275c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_ADC_ConfigChannel+0x2a4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_ADC_ConfigChannel+0x2a8>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9a      	lsrs	r2, r3, #18
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800274e:	e002      	b.n	8002756 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b01      	subs	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f9      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	10000012 	.word	0x10000012
 8002778:	40012000 	.word	0x40012000
 800277c:	40012300 	.word	0x40012300
 8002780:	20000100 	.word	0x20000100
 8002784:	431bde83 	.word	0x431bde83

08002788 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002790:	4b78      	ldr	r3, [pc, #480]	; (8002974 <ADC_Init+0x1ec>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a77      	ldr	r2, [pc, #476]	; (8002974 <ADC_Init+0x1ec>)
 8002796:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800279a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <ADC_Init+0x1ec>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4973      	ldr	r1, [pc, #460]	; (8002974 <ADC_Init+0x1ec>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	4a58      	ldr	r2, [pc, #352]	; (8002978 <ADC_Init+0x1f0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800282a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	e00f      	b.n	8002882 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002880:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0202 	bic.w	r2, r2, #2
 8002890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	005a      	lsls	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	3b01      	subs	r3, #1
 80028dc:	035a      	lsls	r2, r3, #13
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e007      	b.n	80028f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	3b01      	subs	r3, #1
 8002914:	051a      	lsls	r2, r3, #20
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800292c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800293a:	025a      	lsls	r2, r3, #9
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	029a      	lsls	r2, r3, #10
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40012300 	.word	0x40012300
 8002978:	0f000001 	.word	0x0f000001

0800297c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <__NVIC_SetPriorityGrouping+0x40>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <__NVIC_SetPriorityGrouping+0x40>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00
 80029d4:	05fa0000 	.word	0x05fa0000

080029d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <__NVIC_GetPriorityGrouping+0x18>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f003 0307 	and.w	r3, r3, #7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	db0b      	blt.n	8002a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4907      	ldr	r1, [pc, #28]	; (8002a2c <__NVIC_EnableIRQ+0x38>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2001      	movs	r0, #1
 8002a16:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e100 	.word	0xe000e100

08002a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db0a      	blt.n	8002a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	490c      	ldr	r1, [pc, #48]	; (8002a7c <__NVIC_SetPriority+0x4c>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	440b      	add	r3, r1
 8002a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a58:	e00a      	b.n	8002a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4908      	ldr	r1, [pc, #32]	; (8002a80 <__NVIC_SetPriority+0x50>)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3b04      	subs	r3, #4
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	761a      	strb	r2, [r3, #24]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000e100 	.word	0xe000e100
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f1c3 0307 	rsb	r3, r3, #7
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	bf28      	it	cs
 8002aa2:	2304      	movcs	r3, #4
 8002aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d902      	bls.n	8002ab4 <NVIC_EncodePriority+0x30>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3b03      	subs	r3, #3
 8002ab2:	e000      	b.n	8002ab6 <NVIC_EncodePriority+0x32>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43d9      	mvns	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	4313      	orrs	r3, r2
         );
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	; 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002afc:	d301      	bcc.n	8002b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00f      	b.n	8002b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <SysTick_Config+0x40>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0a:	210f      	movs	r1, #15
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	f7ff ff8e 	bl	8002a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <SysTick_Config+0x40>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <SysTick_Config+0x40>)
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	e000e010 	.word	0xe000e010

08002b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff29 	bl	8002990 <__NVIC_SetPriorityGrouping>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b086      	sub	sp, #24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b58:	f7ff ff3e 	bl	80029d8 <__NVIC_GetPriorityGrouping>
 8002b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7ff ff8e 	bl	8002a84 <NVIC_EncodePriority>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff5d 	bl	8002a30 <__NVIC_SetPriority>
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff31 	bl	80029f4 <__NVIC_EnableIRQ>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ffa2 	bl	8002aec <SysTick_Config>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7ff fa0e 	bl	8001fe0 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d008      	beq.n	8002be4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e052      	b.n	8002c8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0216 	bic.w	r2, r2, #22
 8002bf2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <HAL_DMA_Abort+0x62>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0208 	bic.w	r2, r2, #8
 8002c22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c34:	e013      	b.n	8002c5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c36:	f7ff f9d3 	bl	8001fe0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d90c      	bls.n	8002c5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e015      	b.n	8002c8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1e4      	bne.n	8002c36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	223f      	movs	r2, #63	; 0x3f
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2280      	movs	r2, #128	; 0x80
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e00c      	b.n	8002cca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2205      	movs	r2, #5
 8002cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e175      	b.n	8002fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 8164 	bne.w	8002fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_GPIO_Init+0x56>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d130      	bne.n	8002d90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0201 	and.w	r2, r3, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d017      	beq.n	8002dcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d123      	bne.n	8002e20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	08da      	lsrs	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3208      	adds	r2, #8
 8002de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80be 	beq.w	8002fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a65      	ldr	r2, [pc, #404]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <HAL_GPIO_Init+0x324>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e7a:	4a61      	ldr	r2, [pc, #388]	; (8003000 <HAL_GPIO_Init+0x328>)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	; (8003004 <HAL_GPIO_Init+0x32c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d037      	beq.n	8002f16 <HAL_GPIO_Init+0x23e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <HAL_GPIO_Init+0x330>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d031      	beq.n	8002f12 <HAL_GPIO_Init+0x23a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a56      	ldr	r2, [pc, #344]	; (800300c <HAL_GPIO_Init+0x334>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02b      	beq.n	8002f0e <HAL_GPIO_Init+0x236>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a55      	ldr	r2, [pc, #340]	; (8003010 <HAL_GPIO_Init+0x338>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d025      	beq.n	8002f0a <HAL_GPIO_Init+0x232>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a54      	ldr	r2, [pc, #336]	; (8003014 <HAL_GPIO_Init+0x33c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <HAL_GPIO_Init+0x22e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a53      	ldr	r2, [pc, #332]	; (8003018 <HAL_GPIO_Init+0x340>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_Init+0x22a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_GPIO_Init+0x344>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x226>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_GPIO_Init+0x348>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x222>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_GPIO_Init+0x34c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x21e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4f      	ldr	r2, [pc, #316]	; (8003028 <HAL_GPIO_Init+0x350>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x21a>
 8002eee:	2309      	movs	r3, #9
 8002ef0:	e012      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002ef2:	230a      	movs	r3, #10
 8002ef4:	e010      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	e00e      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002efa:	2307      	movs	r3, #7
 8002efc:	e00c      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002efe:	2306      	movs	r3, #6
 8002f00:	e00a      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f02:	2305      	movs	r3, #5
 8002f04:	e008      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e004      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e002      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f16:	2300      	movs	r3, #0
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f002 0203 	and.w	r2, r2, #3
 8002f1e:	0092      	lsls	r2, r2, #2
 8002f20:	4093      	lsls	r3, r2
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f28:	4935      	ldr	r1, [pc, #212]	; (8003000 <HAL_GPIO_Init+0x328>)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_GPIO_Init+0x354>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5a:	4a34      	ldr	r2, [pc, #208]	; (800302c <HAL_GPIO_Init+0x354>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f60:	4b32      	ldr	r3, [pc, #200]	; (800302c <HAL_GPIO_Init+0x354>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f84:	4a29      	ldr	r2, [pc, #164]	; (800302c <HAL_GPIO_Init+0x354>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_GPIO_Init+0x354>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fae:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_GPIO_Init+0x354>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_GPIO_Init+0x354>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd8:	4a14      	ldr	r2, [pc, #80]	; (800302c <HAL_GPIO_Init+0x354>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	f67f ae86 	bls.w	8002cf8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40013800 	.word	0x40013800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020800 	.word	0x40020800
 8003010:	40020c00 	.word	0x40020c00
 8003014:	40021000 	.word	0x40021000
 8003018:	40021400 	.word	0x40021400
 800301c:	40021800 	.word	0x40021800
 8003020:	40021c00 	.word	0x40021c00
 8003024:	40022000 	.word	0x40022000
 8003028:	40022400 	.word	0x40022400
 800302c:	40013c00 	.word	0x40013c00

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003064:	b08f      	sub	sp, #60	; 0x3c
 8003066:	af0a      	add	r7, sp, #40	; 0x28
 8003068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e116      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fed0 	bl	8001e34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 f8b4 	bl	8007220 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	687e      	ldr	r6, [r7, #4]
 80030c0:	466d      	mov	r5, sp
 80030c2:	f106 0410 	add.w	r4, r6, #16
 80030c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d6:	1d33      	adds	r3, r6, #4
 80030d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f004 f848 	bl	8007170 <USB_CoreInit>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0d7      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 f8a2 	bl	8007242 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e04a      	b.n	800319a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	333d      	adds	r3, #61	; 0x3d
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	333c      	adds	r3, #60	; 0x3c
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	b298      	uxth	r0, r3
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3342      	adds	r3, #66	; 0x42
 8003140:	4602      	mov	r2, r0
 8003142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	333f      	adds	r3, #63	; 0x3f
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3344      	adds	r3, #68	; 0x44
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3348      	adds	r3, #72	; 0x48
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3350      	adds	r3, #80	; 0x50
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	3301      	adds	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3af      	bcc.n	8003104 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e044      	b.n	8003234 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	3301      	adds	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d3b5      	bcc.n	80031aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	687e      	ldr	r6, [r7, #4]
 8003246:	466d      	mov	r5, sp
 8003248:	f106 0410 	add.w	r4, r6, #16
 800324c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003258:	e885 0003 	stmia.w	r5, {r0, r1}
 800325c:	1d33      	adds	r3, r6, #4
 800325e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	f004 f83b 	bl	80072dc <USB_DevInit>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e014      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f80b 	bl	80032ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 f9f5 	bl	800768a <USB_DevDisconnect>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	10000003 	.word	0x10000003

080032f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a22      	ldr	r2, [pc, #136]	; (80033ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_PWREx_EnableOverDrive+0x98>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003342:	f7fe fe4d 	bl	8001fe0 <HAL_GetTick>
 8003346:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003348:	e009      	b.n	800335e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800334a:	f7fe fe49 	bl	8001fe0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003358:	d901      	bls.n	800335e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e022      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d1ee      	bne.n	800334a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0f      	ldr	r2, [pc, #60]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003378:	f7fe fe32 	bl	8001fe0 <HAL_GetTick>
 800337c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800337e:	e009      	b.n	8003394 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003380:	f7fe fe2e 	bl	8001fe0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800338e:	d901      	bls.n	8003394 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e007      	b.n	80033a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a0:	d1ee      	bne.n	8003380 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e29b      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8087 	beq.w	80034e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d8:	4b96      	ldr	r3, [pc, #600]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d00c      	beq.n	80033fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e4:	4b93      	ldr	r3, [pc, #588]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d112      	bne.n	8003416 <HAL_RCC_OscConfig+0x62>
 80033f0:	4b90      	ldr	r3, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fc:	d10b      	bne.n	8003416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fe:	4b8d      	ldr	r3, [pc, #564]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x130>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d168      	bne.n	80034e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e275      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x7a>
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e02e      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x9c>
 8003436:	4b7f      	ldr	r3, [pc, #508]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7e      	ldr	r2, [pc, #504]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a7b      	ldr	r2, [pc, #492]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0xc0>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a72      	ldr	r2, [pc, #456]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xd8>
 8003474:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a6b      	ldr	r2, [pc, #428]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe fda4 	bl	8001fe0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe fda0 	bl	8001fe0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e229      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fd90 	bl	8001fe0 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe fd8c 	bl	8001fe0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e215      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x110>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d069      	beq.n	80035c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	4b50      	ldr	r3, [pc, #320]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x190>
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x17a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1e9      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	493d      	ldr	r1, [pc, #244]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	e040      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fd42 	bl	8001fe0 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe fd3e 	bl	8001fe0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1c7      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4929      	ldr	r1, [pc, #164]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
 8003592:	e018      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fd1e 	bl	8001fe0 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fe fd1a 	bl	8001fe0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1a3      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d038      	beq.n	8003644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d019      	beq.n	800360e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	4a15      	ldr	r2, [pc, #84]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fe fcfb 	bl	8001fe0 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ee:	f7fe fcf7 	bl	8001fe0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e180      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x23a>
 800360c:	e01a      	b.n	8003644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_RCC_OscConfig+0x280>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe fce1 	bl	8001fe0 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fcdd 	bl	8001fe0 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d903      	bls.n	8003638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e166      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
 8003634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b92      	ldr	r3, [pc, #584]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ee      	bne.n	8003622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a4 	beq.w	800379a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b8c      	ldr	r3, [pc, #560]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b89      	ldr	r3, [pc, #548]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a88      	ldr	r2, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b86      	ldr	r3, [pc, #536]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367a:	4b83      	ldr	r3, [pc, #524]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003686:	4b80      	ldr	r3, [pc, #512]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7f      	ldr	r2, [pc, #508]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fe fca5 	bl	8001fe0 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fe fca1 	bl	8001fe0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e12a      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ac:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x4d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x31a>
 80036c0:	4b70      	ldr	r3, [pc, #448]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a6f      	ldr	r2, [pc, #444]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e02d      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x33c>
 80036d6:	4b6b      	ldr	r3, [pc, #428]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a6a      	ldr	r2, [pc, #424]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b68      	ldr	r3, [pc, #416]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a67      	ldr	r2, [pc, #412]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e01c      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x35e>
 80036f8:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	4a61      	ldr	r2, [pc, #388]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	; 0x70
 8003704:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a5e      	ldr	r2, [pc, #376]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x376>
 8003712:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a58      	ldr	r2, [pc, #352]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fe fc55 	bl	8001fe0 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fe fc51 	bl	8001fe0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0d8      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCC_OscConfig+0x386>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fc3f 	bl	8001fe0 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fc3b 	bl	8001fe0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0c2      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80ae 	beq.w	8003900 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d06d      	beq.n	800388c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d14b      	bne.n	8003850 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a31      	ldr	r2, [pc, #196]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe fc0c 	bl	8001fe0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe fc08 	bl	8001fe0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e091      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	071b      	lsls	r3, r3, #28
 8003816:	491b      	ldr	r1, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fbda 	bl	8001fe0 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe fbd6 	bl	8001fe0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e05f      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x47c>
 800384e:	e057      	b.n	8003900 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fbc0 	bl	8001fe0 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fbbc 	bl	8001fe0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e045      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x4b0>
 8003882:	e03d      	b.n	8003900 <HAL_RCC_OscConfig+0x54c>
 8003884:	40023800 	.word	0x40023800
 8003888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <HAL_RCC_OscConfig+0x558>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d030      	beq.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d129      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d122      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d119      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d10f      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0d0      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d910      	bls.n	8003958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b67      	ldr	r3, [pc, #412]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 020f 	bic.w	r2, r3, #15
 800393e:	4965      	ldr	r1, [pc, #404]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b8      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d020      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003970:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003988:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800398e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b50      	ldr	r3, [pc, #320]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	494d      	ldr	r1, [pc, #308]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d040      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d115      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e07f      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e073      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e06b      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4936      	ldr	r1, [pc, #216]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a04:	f7fe faec 	bl	8001fe0 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe fae8 	bl	8001fe0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e053      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2d      	ldr	r3, [pc, #180]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d210      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 020f 	bic.w	r2, r3, #15
 8003a4a:	4922      	ldr	r1, [pc, #136]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f821 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490a      	ldr	r1, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x1cc>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_ClockConfig+0x1d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fa48 	bl	8001f58 <HAL_InitTick>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	0800bf54 	.word	0x0800bf54
 8003ae0:	20000100 	.word	0x20000100
 8003ae4:	20000104 	.word	0x20000104

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	2300      	movs	r3, #0
 8003afa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b00:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d00d      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x40>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	f200 80bd 	bhi.w	8003c8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x34>
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1a:	e0b7      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b1e:	60bb      	str	r3, [r7, #8]
      break;
 8003b20:	e0b7      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b22:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b24:	60bb      	str	r3, [r7, #8]
      break;
 8003b26:	e0b4      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b28:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b32:	4b5b      	ldr	r3, [pc, #364]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04d      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	461a      	mov	r2, r3
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	ea02 0800 	and.w	r8, r2, r0
 8003b56:	ea03 0901 	and.w	r9, r3, r1
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	014b      	lsls	r3, r1, #5
 8003b68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b6c:	0142      	lsls	r2, r0, #5
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	ebb0 0008 	subs.w	r0, r0, r8
 8003b76:	eb61 0109 	sbc.w	r1, r1, r9
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	018b      	lsls	r3, r1, #6
 8003b84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b88:	0182      	lsls	r2, r0, #6
 8003b8a:	1a12      	subs	r2, r2, r0
 8003b8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b90:	f04f 0000 	mov.w	r0, #0
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	00d9      	lsls	r1, r3, #3
 8003b9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b9e:	00d0      	lsls	r0, r2, #3
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	eb12 0208 	adds.w	r2, r2, r8
 8003ba8:	eb43 0309 	adc.w	r3, r3, r9
 8003bac:	f04f 0000 	mov.w	r0, #0
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	0259      	lsls	r1, r3, #9
 8003bb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bba:	0250      	lsls	r0, r2, #9
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	f7fc fd4c 	bl	8000668 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e04a      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	ea02 0400 	and.w	r4, r2, r0
 8003bf2:	ea03 0501 	and.w	r5, r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	014b      	lsls	r3, r1, #5
 8003c04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c08:	0142      	lsls	r2, r0, #5
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	1b00      	subs	r0, r0, r4
 8003c10:	eb61 0105 	sbc.w	r1, r1, r5
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	018b      	lsls	r3, r1, #6
 8003c1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c22:	0182      	lsls	r2, r0, #6
 8003c24:	1a12      	subs	r2, r2, r0
 8003c26:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	00d9      	lsls	r1, r3, #3
 8003c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c38:	00d0      	lsls	r0, r2, #3
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	1912      	adds	r2, r2, r4
 8003c40:	eb45 0303 	adc.w	r3, r5, r3
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	0299      	lsls	r1, r3, #10
 8003c4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c52:	0290      	lsls	r0, r2, #10
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f7fc fd00 	bl	8000668 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	60bb      	str	r3, [r7, #8]
      break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c8e:	60bb      	str	r3, [r7, #8]
      break;
 8003c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c92:	68bb      	ldr	r3, [r7, #8]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	007a1200 	.word	0x007a1200

08003cac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000100 	.word	0x20000100

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	0800bf64 	.word	0x0800bf64

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf0:	f7ff ffdc 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0b5b      	lsrs	r3, r3, #13
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	0800bf64 	.word	0x0800bf64

08003d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d3c:	4b69      	ldr	r3, [pc, #420]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a68      	ldr	r2, [pc, #416]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	4964      	ldr	r1, [pc, #400]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d017      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	4959      	ldr	r1, [pc, #356]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003daa:	4b4e      	ldr	r3, [pc, #312]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	494a      	ldr	r1, [pc, #296]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 808b 	beq.w	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	4a39      	ldr	r2, [pc, #228]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6413      	str	r3, [r2, #64]	; 0x40
 8003e04:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e10:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a34      	ldr	r2, [pc, #208]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1c:	f7fe f8e0 	bl	8001fe0 <HAL_GetTick>
 8003e20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e24:	f7fe f8dc 	bl	8001fe0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e38f      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e36:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e42:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d035      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d02e      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e88:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d114      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f8a4 	bl	8001fe0 <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fe f8a0 	bl	8001fe0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e351      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ee      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eca:	d111      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eda:	400b      	ands	r3, r1
 8003edc:	4901      	ldr	r1, [pc, #4]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
 8003ee2:	e00b      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	0ffffcff 	.word	0x0ffffcff
 8003ef0:	4bb3      	ldr	r3, [pc, #716]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4ab2      	ldr	r2, [pc, #712]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003efa:	6093      	str	r3, [r2, #8]
 8003efc:	4bb0      	ldr	r3, [pc, #704]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f08:	49ad      	ldr	r1, [pc, #692]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f1a:	4ba9      	ldr	r3, [pc, #676]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f20:	4aa7      	ldr	r2, [pc, #668]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f2a:	4ba5      	ldr	r3, [pc, #660]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	49a2      	ldr	r1, [pc, #648]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f48:	4b9d      	ldr	r3, [pc, #628]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f56:	499a      	ldr	r1, [pc, #616]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f6a:	4b95      	ldr	r3, [pc, #596]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f78:	4991      	ldr	r1, [pc, #580]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f8c:	4b8c      	ldr	r3, [pc, #560]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9a:	4989      	ldr	r1, [pc, #548]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fae:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4980      	ldr	r1, [pc, #512]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	4978      	ldr	r1, [pc, #480]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff2:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f023 020c 	bic.w	r2, r3, #12
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004000:	496f      	ldr	r1, [pc, #444]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	4967      	ldr	r1, [pc, #412]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	495e      	ldr	r1, [pc, #376]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004058:	4b59      	ldr	r3, [pc, #356]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	4956      	ldr	r1, [pc, #344]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004088:	494d      	ldr	r1, [pc, #308]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800409c:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	4945      	ldr	r1, [pc, #276]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040be:	4b40      	ldr	r3, [pc, #256]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040cc:	493c      	ldr	r1, [pc, #240]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040e0:	4b37      	ldr	r3, [pc, #220]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ee:	4934      	ldr	r1, [pc, #208]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d011      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004102:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004108:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004110:	492b      	ldr	r1, [pc, #172]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004120:	d101      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004122:	2301      	movs	r3, #1
 8004124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004142:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004150:	491b      	ldr	r1, [pc, #108]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004174:	4912      	ldr	r1, [pc, #72]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004198:	4909      	ldr	r1, [pc, #36]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	4986      	ldr	r1, [pc, #536]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041d8:	4b81      	ldr	r3, [pc, #516]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	497d      	ldr	r1, [pc, #500]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d006      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80d6 	beq.w	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004204:	4b76      	ldr	r3, [pc, #472]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a75      	ldr	r2, [pc, #468]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fd fee6 	bl	8001fe0 <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004218:	f7fd fee2 	bl	8001fe0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e195      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800422a:	4b6d      	ldr	r3, [pc, #436]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d021      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11d      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800424a:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004258:	4b61      	ldr	r3, [pc, #388]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	0e1b      	lsrs	r3, r3, #24
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	019a      	lsls	r2, r3, #6
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	041b      	lsls	r3, r3, #16
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	4958      	ldr	r1, [pc, #352]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02e      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d129      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c0:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c6:	0f1b      	lsrs	r3, r3, #28
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	019a      	lsls	r2, r3, #6
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	493e      	ldr	r1, [pc, #248]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042ee:	4b3c      	ldr	r3, [pc, #240]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f4:	f023 021f 	bic.w	r2, r3, #31
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	3b01      	subs	r3, #1
 80042fe:	4938      	ldr	r1, [pc, #224]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01d      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004312:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004318:	0e1b      	lsrs	r3, r3, #24
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004320:	4b2f      	ldr	r3, [pc, #188]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004326:	0f1b      	lsrs	r3, r3, #28
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	019a      	lsls	r2, r3, #6
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	431a      	orrs	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	061b      	lsls	r3, r3, #24
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	4926      	ldr	r1, [pc, #152]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d011      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	019a      	lsls	r2, r3, #6
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	071b      	lsls	r3, r3, #28
 8004376:	491a      	ldr	r1, [pc, #104]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438a:	f7fd fe29 	bl	8001fe0 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004392:	f7fd fe25 	bl	8001fe0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b64      	cmp	r3, #100	; 0x64
 800439e:	d901      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e0d8      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f040 80ce 	bne.w	8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c4:	f7fd fe0c 	bl	8001fe0 <HAL_GetTick>
 80043c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ca:	e00b      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043cc:	f7fd fe08 	bl	8001fe0 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d904      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0bb      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e4:	4b5e      	ldr	r3, [pc, #376]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f0:	d0ec      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02e      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d12a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800441a:	4b51      	ldr	r3, [pc, #324]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004428:	4b4d      	ldr	r3, [pc, #308]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	0f1b      	lsrs	r3, r3, #28
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	019a      	lsls	r2, r3, #6
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	061b      	lsls	r3, r3, #24
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	4944      	ldr	r1, [pc, #272]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004456:	4b42      	ldr	r3, [pc, #264]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800445c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	3b01      	subs	r3, #1
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	493d      	ldr	r1, [pc, #244]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d022      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004484:	d11d      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	0e1b      	lsrs	r3, r3, #24
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004494:	4b32      	ldr	r3, [pc, #200]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	0f1b      	lsrs	r3, r3, #28
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	019a      	lsls	r2, r3, #6
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	431a      	orrs	r2, r3
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	4929      	ldr	r1, [pc, #164]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d028      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ce:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044dc:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	019a      	lsls	r2, r3, #6
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	431a      	orrs	r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	071b      	lsls	r3, r3, #28
 8004502:	4917      	ldr	r1, [pc, #92]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4911      	ldr	r1, [pc, #68]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd fd58 	bl	8001fe0 <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004534:	f7fd fd54 	bl	8001fe0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e007      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800454e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004552:	d1ef      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800

08004564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e049      	b.n	800460a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fad8 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fe64 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d001      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e054      	b.n	80046d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d01d      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a21      	ldr	r2, [pc, #132]	; (80046ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d115      	bne.n	80046c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_TIM_Base_Start_IT+0xec>)
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d015      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0xbe>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d011      	beq.n	80046d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	e008      	b.n	80046d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e000      	b.n	80046d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40001800 	.word	0x40001800
 8004700:	00010007 	.word	0x00010007

08004704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e049      	b.n	80047aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f841 	bl	80047b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 fd94 	bl	8005270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x24>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e03c      	b.n	8004866 <HAL_TIM_PWM_Start+0x9e>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d109      	bne.n	8004806 <HAL_TIM_PWM_Start+0x3e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	e02f      	b.n	8004866 <HAL_TIM_PWM_Start+0x9e>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x58>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e022      	b.n	8004866 <HAL_TIM_PWM_Start+0x9e>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d109      	bne.n	800483a <HAL_TIM_PWM_Start+0x72>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e015      	b.n	8004866 <HAL_TIM_PWM_Start+0x9e>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x8c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e008      	b.n	8004866 <HAL_TIM_PWM_Start+0x9e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e092      	b.n	8004994 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0xb6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487c:	e023      	b.n	80048c6 <HAL_TIM_PWM_Start+0xfe>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start+0xc6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	e01b      	b.n	80048c6 <HAL_TIM_PWM_Start+0xfe>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start+0xd6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	e013      	b.n	80048c6 <HAL_TIM_PWM_Start+0xfe>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start+0xe6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ac:	e00b      	b.n	80048c6 <HAL_TIM_PWM_Start+0xfe>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b10      	cmp	r3, #16
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0xf6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048bc:	e003      	b.n	80048c6 <HAL_TIM_PWM_Start+0xfe>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f866 	bl	80059a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a30      	ldr	r2, [pc, #192]	; (800499c <HAL_TIM_PWM_Start+0x1d4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_TIM_PWM_Start+0x120>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2f      	ldr	r2, [pc, #188]	; (80049a0 <HAL_TIM_PWM_Start+0x1d8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_TIM_PWM_Start+0x124>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_TIM_PWM_Start+0x126>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004900:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a25      	ldr	r2, [pc, #148]	; (800499c <HAL_TIM_PWM_Start+0x1d4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_TIM_PWM_Start+0x18a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d01d      	beq.n	8004952 <HAL_TIM_PWM_Start+0x18a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <HAL_TIM_PWM_Start+0x1dc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_TIM_PWM_Start+0x18a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <HAL_TIM_PWM_Start+0x1e0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_TIM_PWM_Start+0x18a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <HAL_TIM_PWM_Start+0x1e4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_TIM_PWM_Start+0x18a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <HAL_TIM_PWM_Start+0x1d8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_TIM_PWM_Start+0x18a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <HAL_TIM_PWM_Start+0x1e8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIM_PWM_Start+0x18a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <HAL_TIM_PWM_Start+0x1ec>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d115      	bne.n	800497e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <HAL_TIM_PWM_Start+0x1f0>)
 800495a:	4013      	ands	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b06      	cmp	r3, #6
 8004962:	d015      	beq.n	8004990 <HAL_TIM_PWM_Start+0x1c8>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d011      	beq.n	8004990 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	e008      	b.n	8004990 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e000      	b.n	8004992 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40010000 	.word	0x40010000
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40001800 	.word	0x40001800
 80049b8:	00010007 	.word	0x00010007

080049bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e08f      	b.n	8004af0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7fd f85f 	bl	8001aa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b3e      	ldr	r3, [pc, #248]	; (8004af8 <HAL_TIM_Encoder_Init+0x13c>)
 80049fe:	400b      	ands	r3, r1
 8004a00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f000 fc2f 	bl	8005270 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_TIM_Encoder_Init+0x140>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4313      	orrs	r3, r2
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_TIM_Encoder_Init+0x144>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4b2a      	ldr	r3, [pc, #168]	; (8004b04 <HAL_TIM_Encoder_Init+0x148>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	011a      	lsls	r2, r3, #4
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	031b      	lsls	r3, r3, #12
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	fffebff8 	.word	0xfffebff8
 8004afc:	fffffcfc 	.word	0xfffffcfc
 8004b00:	fffff3f3 	.word	0xfffff3f3
 8004b04:	ffff0f0f 	.word	0xffff0f0f

08004b08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d102      	bne.n	8004b44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b3e:	7b7b      	ldrb	r3, [r7, #13]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d001      	beq.n	8004b48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e069      	b.n	8004c1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b58:	e031      	b.n	8004bbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d110      	bne.n	8004b82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b60:	7bbb      	ldrb	r3, [r7, #14]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d102      	bne.n	8004b6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b66:	7b3b      	ldrb	r3, [r7, #12]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d001      	beq.n	8004b70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e055      	b.n	8004c1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b80:	e01d      	b.n	8004bbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d108      	bne.n	8004b9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b88:	7bbb      	ldrb	r3, [r7, #14]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b8e:	7b7b      	ldrb	r3, [r7, #13]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d102      	bne.n	8004b9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b94:	7b3b      	ldrb	r3, [r7, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d001      	beq.n	8004b9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e03e      	b.n	8004c1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_TIM_Encoder_Start+0xc4>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d008      	beq.n	8004bdc <HAL_TIM_Encoder_Start+0xd4>
 8004bca:	e00f      	b.n	8004bec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fee3 	bl	80059a0 <TIM_CCxChannelCmd>
      break;
 8004bda:	e016      	b.n	8004c0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2201      	movs	r2, #1
 8004be2:	2104      	movs	r1, #4
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fedb 	bl	80059a0 <TIM_CCxChannelCmd>
      break;
 8004bea:	e00e      	b.n	8004c0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fed3 	bl	80059a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	2104      	movs	r1, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fecc 	bl	80059a0 <TIM_CCxChannelCmd>
      break;
 8004c08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d122      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d11b      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0202 	mvn.w	r2, #2
 8004c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fae4 	bl	8005234 <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fad6 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fae7 	bl	8005248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d122      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d11b      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0204 	mvn.w	r2, #4
 8004ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 faba 	bl	8005234 <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 faac 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fabd 	bl	8005248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d122      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0208 	mvn.w	r2, #8
 8004cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa90 	bl	8005234 <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa82 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa93 	bl	8005248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b10      	cmp	r3, #16
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0210 	mvn.w	r2, #16
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2208      	movs	r2, #8
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa66 	bl	8005234 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa58 	bl	8005220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa69 	bl	8005248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d10e      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0201 	mvn.w	r2, #1
 8004da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc fac2 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d10e      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	2b80      	cmp	r3, #128	; 0x80
 8004dc2:	d107      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fea4 	bl	8005b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de2:	d10e      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b80      	cmp	r3, #128	; 0x80
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fe97 	bl	8005b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d10e      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d107      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fa17 	bl	800525c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d10e      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f06f 0220 	mvn.w	r2, #32
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fe57 	bl	8005b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0ff      	b.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b14      	cmp	r3, #20
 8004e8e:	f200 80f0 	bhi.w	8005072 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08005073 	.word	0x08005073
 8004ea0:	08005073 	.word	0x08005073
 8004ea4:	08005073 	.word	0x08005073
 8004ea8:	08004f2d 	.word	0x08004f2d
 8004eac:	08005073 	.word	0x08005073
 8004eb0:	08005073 	.word	0x08005073
 8004eb4:	08005073 	.word	0x08005073
 8004eb8:	08004f6f 	.word	0x08004f6f
 8004ebc:	08005073 	.word	0x08005073
 8004ec0:	08005073 	.word	0x08005073
 8004ec4:	08005073 	.word	0x08005073
 8004ec8:	08004faf 	.word	0x08004faf
 8004ecc:	08005073 	.word	0x08005073
 8004ed0:	08005073 	.word	0x08005073
 8004ed4:	08005073 	.word	0x08005073
 8004ed8:	08004ff1 	.word	0x08004ff1
 8004edc:	08005073 	.word	0x08005073
 8004ee0:	08005073 	.word	0x08005073
 8004ee4:	08005073 	.word	0x08005073
 8004ee8:	08005031 	.word	0x08005031
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fa5c 	bl	80053b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0208 	orr.w	r2, r2, #8
 8004f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0204 	bic.w	r2, r2, #4
 8004f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6999      	ldr	r1, [r3, #24]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	619a      	str	r2, [r3, #24]
      break;
 8004f2a:	e0a5      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 faae 	bl	8005494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	021a      	lsls	r2, r3, #8
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	619a      	str	r2, [r3, #24]
      break;
 8004f6c:	e084      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68b9      	ldr	r1, [r7, #8]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fb05 	bl	8005584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0208 	orr.w	r2, r2, #8
 8004f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0204 	bic.w	r2, r2, #4
 8004f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69d9      	ldr	r1, [r3, #28]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	61da      	str	r2, [r3, #28]
      break;
 8004fac:	e064      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fb5b 	bl	8005670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	021a      	lsls	r2, r3, #8
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	61da      	str	r2, [r3, #28]
      break;
 8004fee:	e043      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fb92 	bl	8005720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0208 	orr.w	r2, r2, #8
 800500a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0204 	bic.w	r2, r2, #4
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800502e:	e023      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fbc4 	bl	80057c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800504a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	021a      	lsls	r2, r3, #8
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005070:	e002      	b.n	8005078 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
      break;
 8005076:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005080:	7dfb      	ldrb	r3, [r7, #23]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop

0800508c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIM_ConfigClockSource+0x1c>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e0b4      	b.n	8005212 <HAL_TIM_ConfigClockSource+0x186>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	4b56      	ldr	r3, [pc, #344]	; (800521c <HAL_TIM_ConfigClockSource+0x190>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e0:	d03e      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0xd4>
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e6:	f200 8087 	bhi.w	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	f000 8086 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x172>
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d87f      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 80050f8:	2b70      	cmp	r3, #112	; 0x70
 80050fa:	d01a      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0xa6>
 80050fc:	2b70      	cmp	r3, #112	; 0x70
 80050fe:	d87b      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005100:	2b60      	cmp	r3, #96	; 0x60
 8005102:	d050      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005104:	2b60      	cmp	r3, #96	; 0x60
 8005106:	d877      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005108:	2b50      	cmp	r3, #80	; 0x50
 800510a:	d03c      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0xfa>
 800510c:	2b50      	cmp	r3, #80	; 0x50
 800510e:	d873      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d058      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d86f      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b30      	cmp	r3, #48	; 0x30
 800511a:	d064      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d86b      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	2b20      	cmp	r3, #32
 8005122:	d060      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d867      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d05c      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 800512c:	2b10      	cmp	r3, #16
 800512e:	d05a      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	e062      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6899      	ldr	r1, [r3, #8]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f000 fc0d 	bl	8005960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	609a      	str	r2, [r3, #8]
      break;
 800515e:	e04f      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6899      	ldr	r1, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f000 fbf6 	bl	8005960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005182:	609a      	str	r2, [r3, #8]
      break;
 8005184:	e03c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	461a      	mov	r2, r3
 8005194:	f000 fb6a 	bl	800586c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2150      	movs	r1, #80	; 0x50
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fbc3 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 80051a4:	e02c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f000 fb89 	bl	80058ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2160      	movs	r1, #96	; 0x60
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fbb3 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 80051c4:	e01c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f000 fb4a 	bl	800586c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2140      	movs	r1, #64	; 0x40
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fba3 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 80051e4:	e00c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f000 fb9a 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 80051f6:	e003      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e000      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	fffeff88 	.word	0xfffeff88

08005220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a40      	ldr	r2, [pc, #256]	; (8005384 <TIM_Base_SetConfig+0x114>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d013      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a3d      	ldr	r2, [pc, #244]	; (8005388 <TIM_Base_SetConfig+0x118>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a3c      	ldr	r2, [pc, #240]	; (800538c <TIM_Base_SetConfig+0x11c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3b      	ldr	r2, [pc, #236]	; (8005390 <TIM_Base_SetConfig+0x120>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3a      	ldr	r2, [pc, #232]	; (8005394 <TIM_Base_SetConfig+0x124>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d108      	bne.n	80052c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <TIM_Base_SetConfig+0x114>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d0:	d027      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <TIM_Base_SetConfig+0x118>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d023      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2b      	ldr	r2, [pc, #172]	; (800538c <TIM_Base_SetConfig+0x11c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01f      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <TIM_Base_SetConfig+0x120>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a29      	ldr	r2, [pc, #164]	; (8005394 <TIM_Base_SetConfig+0x124>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d017      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a28      	ldr	r2, [pc, #160]	; (8005398 <TIM_Base_SetConfig+0x128>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <TIM_Base_SetConfig+0x12c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00f      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <TIM_Base_SetConfig+0x130>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00b      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <TIM_Base_SetConfig+0x134>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <TIM_Base_SetConfig+0x138>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a23      	ldr	r2, [pc, #140]	; (80053ac <TIM_Base_SetConfig+0x13c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d108      	bne.n	8005334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <TIM_Base_SetConfig+0x114>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0xf8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <TIM_Base_SetConfig+0x124>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d103      	bne.n	8005370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	615a      	str	r2, [r3, #20]
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800
 80053a4:	40001800 	.word	0x40001800
 80053a8:	40001c00 	.word	0x40001c00
 80053ac:	40002000 	.word	0x40002000

080053b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <TIM_OC1_SetConfig+0xd8>)
 80053dc:	4013      	ands	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 0302 	bic.w	r3, r3, #2
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a21      	ldr	r2, [pc, #132]	; (800548c <TIM_OC1_SetConfig+0xdc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_OC1_SetConfig+0x64>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a20      	ldr	r2, [pc, #128]	; (8005490 <TIM_OC1_SetConfig+0xe0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d10c      	bne.n	800542e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0308 	bic.w	r3, r3, #8
 800541a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a16      	ldr	r2, [pc, #88]	; (800548c <TIM_OC1_SetConfig+0xdc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_OC1_SetConfig+0x8e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a15      	ldr	r2, [pc, #84]	; (8005490 <TIM_OC1_SetConfig+0xe0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d111      	bne.n	8005462 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	fffeff8f 	.word	0xfffeff8f
 800548c:	40010000 	.word	0x40010000
 8005490:	40010400 	.word	0x40010400

08005494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0210 	bic.w	r2, r3, #16
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4b2e      	ldr	r3, [pc, #184]	; (8005578 <TIM_OC2_SetConfig+0xe4>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0320 	bic.w	r3, r3, #32
 80054de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a23      	ldr	r2, [pc, #140]	; (800557c <TIM_OC2_SetConfig+0xe8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC2_SetConfig+0x68>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <TIM_OC2_SetConfig+0xec>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d10d      	bne.n	8005518 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005516:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a18      	ldr	r2, [pc, #96]	; (800557c <TIM_OC2_SetConfig+0xe8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC2_SetConfig+0x94>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <TIM_OC2_SetConfig+0xec>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d113      	bne.n	8005550 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	feff8fff 	.word	0xfeff8fff
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400

08005584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4b2d      	ldr	r3, [pc, #180]	; (8005664 <TIM_OC3_SetConfig+0xe0>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a22      	ldr	r2, [pc, #136]	; (8005668 <TIM_OC3_SetConfig+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC3_SetConfig+0x66>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a21      	ldr	r2, [pc, #132]	; (800566c <TIM_OC3_SetConfig+0xe8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d10d      	bne.n	8005606 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <TIM_OC3_SetConfig+0xe4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_OC3_SetConfig+0x92>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a16      	ldr	r2, [pc, #88]	; (800566c <TIM_OC3_SetConfig+0xe8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d113      	bne.n	800563e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800561c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	fffeff8f 	.word	0xfffeff8f
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <TIM_OC4_SetConfig+0xa4>)
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a13      	ldr	r2, [pc, #76]	; (8005718 <TIM_OC4_SetConfig+0xa8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC4_SetConfig+0x68>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <TIM_OC4_SetConfig+0xac>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d109      	bne.n	80056ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	feff8fff 	.word	0xfeff8fff
 8005718:	40010000 	.word	0x40010000
 800571c:	40010400 	.word	0x40010400

08005720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <TIM_OC5_SetConfig+0x98>)
 800574c:	4013      	ands	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a12      	ldr	r2, [pc, #72]	; (80057bc <TIM_OC5_SetConfig+0x9c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_OC5_SetConfig+0x5e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <TIM_OC5_SetConfig+0xa0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d109      	bne.n	8005792 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	fffeff8f 	.word	0xfffeff8f
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40010400 	.word	0x40010400

080057c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <TIM_OC6_SetConfig+0x9c>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a13      	ldr	r2, [pc, #76]	; (8005864 <TIM_OC6_SetConfig+0xa0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC6_SetConfig+0x60>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a12      	ldr	r2, [pc, #72]	; (8005868 <TIM_OC6_SetConfig+0xa4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d109      	bne.n	8005838 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	feff8fff 	.word	0xfeff8fff
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400

0800586c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 030a 	bic.w	r3, r3, #10
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f023 0210 	bic.w	r2, r3, #16
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	f043 0307 	orr.w	r3, r3, #7
 800594c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	609a      	str	r2, [r3, #8]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	021a      	lsls	r2, r3, #8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	431a      	orrs	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	609a      	str	r2, [r3, #8]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2201      	movs	r2, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1a      	ldr	r2, [r3, #32]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	401a      	ands	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	fa01 f303 	lsl.w	r3, r1, r3
 80059d8:	431a      	orrs	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e06d      	b.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a30      	ldr	r2, [pc, #192]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d108      	bne.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a20      	ldr	r2, [pc, #128]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d022      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d01d      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d018      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1a      	ldr	r2, [pc, #104]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00e      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10c      	bne.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40001800 	.word	0x40001800

08005b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e040      	b.n	8005bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc f8ea 	bl	8001d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	; 0x24
 8005b70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fc18 	bl	80063b8 <UART_SetConfig>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e022      	b.n	8005bd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fe6e 	bl	800687c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fef5 	bl	80069c0 <UART_CheckIdleState>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	4613      	mov	r3, r2
 8005bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	f040 8081 	bne.w	8005cfc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_UART_Transmit+0x26>
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e079      	b.n	8005cfe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Transmit+0x38>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e072      	b.n	8005cfe <HAL_UART_Transmit+0x11e>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	; 0x21
 8005c2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fc f9d7 	bl	8001fe0 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d108      	bne.n	8005c60 <HAL_UART_Transmit+0x80>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e003      	b.n	8005c68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005c70:	e02c      	b.n	8005ccc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fee8 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e038      	b.n	8005cfe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	3302      	adds	r3, #2
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e007      	b.n	8005cba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1cc      	bne.n	8005c72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2140      	movs	r1, #64	; 0x40
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 feb5 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e005      	b.n	8005cfe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e000      	b.n	8005cfe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
  }
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b08a      	sub	sp, #40	; 0x28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	4613      	mov	r3, r2
 8005d12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d13d      	bne.n	8005d98 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_UART_Receive_IT+0x22>
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e036      	b.n	8005d9a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_UART_Receive_IT+0x34>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e02f      	b.n	8005d9a <HAL_UART_Receive_IT+0x94>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d018      	beq.n	8005d88 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	613b      	str	r3, [r7, #16]
   return(result);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 ff24 	bl	8006bdc <UART_Start_Receive_IT>
 8005d94:	4603      	mov	r3, r0
 8005d96:	e000      	b.n	8005d9a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
  }
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3728      	adds	r7, #40	; 0x28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b0ba      	sub	sp, #232	; 0xe8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005dce:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d115      	bne.n	8005e0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00f      	beq.n	8005e0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 82a4 	beq.w	800634a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
      }
      return;
 8005e0a:	e29e      	b.n	800634a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8117 	beq.w	8006044 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e26:	4b85      	ldr	r3, [pc, #532]	; (800603c <HAL_UART_IRQHandler+0x298>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 810a 	beq.w	8006044 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d011      	beq.n	8005e60 <HAL_UART_IRQHandler+0xbc>
 8005e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e56:	f043 0201 	orr.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d011      	beq.n	8005e90 <HAL_UART_IRQHandler+0xec>
 8005e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e86:	f043 0204 	orr.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d011      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x11c>
 8005e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2204      	movs	r2, #4
 8005eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb6:	f043 0202 	orr.w	r2, r3, #2
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d017      	beq.n	8005efc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005edc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00b      	beq.n	8005efc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef2:	f043 0208 	orr.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <HAL_UART_IRQHandler+0x18a>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00c      	beq.n	8005f2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 820a 	beq.w	800634e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d005      	beq.n	8005f86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d04f      	beq.n	8006026 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fef2 	bl	8006d70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d141      	bne.n	800601e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d9      	bne.n	8005f9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d013      	beq.n	8006016 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <HAL_UART_IRQHandler+0x29c>)
 8005ff4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fc fe49 	bl	8002c92 <HAL_DMA_Abort_IT>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d017      	beq.n	8006036 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006010:	4610      	mov	r0, r2
 8006012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	e00f      	b.n	8006036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9ae 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	e00b      	b.n	8006036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9aa 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	e007      	b.n	8006036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9a6 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006034:	e18b      	b.n	800634e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006036:	bf00      	nop
    return;
 8006038:	e189      	b.n	800634e <HAL_UART_IRQHandler+0x5aa>
 800603a:	bf00      	nop
 800603c:	04000120 	.word	0x04000120
 8006040:	08006e37 	.word	0x08006e37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006048:	2b01      	cmp	r3, #1
 800604a:	f040 8144 	bne.w	80062d6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 813d 	beq.w	80062d6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8136 	beq.w	80062d6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2210      	movs	r2, #16
 8006070:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	f040 80b2 	bne.w	80061e6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800608e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 815d 	beq.w	8006352 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800609e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a2:	429a      	cmp	r2, r3
 80060a4:	f080 8155 	bcs.w	8006352 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060bc:	f000 8085 	beq.w	80061ca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1da      	bne.n	80060c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800611a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800612e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006132:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e1      	bne.n	800610a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800616a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800616c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800619a:	f023 0310 	bic.w	r3, r3, #16
 800619e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e4      	bne.n	800618a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fc fcf4 	bl	8002bb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	b29b      	uxth	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8d4 	bl	800638c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061e4:	e0b5      	b.n	8006352 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80a7 	beq.w	8006356 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80a2 	beq.w	8006356 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006234:	647b      	str	r3, [r7, #68]	; 0x44
 8006236:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800623a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e4      	bne.n	8006212 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3308      	adds	r3, #8
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	623b      	str	r3, [r7, #32]
   return(result);
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3308      	adds	r3, #8
 8006268:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800626c:	633a      	str	r2, [r7, #48]	; 0x30
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e3      	bne.n	8006248 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0310 	bic.w	r3, r3, #16
 80062a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	69b9      	ldr	r1, [r7, #24]
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	617b      	str	r3, [r7, #20]
   return(result);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e4      	bne.n	8006292 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f85c 	bl	800638c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062d4:	e03f      	b.n	8006356 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00e      	beq.n	8006300 <HAL_UART_IRQHandler+0x55c>
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f853 	bl	80063a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062fe:	e02d      	b.n	800635c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01c      	beq.n	800635a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
    }
    return;
 8006328:	e017      	b.n	800635a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d012      	beq.n	800635c <HAL_UART_IRQHandler+0x5b8>
 8006336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fd8d 	bl	8006e62 <UART_EndTransmit_IT>
    return;
 8006348:	e008      	b.n	800635c <HAL_UART_IRQHandler+0x5b8>
      return;
 800634a:	bf00      	nop
 800634c:	e006      	b.n	800635c <HAL_UART_IRQHandler+0x5b8>
    return;
 800634e:	bf00      	nop
 8006350:	e004      	b.n	800635c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006352:	bf00      	nop
 8006354:	e002      	b.n	800635c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <HAL_UART_IRQHandler+0x5b8>
    return;
 800635a:	bf00      	nop
  }

}
 800635c:	37e8      	adds	r7, #232	; 0xe8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4ba7      	ldr	r3, [pc, #668]	; (8006680 <UART_SetConfig+0x2c8>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	6979      	ldr	r1, [r7, #20]
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	430a      	orrs	r2, r1
 8006428:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a95      	ldr	r2, [pc, #596]	; (8006684 <UART_SetConfig+0x2cc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d120      	bne.n	8006476 <UART_SetConfig+0xbe>
 8006434:	4b94      	ldr	r3, [pc, #592]	; (8006688 <UART_SetConfig+0x2d0>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	2b03      	cmp	r3, #3
 8006440:	d816      	bhi.n	8006470 <UART_SetConfig+0xb8>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x90>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006459 	.word	0x08006459
 800644c:	08006465 	.word	0x08006465
 8006450:	0800645f 	.word	0x0800645f
 8006454:	0800646b 	.word	0x0800646b
 8006458:	2301      	movs	r3, #1
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e14f      	b.n	80066fe <UART_SetConfig+0x346>
 800645e:	2302      	movs	r3, #2
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e14c      	b.n	80066fe <UART_SetConfig+0x346>
 8006464:	2304      	movs	r3, #4
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e149      	b.n	80066fe <UART_SetConfig+0x346>
 800646a:	2308      	movs	r3, #8
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e146      	b.n	80066fe <UART_SetConfig+0x346>
 8006470:	2310      	movs	r3, #16
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e143      	b.n	80066fe <UART_SetConfig+0x346>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a84      	ldr	r2, [pc, #528]	; (800668c <UART_SetConfig+0x2d4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d132      	bne.n	80064e6 <UART_SetConfig+0x12e>
 8006480:	4b81      	ldr	r3, [pc, #516]	; (8006688 <UART_SetConfig+0x2d0>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b0c      	cmp	r3, #12
 800648c:	d828      	bhi.n	80064e0 <UART_SetConfig+0x128>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0xdc>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080064e1 	.word	0x080064e1
 800649c:	080064e1 	.word	0x080064e1
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064d5 	.word	0x080064d5
 80064a8:	080064e1 	.word	0x080064e1
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080064e1 	.word	0x080064e1
 80064b4:	080064cf 	.word	0x080064cf
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e1 	.word	0x080064e1
 80064c4:	080064db 	.word	0x080064db
 80064c8:	2300      	movs	r3, #0
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e117      	b.n	80066fe <UART_SetConfig+0x346>
 80064ce:	2302      	movs	r3, #2
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e114      	b.n	80066fe <UART_SetConfig+0x346>
 80064d4:	2304      	movs	r3, #4
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e111      	b.n	80066fe <UART_SetConfig+0x346>
 80064da:	2308      	movs	r3, #8
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e10e      	b.n	80066fe <UART_SetConfig+0x346>
 80064e0:	2310      	movs	r3, #16
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e10b      	b.n	80066fe <UART_SetConfig+0x346>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a69      	ldr	r2, [pc, #420]	; (8006690 <UART_SetConfig+0x2d8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d120      	bne.n	8006532 <UART_SetConfig+0x17a>
 80064f0:	4b65      	ldr	r3, [pc, #404]	; (8006688 <UART_SetConfig+0x2d0>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064fa:	2b30      	cmp	r3, #48	; 0x30
 80064fc:	d013      	beq.n	8006526 <UART_SetConfig+0x16e>
 80064fe:	2b30      	cmp	r3, #48	; 0x30
 8006500:	d814      	bhi.n	800652c <UART_SetConfig+0x174>
 8006502:	2b20      	cmp	r3, #32
 8006504:	d009      	beq.n	800651a <UART_SetConfig+0x162>
 8006506:	2b20      	cmp	r3, #32
 8006508:	d810      	bhi.n	800652c <UART_SetConfig+0x174>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <UART_SetConfig+0x15c>
 800650e:	2b10      	cmp	r3, #16
 8006510:	d006      	beq.n	8006520 <UART_SetConfig+0x168>
 8006512:	e00b      	b.n	800652c <UART_SetConfig+0x174>
 8006514:	2300      	movs	r3, #0
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e0f1      	b.n	80066fe <UART_SetConfig+0x346>
 800651a:	2302      	movs	r3, #2
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e0ee      	b.n	80066fe <UART_SetConfig+0x346>
 8006520:	2304      	movs	r3, #4
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e0eb      	b.n	80066fe <UART_SetConfig+0x346>
 8006526:	2308      	movs	r3, #8
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e0e8      	b.n	80066fe <UART_SetConfig+0x346>
 800652c:	2310      	movs	r3, #16
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e0e5      	b.n	80066fe <UART_SetConfig+0x346>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a57      	ldr	r2, [pc, #348]	; (8006694 <UART_SetConfig+0x2dc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d120      	bne.n	800657e <UART_SetConfig+0x1c6>
 800653c:	4b52      	ldr	r3, [pc, #328]	; (8006688 <UART_SetConfig+0x2d0>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006546:	2bc0      	cmp	r3, #192	; 0xc0
 8006548:	d013      	beq.n	8006572 <UART_SetConfig+0x1ba>
 800654a:	2bc0      	cmp	r3, #192	; 0xc0
 800654c:	d814      	bhi.n	8006578 <UART_SetConfig+0x1c0>
 800654e:	2b80      	cmp	r3, #128	; 0x80
 8006550:	d009      	beq.n	8006566 <UART_SetConfig+0x1ae>
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d810      	bhi.n	8006578 <UART_SetConfig+0x1c0>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <UART_SetConfig+0x1a8>
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d006      	beq.n	800656c <UART_SetConfig+0x1b4>
 800655e:	e00b      	b.n	8006578 <UART_SetConfig+0x1c0>
 8006560:	2300      	movs	r3, #0
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e0cb      	b.n	80066fe <UART_SetConfig+0x346>
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e0c8      	b.n	80066fe <UART_SetConfig+0x346>
 800656c:	2304      	movs	r3, #4
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e0c5      	b.n	80066fe <UART_SetConfig+0x346>
 8006572:	2308      	movs	r3, #8
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e0c2      	b.n	80066fe <UART_SetConfig+0x346>
 8006578:	2310      	movs	r3, #16
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e0bf      	b.n	80066fe <UART_SetConfig+0x346>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a45      	ldr	r2, [pc, #276]	; (8006698 <UART_SetConfig+0x2e0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d125      	bne.n	80065d4 <UART_SetConfig+0x21c>
 8006588:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <UART_SetConfig+0x2d0>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006596:	d017      	beq.n	80065c8 <UART_SetConfig+0x210>
 8006598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659c:	d817      	bhi.n	80065ce <UART_SetConfig+0x216>
 800659e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a2:	d00b      	beq.n	80065bc <UART_SetConfig+0x204>
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a8:	d811      	bhi.n	80065ce <UART_SetConfig+0x216>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <UART_SetConfig+0x1fe>
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d006      	beq.n	80065c2 <UART_SetConfig+0x20a>
 80065b4:	e00b      	b.n	80065ce <UART_SetConfig+0x216>
 80065b6:	2300      	movs	r3, #0
 80065b8:	77fb      	strb	r3, [r7, #31]
 80065ba:	e0a0      	b.n	80066fe <UART_SetConfig+0x346>
 80065bc:	2302      	movs	r3, #2
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e09d      	b.n	80066fe <UART_SetConfig+0x346>
 80065c2:	2304      	movs	r3, #4
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e09a      	b.n	80066fe <UART_SetConfig+0x346>
 80065c8:	2308      	movs	r3, #8
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e097      	b.n	80066fe <UART_SetConfig+0x346>
 80065ce:	2310      	movs	r3, #16
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e094      	b.n	80066fe <UART_SetConfig+0x346>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a30      	ldr	r2, [pc, #192]	; (800669c <UART_SetConfig+0x2e4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d125      	bne.n	800662a <UART_SetConfig+0x272>
 80065de:	4b2a      	ldr	r3, [pc, #168]	; (8006688 <UART_SetConfig+0x2d0>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ec:	d017      	beq.n	800661e <UART_SetConfig+0x266>
 80065ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065f2:	d817      	bhi.n	8006624 <UART_SetConfig+0x26c>
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d00b      	beq.n	8006612 <UART_SetConfig+0x25a>
 80065fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fe:	d811      	bhi.n	8006624 <UART_SetConfig+0x26c>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <UART_SetConfig+0x254>
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006608:	d006      	beq.n	8006618 <UART_SetConfig+0x260>
 800660a:	e00b      	b.n	8006624 <UART_SetConfig+0x26c>
 800660c:	2301      	movs	r3, #1
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e075      	b.n	80066fe <UART_SetConfig+0x346>
 8006612:	2302      	movs	r3, #2
 8006614:	77fb      	strb	r3, [r7, #31]
 8006616:	e072      	b.n	80066fe <UART_SetConfig+0x346>
 8006618:	2304      	movs	r3, #4
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e06f      	b.n	80066fe <UART_SetConfig+0x346>
 800661e:	2308      	movs	r3, #8
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e06c      	b.n	80066fe <UART_SetConfig+0x346>
 8006624:	2310      	movs	r3, #16
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e069      	b.n	80066fe <UART_SetConfig+0x346>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1c      	ldr	r2, [pc, #112]	; (80066a0 <UART_SetConfig+0x2e8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d137      	bne.n	80066a4 <UART_SetConfig+0x2ec>
 8006634:	4b14      	ldr	r3, [pc, #80]	; (8006688 <UART_SetConfig+0x2d0>)
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800663e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006642:	d017      	beq.n	8006674 <UART_SetConfig+0x2bc>
 8006644:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006648:	d817      	bhi.n	800667a <UART_SetConfig+0x2c2>
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664e:	d00b      	beq.n	8006668 <UART_SetConfig+0x2b0>
 8006650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006654:	d811      	bhi.n	800667a <UART_SetConfig+0x2c2>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <UART_SetConfig+0x2aa>
 800665a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665e:	d006      	beq.n	800666e <UART_SetConfig+0x2b6>
 8006660:	e00b      	b.n	800667a <UART_SetConfig+0x2c2>
 8006662:	2300      	movs	r3, #0
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e04a      	b.n	80066fe <UART_SetConfig+0x346>
 8006668:	2302      	movs	r3, #2
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e047      	b.n	80066fe <UART_SetConfig+0x346>
 800666e:	2304      	movs	r3, #4
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e044      	b.n	80066fe <UART_SetConfig+0x346>
 8006674:	2308      	movs	r3, #8
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e041      	b.n	80066fe <UART_SetConfig+0x346>
 800667a:	2310      	movs	r3, #16
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e03e      	b.n	80066fe <UART_SetConfig+0x346>
 8006680:	efff69f3 	.word	0xefff69f3
 8006684:	40011000 	.word	0x40011000
 8006688:	40023800 	.word	0x40023800
 800668c:	40004400 	.word	0x40004400
 8006690:	40004800 	.word	0x40004800
 8006694:	40004c00 	.word	0x40004c00
 8006698:	40005000 	.word	0x40005000
 800669c:	40011400 	.word	0x40011400
 80066a0:	40007800 	.word	0x40007800
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a71      	ldr	r2, [pc, #452]	; (8006870 <UART_SetConfig+0x4b8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d125      	bne.n	80066fa <UART_SetConfig+0x342>
 80066ae:	4b71      	ldr	r3, [pc, #452]	; (8006874 <UART_SetConfig+0x4bc>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066bc:	d017      	beq.n	80066ee <UART_SetConfig+0x336>
 80066be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066c2:	d817      	bhi.n	80066f4 <UART_SetConfig+0x33c>
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c8:	d00b      	beq.n	80066e2 <UART_SetConfig+0x32a>
 80066ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ce:	d811      	bhi.n	80066f4 <UART_SetConfig+0x33c>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <UART_SetConfig+0x324>
 80066d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066d8:	d006      	beq.n	80066e8 <UART_SetConfig+0x330>
 80066da:	e00b      	b.n	80066f4 <UART_SetConfig+0x33c>
 80066dc:	2300      	movs	r3, #0
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e00d      	b.n	80066fe <UART_SetConfig+0x346>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e00a      	b.n	80066fe <UART_SetConfig+0x346>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e007      	b.n	80066fe <UART_SetConfig+0x346>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e004      	b.n	80066fe <UART_SetConfig+0x346>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e001      	b.n	80066fe <UART_SetConfig+0x346>
 80066fa:	2310      	movs	r3, #16
 80066fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006706:	d15a      	bne.n	80067be <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006708:	7ffb      	ldrb	r3, [r7, #31]
 800670a:	2b08      	cmp	r3, #8
 800670c:	d827      	bhi.n	800675e <UART_SetConfig+0x3a6>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x35c>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006739 	.word	0x08006739
 8006718:	08006741 	.word	0x08006741
 800671c:	08006749 	.word	0x08006749
 8006720:	0800675f 	.word	0x0800675f
 8006724:	0800674f 	.word	0x0800674f
 8006728:	0800675f 	.word	0x0800675f
 800672c:	0800675f 	.word	0x0800675f
 8006730:	0800675f 	.word	0x0800675f
 8006734:	08006757 	.word	0x08006757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006738:	f7fd fac4 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 800673c:	61b8      	str	r0, [r7, #24]
        break;
 800673e:	e013      	b.n	8006768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7fd fad4 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8006744:	61b8      	str	r0, [r7, #24]
        break;
 8006746:	e00f      	b.n	8006768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006748:	4b4b      	ldr	r3, [pc, #300]	; (8006878 <UART_SetConfig+0x4c0>)
 800674a:	61bb      	str	r3, [r7, #24]
        break;
 800674c:	e00c      	b.n	8006768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800674e:	f7fd f9cb 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8006752:	61b8      	str	r0, [r7, #24]
        break;
 8006754:	e008      	b.n	8006768 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675a:	61bb      	str	r3, [r7, #24]
        break;
 800675c:	e004      	b.n	8006768 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	77bb      	strb	r3, [r7, #30]
        break;
 8006766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d074      	beq.n	8006858 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	005a      	lsls	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	441a      	add	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d916      	bls.n	80067b8 <UART_SetConfig+0x400>
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006790:	d212      	bcs.n	80067b8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f023 030f 	bic.w	r3, r3, #15
 800679a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	89fa      	ldrh	r2, [r7, #14]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	e04f      	b.n	8006858 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	77bb      	strb	r3, [r7, #30]
 80067bc:	e04c      	b.n	8006858 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067be:	7ffb      	ldrb	r3, [r7, #31]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d828      	bhi.n	8006816 <UART_SetConfig+0x45e>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0x414>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	08006801 	.word	0x08006801
 80067d8:	08006817 	.word	0x08006817
 80067dc:	08006807 	.word	0x08006807
 80067e0:	08006817 	.word	0x08006817
 80067e4:	08006817 	.word	0x08006817
 80067e8:	08006817 	.word	0x08006817
 80067ec:	0800680f 	.word	0x0800680f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fd fa68 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 80067f4:	61b8      	str	r0, [r7, #24]
        break;
 80067f6:	e013      	b.n	8006820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fd fa78 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 80067fc:	61b8      	str	r0, [r7, #24]
        break;
 80067fe:	e00f      	b.n	8006820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006800:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <UART_SetConfig+0x4c0>)
 8006802:	61bb      	str	r3, [r7, #24]
        break;
 8006804:	e00c      	b.n	8006820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fd f96f 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 800680a:	61b8      	str	r0, [r7, #24]
        break;
 800680c:	e008      	b.n	8006820 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006812:	61bb      	str	r3, [r7, #24]
        break;
 8006814:	e004      	b.n	8006820 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	77bb      	strb	r3, [r7, #30]
        break;
 800681e:	bf00      	nop
    }

    if (pclk != 0U)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d018      	beq.n	8006858 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085a      	lsrs	r2, r3, #1
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	441a      	add	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b0f      	cmp	r3, #15
 800683e:	d909      	bls.n	8006854 <UART_SetConfig+0x49c>
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d205      	bcs.n	8006854 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	e001      	b.n	8006858 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006864:	7fbb      	ldrb	r3, [r7, #30]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40007c00 	.word	0x40007c00
 8006874:	40023800 	.word	0x40023800
 8006878:	00f42400 	.word	0x00f42400

0800687c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800697a:	d10a      	bne.n	8006992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d0:	f7fb fb06 	bl	8001fe0 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10e      	bne.n	8006a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f82d 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e023      	b.n	8006a4a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d10e      	bne.n	8006a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f817 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e00d      	b.n	8006a4a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b09c      	sub	sp, #112	; 0x70
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a62:	e0a5      	b.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	f000 80a1 	beq.w	8006bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a6e:	f7fb fab7 	bl	8001fe0 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d302      	bcc.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d13e      	bne.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a98:	667b      	str	r3, [r7, #100]	; 0x64
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aa4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e6      	bne.n	8006a84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ad6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e067      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d04f      	beq.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1e:	d147      	bne.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e6      	bne.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b7c:	623a      	str	r2, [r7, #32]
 8006b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	69f9      	ldr	r1, [r7, #28]
 8006b82:	6a3a      	ldr	r2, [r7, #32]
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e5      	bne.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e010      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69da      	ldr	r2, [r3, #28]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	bf0c      	ite	eq
 8006bc0:	2301      	moveq	r3, #1
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	f43f af4a 	beq.w	8006a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3770      	adds	r7, #112	; 0x70
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b097      	sub	sp, #92	; 0x5c
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	88fa      	ldrh	r2, [r7, #6]
 8006bf4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	d10e      	bne.n	8006c2e <UART_Start_Receive_IT+0x52>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <UART_Start_Receive_IT+0x48>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c22:	e02d      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	22ff      	movs	r2, #255	; 0xff
 8006c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c2c:	e028      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <UART_Start_Receive_IT+0x76>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <UART_Start_Receive_IT+0x6c>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	22ff      	movs	r2, #255	; 0xff
 8006c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c46:	e01b      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	227f      	movs	r2, #127	; 0x7f
 8006c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c50:	e016      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5a:	d10d      	bne.n	8006c78 <UART_Start_Receive_IT+0x9c>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <UART_Start_Receive_IT+0x92>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	227f      	movs	r2, #127	; 0x7f
 8006c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c6c:	e008      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	223f      	movs	r2, #63	; 0x3f
 8006c72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c76:	e003      	b.n	8006c80 <UART_Start_Receive_IT+0xa4>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2222      	movs	r2, #34	; 0x22
 8006c8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	657b      	str	r3, [r7, #84]	; 0x54
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e5      	bne.n	8006c8e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cca:	d107      	bne.n	8006cdc <UART_Start_Receive_IT+0x100>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d103      	bne.n	8006cdc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4a24      	ldr	r2, [pc, #144]	; (8006d68 <UART_Start_Receive_IT+0x18c>)
 8006cd8:	665a      	str	r2, [r3, #100]	; 0x64
 8006cda:	e002      	b.n	8006ce2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a23      	ldr	r2, [pc, #140]	; (8006d6c <UART_Start_Receive_IT+0x190>)
 8006ce0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d019      	beq.n	8006d26 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
 8006d12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e6      	bne.n	8006cf2 <UART_Start_Receive_IT+0x116>
 8006d24:	e018      	b.n	8006d58 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	613b      	str	r3, [r7, #16]
   return(result);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f043 0320 	orr.w	r3, r3, #32
 8006d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d44:	623b      	str	r3, [r7, #32]
 8006d46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	69f9      	ldr	r1, [r7, #28]
 8006d4a:	6a3a      	ldr	r2, [r7, #32]
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e6      	bne.n	8006d26 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	375c      	adds	r7, #92	; 0x5c
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	08007013 	.word	0x08007013
 8006d6c:	08006eb7 	.word	0x08006eb7

08006d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b095      	sub	sp, #84	; 0x54
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d96:	643b      	str	r3, [r7, #64]	; 0x40
 8006d98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e6      	bne.n	8006d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e5      	bne.n	8006daa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d118      	bne.n	8006e18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f023 0310 	bic.w	r3, r3, #16
 8006dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6979      	ldr	r1, [r7, #20]
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	613b      	str	r3, [r7, #16]
   return(result);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e6      	bne.n	8006de6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006e2a:	bf00      	nop
 8006e2c:	3754      	adds	r7, #84	; 0x54
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f7ff fa8f 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b088      	sub	sp, #32
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6979      	ldr	r1, [r7, #20]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	613b      	str	r3, [r7, #16]
   return(result);
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fa5b 	bl	8006364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eae:	bf00      	nop
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b096      	sub	sp, #88	; 0x58
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ec4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ecc:	2b22      	cmp	r3, #34	; 0x22
 8006ece:	f040 8094 	bne.w	8006ffa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006edc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ee0:	b2d9      	uxtb	r1, r3
 8006ee2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eec:	400a      	ands	r2, r1
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d177      	bne.n	800700a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f38:	647b      	str	r3, [r7, #68]	; 0x44
 8006f3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e6      	bne.n	8006f1a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f6c:	633a      	str	r2, [r7, #48]	; 0x30
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e5      	bne.n	8006f4c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d12e      	bne.n	8006ff2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0310 	bic.w	r3, r3, #16
 8006fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	69b9      	ldr	r1, [r7, #24]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e6      	bne.n	8006f9a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b10      	cmp	r3, #16
 8006fd8:	d103      	bne.n	8006fe2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2210      	movs	r2, #16
 8006fe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff f9ce 	bl	800638c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ff0:	e00b      	b.n	800700a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fa f87c 	bl	80010f0 <HAL_UART_RxCpltCallback>
}
 8006ff8:	e007      	b.n	800700a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0208 	orr.w	r2, r2, #8
 8007008:	619a      	str	r2, [r3, #24]
}
 800700a:	bf00      	nop
 800700c:	3758      	adds	r7, #88	; 0x58
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b096      	sub	sp, #88	; 0x58
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007020:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007028:	2b22      	cmp	r3, #34	; 0x22
 800702a:	f040 8094 	bne.w	8007156 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800703e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007042:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007046:	4013      	ands	r3, r2
 8007048:	b29a      	uxth	r2, r3
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007052:	1c9a      	adds	r2, r3, #2
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d177      	bne.n	8007166 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800708a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	461a      	mov	r2, r3
 8007092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007094:	643b      	str	r3, [r7, #64]	; 0x40
 8007096:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800709a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e6      	bne.n	8007076 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	64bb      	str	r3, [r7, #72]	; 0x48
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3308      	adds	r3, #8
 80070c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e5      	bne.n	80070a8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d12e      	bne.n	800714e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60bb      	str	r3, [r7, #8]
   return(result);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0310 	bic.w	r3, r3, #16
 800710a:	647b      	str	r3, [r7, #68]	; 0x44
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	613b      	str	r3, [r7, #16]
   return(result);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e6      	bne.n	80070f6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b10      	cmp	r3, #16
 8007134:	d103      	bne.n	800713e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2210      	movs	r2, #16
 800713c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff f920 	bl	800638c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800714c:	e00b      	b.n	8007166 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7f9 ffce 	bl	80010f0 <HAL_UART_RxCpltCallback>
}
 8007154:	e007      	b.n	8007166 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0208 	orr.w	r2, r2, #8
 8007164:	619a      	str	r2, [r3, #24]
}
 8007166:	bf00      	nop
 8007168:	3758      	adds	r7, #88	; 0x58
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007170:	b084      	sub	sp, #16
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	f107 001c 	add.w	r0, r7, #28
 800717e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	2b01      	cmp	r3, #1
 8007186:	d120      	bne.n	80071ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	4b20      	ldr	r3, [pc, #128]	; (800721c <USB_CoreInit+0xac>)
 800719a:	4013      	ands	r3, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d105      	bne.n	80071be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa92 	bl	80076e8 <USB_CoreReset>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e010      	b.n	80071ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa86 	bl	80076e8 <USB_CoreReset>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10b      	bne.n	800720a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f043 0206 	orr.w	r2, r3, #6
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f043 0220 	orr.w	r2, r3, #32
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007216:	b004      	add	sp, #16
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	ffbdffbf 	.word	0xffbdffbf

08007220 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f023 0201 	bic.w	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d115      	bne.n	8007290 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007270:	2001      	movs	r0, #1
 8007272:	f7fa fec1 	bl	8001ff8 <HAL_Delay>
      ms++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa25 	bl	80076cc <USB_GetMode>
 8007282:	4603      	mov	r3, r0
 8007284:	2b01      	cmp	r3, #1
 8007286:	d01e      	beq.n	80072c6 <USB_SetCurrentMode+0x84>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b31      	cmp	r3, #49	; 0x31
 800728c:	d9f0      	bls.n	8007270 <USB_SetCurrentMode+0x2e>
 800728e:	e01a      	b.n	80072c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d115      	bne.n	80072c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072a2:	2001      	movs	r0, #1
 80072a4:	f7fa fea8 	bl	8001ff8 <HAL_Delay>
      ms++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa0c 	bl	80076cc <USB_GetMode>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <USB_SetCurrentMode+0x84>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b31      	cmp	r3, #49	; 0x31
 80072be:	d9f0      	bls.n	80072a2 <USB_SetCurrentMode+0x60>
 80072c0:	e001      	b.n	80072c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e005      	b.n	80072d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b32      	cmp	r3, #50	; 0x32
 80072ca:	d101      	bne.n	80072d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072dc:	b084      	sub	sp, #16
 80072de:	b580      	push	{r7, lr}
 80072e0:	b086      	sub	sp, #24
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072f6:	2300      	movs	r3, #0
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	e009      	b.n	8007310 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	3340      	adds	r3, #64	; 0x40
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3301      	adds	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b0e      	cmp	r3, #14
 8007314:	d9f2      	bls.n	80072fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11c      	bne.n	8007356 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732a:	f043 0302 	orr.w	r3, r3, #2
 800732e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e005      	b.n	8007362 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007368:	461a      	mov	r2, r3
 800736a:	2300      	movs	r3, #0
 800736c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007374:	4619      	mov	r1, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737c:	461a      	mov	r2, r3
 800737e:	680b      	ldr	r3, [r1, #0]
 8007380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	2b01      	cmp	r3, #1
 8007386:	d10c      	bne.n	80073a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d104      	bne.n	8007398 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800738e:	2100      	movs	r1, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f961 	bl	8007658 <USB_SetDevSpeed>
 8007396:	e008      	b.n	80073aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007398:	2101      	movs	r1, #1
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f95c 	bl	8007658 <USB_SetDevSpeed>
 80073a0:	e003      	b.n	80073aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073a2:	2103      	movs	r1, #3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f957 	bl	8007658 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073aa:	2110      	movs	r1, #16
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f8f3 	bl	8007598 <USB_FlushTxFifo>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f91d 	bl	80075fc <USB_FlushRxFifo>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	461a      	mov	r2, r3
 80073d4:	2300      	movs	r3, #0
 80073d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	461a      	mov	r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	461a      	mov	r2, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	e043      	b.n	800747e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800740c:	d118      	bne.n	8007440 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007420:	461a      	mov	r2, r3
 8007422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e013      	b.n	8007452 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007436:	461a      	mov	r2, r3
 8007438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	e008      	b.n	8007452 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	461a      	mov	r2, r3
 800744e:	2300      	movs	r3, #0
 8007450:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	461a      	mov	r2, r3
 8007460:	2300      	movs	r3, #0
 8007462:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	461a      	mov	r2, r3
 8007472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	3301      	adds	r3, #1
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	429a      	cmp	r2, r3
 8007484:	d3b7      	bcc.n	80073f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	e043      	b.n	8007514 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800749e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a2:	d118      	bne.n	80074d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	461a      	mov	r2, r3
 80074b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	e013      	b.n	80074e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	461a      	mov	r2, r3
 80074ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	e008      	b.n	80074e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e2:	461a      	mov	r2, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	461a      	mov	r2, r3
 80074f6:	2300      	movs	r3, #0
 80074f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007506:	461a      	mov	r2, r3
 8007508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800750c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	3301      	adds	r3, #1
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	429a      	cmp	r2, r3
 800751a:	d3b7      	bcc.n	800748c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800752a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800752e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800753c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f043 0210 	orr.w	r2, r3, #16
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699a      	ldr	r2, [r3, #24]
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <USB_DevInit+0x2b4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800755c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f043 0208 	orr.w	r2, r3, #8
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800756e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d105      	bne.n	8007580 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <USB_DevInit+0x2b8>)
 800757a:	4313      	orrs	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800758c:	b004      	add	sp, #16
 800758e:	4770      	bx	lr
 8007590:	803c3800 	.word	0x803c3800
 8007594:	40000004 	.word	0x40000004

08007598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <USB_FlushTxFifo+0x60>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e01a      	b.n	80075ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	daf3      	bge.n	80075a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	019b      	lsls	r3, r3, #6
 80075c6:	f043 0220 	orr.w	r2, r3, #32
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <USB_FlushTxFifo+0x60>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e006      	b.n	80075ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d0f1      	beq.n	80075ce <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	00030d40 	.word	0x00030d40

080075fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3301      	adds	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	4a11      	ldr	r2, [pc, #68]	; (8007654 <USB_FlushRxFifo+0x58>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d901      	bls.n	8007618 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e017      	b.n	8007648 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	daf3      	bge.n	8007608 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2210      	movs	r2, #16
 8007628:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	4a08      	ldr	r2, [pc, #32]	; (8007654 <USB_FlushRxFifo+0x58>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e006      	b.n	8007648 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0310 	and.w	r3, r3, #16
 8007642:	2b10      	cmp	r3, #16
 8007644:	d0f1      	beq.n	800762a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	00030d40 	.word	0x00030d40

08007658 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	68f9      	ldr	r1, [r7, #12]
 8007674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007678:	4313      	orrs	r3, r2
 800767a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076a4:	f023 0303 	bic.w	r3, r3, #3
 80076a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b8:	f043 0302 	orr.w	r3, r3, #2
 80076bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	f003 0301 	and.w	r3, r3, #1
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	4a13      	ldr	r2, [pc, #76]	; (8007748 <USB_CoreReset+0x60>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d901      	bls.n	8007704 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e01a      	b.n	800773a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	daf3      	bge.n	80076f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f043 0201 	orr.w	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	4a09      	ldr	r2, [pc, #36]	; (8007748 <USB_CoreReset+0x60>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d901      	bls.n	800772c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e006      	b.n	800773a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b01      	cmp	r3, #1
 8007736:	d0f1      	beq.n	800771c <USB_CoreReset+0x34>

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	00030d40 	.word	0x00030d40

0800774c <arm_pid_init_f32>:
 800774c:	ed90 7a08 	vldr	s14, [r0, #32]
 8007750:	edd0 7a06 	vldr	s15, [r0, #24]
 8007754:	ed90 6a07 	vldr	s12, [r0, #28]
 8007758:	eef1 6a67 	vneg.f32	s13, s15
 800775c:	ed80 7a02 	vstr	s14, [r0, #8]
 8007760:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007764:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800776c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007770:	edc0 7a00 	vstr	s15, [r0]
 8007774:	ed80 7a01 	vstr	s14, [r0, #4]
 8007778:	b901      	cbnz	r1, 800777c <arm_pid_init_f32+0x30>
 800777a:	4770      	bx	lr
 800777c:	2300      	movs	r3, #0
 800777e:	60c3      	str	r3, [r0, #12]
 8007780:	6103      	str	r3, [r0, #16]
 8007782:	6143      	str	r3, [r0, #20]
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <arm_fir_init_f32>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	9c04      	ldr	r4, [sp, #16]
 800778c:	8001      	strh	r1, [r0, #0]
 800778e:	1e65      	subs	r5, r4, #1
 8007790:	4604      	mov	r4, r0
 8007792:	4618      	mov	r0, r3
 8007794:	440d      	add	r5, r1
 8007796:	60a2      	str	r2, [r4, #8]
 8007798:	2100      	movs	r1, #0
 800779a:	00aa      	lsls	r2, r5, #2
 800779c:	f000 fac4 	bl	8007d28 <memset>
 80077a0:	6060      	str	r0, [r4, #4]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}

080077a4 <arm_fir_f32>:
 80077a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80077ac:	ed2d 8b10 	vpush	{d8-d15}
 80077b0:	f8b0 c000 	ldrh.w	ip, [r0]
 80077b4:	b08b      	sub	sp, #44	; 0x2c
 80077b6:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80077ba:	4464      	add	r4, ip
 80077bc:	e9cd 0303 	strd	r0, r3, [sp, #12]
 80077c0:	eb0a 0584 	add.w	r5, sl, r4, lsl #2
 80077c4:	6880      	ldr	r0, [r0, #8]
 80077c6:	08db      	lsrs	r3, r3, #3
 80077c8:	9000      	str	r0, [sp, #0]
 80077ca:	9501      	str	r5, [sp, #4]
 80077cc:	9302      	str	r3, [sp, #8]
 80077ce:	f000 81f2 	beq.w	8007bb6 <arm_fir_f32+0x412>
 80077d2:	469e      	mov	lr, r3
 80077d4:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80077d8:	f100 0720 	add.w	r7, r0, #32
 80077dc:	9800      	ldr	r0, [sp, #0]
 80077de:	015c      	lsls	r4, r3, #5
 80077e0:	f00c 0907 	and.w	r9, ip, #7
 80077e4:	9707      	str	r7, [sp, #28]
 80077e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80077ea:	9405      	str	r4, [sp, #20]
 80077ec:	f10a 0b1c 	add.w	fp, sl, #28
 80077f0:	f8cd c020 	str.w	ip, [sp, #32]
 80077f4:	f101 0620 	add.w	r6, r1, #32
 80077f8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80077fc:	3520      	adds	r5, #32
 80077fe:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 8007802:	f102 0420 	add.w	r4, r2, #32
 8007806:	469c      	mov	ip, r3
 8007808:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800780c:	9006      	str	r0, [sp, #24]
 800780e:	4648      	mov	r0, r9
 8007810:	e9dd 8905 	ldrd	r8, r9, [sp, #20]
 8007814:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8007818:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800781c:	465a      	mov	r2, fp
 800781e:	f845 3c20 	str.w	r3, [r5, #-32]
 8007822:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8007826:	f845 3c1c 	str.w	r3, [r5, #-28]
 800782a:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800782e:	f845 3c18 	str.w	r3, [r5, #-24]
 8007832:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8007836:	f845 3c14 	str.w	r3, [r5, #-20]
 800783a:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800783e:	f845 3c10 	str.w	r3, [r5, #-16]
 8007842:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8007846:	f845 3c0c 	str.w	r3, [r5, #-12]
 800784a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800784e:	f845 3c08 	str.w	r3, [r5, #-8]
 8007852:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007856:	f845 3c04 	str.w	r3, [r5, #-4]
 800785a:	ed1b 9a07 	vldr	s18, [fp, #-28]	; 0xffffffe4
 800785e:	ed5b 0a06 	vldr	s1, [fp, #-24]	; 0xffffffe8
 8007862:	ed1b 0a05 	vldr	s0, [fp, #-20]	; 0xffffffec
 8007866:	ed1b 8a04 	vldr	s16, [fp, #-16]
 800786a:	ed5b 8a03 	vldr	s17, [fp, #-12]
 800786e:	ed5b 1a02 	vldr	s3, [fp, #-8]
 8007872:	ed1b 1a01 	vldr	s2, [fp, #-4]
 8007876:	f1bc 0f00 	cmp.w	ip, #0
 800787a:	f000 8208 	beq.w	8007c8e <arm_fir_f32+0x4ea>
 800787e:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8007c0c <arm_fir_f32+0x468>
 8007882:	f10b 0120 	add.w	r1, fp, #32
 8007886:	4653      	mov	r3, sl
 8007888:	eeb0 ca66 	vmov.f32	s24, s13
 800788c:	460a      	mov	r2, r1
 800788e:	eeb0 6a66 	vmov.f32	s12, s13
 8007892:	eef0 9a66 	vmov.f32	s19, s13
 8007896:	eeb0 aa66 	vmov.f32	s20, s13
 800789a:	eef0 aa66 	vmov.f32	s21, s13
 800789e:	eeb0 ba66 	vmov.f32	s22, s13
 80078a2:	eef0 ba66 	vmov.f32	s23, s13
 80078a6:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 80078aa:	3320      	adds	r3, #32
 80078ac:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 80078b0:	3220      	adds	r2, #32
 80078b2:	ee67 fa09 	vmul.f32	s31, s14, s18
 80078b6:	ed53 ea0f 	vldr	s29, [r3, #-60]	; 0xffffffc4
 80078ba:	ee27 da20 	vmul.f32	s26, s14, s1
 80078be:	ed12 9a0f 	vldr	s18, [r2, #-60]	; 0xffffffc4
 80078c2:	ee27 2a00 	vmul.f32	s4, s14, s0
 80078c6:	ed13 ea0e 	vldr	s28, [r3, #-56]	; 0xffffffc8
 80078ca:	ee27 3a08 	vmul.f32	s6, s14, s16
 80078ce:	ed53 da0d 	vldr	s27, [r3, #-52]	; 0xffffffcc
 80078d2:	ee67 3a28 	vmul.f32	s7, s14, s17
 80078d6:	ed53 ca0c 	vldr	s25, [r3, #-48]	; 0xffffffd0
 80078da:	ee67 5a21 	vmul.f32	s11, s14, s3
 80078de:	ed53 2a0b 	vldr	s5, [r3, #-44]	; 0xffffffd4
 80078e2:	ee27 fa01 	vmul.f32	s30, s14, s2
 80078e6:	ed13 4a0a 	vldr	s8, [r3, #-40]	; 0xffffffd8
 80078ea:	ee67 7a24 	vmul.f32	s15, s14, s9
 80078ee:	ed13 5a09 	vldr	s10, [r3, #-36]	; 0xffffffdc
 80078f2:	ee7f baab 	vadd.f32	s23, s31, s23
 80078f6:	429f      	cmp	r7, r3
 80078f8:	ee6e faa0 	vmul.f32	s31, s29, s1
 80078fc:	ed52 0a0e 	vldr	s1, [r2, #-56]	; 0xffffffc8
 8007900:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007904:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007908:	ee2e da80 	vmul.f32	s26, s29, s0
 800790c:	ee2e 2a88 	vmul.f32	s4, s29, s16
 8007910:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007914:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007918:	ee2e 3aa8 	vmul.f32	s6, s29, s17
 800791c:	ee6e 3aa1 	vmul.f32	s7, s29, s3
 8007920:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007924:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007928:	ee6e 5a81 	vmul.f32	s11, s29, s2
 800792c:	ee24 faae 	vmul.f32	s30, s9, s29
 8007930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007934:	ee6e ea89 	vmul.f32	s29, s29, s18
 8007938:	ee2e 7a00 	vmul.f32	s14, s28, s0
 800793c:	ed12 0a0d 	vldr	s0, [r2, #-52]	; 0xffffffcc
 8007940:	ee7f baab 	vadd.f32	s23, s31, s23
 8007944:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007948:	ee72 aa2a 	vadd.f32	s21, s4, s21
 800794c:	ee2e da08 	vmul.f32	s26, s28, s16
 8007950:	ee2e 2a28 	vmul.f32	s4, s28, s17
 8007954:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007958:	ee73 9aa9 	vadd.f32	s19, s7, s19
 800795c:	ee2e 3a21 	vmul.f32	s6, s28, s3
 8007960:	ee6e 3a01 	vmul.f32	s7, s28, s2
 8007964:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007968:	ee3f ca0c 	vadd.f32	s24, s30, s24
 800796c:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8007970:	ee29 fa0e 	vmul.f32	s30, s18, s28
 8007974:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8007978:	ee2e ea20 	vmul.f32	s28, s28, s1
 800797c:	ee6d 6a88 	vmul.f32	s13, s27, s16
 8007980:	ed12 8a0c 	vldr	s16, [r2, #-48]	; 0xffffffd0
 8007984:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007988:	ee77 ba2b 	vadd.f32	s23, s14, s23
 800798c:	ee2d daa8 	vmul.f32	s26, s27, s17
 8007990:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007994:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007998:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800799c:	ee2d 3a81 	vmul.f32	s6, s27, s2
 80079a0:	ee73 9aa9 	vadd.f32	s19, s7, s19
 80079a4:	ee35 6a86 	vadd.f32	s12, s11, s12
 80079a8:	ee64 3aad 	vmul.f32	s7, s9, s27
 80079ac:	ee69 5a2d 	vmul.f32	s11, s18, s27
 80079b0:	ee3f ca0c 	vadd.f32	s24, s30, s24
 80079b4:	ee7e 7a27 	vadd.f32	s15, s28, s15
 80079b8:	ee20 faad 	vmul.f32	s30, s1, s27
 80079bc:	ee6d da80 	vmul.f32	s27, s27, s0
 80079c0:	ee6c faa8 	vmul.f32	s31, s25, s17
 80079c4:	ed52 8a0b 	vldr	s17, [r2, #-44]	; 0xffffffd4
 80079c8:	ee76 baab 	vadd.f32	s23, s13, s23
 80079cc:	ee3d da0b 	vadd.f32	s26, s26, s22
 80079d0:	ee72 aa2a 	vadd.f32	s21, s4, s21
 80079d4:	ee2c baa1 	vmul.f32	s22, s25, s3
 80079d8:	ee2c 2a81 	vmul.f32	s4, s25, s2
 80079dc:	ee33 aa0a 	vadd.f32	s20, s6, s20
 80079e0:	ee73 9aa9 	vadd.f32	s19, s7, s19
 80079e4:	ee24 3aac 	vmul.f32	s6, s9, s25
 80079e8:	ee69 3a2c 	vmul.f32	s7, s18, s25
 80079ec:	ee35 6a86 	vadd.f32	s12, s11, s12
 80079f0:	ee3f ca0c 	vadd.f32	s24, s30, s24
 80079f4:	ee60 5aac 	vmul.f32	s11, s1, s25
 80079f8:	ee20 fa2c 	vmul.f32	s30, s0, s25
 80079fc:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8007a00:	ee6c ca88 	vmul.f32	s25, s25, s16
 8007a04:	ee62 eaa1 	vmul.f32	s29, s5, s3
 8007a08:	ed52 1a0a 	vldr	s3, [r2, #-40]	; 0xffffffd8
 8007a0c:	ee3b da0d 	vadd.f32	s26, s22, s26
 8007a10:	ee7f baab 	vadd.f32	s23, s31, s23
 8007a14:	ee22 ba81 	vmul.f32	s22, s5, s2
 8007a18:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007a1c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007a20:	ee24 2aa2 	vmul.f32	s4, s9, s5
 8007a24:	ee29 3a22 	vmul.f32	s6, s18, s5
 8007a28:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007a2c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007a30:	ee60 3aa2 	vmul.f32	s7, s1, s5
 8007a34:	ee60 5a22 	vmul.f32	s11, s0, s5
 8007a38:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007a3c:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8007a40:	ee28 fa22 	vmul.f32	s30, s16, s5
 8007a44:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8007a48:	ee7e faab 	vadd.f32	s31, s29, s23
 8007a4c:	ee3b ba0d 	vadd.f32	s22, s22, s26
 8007a50:	ee64 ba01 	vmul.f32	s23, s8, s2
 8007a54:	ed12 1a09 	vldr	s2, [r2, #-36]	; 0xffffffdc
 8007a58:	ee24 da84 	vmul.f32	s26, s9, s8
 8007a5c:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8007a60:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007a64:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007a68:	ee29 2a04 	vmul.f32	s4, s18, s8
 8007a6c:	ee20 3a84 	vmul.f32	s6, s1, s8
 8007a70:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007a74:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007a78:	ee60 3a04 	vmul.f32	s7, s0, s8
 8007a7c:	ee68 5a04 	vmul.f32	s11, s16, s8
 8007a80:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007a84:	ee28 7a84 	vmul.f32	s14, s17, s8
 8007a88:	ee64 6a21 	vmul.f32	s13, s8, s3
 8007a8c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007a90:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007a94:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007a98:	ee37 7a0c 	vadd.f32	s14, s14, s24
 8007a9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007aa0:	ee7b baaf 	vadd.f32	s23, s23, s31
 8007aa4:	ee64 4a85 	vmul.f32	s9, s9, s10
 8007aa8:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007aac:	ee29 4a05 	vmul.f32	s8, s18, s10
 8007ab0:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007ab4:	ee60 2a85 	vmul.f32	s5, s1, s10
 8007ab8:	ee20 3a05 	vmul.f32	s6, s0, s10
 8007abc:	ee68 3a05 	vmul.f32	s7, s16, s10
 8007ac0:	ee68 5a85 	vmul.f32	s11, s17, s10
 8007ac4:	ee21 ca85 	vmul.f32	s24, s3, s10
 8007ac8:	ee65 7a01 	vmul.f32	s15, s10, s2
 8007acc:	ee74 baab 	vadd.f32	s23, s9, s23
 8007ad0:	ee34 ba0b 	vadd.f32	s22, s8, s22
 8007ad4:	ee72 aaaa 	vadd.f32	s21, s5, s21
 8007ad8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007adc:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007ae0:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007ae4:	ee3c ca07 	vadd.f32	s24, s24, s14
 8007ae8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007aec:	f47f aedb 	bne.w	80078a6 <arm_fir_f32+0x102>
 8007af0:	eb0b 0208 	add.w	r2, fp, r8
 8007af4:	46cb      	mov	fp, r9
 8007af6:	b3a0      	cbz	r0, 8007b62 <arm_fir_f32+0x3be>
 8007af8:	4603      	mov	r3, r0
 8007afa:	ecfb 7a01 	vldmia	fp!, {s15}
 8007afe:	3b01      	subs	r3, #1
 8007b00:	ecf2 5a01 	vldmia	r2!, {s11}
 8007b04:	ee27 2a89 	vmul.f32	s4, s15, s18
 8007b08:	ee67 2aa0 	vmul.f32	s5, s15, s1
 8007b0c:	ee27 3a80 	vmul.f32	s6, s15, s0
 8007b10:	ee67 3a88 	vmul.f32	s7, s15, s16
 8007b14:	ee27 4aa8 	vmul.f32	s8, s15, s17
 8007b18:	ee67 4aa1 	vmul.f32	s9, s15, s3
 8007b1c:	ee21 5a27 	vmul.f32	s10, s2, s15
 8007b20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007b24:	eeb0 9a60 	vmov.f32	s18, s1
 8007b28:	ee7b ba82 	vadd.f32	s23, s23, s4
 8007b2c:	eef0 0a40 	vmov.f32	s1, s0
 8007b30:	ee3b ba22 	vadd.f32	s22, s22, s5
 8007b34:	eeb0 0a48 	vmov.f32	s0, s16
 8007b38:	ee7a aa83 	vadd.f32	s21, s21, s6
 8007b3c:	eeb0 8a68 	vmov.f32	s16, s17
 8007b40:	ee3a aa23 	vadd.f32	s20, s20, s7
 8007b44:	eef0 8a61 	vmov.f32	s17, s3
 8007b48:	ee79 9a84 	vadd.f32	s19, s19, s8
 8007b4c:	eef0 1a41 	vmov.f32	s3, s2
 8007b50:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007b54:	eeb0 1a65 	vmov.f32	s2, s11
 8007b58:	ee3c ca05 	vadd.f32	s24, s24, s10
 8007b5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007b60:	d1cb      	bne.n	8007afa <arm_fir_f32+0x356>
 8007b62:	f1be 0e01 	subs.w	lr, lr, #1
 8007b66:	ed44 ba08 	vstr	s23, [r4, #-32]	; 0xffffffe0
 8007b6a:	ed04 ba07 	vstr	s22, [r4, #-28]	; 0xffffffe4
 8007b6e:	f106 0620 	add.w	r6, r6, #32
 8007b72:	ed44 aa06 	vstr	s21, [r4, #-24]	; 0xffffffe8
 8007b76:	f105 0520 	add.w	r5, r5, #32
 8007b7a:	ed04 aa05 	vstr	s20, [r4, #-20]	; 0xffffffec
 8007b7e:	468b      	mov	fp, r1
 8007b80:	ed44 9a04 	vstr	s19, [r4, #-16]
 8007b84:	f104 0420 	add.w	r4, r4, #32
 8007b88:	ed04 6a0b 	vstr	s12, [r4, #-44]	; 0xffffffd4
 8007b8c:	ed04 ca0a 	vstr	s24, [r4, #-40]	; 0xffffffd8
 8007b90:	ed44 6a09 	vstr	s13, [r4, #-36]	; 0xffffffdc
 8007b94:	f47f ae40 	bne.w	8007818 <arm_fir_f32+0x74>
 8007b98:	9b02      	ldr	r3, [sp, #8]
 8007b9a:	9801      	ldr	r0, [sp, #4]
 8007b9c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8007ba0:	e9dd ca08 	ldrd	ip, sl, [sp, #32]
 8007ba4:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8007ba8:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 8007bac:	eb0a 1a43 	add.w	sl, sl, r3, lsl #5
 8007bb0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	f013 0607 	ands.w	r6, r3, #7
 8007bbc:	d02a      	beq.n	8007c14 <arm_fir_f32+0x470>
 8007bbe:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8007bc2:	9f01      	ldr	r7, [sp, #4]
 8007bc4:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007bc8:	4655      	mov	r5, sl
 8007bca:	f8dd 8000 	ldr.w	r8, [sp]
 8007bce:	4633      	mov	r3, r6
 8007bd0:	4666      	mov	r6, ip
 8007bd2:	469c      	mov	ip, r3
 8007bd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8007bd8:	f847 3b04 	str.w	r3, [r7], #4
 8007bdc:	2e00      	cmp	r6, #0
 8007bde:	d06b      	beq.n	8007cb8 <arm_fir_f32+0x514>
 8007be0:	4633      	mov	r3, r6
 8007be2:	4644      	mov	r4, r8
 8007be4:	4628      	mov	r0, r5
 8007be6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007c0c <arm_fir_f32+0x468>
 8007bea:	ecf0 7a01 	vldmia	r0!, {s15}
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	ecf4 6a01 	vldmia	r4!, {s13}
 8007bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bfc:	d1f5      	bne.n	8007bea <arm_fir_f32+0x446>
 8007bfe:	4561      	cmp	r1, ip
 8007c00:	f105 0504 	add.w	r5, r5, #4
 8007c04:	eca2 7a01 	vstmia	r2!, {s14}
 8007c08:	d1e4      	bne.n	8007bd4 <arm_fir_f32+0x430>
 8007c0a:	e001      	b.n	8007c10 <arm_fir_f32+0x46c>
 8007c0c:	00000000 	.word	0x00000000
 8007c10:	46b4      	mov	ip, r6
 8007c12:	44f2      	add	sl, lr
 8007c14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	ea5f 059c 	movs.w	r5, ip, lsr #2
 8007c1e:	685c      	ldr	r4, [r3, #4]
 8007c20:	d01e      	beq.n	8007c60 <arm_fir_f32+0x4bc>
 8007c22:	f10a 0210 	add.w	r2, sl, #16
 8007c26:	f104 0310 	add.w	r3, r4, #16
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8007c30:	3901      	subs	r1, #1
 8007c32:	f102 0210 	add.w	r2, r2, #16
 8007c36:	f103 0310 	add.w	r3, r3, #16
 8007c3a:	f843 0c20 	str.w	r0, [r3, #-32]
 8007c3e:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 8007c42:	f843 0c1c 	str.w	r0, [r3, #-28]
 8007c46:	f852 0c18 	ldr.w	r0, [r2, #-24]
 8007c4a:	f843 0c18 	str.w	r0, [r3, #-24]
 8007c4e:	f852 0c14 	ldr.w	r0, [r2, #-20]
 8007c52:	f843 0c14 	str.w	r0, [r3, #-20]
 8007c56:	d1e9      	bne.n	8007c2c <arm_fir_f32+0x488>
 8007c58:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
 8007c5c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8007c60:	f01c 0c03 	ands.w	ip, ip, #3
 8007c64:	d00e      	beq.n	8007c84 <arm_fir_f32+0x4e0>
 8007c66:	f8da 3000 	ldr.w	r3, [sl]
 8007c6a:	f1bc 0c01 	subs.w	ip, ip, #1
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	d008      	beq.n	8007c84 <arm_fir_f32+0x4e0>
 8007c72:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007c76:	f1bc 0f01 	cmp.w	ip, #1
 8007c7a:	6063      	str	r3, [r4, #4]
 8007c7c:	d002      	beq.n	8007c84 <arm_fir_f32+0x4e0>
 8007c7e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	b00b      	add	sp, #44	; 0x2c
 8007c86:	ecbd 8b10 	vpop	{d8-d15}
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8e:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 8007c0c <arm_fir_f32+0x468>
 8007c92:	f102 0120 	add.w	r1, r2, #32
 8007c96:	f8dd b000 	ldr.w	fp, [sp]
 8007c9a:	eeb0 ca66 	vmov.f32	s24, s13
 8007c9e:	eeb0 6a66 	vmov.f32	s12, s13
 8007ca2:	eef0 9a66 	vmov.f32	s19, s13
 8007ca6:	eeb0 aa66 	vmov.f32	s20, s13
 8007caa:	eef0 aa66 	vmov.f32	s21, s13
 8007cae:	eeb0 ba66 	vmov.f32	s22, s13
 8007cb2:	eef0 ba66 	vmov.f32	s23, s13
 8007cb6:	e71e      	b.n	8007af6 <arm_fir_f32+0x352>
 8007cb8:	ed1f 7a2c 	vldr	s14, [pc, #-176]	; 8007c0c <arm_fir_f32+0x468>
 8007cbc:	4561      	cmp	r1, ip
 8007cbe:	f105 0504 	add.w	r5, r5, #4
 8007cc2:	eca2 7a01 	vstmia	r2!, {s14}
 8007cc6:	d185      	bne.n	8007bd4 <arm_fir_f32+0x430>
 8007cc8:	e7a2      	b.n	8007c10 <arm_fir_f32+0x46c>
 8007cca:	bf00      	nop

08007ccc <atof>:
 8007ccc:	2100      	movs	r1, #0
 8007cce:	f001 ba99 	b.w	8009204 <strtod>
	...

08007cd4 <__errno>:
 8007cd4:	4b01      	ldr	r3, [pc, #4]	; (8007cdc <__errno+0x8>)
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	2000010c 	.word	0x2000010c

08007ce0 <__libc_init_array>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4d0d      	ldr	r5, [pc, #52]	; (8007d18 <__libc_init_array+0x38>)
 8007ce4:	4c0d      	ldr	r4, [pc, #52]	; (8007d1c <__libc_init_array+0x3c>)
 8007ce6:	1b64      	subs	r4, r4, r5
 8007ce8:	10a4      	asrs	r4, r4, #2
 8007cea:	2600      	movs	r6, #0
 8007cec:	42a6      	cmp	r6, r4
 8007cee:	d109      	bne.n	8007d04 <__libc_init_array+0x24>
 8007cf0:	4d0b      	ldr	r5, [pc, #44]	; (8007d20 <__libc_init_array+0x40>)
 8007cf2:	4c0c      	ldr	r4, [pc, #48]	; (8007d24 <__libc_init_array+0x44>)
 8007cf4:	f004 f8ea 	bl	800becc <_init>
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	42a6      	cmp	r6, r4
 8007d00:	d105      	bne.n	8007d0e <__libc_init_array+0x2e>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d08:	4798      	blx	r3
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7ee      	b.n	8007cec <__libc_init_array+0xc>
 8007d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d12:	4798      	blx	r3
 8007d14:	3601      	adds	r6, #1
 8007d16:	e7f2      	b.n	8007cfe <__libc_init_array+0x1e>
 8007d18:	0800c424 	.word	0x0800c424
 8007d1c:	0800c424 	.word	0x0800c424
 8007d20:	0800c424 	.word	0x0800c424
 8007d24:	0800c428 	.word	0x0800c428

08007d28 <memset>:
 8007d28:	4402      	add	r2, r0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d100      	bne.n	8007d32 <memset+0xa>
 8007d30:	4770      	bx	lr
 8007d32:	f803 1b01 	strb.w	r1, [r3], #1
 8007d36:	e7f9      	b.n	8007d2c <memset+0x4>

08007d38 <__cvt>:
 8007d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3a:	ed2d 8b02 	vpush	{d8}
 8007d3e:	eeb0 8b40 	vmov.f64	d8, d0
 8007d42:	b085      	sub	sp, #20
 8007d44:	4617      	mov	r7, r2
 8007d46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007d48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d4a:	ee18 2a90 	vmov	r2, s17
 8007d4e:	f025 0520 	bic.w	r5, r5, #32
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	bfb6      	itet	lt
 8007d56:	222d      	movlt	r2, #45	; 0x2d
 8007d58:	2200      	movge	r2, #0
 8007d5a:	eeb1 8b40 	vneglt.f64	d8, d0
 8007d5e:	2d46      	cmp	r5, #70	; 0x46
 8007d60:	460c      	mov	r4, r1
 8007d62:	701a      	strb	r2, [r3, #0]
 8007d64:	d004      	beq.n	8007d70 <__cvt+0x38>
 8007d66:	2d45      	cmp	r5, #69	; 0x45
 8007d68:	d100      	bne.n	8007d6c <__cvt+0x34>
 8007d6a:	3401      	adds	r4, #1
 8007d6c:	2102      	movs	r1, #2
 8007d6e:	e000      	b.n	8007d72 <__cvt+0x3a>
 8007d70:	2103      	movs	r1, #3
 8007d72:	ab03      	add	r3, sp, #12
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	ab02      	add	r3, sp, #8
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	4633      	mov	r3, r6
 8007d7e:	eeb0 0b48 	vmov.f64	d0, d8
 8007d82:	f001 fad9 	bl	8009338 <_dtoa_r>
 8007d86:	2d47      	cmp	r5, #71	; 0x47
 8007d88:	d109      	bne.n	8007d9e <__cvt+0x66>
 8007d8a:	07fb      	lsls	r3, r7, #31
 8007d8c:	d407      	bmi.n	8007d9e <__cvt+0x66>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d92:	1a1b      	subs	r3, r3, r0
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	b005      	add	sp, #20
 8007d98:	ecbd 8b02 	vpop	{d8}
 8007d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9e:	2d46      	cmp	r5, #70	; 0x46
 8007da0:	eb00 0204 	add.w	r2, r0, r4
 8007da4:	d10c      	bne.n	8007dc0 <__cvt+0x88>
 8007da6:	7803      	ldrb	r3, [r0, #0]
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	d107      	bne.n	8007dbc <__cvt+0x84>
 8007dac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db4:	bf1c      	itt	ne
 8007db6:	f1c4 0401 	rsbne	r4, r4, #1
 8007dba:	6034      	strne	r4, [r6, #0]
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	441a      	add	r2, r3
 8007dc0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc8:	bf08      	it	eq
 8007dca:	9203      	streq	r2, [sp, #12]
 8007dcc:	2130      	movs	r1, #48	; 0x30
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d2dc      	bcs.n	8007d8e <__cvt+0x56>
 8007dd4:	1c5c      	adds	r4, r3, #1
 8007dd6:	9403      	str	r4, [sp, #12]
 8007dd8:	7019      	strb	r1, [r3, #0]
 8007dda:	e7f8      	b.n	8007dce <__cvt+0x96>

08007ddc <__exponent>:
 8007ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dde:	4603      	mov	r3, r0
 8007de0:	2900      	cmp	r1, #0
 8007de2:	bfb8      	it	lt
 8007de4:	4249      	neglt	r1, r1
 8007de6:	f803 2b02 	strb.w	r2, [r3], #2
 8007dea:	bfb4      	ite	lt
 8007dec:	222d      	movlt	r2, #45	; 0x2d
 8007dee:	222b      	movge	r2, #43	; 0x2b
 8007df0:	2909      	cmp	r1, #9
 8007df2:	7042      	strb	r2, [r0, #1]
 8007df4:	dd2a      	ble.n	8007e4c <__exponent+0x70>
 8007df6:	f10d 0407 	add.w	r4, sp, #7
 8007dfa:	46a4      	mov	ip, r4
 8007dfc:	270a      	movs	r7, #10
 8007dfe:	46a6      	mov	lr, r4
 8007e00:	460a      	mov	r2, r1
 8007e02:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e06:	fb07 1516 	mls	r5, r7, r6, r1
 8007e0a:	3530      	adds	r5, #48	; 0x30
 8007e0c:	2a63      	cmp	r2, #99	; 0x63
 8007e0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e16:	4631      	mov	r1, r6
 8007e18:	dcf1      	bgt.n	8007dfe <__exponent+0x22>
 8007e1a:	3130      	adds	r1, #48	; 0x30
 8007e1c:	f1ae 0502 	sub.w	r5, lr, #2
 8007e20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e24:	1c44      	adds	r4, r0, #1
 8007e26:	4629      	mov	r1, r5
 8007e28:	4561      	cmp	r1, ip
 8007e2a:	d30a      	bcc.n	8007e42 <__exponent+0x66>
 8007e2c:	f10d 0209 	add.w	r2, sp, #9
 8007e30:	eba2 020e 	sub.w	r2, r2, lr
 8007e34:	4565      	cmp	r5, ip
 8007e36:	bf88      	it	hi
 8007e38:	2200      	movhi	r2, #0
 8007e3a:	4413      	add	r3, r2
 8007e3c:	1a18      	subs	r0, r3, r0
 8007e3e:	b003      	add	sp, #12
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e4a:	e7ed      	b.n	8007e28 <__exponent+0x4c>
 8007e4c:	2330      	movs	r3, #48	; 0x30
 8007e4e:	3130      	adds	r1, #48	; 0x30
 8007e50:	7083      	strb	r3, [r0, #2]
 8007e52:	70c1      	strb	r1, [r0, #3]
 8007e54:	1d03      	adds	r3, r0, #4
 8007e56:	e7f1      	b.n	8007e3c <__exponent+0x60>

08007e58 <_printf_float>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	b08b      	sub	sp, #44	; 0x2c
 8007e5e:	460c      	mov	r4, r1
 8007e60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007e64:	4616      	mov	r6, r2
 8007e66:	461f      	mov	r7, r3
 8007e68:	4605      	mov	r5, r0
 8007e6a:	f002 fb57 	bl	800a51c <_localeconv_r>
 8007e6e:	f8d0 b000 	ldr.w	fp, [r0]
 8007e72:	4658      	mov	r0, fp
 8007e74:	f7f8 f9e4 	bl	8000240 <strlen>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9308      	str	r3, [sp, #32]
 8007e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	3307      	adds	r3, #7
 8007e88:	f023 0307 	bic.w	r3, r3, #7
 8007e8c:	f103 0108 	add.w	r1, r3, #8
 8007e90:	f8c8 1000 	str.w	r1, [r8]
 8007e94:	4682      	mov	sl, r0
 8007e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007e9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008100 <_printf_float+0x2a8>
 8007ea2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007ea6:	eeb0 6bc0 	vabs.f64	d6, d0
 8007eaa:	eeb4 6b47 	vcmp.f64	d6, d7
 8007eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb2:	dd24      	ble.n	8007efe <_printf_float+0xa6>
 8007eb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ebc:	d502      	bpl.n	8007ec4 <_printf_float+0x6c>
 8007ebe:	232d      	movs	r3, #45	; 0x2d
 8007ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec4:	4b90      	ldr	r3, [pc, #576]	; (8008108 <_printf_float+0x2b0>)
 8007ec6:	4891      	ldr	r0, [pc, #580]	; (800810c <_printf_float+0x2b4>)
 8007ec8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007ecc:	bf94      	ite	ls
 8007ece:	4698      	movls	r8, r3
 8007ed0:	4680      	movhi	r8, r0
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	f022 0204 	bic.w	r2, r2, #4
 8007eda:	2300      	movs	r3, #0
 8007edc:	6022      	str	r2, [r4, #0]
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	9700      	str	r7, [sp, #0]
 8007ee2:	4633      	mov	r3, r6
 8007ee4:	aa09      	add	r2, sp, #36	; 0x24
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 f9d3 	bl	8008294 <_printf_common>
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f040 808a 	bne.w	8008008 <_printf_float+0x1b0>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	b00b      	add	sp, #44	; 0x2c
 8007efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efe:	eeb4 0b40 	vcmp.f64	d0, d0
 8007f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f06:	d709      	bvc.n	8007f1c <_printf_float+0xc4>
 8007f08:	ee10 3a90 	vmov	r3, s1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bfbc      	itt	lt
 8007f10:	232d      	movlt	r3, #45	; 0x2d
 8007f12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f16:	487e      	ldr	r0, [pc, #504]	; (8008110 <_printf_float+0x2b8>)
 8007f18:	4b7e      	ldr	r3, [pc, #504]	; (8008114 <_printf_float+0x2bc>)
 8007f1a:	e7d5      	b.n	8007ec8 <_printf_float+0x70>
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007f22:	9104      	str	r1, [sp, #16]
 8007f24:	1c59      	adds	r1, r3, #1
 8007f26:	d13c      	bne.n	8007fa2 <_printf_float+0x14a>
 8007f28:	2306      	movs	r3, #6
 8007f2a:	6063      	str	r3, [r4, #4]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	ab08      	add	r3, sp, #32
 8007f32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f3a:	ab07      	add	r3, sp, #28
 8007f3c:	6861      	ldr	r1, [r4, #4]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	6022      	str	r2, [r4, #0]
 8007f42:	f10d 031b 	add.w	r3, sp, #27
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7ff fef6 	bl	8007d38 <__cvt>
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	9907      	ldr	r1, [sp, #28]
 8007f50:	2b47      	cmp	r3, #71	; 0x47
 8007f52:	4680      	mov	r8, r0
 8007f54:	d108      	bne.n	8007f68 <_printf_float+0x110>
 8007f56:	1cc8      	adds	r0, r1, #3
 8007f58:	db02      	blt.n	8007f60 <_printf_float+0x108>
 8007f5a:	6863      	ldr	r3, [r4, #4]
 8007f5c:	4299      	cmp	r1, r3
 8007f5e:	dd41      	ble.n	8007fe4 <_printf_float+0x18c>
 8007f60:	f1a9 0902 	sub.w	r9, r9, #2
 8007f64:	fa5f f989 	uxtb.w	r9, r9
 8007f68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f6c:	d820      	bhi.n	8007fb0 <_printf_float+0x158>
 8007f6e:	3901      	subs	r1, #1
 8007f70:	464a      	mov	r2, r9
 8007f72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f76:	9107      	str	r1, [sp, #28]
 8007f78:	f7ff ff30 	bl	8007ddc <__exponent>
 8007f7c:	9a08      	ldr	r2, [sp, #32]
 8007f7e:	9004      	str	r0, [sp, #16]
 8007f80:	1813      	adds	r3, r2, r0
 8007f82:	2a01      	cmp	r2, #1
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	dc02      	bgt.n	8007f8e <_printf_float+0x136>
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	07d2      	lsls	r2, r2, #31
 8007f8c:	d501      	bpl.n	8007f92 <_printf_float+0x13a>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0a2      	beq.n	8007ee0 <_printf_float+0x88>
 8007f9a:	232d      	movs	r3, #45	; 0x2d
 8007f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa0:	e79e      	b.n	8007ee0 <_printf_float+0x88>
 8007fa2:	9904      	ldr	r1, [sp, #16]
 8007fa4:	2947      	cmp	r1, #71	; 0x47
 8007fa6:	d1c1      	bne.n	8007f2c <_printf_float+0xd4>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1bf      	bne.n	8007f2c <_printf_float+0xd4>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e7bc      	b.n	8007f2a <_printf_float+0xd2>
 8007fb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007fb4:	d118      	bne.n	8007fe8 <_printf_float+0x190>
 8007fb6:	2900      	cmp	r1, #0
 8007fb8:	6863      	ldr	r3, [r4, #4]
 8007fba:	dd0b      	ble.n	8007fd4 <_printf_float+0x17c>
 8007fbc:	6121      	str	r1, [r4, #16]
 8007fbe:	b913      	cbnz	r3, 8007fc6 <_printf_float+0x16e>
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	07d0      	lsls	r0, r2, #31
 8007fc4:	d502      	bpl.n	8007fcc <_printf_float+0x174>
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	440b      	add	r3, r1
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fd0:	9304      	str	r3, [sp, #16]
 8007fd2:	e7de      	b.n	8007f92 <_printf_float+0x13a>
 8007fd4:	b913      	cbnz	r3, 8007fdc <_printf_float+0x184>
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	07d2      	lsls	r2, r2, #31
 8007fda:	d501      	bpl.n	8007fe0 <_printf_float+0x188>
 8007fdc:	3302      	adds	r3, #2
 8007fde:	e7f4      	b.n	8007fca <_printf_float+0x172>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f2      	b.n	8007fca <_printf_float+0x172>
 8007fe4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007fe8:	9b08      	ldr	r3, [sp, #32]
 8007fea:	4299      	cmp	r1, r3
 8007fec:	db05      	blt.n	8007ffa <_printf_float+0x1a2>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	6121      	str	r1, [r4, #16]
 8007ff2:	07d8      	lsls	r0, r3, #31
 8007ff4:	d5ea      	bpl.n	8007fcc <_printf_float+0x174>
 8007ff6:	1c4b      	adds	r3, r1, #1
 8007ff8:	e7e7      	b.n	8007fca <_printf_float+0x172>
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	bfd4      	ite	le
 8007ffe:	f1c1 0202 	rsble	r2, r1, #2
 8008002:	2201      	movgt	r2, #1
 8008004:	4413      	add	r3, r2
 8008006:	e7e0      	b.n	8007fca <_printf_float+0x172>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	055a      	lsls	r2, r3, #21
 800800c:	d407      	bmi.n	800801e <_printf_float+0x1c6>
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	4642      	mov	r2, r8
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	47b8      	blx	r7
 8008018:	3001      	adds	r0, #1
 800801a:	d12a      	bne.n	8008072 <_printf_float+0x21a>
 800801c:	e76a      	b.n	8007ef4 <_printf_float+0x9c>
 800801e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008022:	f240 80e2 	bls.w	80081ea <_printf_float+0x392>
 8008026:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800802a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800802e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008032:	d133      	bne.n	800809c <_printf_float+0x244>
 8008034:	4a38      	ldr	r2, [pc, #224]	; (8008118 <_printf_float+0x2c0>)
 8008036:	2301      	movs	r3, #1
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	f43f af58 	beq.w	8007ef4 <_printf_float+0x9c>
 8008044:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008048:	429a      	cmp	r2, r3
 800804a:	db02      	blt.n	8008052 <_printf_float+0x1fa>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	07d8      	lsls	r0, r3, #31
 8008050:	d50f      	bpl.n	8008072 <_printf_float+0x21a>
 8008052:	4653      	mov	r3, sl
 8008054:	465a      	mov	r2, fp
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f af49 	beq.w	8007ef4 <_printf_float+0x9c>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	f104 091a 	add.w	r9, r4, #26
 800806a:	9b08      	ldr	r3, [sp, #32]
 800806c:	3b01      	subs	r3, #1
 800806e:	4543      	cmp	r3, r8
 8008070:	dc09      	bgt.n	8008086 <_printf_float+0x22e>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	079b      	lsls	r3, r3, #30
 8008076:	f100 8108 	bmi.w	800828a <_printf_float+0x432>
 800807a:	68e0      	ldr	r0, [r4, #12]
 800807c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807e:	4298      	cmp	r0, r3
 8008080:	bfb8      	it	lt
 8008082:	4618      	movlt	r0, r3
 8008084:	e738      	b.n	8007ef8 <_printf_float+0xa0>
 8008086:	2301      	movs	r3, #1
 8008088:	464a      	mov	r2, r9
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f af2f 	beq.w	8007ef4 <_printf_float+0x9c>
 8008096:	f108 0801 	add.w	r8, r8, #1
 800809a:	e7e6      	b.n	800806a <_printf_float+0x212>
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dc3c      	bgt.n	800811c <_printf_float+0x2c4>
 80080a2:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <_printf_float+0x2c0>)
 80080a4:	2301      	movs	r3, #1
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	47b8      	blx	r7
 80080ac:	3001      	adds	r0, #1
 80080ae:	f43f af21 	beq.w	8007ef4 <_printf_float+0x9c>
 80080b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	d102      	bne.n	80080c0 <_printf_float+0x268>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	07d9      	lsls	r1, r3, #31
 80080be:	d5d8      	bpl.n	8008072 <_printf_float+0x21a>
 80080c0:	4653      	mov	r3, sl
 80080c2:	465a      	mov	r2, fp
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f af12 	beq.w	8007ef4 <_printf_float+0x9c>
 80080d0:	f04f 0900 	mov.w	r9, #0
 80080d4:	f104 0a1a 	add.w	sl, r4, #26
 80080d8:	9b07      	ldr	r3, [sp, #28]
 80080da:	425b      	negs	r3, r3
 80080dc:	454b      	cmp	r3, r9
 80080de:	dc01      	bgt.n	80080e4 <_printf_float+0x28c>
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	e795      	b.n	8008010 <_printf_float+0x1b8>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4652      	mov	r2, sl
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	f43f af00 	beq.w	8007ef4 <_printf_float+0x9c>
 80080f4:	f109 0901 	add.w	r9, r9, #1
 80080f8:	e7ee      	b.n	80080d8 <_printf_float+0x280>
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w
 8008100:	ffffffff 	.word	0xffffffff
 8008104:	7fefffff 	.word	0x7fefffff
 8008108:	0800bf70 	.word	0x0800bf70
 800810c:	0800bf74 	.word	0x0800bf74
 8008110:	0800bf7c 	.word	0x0800bf7c
 8008114:	0800bf78 	.word	0x0800bf78
 8008118:	0800bf80 	.word	0x0800bf80
 800811c:	9a08      	ldr	r2, [sp, #32]
 800811e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008120:	429a      	cmp	r2, r3
 8008122:	bfa8      	it	ge
 8008124:	461a      	movge	r2, r3
 8008126:	2a00      	cmp	r2, #0
 8008128:	4691      	mov	r9, r2
 800812a:	dc38      	bgt.n	800819e <_printf_float+0x346>
 800812c:	2300      	movs	r3, #0
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008134:	f104 021a 	add.w	r2, r4, #26
 8008138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800813a:	9905      	ldr	r1, [sp, #20]
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	eba3 0309 	sub.w	r3, r3, r9
 8008142:	428b      	cmp	r3, r1
 8008144:	dc33      	bgt.n	80081ae <_printf_float+0x356>
 8008146:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800814a:	429a      	cmp	r2, r3
 800814c:	db3c      	blt.n	80081c8 <_printf_float+0x370>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	07da      	lsls	r2, r3, #31
 8008152:	d439      	bmi.n	80081c8 <_printf_float+0x370>
 8008154:	9a08      	ldr	r2, [sp, #32]
 8008156:	9b04      	ldr	r3, [sp, #16]
 8008158:	9907      	ldr	r1, [sp, #28]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	eba2 0901 	sub.w	r9, r2, r1
 8008160:	4599      	cmp	r9, r3
 8008162:	bfa8      	it	ge
 8008164:	4699      	movge	r9, r3
 8008166:	f1b9 0f00 	cmp.w	r9, #0
 800816a:	dc35      	bgt.n	80081d8 <_printf_float+0x380>
 800816c:	f04f 0800 	mov.w	r8, #0
 8008170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008174:	f104 0a1a 	add.w	sl, r4, #26
 8008178:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	eba3 0309 	sub.w	r3, r3, r9
 8008182:	4543      	cmp	r3, r8
 8008184:	f77f af75 	ble.w	8008072 <_printf_float+0x21a>
 8008188:	2301      	movs	r3, #1
 800818a:	4652      	mov	r2, sl
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	f43f aeae 	beq.w	8007ef4 <_printf_float+0x9c>
 8008198:	f108 0801 	add.w	r8, r8, #1
 800819c:	e7ec      	b.n	8008178 <_printf_float+0x320>
 800819e:	4613      	mov	r3, r2
 80081a0:	4631      	mov	r1, r6
 80081a2:	4642      	mov	r2, r8
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	d1bf      	bne.n	800812c <_printf_float+0x2d4>
 80081ac:	e6a2      	b.n	8007ef4 <_printf_float+0x9c>
 80081ae:	2301      	movs	r3, #1
 80081b0:	4631      	mov	r1, r6
 80081b2:	4628      	mov	r0, r5
 80081b4:	9204      	str	r2, [sp, #16]
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f ae9b 	beq.w	8007ef4 <_printf_float+0x9c>
 80081be:	9b05      	ldr	r3, [sp, #20]
 80081c0:	9a04      	ldr	r2, [sp, #16]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	e7b7      	b.n	8008138 <_printf_float+0x2e0>
 80081c8:	4653      	mov	r3, sl
 80081ca:	465a      	mov	r2, fp
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b8      	blx	r7
 80081d2:	3001      	adds	r0, #1
 80081d4:	d1be      	bne.n	8008154 <_printf_float+0x2fc>
 80081d6:	e68d      	b.n	8007ef4 <_printf_float+0x9c>
 80081d8:	9a04      	ldr	r2, [sp, #16]
 80081da:	464b      	mov	r3, r9
 80081dc:	4442      	add	r2, r8
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	d1c1      	bne.n	800816c <_printf_float+0x314>
 80081e8:	e684      	b.n	8007ef4 <_printf_float+0x9c>
 80081ea:	9a08      	ldr	r2, [sp, #32]
 80081ec:	2a01      	cmp	r2, #1
 80081ee:	dc01      	bgt.n	80081f4 <_printf_float+0x39c>
 80081f0:	07db      	lsls	r3, r3, #31
 80081f2:	d537      	bpl.n	8008264 <_printf_float+0x40c>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4642      	mov	r2, r8
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f ae78 	beq.w	8007ef4 <_printf_float+0x9c>
 8008204:	4653      	mov	r3, sl
 8008206:	465a      	mov	r2, fp
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f ae70 	beq.w	8007ef4 <_printf_float+0x9c>
 8008214:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008218:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800821c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008220:	d01b      	beq.n	800825a <_printf_float+0x402>
 8008222:	9b08      	ldr	r3, [sp, #32]
 8008224:	f108 0201 	add.w	r2, r8, #1
 8008228:	3b01      	subs	r3, #1
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	d10e      	bne.n	8008252 <_printf_float+0x3fa>
 8008234:	e65e      	b.n	8007ef4 <_printf_float+0x9c>
 8008236:	2301      	movs	r3, #1
 8008238:	464a      	mov	r2, r9
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f ae57 	beq.w	8007ef4 <_printf_float+0x9c>
 8008246:	f108 0801 	add.w	r8, r8, #1
 800824a:	9b08      	ldr	r3, [sp, #32]
 800824c:	3b01      	subs	r3, #1
 800824e:	4543      	cmp	r3, r8
 8008250:	dcf1      	bgt.n	8008236 <_printf_float+0x3de>
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008258:	e6db      	b.n	8008012 <_printf_float+0x1ba>
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	f104 091a 	add.w	r9, r4, #26
 8008262:	e7f2      	b.n	800824a <_printf_float+0x3f2>
 8008264:	2301      	movs	r3, #1
 8008266:	4642      	mov	r2, r8
 8008268:	e7df      	b.n	800822a <_printf_float+0x3d2>
 800826a:	2301      	movs	r3, #1
 800826c:	464a      	mov	r2, r9
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	f43f ae3d 	beq.w	8007ef4 <_printf_float+0x9c>
 800827a:	f108 0801 	add.w	r8, r8, #1
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008282:	1a5b      	subs	r3, r3, r1
 8008284:	4543      	cmp	r3, r8
 8008286:	dcf0      	bgt.n	800826a <_printf_float+0x412>
 8008288:	e6f7      	b.n	800807a <_printf_float+0x222>
 800828a:	f04f 0800 	mov.w	r8, #0
 800828e:	f104 0919 	add.w	r9, r4, #25
 8008292:	e7f4      	b.n	800827e <_printf_float+0x426>

08008294 <_printf_common>:
 8008294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	4616      	mov	r6, r2
 800829a:	4699      	mov	r9, r3
 800829c:	688a      	ldr	r2, [r1, #8]
 800829e:	690b      	ldr	r3, [r1, #16]
 80082a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082a4:	4293      	cmp	r3, r2
 80082a6:	bfb8      	it	lt
 80082a8:	4613      	movlt	r3, r2
 80082aa:	6033      	str	r3, [r6, #0]
 80082ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082b0:	4607      	mov	r7, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	b10a      	cbz	r2, 80082ba <_printf_common+0x26>
 80082b6:	3301      	adds	r3, #1
 80082b8:	6033      	str	r3, [r6, #0]
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	0699      	lsls	r1, r3, #26
 80082be:	bf42      	ittt	mi
 80082c0:	6833      	ldrmi	r3, [r6, #0]
 80082c2:	3302      	addmi	r3, #2
 80082c4:	6033      	strmi	r3, [r6, #0]
 80082c6:	6825      	ldr	r5, [r4, #0]
 80082c8:	f015 0506 	ands.w	r5, r5, #6
 80082cc:	d106      	bne.n	80082dc <_printf_common+0x48>
 80082ce:	f104 0a19 	add.w	sl, r4, #25
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	6832      	ldr	r2, [r6, #0]
 80082d6:	1a9b      	subs	r3, r3, r2
 80082d8:	42ab      	cmp	r3, r5
 80082da:	dc26      	bgt.n	800832a <_printf_common+0x96>
 80082dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082e0:	1e13      	subs	r3, r2, #0
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	bf18      	it	ne
 80082e6:	2301      	movne	r3, #1
 80082e8:	0692      	lsls	r2, r2, #26
 80082ea:	d42b      	bmi.n	8008344 <_printf_common+0xb0>
 80082ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082f0:	4649      	mov	r1, r9
 80082f2:	4638      	mov	r0, r7
 80082f4:	47c0      	blx	r8
 80082f6:	3001      	adds	r0, #1
 80082f8:	d01e      	beq.n	8008338 <_printf_common+0xa4>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	68e5      	ldr	r5, [r4, #12]
 80082fe:	6832      	ldr	r2, [r6, #0]
 8008300:	f003 0306 	and.w	r3, r3, #6
 8008304:	2b04      	cmp	r3, #4
 8008306:	bf08      	it	eq
 8008308:	1aad      	subeq	r5, r5, r2
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	bf0c      	ite	eq
 8008310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008314:	2500      	movne	r5, #0
 8008316:	4293      	cmp	r3, r2
 8008318:	bfc4      	itt	gt
 800831a:	1a9b      	subgt	r3, r3, r2
 800831c:	18ed      	addgt	r5, r5, r3
 800831e:	2600      	movs	r6, #0
 8008320:	341a      	adds	r4, #26
 8008322:	42b5      	cmp	r5, r6
 8008324:	d11a      	bne.n	800835c <_printf_common+0xc8>
 8008326:	2000      	movs	r0, #0
 8008328:	e008      	b.n	800833c <_printf_common+0xa8>
 800832a:	2301      	movs	r3, #1
 800832c:	4652      	mov	r2, sl
 800832e:	4649      	mov	r1, r9
 8008330:	4638      	mov	r0, r7
 8008332:	47c0      	blx	r8
 8008334:	3001      	adds	r0, #1
 8008336:	d103      	bne.n	8008340 <_printf_common+0xac>
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008340:	3501      	adds	r5, #1
 8008342:	e7c6      	b.n	80082d2 <_printf_common+0x3e>
 8008344:	18e1      	adds	r1, r4, r3
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	2030      	movs	r0, #48	; 0x30
 800834a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800834e:	4422      	add	r2, r4
 8008350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008358:	3302      	adds	r3, #2
 800835a:	e7c7      	b.n	80082ec <_printf_common+0x58>
 800835c:	2301      	movs	r3, #1
 800835e:	4622      	mov	r2, r4
 8008360:	4649      	mov	r1, r9
 8008362:	4638      	mov	r0, r7
 8008364:	47c0      	blx	r8
 8008366:	3001      	adds	r0, #1
 8008368:	d0e6      	beq.n	8008338 <_printf_common+0xa4>
 800836a:	3601      	adds	r6, #1
 800836c:	e7d9      	b.n	8008322 <_printf_common+0x8e>
	...

08008370 <_printf_i>:
 8008370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	460c      	mov	r4, r1
 8008376:	4691      	mov	r9, r2
 8008378:	7e27      	ldrb	r7, [r4, #24]
 800837a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800837c:	2f78      	cmp	r7, #120	; 0x78
 800837e:	4680      	mov	r8, r0
 8008380:	469a      	mov	sl, r3
 8008382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008386:	d807      	bhi.n	8008398 <_printf_i+0x28>
 8008388:	2f62      	cmp	r7, #98	; 0x62
 800838a:	d80a      	bhi.n	80083a2 <_printf_i+0x32>
 800838c:	2f00      	cmp	r7, #0
 800838e:	f000 80d8 	beq.w	8008542 <_printf_i+0x1d2>
 8008392:	2f58      	cmp	r7, #88	; 0x58
 8008394:	f000 80a3 	beq.w	80084de <_printf_i+0x16e>
 8008398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800839c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083a0:	e03a      	b.n	8008418 <_printf_i+0xa8>
 80083a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083a6:	2b15      	cmp	r3, #21
 80083a8:	d8f6      	bhi.n	8008398 <_printf_i+0x28>
 80083aa:	a001      	add	r0, pc, #4	; (adr r0, 80083b0 <_printf_i+0x40>)
 80083ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083b0:	08008409 	.word	0x08008409
 80083b4:	0800841d 	.word	0x0800841d
 80083b8:	08008399 	.word	0x08008399
 80083bc:	08008399 	.word	0x08008399
 80083c0:	08008399 	.word	0x08008399
 80083c4:	08008399 	.word	0x08008399
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	08008399 	.word	0x08008399
 80083d0:	08008399 	.word	0x08008399
 80083d4:	08008399 	.word	0x08008399
 80083d8:	08008399 	.word	0x08008399
 80083dc:	08008529 	.word	0x08008529
 80083e0:	0800844d 	.word	0x0800844d
 80083e4:	0800850b 	.word	0x0800850b
 80083e8:	08008399 	.word	0x08008399
 80083ec:	08008399 	.word	0x08008399
 80083f0:	0800854b 	.word	0x0800854b
 80083f4:	08008399 	.word	0x08008399
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	08008399 	.word	0x08008399
 8008400:	08008399 	.word	0x08008399
 8008404:	08008513 	.word	0x08008513
 8008408:	680b      	ldr	r3, [r1, #0]
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	600a      	str	r2, [r1, #0]
 8008410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008418:	2301      	movs	r3, #1
 800841a:	e0a3      	b.n	8008564 <_printf_i+0x1f4>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	6808      	ldr	r0, [r1, #0]
 8008420:	062e      	lsls	r6, r5, #24
 8008422:	f100 0304 	add.w	r3, r0, #4
 8008426:	d50a      	bpl.n	800843e <_printf_i+0xce>
 8008428:	6805      	ldr	r5, [r0, #0]
 800842a:	600b      	str	r3, [r1, #0]
 800842c:	2d00      	cmp	r5, #0
 800842e:	da03      	bge.n	8008438 <_printf_i+0xc8>
 8008430:	232d      	movs	r3, #45	; 0x2d
 8008432:	426d      	negs	r5, r5
 8008434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008438:	485e      	ldr	r0, [pc, #376]	; (80085b4 <_printf_i+0x244>)
 800843a:	230a      	movs	r3, #10
 800843c:	e019      	b.n	8008472 <_printf_i+0x102>
 800843e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008442:	6805      	ldr	r5, [r0, #0]
 8008444:	600b      	str	r3, [r1, #0]
 8008446:	bf18      	it	ne
 8008448:	b22d      	sxthne	r5, r5
 800844a:	e7ef      	b.n	800842c <_printf_i+0xbc>
 800844c:	680b      	ldr	r3, [r1, #0]
 800844e:	6825      	ldr	r5, [r4, #0]
 8008450:	1d18      	adds	r0, r3, #4
 8008452:	6008      	str	r0, [r1, #0]
 8008454:	0628      	lsls	r0, r5, #24
 8008456:	d501      	bpl.n	800845c <_printf_i+0xec>
 8008458:	681d      	ldr	r5, [r3, #0]
 800845a:	e002      	b.n	8008462 <_printf_i+0xf2>
 800845c:	0669      	lsls	r1, r5, #25
 800845e:	d5fb      	bpl.n	8008458 <_printf_i+0xe8>
 8008460:	881d      	ldrh	r5, [r3, #0]
 8008462:	4854      	ldr	r0, [pc, #336]	; (80085b4 <_printf_i+0x244>)
 8008464:	2f6f      	cmp	r7, #111	; 0x6f
 8008466:	bf0c      	ite	eq
 8008468:	2308      	moveq	r3, #8
 800846a:	230a      	movne	r3, #10
 800846c:	2100      	movs	r1, #0
 800846e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008472:	6866      	ldr	r6, [r4, #4]
 8008474:	60a6      	str	r6, [r4, #8]
 8008476:	2e00      	cmp	r6, #0
 8008478:	bfa2      	ittt	ge
 800847a:	6821      	ldrge	r1, [r4, #0]
 800847c:	f021 0104 	bicge.w	r1, r1, #4
 8008480:	6021      	strge	r1, [r4, #0]
 8008482:	b90d      	cbnz	r5, 8008488 <_printf_i+0x118>
 8008484:	2e00      	cmp	r6, #0
 8008486:	d04d      	beq.n	8008524 <_printf_i+0x1b4>
 8008488:	4616      	mov	r6, r2
 800848a:	fbb5 f1f3 	udiv	r1, r5, r3
 800848e:	fb03 5711 	mls	r7, r3, r1, r5
 8008492:	5dc7      	ldrb	r7, [r0, r7]
 8008494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008498:	462f      	mov	r7, r5
 800849a:	42bb      	cmp	r3, r7
 800849c:	460d      	mov	r5, r1
 800849e:	d9f4      	bls.n	800848a <_printf_i+0x11a>
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d10b      	bne.n	80084bc <_printf_i+0x14c>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	07df      	lsls	r7, r3, #31
 80084a8:	d508      	bpl.n	80084bc <_printf_i+0x14c>
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	6861      	ldr	r1, [r4, #4]
 80084ae:	4299      	cmp	r1, r3
 80084b0:	bfde      	ittt	le
 80084b2:	2330      	movle	r3, #48	; 0x30
 80084b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084bc:	1b92      	subs	r2, r2, r6
 80084be:	6122      	str	r2, [r4, #16]
 80084c0:	f8cd a000 	str.w	sl, [sp]
 80084c4:	464b      	mov	r3, r9
 80084c6:	aa03      	add	r2, sp, #12
 80084c8:	4621      	mov	r1, r4
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7ff fee2 	bl	8008294 <_printf_common>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d14c      	bne.n	800856e <_printf_i+0x1fe>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	b004      	add	sp, #16
 80084da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084de:	4835      	ldr	r0, [pc, #212]	; (80085b4 <_printf_i+0x244>)
 80084e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	680e      	ldr	r6, [r1, #0]
 80084e8:	061f      	lsls	r7, r3, #24
 80084ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80084ee:	600e      	str	r6, [r1, #0]
 80084f0:	d514      	bpl.n	800851c <_printf_i+0x1ac>
 80084f2:	07d9      	lsls	r1, r3, #31
 80084f4:	bf44      	itt	mi
 80084f6:	f043 0320 	orrmi.w	r3, r3, #32
 80084fa:	6023      	strmi	r3, [r4, #0]
 80084fc:	b91d      	cbnz	r5, 8008506 <_printf_i+0x196>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	f023 0320 	bic.w	r3, r3, #32
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	2310      	movs	r3, #16
 8008508:	e7b0      	b.n	800846c <_printf_i+0xfc>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	f043 0320 	orr.w	r3, r3, #32
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	2378      	movs	r3, #120	; 0x78
 8008514:	4828      	ldr	r0, [pc, #160]	; (80085b8 <_printf_i+0x248>)
 8008516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800851a:	e7e3      	b.n	80084e4 <_printf_i+0x174>
 800851c:	065e      	lsls	r6, r3, #25
 800851e:	bf48      	it	mi
 8008520:	b2ad      	uxthmi	r5, r5
 8008522:	e7e6      	b.n	80084f2 <_printf_i+0x182>
 8008524:	4616      	mov	r6, r2
 8008526:	e7bb      	b.n	80084a0 <_printf_i+0x130>
 8008528:	680b      	ldr	r3, [r1, #0]
 800852a:	6826      	ldr	r6, [r4, #0]
 800852c:	6960      	ldr	r0, [r4, #20]
 800852e:	1d1d      	adds	r5, r3, #4
 8008530:	600d      	str	r5, [r1, #0]
 8008532:	0635      	lsls	r5, r6, #24
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	d501      	bpl.n	800853c <_printf_i+0x1cc>
 8008538:	6018      	str	r0, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0x1d2>
 800853c:	0671      	lsls	r1, r6, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0x1c8>
 8008540:	8018      	strh	r0, [r3, #0]
 8008542:	2300      	movs	r3, #0
 8008544:	6123      	str	r3, [r4, #16]
 8008546:	4616      	mov	r6, r2
 8008548:	e7ba      	b.n	80084c0 <_printf_i+0x150>
 800854a:	680b      	ldr	r3, [r1, #0]
 800854c:	1d1a      	adds	r2, r3, #4
 800854e:	600a      	str	r2, [r1, #0]
 8008550:	681e      	ldr	r6, [r3, #0]
 8008552:	6862      	ldr	r2, [r4, #4]
 8008554:	2100      	movs	r1, #0
 8008556:	4630      	mov	r0, r6
 8008558:	f7f7 fe7a 	bl	8000250 <memchr>
 800855c:	b108      	cbz	r0, 8008562 <_printf_i+0x1f2>
 800855e:	1b80      	subs	r0, r0, r6
 8008560:	6060      	str	r0, [r4, #4]
 8008562:	6863      	ldr	r3, [r4, #4]
 8008564:	6123      	str	r3, [r4, #16]
 8008566:	2300      	movs	r3, #0
 8008568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800856c:	e7a8      	b.n	80084c0 <_printf_i+0x150>
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	4632      	mov	r2, r6
 8008572:	4649      	mov	r1, r9
 8008574:	4640      	mov	r0, r8
 8008576:	47d0      	blx	sl
 8008578:	3001      	adds	r0, #1
 800857a:	d0ab      	beq.n	80084d4 <_printf_i+0x164>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	079b      	lsls	r3, r3, #30
 8008580:	d413      	bmi.n	80085aa <_printf_i+0x23a>
 8008582:	68e0      	ldr	r0, [r4, #12]
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	4298      	cmp	r0, r3
 8008588:	bfb8      	it	lt
 800858a:	4618      	movlt	r0, r3
 800858c:	e7a4      	b.n	80084d8 <_printf_i+0x168>
 800858e:	2301      	movs	r3, #1
 8008590:	4632      	mov	r2, r6
 8008592:	4649      	mov	r1, r9
 8008594:	4640      	mov	r0, r8
 8008596:	47d0      	blx	sl
 8008598:	3001      	adds	r0, #1
 800859a:	d09b      	beq.n	80084d4 <_printf_i+0x164>
 800859c:	3501      	adds	r5, #1
 800859e:	68e3      	ldr	r3, [r4, #12]
 80085a0:	9903      	ldr	r1, [sp, #12]
 80085a2:	1a5b      	subs	r3, r3, r1
 80085a4:	42ab      	cmp	r3, r5
 80085a6:	dcf2      	bgt.n	800858e <_printf_i+0x21e>
 80085a8:	e7eb      	b.n	8008582 <_printf_i+0x212>
 80085aa:	2500      	movs	r5, #0
 80085ac:	f104 0619 	add.w	r6, r4, #25
 80085b0:	e7f5      	b.n	800859e <_printf_i+0x22e>
 80085b2:	bf00      	nop
 80085b4:	0800bf82 	.word	0x0800bf82
 80085b8:	0800bf93 	.word	0x0800bf93

080085bc <siprintf>:
 80085bc:	b40e      	push	{r1, r2, r3}
 80085be:	b500      	push	{lr}
 80085c0:	b09c      	sub	sp, #112	; 0x70
 80085c2:	ab1d      	add	r3, sp, #116	; 0x74
 80085c4:	9002      	str	r0, [sp, #8]
 80085c6:	9006      	str	r0, [sp, #24]
 80085c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085cc:	4809      	ldr	r0, [pc, #36]	; (80085f4 <siprintf+0x38>)
 80085ce:	9107      	str	r1, [sp, #28]
 80085d0:	9104      	str	r1, [sp, #16]
 80085d2:	4909      	ldr	r1, [pc, #36]	; (80085f8 <siprintf+0x3c>)
 80085d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d8:	9105      	str	r1, [sp, #20]
 80085da:	6800      	ldr	r0, [r0, #0]
 80085dc:	9301      	str	r3, [sp, #4]
 80085de:	a902      	add	r1, sp, #8
 80085e0:	f002 fd9a 	bl	800b118 <_svfiprintf_r>
 80085e4:	9b02      	ldr	r3, [sp, #8]
 80085e6:	2200      	movs	r2, #0
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	b01c      	add	sp, #112	; 0x70
 80085ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80085f0:	b003      	add	sp, #12
 80085f2:	4770      	bx	lr
 80085f4:	2000010c 	.word	0x2000010c
 80085f8:	ffff0208 	.word	0xffff0208

080085fc <strncmp>:
 80085fc:	b510      	push	{r4, lr}
 80085fe:	b16a      	cbz	r2, 800861c <strncmp+0x20>
 8008600:	3901      	subs	r1, #1
 8008602:	1884      	adds	r4, r0, r2
 8008604:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008608:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800860c:	4293      	cmp	r3, r2
 800860e:	d103      	bne.n	8008618 <strncmp+0x1c>
 8008610:	42a0      	cmp	r0, r4
 8008612:	d001      	beq.n	8008618 <strncmp+0x1c>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f5      	bne.n	8008604 <strncmp+0x8>
 8008618:	1a98      	subs	r0, r3, r2
 800861a:	bd10      	pop	{r4, pc}
 800861c:	4610      	mov	r0, r2
 800861e:	e7fc      	b.n	800861a <strncmp+0x1e>

08008620 <sulp>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	4604      	mov	r4, r0
 8008624:	460d      	mov	r5, r1
 8008626:	4616      	mov	r6, r2
 8008628:	ec45 4b10 	vmov	d0, r4, r5
 800862c:	f002 fb0e 	bl	800ac4c <__ulp>
 8008630:	b17e      	cbz	r6, 8008652 <sulp+0x32>
 8008632:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008636:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800863a:	2b00      	cmp	r3, #0
 800863c:	dd09      	ble.n	8008652 <sulp+0x32>
 800863e:	051b      	lsls	r3, r3, #20
 8008640:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008644:	2000      	movs	r0, #0
 8008646:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800864a:	ec41 0b17 	vmov	d7, r0, r1
 800864e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	0000      	movs	r0, r0
	...

08008658 <_strtod_l>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	ed2d 8b0c 	vpush	{d8-d13}
 8008660:	b09d      	sub	sp, #116	; 0x74
 8008662:	461f      	mov	r7, r3
 8008664:	2300      	movs	r3, #0
 8008666:	9318      	str	r3, [sp, #96]	; 0x60
 8008668:	4ba6      	ldr	r3, [pc, #664]	; (8008904 <_strtod_l+0x2ac>)
 800866a:	9213      	str	r2, [sp, #76]	; 0x4c
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	9308      	str	r3, [sp, #32]
 8008670:	4604      	mov	r4, r0
 8008672:	4618      	mov	r0, r3
 8008674:	468a      	mov	sl, r1
 8008676:	f7f7 fde3 	bl	8000240 <strlen>
 800867a:	f04f 0800 	mov.w	r8, #0
 800867e:	4605      	mov	r5, r0
 8008680:	f04f 0900 	mov.w	r9, #0
 8008684:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800868a:	781a      	ldrb	r2, [r3, #0]
 800868c:	2a2b      	cmp	r2, #43	; 0x2b
 800868e:	d04d      	beq.n	800872c <_strtod_l+0xd4>
 8008690:	d83a      	bhi.n	8008708 <_strtod_l+0xb0>
 8008692:	2a0d      	cmp	r2, #13
 8008694:	d833      	bhi.n	80086fe <_strtod_l+0xa6>
 8008696:	2a08      	cmp	r2, #8
 8008698:	d833      	bhi.n	8008702 <_strtod_l+0xaa>
 800869a:	2a00      	cmp	r2, #0
 800869c:	d03d      	beq.n	800871a <_strtod_l+0xc2>
 800869e:	2300      	movs	r3, #0
 80086a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80086a4:	7833      	ldrb	r3, [r6, #0]
 80086a6:	2b30      	cmp	r3, #48	; 0x30
 80086a8:	f040 80b6 	bne.w	8008818 <_strtod_l+0x1c0>
 80086ac:	7873      	ldrb	r3, [r6, #1]
 80086ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086b2:	2b58      	cmp	r3, #88	; 0x58
 80086b4:	d16d      	bne.n	8008792 <_strtod_l+0x13a>
 80086b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	ab18      	add	r3, sp, #96	; 0x60
 80086bc:	9702      	str	r7, [sp, #8]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4a91      	ldr	r2, [pc, #580]	; (8008908 <_strtod_l+0x2b0>)
 80086c2:	ab19      	add	r3, sp, #100	; 0x64
 80086c4:	a917      	add	r1, sp, #92	; 0x5c
 80086c6:	4620      	mov	r0, r4
 80086c8:	f001 fc20 	bl	8009f0c <__gethex>
 80086cc:	f010 0507 	ands.w	r5, r0, #7
 80086d0:	4607      	mov	r7, r0
 80086d2:	d005      	beq.n	80086e0 <_strtod_l+0x88>
 80086d4:	2d06      	cmp	r5, #6
 80086d6:	d12b      	bne.n	8008730 <_strtod_l+0xd8>
 80086d8:	3601      	adds	r6, #1
 80086da:	2300      	movs	r3, #0
 80086dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80086de:	930b      	str	r3, [sp, #44]	; 0x2c
 80086e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f040 856e 	bne.w	80091c4 <_strtod_l+0xb6c>
 80086e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ea:	b1e3      	cbz	r3, 8008726 <_strtod_l+0xce>
 80086ec:	ec49 8b17 	vmov	d7, r8, r9
 80086f0:	eeb1 0b47 	vneg.f64	d0, d7
 80086f4:	b01d      	add	sp, #116	; 0x74
 80086f6:	ecbd 8b0c 	vpop	{d8-d13}
 80086fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fe:	2a20      	cmp	r2, #32
 8008700:	d1cd      	bne.n	800869e <_strtod_l+0x46>
 8008702:	3301      	adds	r3, #1
 8008704:	9317      	str	r3, [sp, #92]	; 0x5c
 8008706:	e7bf      	b.n	8008688 <_strtod_l+0x30>
 8008708:	2a2d      	cmp	r2, #45	; 0x2d
 800870a:	d1c8      	bne.n	800869e <_strtod_l+0x46>
 800870c:	2201      	movs	r2, #1
 800870e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	9217      	str	r2, [sp, #92]	; 0x5c
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1c3      	bne.n	80086a2 <_strtod_l+0x4a>
 800871a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800871c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008720:	2b00      	cmp	r3, #0
 8008722:	f040 854d 	bne.w	80091c0 <_strtod_l+0xb68>
 8008726:	ec49 8b10 	vmov	d0, r8, r9
 800872a:	e7e3      	b.n	80086f4 <_strtod_l+0x9c>
 800872c:	2200      	movs	r2, #0
 800872e:	e7ee      	b.n	800870e <_strtod_l+0xb6>
 8008730:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008732:	b13a      	cbz	r2, 8008744 <_strtod_l+0xec>
 8008734:	2135      	movs	r1, #53	; 0x35
 8008736:	a81a      	add	r0, sp, #104	; 0x68
 8008738:	f002 fb94 	bl	800ae64 <__copybits>
 800873c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800873e:	4620      	mov	r0, r4
 8008740:	f001 ff58 	bl	800a5f4 <_Bfree>
 8008744:	3d01      	subs	r5, #1
 8008746:	2d05      	cmp	r5, #5
 8008748:	d807      	bhi.n	800875a <_strtod_l+0x102>
 800874a:	e8df f005 	tbb	[pc, r5]
 800874e:	0b0e      	.short	0x0b0e
 8008750:	030e1d18 	.word	0x030e1d18
 8008754:	f04f 0900 	mov.w	r9, #0
 8008758:	46c8      	mov	r8, r9
 800875a:	073b      	lsls	r3, r7, #28
 800875c:	d5c0      	bpl.n	80086e0 <_strtod_l+0x88>
 800875e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008762:	e7bd      	b.n	80086e0 <_strtod_l+0x88>
 8008764:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8008768:	e7f7      	b.n	800875a <_strtod_l+0x102>
 800876a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800876e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008770:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008774:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008778:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800877c:	e7ed      	b.n	800875a <_strtod_l+0x102>
 800877e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800890c <_strtod_l+0x2b4>
 8008782:	f04f 0800 	mov.w	r8, #0
 8008786:	e7e8      	b.n	800875a <_strtod_l+0x102>
 8008788:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800878c:	f04f 38ff 	mov.w	r8, #4294967295
 8008790:	e7e3      	b.n	800875a <_strtod_l+0x102>
 8008792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	9217      	str	r2, [sp, #92]	; 0x5c
 8008798:	785b      	ldrb	r3, [r3, #1]
 800879a:	2b30      	cmp	r3, #48	; 0x30
 800879c:	d0f9      	beq.n	8008792 <_strtod_l+0x13a>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d09e      	beq.n	80086e0 <_strtod_l+0x88>
 80087a2:	2301      	movs	r3, #1
 80087a4:	9306      	str	r3, [sp, #24]
 80087a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087a8:	930c      	str	r3, [sp, #48]	; 0x30
 80087aa:	2300      	movs	r3, #0
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	461e      	mov	r6, r3
 80087b2:	220a      	movs	r2, #10
 80087b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80087b6:	f890 b000 	ldrb.w	fp, [r0]
 80087ba:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80087be:	b2d9      	uxtb	r1, r3
 80087c0:	2909      	cmp	r1, #9
 80087c2:	d92b      	bls.n	800881c <_strtod_l+0x1c4>
 80087c4:	9908      	ldr	r1, [sp, #32]
 80087c6:	462a      	mov	r2, r5
 80087c8:	f7ff ff18 	bl	80085fc <strncmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d035      	beq.n	800883c <_strtod_l+0x1e4>
 80087d0:	2000      	movs	r0, #0
 80087d2:	465a      	mov	r2, fp
 80087d4:	4633      	mov	r3, r6
 80087d6:	4683      	mov	fp, r0
 80087d8:	4601      	mov	r1, r0
 80087da:	2a65      	cmp	r2, #101	; 0x65
 80087dc:	d001      	beq.n	80087e2 <_strtod_l+0x18a>
 80087de:	2a45      	cmp	r2, #69	; 0x45
 80087e0:	d118      	bne.n	8008814 <_strtod_l+0x1bc>
 80087e2:	b91b      	cbnz	r3, 80087ec <_strtod_l+0x194>
 80087e4:	9b06      	ldr	r3, [sp, #24]
 80087e6:	4303      	orrs	r3, r0
 80087e8:	d097      	beq.n	800871a <_strtod_l+0xc2>
 80087ea:	2300      	movs	r3, #0
 80087ec:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80087f0:	f10a 0201 	add.w	r2, sl, #1
 80087f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80087f6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80087fa:	2a2b      	cmp	r2, #43	; 0x2b
 80087fc:	d077      	beq.n	80088ee <_strtod_l+0x296>
 80087fe:	2a2d      	cmp	r2, #45	; 0x2d
 8008800:	d07d      	beq.n	80088fe <_strtod_l+0x2a6>
 8008802:	f04f 0e00 	mov.w	lr, #0
 8008806:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800880a:	2d09      	cmp	r5, #9
 800880c:	f240 8084 	bls.w	8008918 <_strtod_l+0x2c0>
 8008810:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008814:	2500      	movs	r5, #0
 8008816:	e09f      	b.n	8008958 <_strtod_l+0x300>
 8008818:	2300      	movs	r3, #0
 800881a:	e7c3      	b.n	80087a4 <_strtod_l+0x14c>
 800881c:	2e08      	cmp	r6, #8
 800881e:	bfd5      	itete	le
 8008820:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008822:	9904      	ldrgt	r1, [sp, #16]
 8008824:	fb02 3301 	mlale	r3, r2, r1, r3
 8008828:	fb02 3301 	mlagt	r3, r2, r1, r3
 800882c:	f100 0001 	add.w	r0, r0, #1
 8008830:	bfd4      	ite	le
 8008832:	930a      	strle	r3, [sp, #40]	; 0x28
 8008834:	9304      	strgt	r3, [sp, #16]
 8008836:	3601      	adds	r6, #1
 8008838:	9017      	str	r0, [sp, #92]	; 0x5c
 800883a:	e7bb      	b.n	80087b4 <_strtod_l+0x15c>
 800883c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800883e:	195a      	adds	r2, r3, r5
 8008840:	9217      	str	r2, [sp, #92]	; 0x5c
 8008842:	5d5a      	ldrb	r2, [r3, r5]
 8008844:	b3ae      	cbz	r6, 80088b2 <_strtod_l+0x25a>
 8008846:	4683      	mov	fp, r0
 8008848:	4633      	mov	r3, r6
 800884a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800884e:	2909      	cmp	r1, #9
 8008850:	d912      	bls.n	8008878 <_strtod_l+0x220>
 8008852:	2101      	movs	r1, #1
 8008854:	e7c1      	b.n	80087da <_strtod_l+0x182>
 8008856:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	9217      	str	r2, [sp, #92]	; 0x5c
 800885c:	785a      	ldrb	r2, [r3, #1]
 800885e:	3001      	adds	r0, #1
 8008860:	2a30      	cmp	r2, #48	; 0x30
 8008862:	d0f8      	beq.n	8008856 <_strtod_l+0x1fe>
 8008864:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008868:	2b08      	cmp	r3, #8
 800886a:	f200 84b0 	bhi.w	80091ce <_strtod_l+0xb76>
 800886e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008870:	930c      	str	r3, [sp, #48]	; 0x30
 8008872:	4683      	mov	fp, r0
 8008874:	2000      	movs	r0, #0
 8008876:	4603      	mov	r3, r0
 8008878:	3a30      	subs	r2, #48	; 0x30
 800887a:	f100 0101 	add.w	r1, r0, #1
 800887e:	d012      	beq.n	80088a6 <_strtod_l+0x24e>
 8008880:	448b      	add	fp, r1
 8008882:	eb00 0c03 	add.w	ip, r0, r3
 8008886:	4619      	mov	r1, r3
 8008888:	250a      	movs	r5, #10
 800888a:	4561      	cmp	r1, ip
 800888c:	d113      	bne.n	80088b6 <_strtod_l+0x25e>
 800888e:	1819      	adds	r1, r3, r0
 8008890:	2908      	cmp	r1, #8
 8008892:	f103 0301 	add.w	r3, r3, #1
 8008896:	4403      	add	r3, r0
 8008898:	dc1d      	bgt.n	80088d6 <_strtod_l+0x27e>
 800889a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800889c:	210a      	movs	r1, #10
 800889e:	fb01 2200 	mla	r2, r1, r0, r2
 80088a2:	920a      	str	r2, [sp, #40]	; 0x28
 80088a4:	2100      	movs	r1, #0
 80088a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088a8:	1c50      	adds	r0, r2, #1
 80088aa:	9017      	str	r0, [sp, #92]	; 0x5c
 80088ac:	7852      	ldrb	r2, [r2, #1]
 80088ae:	4608      	mov	r0, r1
 80088b0:	e7cb      	b.n	800884a <_strtod_l+0x1f2>
 80088b2:	4630      	mov	r0, r6
 80088b4:	e7d4      	b.n	8008860 <_strtod_l+0x208>
 80088b6:	2908      	cmp	r1, #8
 80088b8:	dc04      	bgt.n	80088c4 <_strtod_l+0x26c>
 80088ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80088bc:	436f      	muls	r7, r5
 80088be:	970a      	str	r7, [sp, #40]	; 0x28
 80088c0:	3101      	adds	r1, #1
 80088c2:	e7e2      	b.n	800888a <_strtod_l+0x232>
 80088c4:	f101 0e01 	add.w	lr, r1, #1
 80088c8:	f1be 0f10 	cmp.w	lr, #16
 80088cc:	bfde      	ittt	le
 80088ce:	9f04      	ldrle	r7, [sp, #16]
 80088d0:	436f      	mulle	r7, r5
 80088d2:	9704      	strle	r7, [sp, #16]
 80088d4:	e7f4      	b.n	80088c0 <_strtod_l+0x268>
 80088d6:	2b10      	cmp	r3, #16
 80088d8:	bfdf      	itttt	le
 80088da:	9804      	ldrle	r0, [sp, #16]
 80088dc:	210a      	movle	r1, #10
 80088de:	fb01 2200 	mlale	r2, r1, r0, r2
 80088e2:	9204      	strle	r2, [sp, #16]
 80088e4:	e7de      	b.n	80088a4 <_strtod_l+0x24c>
 80088e6:	f04f 0b00 	mov.w	fp, #0
 80088ea:	2101      	movs	r1, #1
 80088ec:	e77a      	b.n	80087e4 <_strtod_l+0x18c>
 80088ee:	f04f 0e00 	mov.w	lr, #0
 80088f2:	f10a 0202 	add.w	r2, sl, #2
 80088f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80088f8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80088fc:	e783      	b.n	8008806 <_strtod_l+0x1ae>
 80088fe:	f04f 0e01 	mov.w	lr, #1
 8008902:	e7f6      	b.n	80088f2 <_strtod_l+0x29a>
 8008904:	0800c0f8 	.word	0x0800c0f8
 8008908:	0800bfa4 	.word	0x0800bfa4
 800890c:	7ff00000 	.word	0x7ff00000
 8008910:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008912:	1c55      	adds	r5, r2, #1
 8008914:	9517      	str	r5, [sp, #92]	; 0x5c
 8008916:	7852      	ldrb	r2, [r2, #1]
 8008918:	2a30      	cmp	r2, #48	; 0x30
 800891a:	d0f9      	beq.n	8008910 <_strtod_l+0x2b8>
 800891c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008920:	2d08      	cmp	r5, #8
 8008922:	f63f af77 	bhi.w	8008814 <_strtod_l+0x1bc>
 8008926:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800892a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800892c:	9208      	str	r2, [sp, #32]
 800892e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008930:	1c55      	adds	r5, r2, #1
 8008932:	9517      	str	r5, [sp, #92]	; 0x5c
 8008934:	7852      	ldrb	r2, [r2, #1]
 8008936:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800893a:	2f09      	cmp	r7, #9
 800893c:	d937      	bls.n	80089ae <_strtod_l+0x356>
 800893e:	9f08      	ldr	r7, [sp, #32]
 8008940:	1bed      	subs	r5, r5, r7
 8008942:	2d08      	cmp	r5, #8
 8008944:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008948:	dc02      	bgt.n	8008950 <_strtod_l+0x2f8>
 800894a:	4565      	cmp	r5, ip
 800894c:	bfa8      	it	ge
 800894e:	4665      	movge	r5, ip
 8008950:	f1be 0f00 	cmp.w	lr, #0
 8008954:	d000      	beq.n	8008958 <_strtod_l+0x300>
 8008956:	426d      	negs	r5, r5
 8008958:	2b00      	cmp	r3, #0
 800895a:	d14f      	bne.n	80089fc <_strtod_l+0x3a4>
 800895c:	9b06      	ldr	r3, [sp, #24]
 800895e:	4303      	orrs	r3, r0
 8008960:	f47f aebe 	bne.w	80086e0 <_strtod_l+0x88>
 8008964:	2900      	cmp	r1, #0
 8008966:	f47f aed8 	bne.w	800871a <_strtod_l+0xc2>
 800896a:	2a69      	cmp	r2, #105	; 0x69
 800896c:	d027      	beq.n	80089be <_strtod_l+0x366>
 800896e:	dc24      	bgt.n	80089ba <_strtod_l+0x362>
 8008970:	2a49      	cmp	r2, #73	; 0x49
 8008972:	d024      	beq.n	80089be <_strtod_l+0x366>
 8008974:	2a4e      	cmp	r2, #78	; 0x4e
 8008976:	f47f aed0 	bne.w	800871a <_strtod_l+0xc2>
 800897a:	499b      	ldr	r1, [pc, #620]	; (8008be8 <_strtod_l+0x590>)
 800897c:	a817      	add	r0, sp, #92	; 0x5c
 800897e:	f001 fd1d 	bl	800a3bc <__match>
 8008982:	2800      	cmp	r0, #0
 8008984:	f43f aec9 	beq.w	800871a <_strtod_l+0xc2>
 8008988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b28      	cmp	r3, #40	; 0x28
 800898e:	d12d      	bne.n	80089ec <_strtod_l+0x394>
 8008990:	4996      	ldr	r1, [pc, #600]	; (8008bec <_strtod_l+0x594>)
 8008992:	aa1a      	add	r2, sp, #104	; 0x68
 8008994:	a817      	add	r0, sp, #92	; 0x5c
 8008996:	f001 fd25 	bl	800a3e4 <__hexnan>
 800899a:	2805      	cmp	r0, #5
 800899c:	d126      	bne.n	80089ec <_strtod_l+0x394>
 800899e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80089a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80089a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80089ac:	e698      	b.n	80086e0 <_strtod_l+0x88>
 80089ae:	250a      	movs	r5, #10
 80089b0:	fb05 250c 	mla	r5, r5, ip, r2
 80089b4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80089b8:	e7b9      	b.n	800892e <_strtod_l+0x2d6>
 80089ba:	2a6e      	cmp	r2, #110	; 0x6e
 80089bc:	e7db      	b.n	8008976 <_strtod_l+0x31e>
 80089be:	498c      	ldr	r1, [pc, #560]	; (8008bf0 <_strtod_l+0x598>)
 80089c0:	a817      	add	r0, sp, #92	; 0x5c
 80089c2:	f001 fcfb 	bl	800a3bc <__match>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f aea7 	beq.w	800871a <_strtod_l+0xc2>
 80089cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089ce:	4989      	ldr	r1, [pc, #548]	; (8008bf4 <_strtod_l+0x59c>)
 80089d0:	3b01      	subs	r3, #1
 80089d2:	a817      	add	r0, sp, #92	; 0x5c
 80089d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80089d6:	f001 fcf1 	bl	800a3bc <__match>
 80089da:	b910      	cbnz	r0, 80089e2 <_strtod_l+0x38a>
 80089dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089de:	3301      	adds	r3, #1
 80089e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80089e2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008c08 <_strtod_l+0x5b0>
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	e679      	b.n	80086e0 <_strtod_l+0x88>
 80089ec:	4882      	ldr	r0, [pc, #520]	; (8008bf8 <_strtod_l+0x5a0>)
 80089ee:	f002 fc93 	bl	800b318 <nan>
 80089f2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80089f6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80089fa:	e671      	b.n	80086e0 <_strtod_l+0x88>
 80089fc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8008a00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008a04:	eba5 020b 	sub.w	r2, r5, fp
 8008a08:	2e00      	cmp	r6, #0
 8008a0a:	bf08      	it	eq
 8008a0c:	461e      	moveq	r6, r3
 8008a0e:	2b10      	cmp	r3, #16
 8008a10:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008a14:	9206      	str	r2, [sp, #24]
 8008a16:	461a      	mov	r2, r3
 8008a18:	bfa8      	it	ge
 8008a1a:	2210      	movge	r2, #16
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8008a22:	dd0e      	ble.n	8008a42 <_strtod_l+0x3ea>
 8008a24:	4975      	ldr	r1, [pc, #468]	; (8008bfc <_strtod_l+0x5a4>)
 8008a26:	eddd 7a04 	vldr	s15, [sp, #16]
 8008a2a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008a2e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8008a32:	ed9d 5b08 	vldr	d5, [sp, #32]
 8008a36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008a3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008a3e:	ec59 8b17 	vmov	r8, r9, d7
 8008a42:	2b0f      	cmp	r3, #15
 8008a44:	dc37      	bgt.n	8008ab6 <_strtod_l+0x45e>
 8008a46:	9906      	ldr	r1, [sp, #24]
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	f43f ae49 	beq.w	80086e0 <_strtod_l+0x88>
 8008a4e:	dd23      	ble.n	8008a98 <_strtod_l+0x440>
 8008a50:	2916      	cmp	r1, #22
 8008a52:	dc0b      	bgt.n	8008a6c <_strtod_l+0x414>
 8008a54:	4b69      	ldr	r3, [pc, #420]	; (8008bfc <_strtod_l+0x5a4>)
 8008a56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008a5a:	ed93 7b00 	vldr	d7, [r3]
 8008a5e:	ec49 8b16 	vmov	d6, r8, r9
 8008a62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a66:	ec59 8b17 	vmov	r8, r9, d7
 8008a6a:	e639      	b.n	80086e0 <_strtod_l+0x88>
 8008a6c:	9806      	ldr	r0, [sp, #24]
 8008a6e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008a72:	4281      	cmp	r1, r0
 8008a74:	db1f      	blt.n	8008ab6 <_strtod_l+0x45e>
 8008a76:	4a61      	ldr	r2, [pc, #388]	; (8008bfc <_strtod_l+0x5a4>)
 8008a78:	f1c3 030f 	rsb	r3, r3, #15
 8008a7c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008a80:	ed91 7b00 	vldr	d7, [r1]
 8008a84:	ec49 8b16 	vmov	d6, r8, r9
 8008a88:	1ac3      	subs	r3, r0, r3
 8008a8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008a8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a92:	ed92 6b00 	vldr	d6, [r2]
 8008a96:	e7e4      	b.n	8008a62 <_strtod_l+0x40a>
 8008a98:	9906      	ldr	r1, [sp, #24]
 8008a9a:	3116      	adds	r1, #22
 8008a9c:	db0b      	blt.n	8008ab6 <_strtod_l+0x45e>
 8008a9e:	4b57      	ldr	r3, [pc, #348]	; (8008bfc <_strtod_l+0x5a4>)
 8008aa0:	ebab 0505 	sub.w	r5, fp, r5
 8008aa4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008aa8:	ed95 7b00 	vldr	d7, [r5]
 8008aac:	ec49 8b16 	vmov	d6, r8, r9
 8008ab0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008ab4:	e7d7      	b.n	8008a66 <_strtod_l+0x40e>
 8008ab6:	9906      	ldr	r1, [sp, #24]
 8008ab8:	1a9a      	subs	r2, r3, r2
 8008aba:	440a      	add	r2, r1
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	dd74      	ble.n	8008baa <_strtod_l+0x552>
 8008ac0:	f012 000f 	ands.w	r0, r2, #15
 8008ac4:	d00a      	beq.n	8008adc <_strtod_l+0x484>
 8008ac6:	494d      	ldr	r1, [pc, #308]	; (8008bfc <_strtod_l+0x5a4>)
 8008ac8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008acc:	ed91 7b00 	vldr	d7, [r1]
 8008ad0:	ec49 8b16 	vmov	d6, r8, r9
 8008ad4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ad8:	ec59 8b17 	vmov	r8, r9, d7
 8008adc:	f032 020f 	bics.w	r2, r2, #15
 8008ae0:	d04f      	beq.n	8008b82 <_strtod_l+0x52a>
 8008ae2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008ae6:	dd22      	ble.n	8008b2e <_strtod_l+0x4d6>
 8008ae8:	2500      	movs	r5, #0
 8008aea:	462e      	mov	r6, r5
 8008aec:	950a      	str	r5, [sp, #40]	; 0x28
 8008aee:	462f      	mov	r7, r5
 8008af0:	2322      	movs	r3, #34	; 0x22
 8008af2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008c08 <_strtod_l+0x5b0>
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	f04f 0800 	mov.w	r8, #0
 8008afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f43f adee 	beq.w	80086e0 <_strtod_l+0x88>
 8008b04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b06:	4620      	mov	r0, r4
 8008b08:	f001 fd74 	bl	800a5f4 <_Bfree>
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f001 fd70 	bl	800a5f4 <_Bfree>
 8008b14:	4631      	mov	r1, r6
 8008b16:	4620      	mov	r0, r4
 8008b18:	f001 fd6c 	bl	800a5f4 <_Bfree>
 8008b1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f001 fd68 	bl	800a5f4 <_Bfree>
 8008b24:	4629      	mov	r1, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	f001 fd64 	bl	800a5f4 <_Bfree>
 8008b2c:	e5d8      	b.n	80086e0 <_strtod_l+0x88>
 8008b2e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8008b32:	2000      	movs	r0, #0
 8008b34:	4f32      	ldr	r7, [pc, #200]	; (8008c00 <_strtod_l+0x5a8>)
 8008b36:	1112      	asrs	r2, r2, #4
 8008b38:	4601      	mov	r1, r0
 8008b3a:	2a01      	cmp	r2, #1
 8008b3c:	dc24      	bgt.n	8008b88 <_strtod_l+0x530>
 8008b3e:	b108      	cbz	r0, 8008b44 <_strtod_l+0x4ec>
 8008b40:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b44:	4a2e      	ldr	r2, [pc, #184]	; (8008c00 <_strtod_l+0x5a8>)
 8008b46:	482f      	ldr	r0, [pc, #188]	; (8008c04 <_strtod_l+0x5ac>)
 8008b48:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008b4c:	ed91 7b00 	vldr	d7, [r1]
 8008b50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008b54:	ec49 8b16 	vmov	d6, r8, r9
 8008b58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b60:	9905      	ldr	r1, [sp, #20]
 8008b62:	4a29      	ldr	r2, [pc, #164]	; (8008c08 <_strtod_l+0x5b0>)
 8008b64:	400a      	ands	r2, r1
 8008b66:	4282      	cmp	r2, r0
 8008b68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b6c:	d8bc      	bhi.n	8008ae8 <_strtod_l+0x490>
 8008b6e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008b72:	4282      	cmp	r2, r0
 8008b74:	bf86      	itte	hi
 8008b76:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008c0c <_strtod_l+0x5b4>
 8008b7a:	f04f 38ff 	movhi.w	r8, #4294967295
 8008b7e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008b82:	2200      	movs	r2, #0
 8008b84:	9204      	str	r2, [sp, #16]
 8008b86:	e07f      	b.n	8008c88 <_strtod_l+0x630>
 8008b88:	f012 0f01 	tst.w	r2, #1
 8008b8c:	d00a      	beq.n	8008ba4 <_strtod_l+0x54c>
 8008b8e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8008b92:	ed90 7b00 	vldr	d7, [r0]
 8008b96:	ed9d 6b04 	vldr	d6, [sp, #16]
 8008b9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	3101      	adds	r1, #1
 8008ba6:	1052      	asrs	r2, r2, #1
 8008ba8:	e7c7      	b.n	8008b3a <_strtod_l+0x4e2>
 8008baa:	d0ea      	beq.n	8008b82 <_strtod_l+0x52a>
 8008bac:	4252      	negs	r2, r2
 8008bae:	f012 000f 	ands.w	r0, r2, #15
 8008bb2:	d00a      	beq.n	8008bca <_strtod_l+0x572>
 8008bb4:	4911      	ldr	r1, [pc, #68]	; (8008bfc <_strtod_l+0x5a4>)
 8008bb6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008bba:	ed91 7b00 	vldr	d7, [r1]
 8008bbe:	ec49 8b16 	vmov	d6, r8, r9
 8008bc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008bc6:	ec59 8b17 	vmov	r8, r9, d7
 8008bca:	1112      	asrs	r2, r2, #4
 8008bcc:	d0d9      	beq.n	8008b82 <_strtod_l+0x52a>
 8008bce:	2a1f      	cmp	r2, #31
 8008bd0:	dd1e      	ble.n	8008c10 <_strtod_l+0x5b8>
 8008bd2:	2500      	movs	r5, #0
 8008bd4:	462e      	mov	r6, r5
 8008bd6:	950a      	str	r5, [sp, #40]	; 0x28
 8008bd8:	462f      	mov	r7, r5
 8008bda:	2322      	movs	r3, #34	; 0x22
 8008bdc:	f04f 0800 	mov.w	r8, #0
 8008be0:	f04f 0900 	mov.w	r9, #0
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	e789      	b.n	8008afc <_strtod_l+0x4a4>
 8008be8:	0800bf7d 	.word	0x0800bf7d
 8008bec:	0800bfb8 	.word	0x0800bfb8
 8008bf0:	0800bf75 	.word	0x0800bf75
 8008bf4:	0800bffb 	.word	0x0800bffb
 8008bf8:	0800c2b8 	.word	0x0800c2b8
 8008bfc:	0800c198 	.word	0x0800c198
 8008c00:	0800c170 	.word	0x0800c170
 8008c04:	7ca00000 	.word	0x7ca00000
 8008c08:	7ff00000 	.word	0x7ff00000
 8008c0c:	7fefffff 	.word	0x7fefffff
 8008c10:	f012 0110 	ands.w	r1, r2, #16
 8008c14:	bf18      	it	ne
 8008c16:	216a      	movne	r1, #106	; 0x6a
 8008c18:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008c1c:	9104      	str	r1, [sp, #16]
 8008c1e:	49c0      	ldr	r1, [pc, #768]	; (8008f20 <_strtod_l+0x8c8>)
 8008c20:	2000      	movs	r0, #0
 8008c22:	07d7      	lsls	r7, r2, #31
 8008c24:	d508      	bpl.n	8008c38 <_strtod_l+0x5e0>
 8008c26:	ed9d 6b08 	vldr	d6, [sp, #32]
 8008c2a:	ed91 7b00 	vldr	d7, [r1]
 8008c2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c32:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008c36:	2001      	movs	r0, #1
 8008c38:	1052      	asrs	r2, r2, #1
 8008c3a:	f101 0108 	add.w	r1, r1, #8
 8008c3e:	d1f0      	bne.n	8008c22 <_strtod_l+0x5ca>
 8008c40:	b108      	cbz	r0, 8008c46 <_strtod_l+0x5ee>
 8008c42:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8008c46:	9a04      	ldr	r2, [sp, #16]
 8008c48:	b1ba      	cbz	r2, 8008c7a <_strtod_l+0x622>
 8008c4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008c4e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	4649      	mov	r1, r9
 8008c56:	dd10      	ble.n	8008c7a <_strtod_l+0x622>
 8008c58:	2a1f      	cmp	r2, #31
 8008c5a:	f340 8132 	ble.w	8008ec2 <_strtod_l+0x86a>
 8008c5e:	2a34      	cmp	r2, #52	; 0x34
 8008c60:	bfde      	ittt	le
 8008c62:	3a20      	suble	r2, #32
 8008c64:	f04f 30ff 	movle.w	r0, #4294967295
 8008c68:	fa00 f202 	lslle.w	r2, r0, r2
 8008c6c:	f04f 0800 	mov.w	r8, #0
 8008c70:	bfcc      	ite	gt
 8008c72:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008c76:	ea02 0901 	andle.w	r9, r2, r1
 8008c7a:	ec49 8b17 	vmov	d7, r8, r9
 8008c7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c86:	d0a4      	beq.n	8008bd2 <_strtod_l+0x57a>
 8008c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c8a:	9200      	str	r2, [sp, #0]
 8008c8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c8e:	4632      	mov	r2, r6
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 fd1b 	bl	800a6cc <__s2b>
 8008c96:	900a      	str	r0, [sp, #40]	; 0x28
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f43f af25 	beq.w	8008ae8 <_strtod_l+0x490>
 8008c9e:	9b06      	ldr	r3, [sp, #24]
 8008ca0:	ebab 0505 	sub.w	r5, fp, r5
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfb4      	ite	lt
 8008ca8:	462b      	movlt	r3, r5
 8008caa:	2300      	movge	r3, #0
 8008cac:	930c      	str	r3, [sp, #48]	; 0x30
 8008cae:	9b06      	ldr	r3, [sp, #24]
 8008cb0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008f08 <_strtod_l+0x8b0>
 8008cb4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008f10 <_strtod_l+0x8b8>
 8008cb8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008f18 <_strtod_l+0x8c0>
 8008cbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008cc0:	2500      	movs	r5, #0
 8008cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8008cc4:	462e      	mov	r6, r5
 8008cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc8:	4620      	mov	r0, r4
 8008cca:	6859      	ldr	r1, [r3, #4]
 8008ccc:	f001 fc52 	bl	800a574 <_Balloc>
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f43f af0c 	beq.w	8008af0 <_strtod_l+0x498>
 8008cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cda:	691a      	ldr	r2, [r3, #16]
 8008cdc:	3202      	adds	r2, #2
 8008cde:	f103 010c 	add.w	r1, r3, #12
 8008ce2:	0092      	lsls	r2, r2, #2
 8008ce4:	300c      	adds	r0, #12
 8008ce6:	f001 fc37 	bl	800a558 <memcpy>
 8008cea:	ec49 8b10 	vmov	d0, r8, r9
 8008cee:	aa1a      	add	r2, sp, #104	; 0x68
 8008cf0:	a919      	add	r1, sp, #100	; 0x64
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008cf8:	f002 f824 	bl	800ad44 <__d2b>
 8008cfc:	9018      	str	r0, [sp, #96]	; 0x60
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f43f aef6 	beq.w	8008af0 <_strtod_l+0x498>
 8008d04:	2101      	movs	r1, #1
 8008d06:	4620      	mov	r0, r4
 8008d08:	f001 fd7a 	bl	800a800 <__i2b>
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f43f aeee 	beq.w	8008af0 <_strtod_l+0x498>
 8008d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bfab      	itete	ge
 8008d1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008d1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008d20:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8008d24:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8008d28:	bfac      	ite	ge
 8008d2a:	eb03 0b02 	addge.w	fp, r3, r2
 8008d2e:	eba2 0a03 	sublt.w	sl, r2, r3
 8008d32:	9a04      	ldr	r2, [sp, #16]
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	440b      	add	r3, r1
 8008d38:	4a7a      	ldr	r2, [pc, #488]	; (8008f24 <_strtod_l+0x8cc>)
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008d42:	f280 80d1 	bge.w	8008ee8 <_strtod_l+0x890>
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	2a1f      	cmp	r2, #31
 8008d4a:	eba1 0102 	sub.w	r1, r1, r2
 8008d4e:	f04f 0001 	mov.w	r0, #1
 8008d52:	f300 80bd 	bgt.w	8008ed0 <_strtod_l+0x878>
 8008d56:	fa00 f302 	lsl.w	r3, r0, r2
 8008d5a:	930e      	str	r3, [sp, #56]	; 0x38
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d60:	eb0b 0301 	add.w	r3, fp, r1
 8008d64:	9a04      	ldr	r2, [sp, #16]
 8008d66:	459b      	cmp	fp, r3
 8008d68:	448a      	add	sl, r1
 8008d6a:	4492      	add	sl, r2
 8008d6c:	465a      	mov	r2, fp
 8008d6e:	bfa8      	it	ge
 8008d70:	461a      	movge	r2, r3
 8008d72:	4552      	cmp	r2, sl
 8008d74:	bfa8      	it	ge
 8008d76:	4652      	movge	r2, sl
 8008d78:	2a00      	cmp	r2, #0
 8008d7a:	bfc2      	ittt	gt
 8008d7c:	1a9b      	subgt	r3, r3, r2
 8008d7e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008d82:	ebab 0b02 	subgt.w	fp, fp, r2
 8008d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	dd18      	ble.n	8008dbe <_strtod_l+0x766>
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4620      	mov	r0, r4
 8008d90:	9315      	str	r3, [sp, #84]	; 0x54
 8008d92:	f001 fdf1 	bl	800a978 <__pow5mult>
 8008d96:	4606      	mov	r6, r0
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	f43f aea9 	beq.w	8008af0 <_strtod_l+0x498>
 8008d9e:	4601      	mov	r1, r0
 8008da0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008da2:	4620      	mov	r0, r4
 8008da4:	f001 fd42 	bl	800a82c <__multiply>
 8008da8:	9014      	str	r0, [sp, #80]	; 0x50
 8008daa:	2800      	cmp	r0, #0
 8008dac:	f43f aea0 	beq.w	8008af0 <_strtod_l+0x498>
 8008db0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008db2:	4620      	mov	r0, r4
 8008db4:	f001 fc1e 	bl	800a5f4 <_Bfree>
 8008db8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dbc:	9218      	str	r2, [sp, #96]	; 0x60
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f300 8097 	bgt.w	8008ef2 <_strtod_l+0x89a>
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dd08      	ble.n	8008ddc <_strtod_l+0x784>
 8008dca:	4639      	mov	r1, r7
 8008dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f001 fdd2 	bl	800a978 <__pow5mult>
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f ae8a 	beq.w	8008af0 <_strtod_l+0x498>
 8008ddc:	f1ba 0f00 	cmp.w	sl, #0
 8008de0:	dd08      	ble.n	8008df4 <_strtod_l+0x79c>
 8008de2:	4639      	mov	r1, r7
 8008de4:	4652      	mov	r2, sl
 8008de6:	4620      	mov	r0, r4
 8008de8:	f001 fe20 	bl	800aa2c <__lshift>
 8008dec:	4607      	mov	r7, r0
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f43f ae7e 	beq.w	8008af0 <_strtod_l+0x498>
 8008df4:	f1bb 0f00 	cmp.w	fp, #0
 8008df8:	dd08      	ble.n	8008e0c <_strtod_l+0x7b4>
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	465a      	mov	r2, fp
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f001 fe14 	bl	800aa2c <__lshift>
 8008e04:	4606      	mov	r6, r0
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f43f ae72 	beq.w	8008af0 <_strtod_l+0x498>
 8008e0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e0e:	463a      	mov	r2, r7
 8008e10:	4620      	mov	r0, r4
 8008e12:	f001 fe93 	bl	800ab3c <__mdiff>
 8008e16:	4605      	mov	r5, r0
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	f43f ae69 	beq.w	8008af0 <_strtod_l+0x498>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008e24:	60c3      	str	r3, [r0, #12]
 8008e26:	4631      	mov	r1, r6
 8008e28:	f001 fe6c 	bl	800ab04 <__mcmp>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	da7f      	bge.n	8008f30 <_strtod_l+0x8d8>
 8008e30:	ea5a 0308 	orrs.w	r3, sl, r8
 8008e34:	f040 80a5 	bne.w	8008f82 <_strtod_l+0x92a>
 8008e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f040 80a0 	bne.w	8008f82 <_strtod_l+0x92a>
 8008e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e46:	0d1b      	lsrs	r3, r3, #20
 8008e48:	051b      	lsls	r3, r3, #20
 8008e4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008e4e:	f240 8098 	bls.w	8008f82 <_strtod_l+0x92a>
 8008e52:	696b      	ldr	r3, [r5, #20]
 8008e54:	b91b      	cbnz	r3, 8008e5e <_strtod_l+0x806>
 8008e56:	692b      	ldr	r3, [r5, #16]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	f340 8092 	ble.w	8008f82 <_strtod_l+0x92a>
 8008e5e:	4629      	mov	r1, r5
 8008e60:	2201      	movs	r2, #1
 8008e62:	4620      	mov	r0, r4
 8008e64:	f001 fde2 	bl	800aa2c <__lshift>
 8008e68:	4631      	mov	r1, r6
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	f001 fe4a 	bl	800ab04 <__mcmp>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	f340 8086 	ble.w	8008f82 <_strtod_l+0x92a>
 8008e76:	9904      	ldr	r1, [sp, #16]
 8008e78:	4a2b      	ldr	r2, [pc, #172]	; (8008f28 <_strtod_l+0x8d0>)
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	2900      	cmp	r1, #0
 8008e7e:	f000 80a1 	beq.w	8008fc4 <_strtod_l+0x96c>
 8008e82:	ea02 0109 	and.w	r1, r2, r9
 8008e86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e8a:	f300 809b 	bgt.w	8008fc4 <_strtod_l+0x96c>
 8008e8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e92:	f77f aea2 	ble.w	8008bda <_strtod_l+0x582>
 8008e96:	4a25      	ldr	r2, [pc, #148]	; (8008f2c <_strtod_l+0x8d4>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8008e9e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8008ea2:	ec49 8b17 	vmov	d7, r8, r9
 8008ea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008eaa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008eae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	bf08      	it	eq
 8008eb6:	2322      	moveq	r3, #34	; 0x22
 8008eb8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008ebc:	bf08      	it	eq
 8008ebe:	6023      	streq	r3, [r4, #0]
 8008ec0:	e620      	b.n	8008b04 <_strtod_l+0x4ac>
 8008ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8008eca:	ea02 0808 	and.w	r8, r2, r8
 8008ece:	e6d4      	b.n	8008c7a <_strtod_l+0x622>
 8008ed0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008ed4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008ed8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008edc:	33e2      	adds	r3, #226	; 0xe2
 8008ede:	fa00 f303 	lsl.w	r3, r0, r3
 8008ee2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8008ee6:	e73b      	b.n	8008d60 <_strtod_l+0x708>
 8008ee8:	2000      	movs	r0, #0
 8008eea:	2301      	movs	r3, #1
 8008eec:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008ef0:	e736      	b.n	8008d60 <_strtod_l+0x708>
 8008ef2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f001 fd98 	bl	800aa2c <__lshift>
 8008efc:	9018      	str	r0, [sp, #96]	; 0x60
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f47f af60 	bne.w	8008dc4 <_strtod_l+0x76c>
 8008f04:	e5f4      	b.n	8008af0 <_strtod_l+0x498>
 8008f06:	bf00      	nop
 8008f08:	94a03595 	.word	0x94a03595
 8008f0c:	3fcfffff 	.word	0x3fcfffff
 8008f10:	94a03595 	.word	0x94a03595
 8008f14:	3fdfffff 	.word	0x3fdfffff
 8008f18:	35afe535 	.word	0x35afe535
 8008f1c:	3fe00000 	.word	0x3fe00000
 8008f20:	0800bfd0 	.word	0x0800bfd0
 8008f24:	fffffc02 	.word	0xfffffc02
 8008f28:	7ff00000 	.word	0x7ff00000
 8008f2c:	39500000 	.word	0x39500000
 8008f30:	46cb      	mov	fp, r9
 8008f32:	d165      	bne.n	8009000 <_strtod_l+0x9a8>
 8008f34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f38:	f1ba 0f00 	cmp.w	sl, #0
 8008f3c:	d02a      	beq.n	8008f94 <_strtod_l+0x93c>
 8008f3e:	4aaa      	ldr	r2, [pc, #680]	; (80091e8 <_strtod_l+0xb90>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d12b      	bne.n	8008f9c <_strtod_l+0x944>
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	4641      	mov	r1, r8
 8008f48:	b1fb      	cbz	r3, 8008f8a <_strtod_l+0x932>
 8008f4a:	4aa8      	ldr	r2, [pc, #672]	; (80091ec <_strtod_l+0xb94>)
 8008f4c:	ea09 0202 	and.w	r2, r9, r2
 8008f50:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	d81a      	bhi.n	8008f90 <_strtod_l+0x938>
 8008f5a:	0d12      	lsrs	r2, r2, #20
 8008f5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f60:	fa00 f303 	lsl.w	r3, r0, r3
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d119      	bne.n	8008f9c <_strtod_l+0x944>
 8008f68:	4ba1      	ldr	r3, [pc, #644]	; (80091f0 <_strtod_l+0xb98>)
 8008f6a:	459b      	cmp	fp, r3
 8008f6c:	d102      	bne.n	8008f74 <_strtod_l+0x91c>
 8008f6e:	3101      	adds	r1, #1
 8008f70:	f43f adbe 	beq.w	8008af0 <_strtod_l+0x498>
 8008f74:	4b9d      	ldr	r3, [pc, #628]	; (80091ec <_strtod_l+0xb94>)
 8008f76:	ea0b 0303 	and.w	r3, fp, r3
 8008f7a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008f7e:	f04f 0800 	mov.w	r8, #0
 8008f82:	9b04      	ldr	r3, [sp, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d186      	bne.n	8008e96 <_strtod_l+0x83e>
 8008f88:	e5bc      	b.n	8008b04 <_strtod_l+0x4ac>
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	e7e9      	b.n	8008f64 <_strtod_l+0x90c>
 8008f90:	4603      	mov	r3, r0
 8008f92:	e7e7      	b.n	8008f64 <_strtod_l+0x90c>
 8008f94:	ea53 0308 	orrs.w	r3, r3, r8
 8008f98:	f43f af6d 	beq.w	8008e76 <_strtod_l+0x81e>
 8008f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f9e:	b1db      	cbz	r3, 8008fd8 <_strtod_l+0x980>
 8008fa0:	ea13 0f0b 	tst.w	r3, fp
 8008fa4:	d0ed      	beq.n	8008f82 <_strtod_l+0x92a>
 8008fa6:	9a04      	ldr	r2, [sp, #16]
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4649      	mov	r1, r9
 8008fac:	f1ba 0f00 	cmp.w	sl, #0
 8008fb0:	d016      	beq.n	8008fe0 <_strtod_l+0x988>
 8008fb2:	f7ff fb35 	bl	8008620 <sulp>
 8008fb6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008fba:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008fbe:	ec59 8b17 	vmov	r8, r9, d7
 8008fc2:	e7de      	b.n	8008f82 <_strtod_l+0x92a>
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008fca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008fce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008fd2:	f04f 38ff 	mov.w	r8, #4294967295
 8008fd6:	e7d4      	b.n	8008f82 <_strtod_l+0x92a>
 8008fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fda:	ea13 0f08 	tst.w	r3, r8
 8008fde:	e7e1      	b.n	8008fa4 <_strtod_l+0x94c>
 8008fe0:	f7ff fb1e 	bl	8008620 <sulp>
 8008fe4:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008fe8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008fec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ff0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008ffc:	d1c1      	bne.n	8008f82 <_strtod_l+0x92a>
 8008ffe:	e5ec      	b.n	8008bda <_strtod_l+0x582>
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	f001 fefa 	bl	800adfc <__ratio>
 8009008:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800900c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009014:	d867      	bhi.n	80090e6 <_strtod_l+0xa8e>
 8009016:	f1ba 0f00 	cmp.w	sl, #0
 800901a:	d044      	beq.n	80090a6 <_strtod_l+0xa4e>
 800901c:	4b75      	ldr	r3, [pc, #468]	; (80091f4 <_strtod_l+0xb9c>)
 800901e:	2200      	movs	r2, #0
 8009020:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009024:	4971      	ldr	r1, [pc, #452]	; (80091ec <_strtod_l+0xb94>)
 8009026:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009200 <_strtod_l+0xba8>
 800902a:	ea0b 0001 	and.w	r0, fp, r1
 800902e:	4560      	cmp	r0, ip
 8009030:	900d      	str	r0, [sp, #52]	; 0x34
 8009032:	f040 808b 	bne.w	800914c <_strtod_l+0xaf4>
 8009036:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800903a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800903e:	ec49 8b10 	vmov	d0, r8, r9
 8009042:	ec43 2b1c 	vmov	d12, r2, r3
 8009046:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800904a:	f001 fdff 	bl	800ac4c <__ulp>
 800904e:	ec49 8b1d 	vmov	d13, r8, r9
 8009052:	eeac db00 	vfma.f64	d13, d12, d0
 8009056:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800905a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800905c:	4963      	ldr	r1, [pc, #396]	; (80091ec <_strtod_l+0xb94>)
 800905e:	4a66      	ldr	r2, [pc, #408]	; (80091f8 <_strtod_l+0xba0>)
 8009060:	4019      	ands	r1, r3
 8009062:	4291      	cmp	r1, r2
 8009064:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8009068:	d947      	bls.n	80090fa <_strtod_l+0xaa2>
 800906a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009070:	4293      	cmp	r3, r2
 8009072:	d103      	bne.n	800907c <_strtod_l+0xa24>
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	3301      	adds	r3, #1
 8009078:	f43f ad3a 	beq.w	8008af0 <_strtod_l+0x498>
 800907c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80091f0 <_strtod_l+0xb98>
 8009080:	f04f 38ff 	mov.w	r8, #4294967295
 8009084:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009086:	4620      	mov	r0, r4
 8009088:	f001 fab4 	bl	800a5f4 <_Bfree>
 800908c:	4639      	mov	r1, r7
 800908e:	4620      	mov	r0, r4
 8009090:	f001 fab0 	bl	800a5f4 <_Bfree>
 8009094:	4631      	mov	r1, r6
 8009096:	4620      	mov	r0, r4
 8009098:	f001 faac 	bl	800a5f4 <_Bfree>
 800909c:	4629      	mov	r1, r5
 800909e:	4620      	mov	r0, r4
 80090a0:	f001 faa8 	bl	800a5f4 <_Bfree>
 80090a4:	e60f      	b.n	8008cc6 <_strtod_l+0x66e>
 80090a6:	f1b8 0f00 	cmp.w	r8, #0
 80090aa:	d112      	bne.n	80090d2 <_strtod_l+0xa7a>
 80090ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090b0:	b9b3      	cbnz	r3, 80090e0 <_strtod_l+0xa88>
 80090b2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80090b6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80090ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090be:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80090c2:	d401      	bmi.n	80090c8 <_strtod_l+0xa70>
 80090c4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80090c8:	eeb1 7b48 	vneg.f64	d7, d8
 80090cc:	ec53 2b17 	vmov	r2, r3, d7
 80090d0:	e7a8      	b.n	8009024 <_strtod_l+0x9cc>
 80090d2:	f1b8 0f01 	cmp.w	r8, #1
 80090d6:	d103      	bne.n	80090e0 <_strtod_l+0xa88>
 80090d8:	f1b9 0f00 	cmp.w	r9, #0
 80090dc:	f43f ad7d 	beq.w	8008bda <_strtod_l+0x582>
 80090e0:	4b46      	ldr	r3, [pc, #280]	; (80091fc <_strtod_l+0xba4>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	e79c      	b.n	8009020 <_strtod_l+0x9c8>
 80090e6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80090ea:	ee20 8b08 	vmul.f64	d8, d0, d8
 80090ee:	f1ba 0f00 	cmp.w	sl, #0
 80090f2:	d0e9      	beq.n	80090c8 <_strtod_l+0xa70>
 80090f4:	ec53 2b18 	vmov	r2, r3, d8
 80090f8:	e794      	b.n	8009024 <_strtod_l+0x9cc>
 80090fa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1bf      	bne.n	8009084 <_strtod_l+0xa2c>
 8009104:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800910a:	0d1b      	lsrs	r3, r3, #20
 800910c:	051b      	lsls	r3, r3, #20
 800910e:	429a      	cmp	r2, r3
 8009110:	d1b8      	bne.n	8009084 <_strtod_l+0xa2c>
 8009112:	ec51 0b18 	vmov	r0, r1, d8
 8009116:	f7f7 fabf 	bl	8000698 <__aeabi_d2lz>
 800911a:	f7f7 fa77 	bl	800060c <__aeabi_l2d>
 800911e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009122:	ec41 0b17 	vmov	d7, r0, r1
 8009126:	ea43 0308 	orr.w	r3, r3, r8
 800912a:	ea53 030a 	orrs.w	r3, r3, sl
 800912e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009132:	d03e      	beq.n	80091b2 <_strtod_l+0xb5a>
 8009134:	eeb4 8bca 	vcmpe.f64	d8, d10
 8009138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913c:	f53f ace2 	bmi.w	8008b04 <_strtod_l+0x4ac>
 8009140:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009148:	dd9c      	ble.n	8009084 <_strtod_l+0xa2c>
 800914a:	e4db      	b.n	8008b04 <_strtod_l+0x4ac>
 800914c:	9904      	ldr	r1, [sp, #16]
 800914e:	b301      	cbz	r1, 8009192 <_strtod_l+0xb3a>
 8009150:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009152:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009156:	d81c      	bhi.n	8009192 <_strtod_l+0xb3a>
 8009158:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80091e0 <_strtod_l+0xb88>
 800915c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009164:	d811      	bhi.n	800918a <_strtod_l+0xb32>
 8009166:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800916a:	ee18 3a10 	vmov	r3, s16
 800916e:	2b01      	cmp	r3, #1
 8009170:	bf38      	it	cc
 8009172:	2301      	movcc	r3, #1
 8009174:	ee08 3a10 	vmov	s16, r3
 8009178:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800917c:	f1ba 0f00 	cmp.w	sl, #0
 8009180:	d114      	bne.n	80091ac <_strtod_l+0xb54>
 8009182:	eeb1 7b48 	vneg.f64	d7, d8
 8009186:	ec53 2b17 	vmov	r2, r3, d7
 800918a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800918c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009190:	1a0b      	subs	r3, r1, r0
 8009192:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009196:	ec43 2b1c 	vmov	d12, r2, r3
 800919a:	f001 fd57 	bl	800ac4c <__ulp>
 800919e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80091a2:	eeac 7b00 	vfma.f64	d7, d12, d0
 80091a6:	ec59 8b17 	vmov	r8, r9, d7
 80091aa:	e7a8      	b.n	80090fe <_strtod_l+0xaa6>
 80091ac:	ec53 2b18 	vmov	r2, r3, d8
 80091b0:	e7eb      	b.n	800918a <_strtod_l+0xb32>
 80091b2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80091b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ba:	f57f af63 	bpl.w	8009084 <_strtod_l+0xa2c>
 80091be:	e4a1      	b.n	8008b04 <_strtod_l+0x4ac>
 80091c0:	2300      	movs	r3, #0
 80091c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80091c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	f7ff ba8d 	b.w	80086e8 <_strtod_l+0x90>
 80091ce:	2a65      	cmp	r2, #101	; 0x65
 80091d0:	f43f ab89 	beq.w	80088e6 <_strtod_l+0x28e>
 80091d4:	2a45      	cmp	r2, #69	; 0x45
 80091d6:	f43f ab86 	beq.w	80088e6 <_strtod_l+0x28e>
 80091da:	2101      	movs	r1, #1
 80091dc:	f7ff bbbe 	b.w	800895c <_strtod_l+0x304>
 80091e0:	ffc00000 	.word	0xffc00000
 80091e4:	41dfffff 	.word	0x41dfffff
 80091e8:	000fffff 	.word	0x000fffff
 80091ec:	7ff00000 	.word	0x7ff00000
 80091f0:	7fefffff 	.word	0x7fefffff
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	7c9fffff 	.word	0x7c9fffff
 80091fc:	bff00000 	.word	0xbff00000
 8009200:	7fe00000 	.word	0x7fe00000

08009204 <strtod>:
 8009204:	460a      	mov	r2, r1
 8009206:	4601      	mov	r1, r0
 8009208:	4802      	ldr	r0, [pc, #8]	; (8009214 <strtod+0x10>)
 800920a:	4b03      	ldr	r3, [pc, #12]	; (8009218 <strtod+0x14>)
 800920c:	6800      	ldr	r0, [r0, #0]
 800920e:	f7ff ba23 	b.w	8008658 <_strtod_l>
 8009212:	bf00      	nop
 8009214:	2000010c 	.word	0x2000010c
 8009218:	20000174 	.word	0x20000174

0800921c <quorem>:
 800921c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	6903      	ldr	r3, [r0, #16]
 8009222:	690c      	ldr	r4, [r1, #16]
 8009224:	42a3      	cmp	r3, r4
 8009226:	4607      	mov	r7, r0
 8009228:	f2c0 8081 	blt.w	800932e <quorem+0x112>
 800922c:	3c01      	subs	r4, #1
 800922e:	f101 0814 	add.w	r8, r1, #20
 8009232:	f100 0514 	add.w	r5, r0, #20
 8009236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009244:	3301      	adds	r3, #1
 8009246:	429a      	cmp	r2, r3
 8009248:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800924c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009250:	fbb2 f6f3 	udiv	r6, r2, r3
 8009254:	d331      	bcc.n	80092ba <quorem+0x9e>
 8009256:	f04f 0e00 	mov.w	lr, #0
 800925a:	4640      	mov	r0, r8
 800925c:	46ac      	mov	ip, r5
 800925e:	46f2      	mov	sl, lr
 8009260:	f850 2b04 	ldr.w	r2, [r0], #4
 8009264:	b293      	uxth	r3, r2
 8009266:	fb06 e303 	mla	r3, r6, r3, lr
 800926a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800926e:	b29b      	uxth	r3, r3
 8009270:	ebaa 0303 	sub.w	r3, sl, r3
 8009274:	0c12      	lsrs	r2, r2, #16
 8009276:	f8dc a000 	ldr.w	sl, [ip]
 800927a:	fb06 e202 	mla	r2, r6, r2, lr
 800927e:	fa13 f38a 	uxtah	r3, r3, sl
 8009282:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009286:	fa1f fa82 	uxth.w	sl, r2
 800928a:	f8dc 2000 	ldr.w	r2, [ip]
 800928e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009292:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009296:	b29b      	uxth	r3, r3
 8009298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800929c:	4581      	cmp	r9, r0
 800929e:	f84c 3b04 	str.w	r3, [ip], #4
 80092a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092a6:	d2db      	bcs.n	8009260 <quorem+0x44>
 80092a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80092ac:	b92b      	cbnz	r3, 80092ba <quorem+0x9e>
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	3b04      	subs	r3, #4
 80092b2:	429d      	cmp	r5, r3
 80092b4:	461a      	mov	r2, r3
 80092b6:	d32e      	bcc.n	8009316 <quorem+0xfa>
 80092b8:	613c      	str	r4, [r7, #16]
 80092ba:	4638      	mov	r0, r7
 80092bc:	f001 fc22 	bl	800ab04 <__mcmp>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	db24      	blt.n	800930e <quorem+0xf2>
 80092c4:	3601      	adds	r6, #1
 80092c6:	4628      	mov	r0, r5
 80092c8:	f04f 0c00 	mov.w	ip, #0
 80092cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80092d0:	f8d0 e000 	ldr.w	lr, [r0]
 80092d4:	b293      	uxth	r3, r2
 80092d6:	ebac 0303 	sub.w	r3, ip, r3
 80092da:	0c12      	lsrs	r2, r2, #16
 80092dc:	fa13 f38e 	uxtah	r3, r3, lr
 80092e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ee:	45c1      	cmp	r9, r8
 80092f0:	f840 3b04 	str.w	r3, [r0], #4
 80092f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092f8:	d2e8      	bcs.n	80092cc <quorem+0xb0>
 80092fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009302:	b922      	cbnz	r2, 800930e <quorem+0xf2>
 8009304:	3b04      	subs	r3, #4
 8009306:	429d      	cmp	r5, r3
 8009308:	461a      	mov	r2, r3
 800930a:	d30a      	bcc.n	8009322 <quorem+0x106>
 800930c:	613c      	str	r4, [r7, #16]
 800930e:	4630      	mov	r0, r6
 8009310:	b003      	add	sp, #12
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	3b04      	subs	r3, #4
 800931a:	2a00      	cmp	r2, #0
 800931c:	d1cc      	bne.n	80092b8 <quorem+0x9c>
 800931e:	3c01      	subs	r4, #1
 8009320:	e7c7      	b.n	80092b2 <quorem+0x96>
 8009322:	6812      	ldr	r2, [r2, #0]
 8009324:	3b04      	subs	r3, #4
 8009326:	2a00      	cmp	r2, #0
 8009328:	d1f0      	bne.n	800930c <quorem+0xf0>
 800932a:	3c01      	subs	r4, #1
 800932c:	e7eb      	b.n	8009306 <quorem+0xea>
 800932e:	2000      	movs	r0, #0
 8009330:	e7ee      	b.n	8009310 <quorem+0xf4>
 8009332:	0000      	movs	r0, r0
 8009334:	0000      	movs	r0, r0
	...

08009338 <_dtoa_r>:
 8009338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	ec59 8b10 	vmov	r8, r9, d0
 8009340:	b095      	sub	sp, #84	; 0x54
 8009342:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009344:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009346:	9107      	str	r1, [sp, #28]
 8009348:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800934c:	4606      	mov	r6, r0
 800934e:	9209      	str	r2, [sp, #36]	; 0x24
 8009350:	9310      	str	r3, [sp, #64]	; 0x40
 8009352:	b975      	cbnz	r5, 8009372 <_dtoa_r+0x3a>
 8009354:	2010      	movs	r0, #16
 8009356:	f001 f8e5 	bl	800a524 <malloc>
 800935a:	4602      	mov	r2, r0
 800935c:	6270      	str	r0, [r6, #36]	; 0x24
 800935e:	b920      	cbnz	r0, 800936a <_dtoa_r+0x32>
 8009360:	4bab      	ldr	r3, [pc, #684]	; (8009610 <_dtoa_r+0x2d8>)
 8009362:	21ea      	movs	r1, #234	; 0xea
 8009364:	48ab      	ldr	r0, [pc, #684]	; (8009614 <_dtoa_r+0x2dc>)
 8009366:	f001 fffd 	bl	800b364 <__assert_func>
 800936a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800936e:	6005      	str	r5, [r0, #0]
 8009370:	60c5      	str	r5, [r0, #12]
 8009372:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009374:	6819      	ldr	r1, [r3, #0]
 8009376:	b151      	cbz	r1, 800938e <_dtoa_r+0x56>
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	604a      	str	r2, [r1, #4]
 800937c:	2301      	movs	r3, #1
 800937e:	4093      	lsls	r3, r2
 8009380:	608b      	str	r3, [r1, #8]
 8009382:	4630      	mov	r0, r6
 8009384:	f001 f936 	bl	800a5f4 <_Bfree>
 8009388:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	f1b9 0300 	subs.w	r3, r9, #0
 8009392:	bfbb      	ittet	lt
 8009394:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009398:	9303      	strlt	r3, [sp, #12]
 800939a:	2300      	movge	r3, #0
 800939c:	2201      	movlt	r2, #1
 800939e:	bfac      	ite	ge
 80093a0:	6023      	strge	r3, [r4, #0]
 80093a2:	6022      	strlt	r2, [r4, #0]
 80093a4:	4b9c      	ldr	r3, [pc, #624]	; (8009618 <_dtoa_r+0x2e0>)
 80093a6:	9c03      	ldr	r4, [sp, #12]
 80093a8:	43a3      	bics	r3, r4
 80093aa:	d11a      	bne.n	80093e2 <_dtoa_r+0xaa>
 80093ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80093b8:	ea53 0308 	orrs.w	r3, r3, r8
 80093bc:	f000 8512 	beq.w	8009de4 <_dtoa_r+0xaac>
 80093c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093c2:	b953      	cbnz	r3, 80093da <_dtoa_r+0xa2>
 80093c4:	4b95      	ldr	r3, [pc, #596]	; (800961c <_dtoa_r+0x2e4>)
 80093c6:	e01f      	b.n	8009408 <_dtoa_r+0xd0>
 80093c8:	4b95      	ldr	r3, [pc, #596]	; (8009620 <_dtoa_r+0x2e8>)
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	9800      	ldr	r0, [sp, #0]
 80093d4:	b015      	add	sp, #84	; 0x54
 80093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093da:	4b90      	ldr	r3, [pc, #576]	; (800961c <_dtoa_r+0x2e4>)
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	3303      	adds	r3, #3
 80093e0:	e7f5      	b.n	80093ce <_dtoa_r+0x96>
 80093e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80093f2:	d10b      	bne.n	800940c <_dtoa_r+0xd4>
 80093f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093f6:	2301      	movs	r3, #1
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f000 84ee 	beq.w	8009dde <_dtoa_r+0xaa6>
 8009402:	4888      	ldr	r0, [pc, #544]	; (8009624 <_dtoa_r+0x2ec>)
 8009404:	6018      	str	r0, [r3, #0]
 8009406:	1e43      	subs	r3, r0, #1
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	e7e2      	b.n	80093d2 <_dtoa_r+0x9a>
 800940c:	a913      	add	r1, sp, #76	; 0x4c
 800940e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009412:	aa12      	add	r2, sp, #72	; 0x48
 8009414:	4630      	mov	r0, r6
 8009416:	f001 fc95 	bl	800ad44 <__d2b>
 800941a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800941e:	4605      	mov	r5, r0
 8009420:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009422:	2900      	cmp	r1, #0
 8009424:	d047      	beq.n	80094b6 <_dtoa_r+0x17e>
 8009426:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009428:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800942c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009430:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009434:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009438:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800943c:	2400      	movs	r4, #0
 800943e:	ec43 2b16 	vmov	d6, r2, r3
 8009442:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009446:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80095f8 <_dtoa_r+0x2c0>
 800944a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800944e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009600 <_dtoa_r+0x2c8>
 8009452:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009456:	eeb0 7b46 	vmov.f64	d7, d6
 800945a:	ee06 1a90 	vmov	s13, r1
 800945e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009462:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009608 <_dtoa_r+0x2d0>
 8009466:	eea5 7b06 	vfma.f64	d7, d5, d6
 800946a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800946e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009476:	ee16 ba90 	vmov	fp, s13
 800947a:	9411      	str	r4, [sp, #68]	; 0x44
 800947c:	d508      	bpl.n	8009490 <_dtoa_r+0x158>
 800947e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009482:	eeb4 6b47 	vcmp.f64	d6, d7
 8009486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948a:	bf18      	it	ne
 800948c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009490:	f1bb 0f16 	cmp.w	fp, #22
 8009494:	d832      	bhi.n	80094fc <_dtoa_r+0x1c4>
 8009496:	4b64      	ldr	r3, [pc, #400]	; (8009628 <_dtoa_r+0x2f0>)
 8009498:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800949c:	ed93 7b00 	vldr	d7, [r3]
 80094a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80094a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ac:	d501      	bpl.n	80094b2 <_dtoa_r+0x17a>
 80094ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094b2:	2300      	movs	r3, #0
 80094b4:	e023      	b.n	80094fe <_dtoa_r+0x1c6>
 80094b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80094b8:	4401      	add	r1, r0
 80094ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80094be:	2b20      	cmp	r3, #32
 80094c0:	bfc3      	ittte	gt
 80094c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094c6:	fa04 f303 	lslgt.w	r3, r4, r3
 80094ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80094ce:	f1c3 0320 	rsble	r3, r3, #32
 80094d2:	bfc6      	itte	gt
 80094d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80094d8:	ea43 0308 	orrgt.w	r3, r3, r8
 80094dc:	fa08 f303 	lslle.w	r3, r8, r3
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80094e8:	3901      	subs	r1, #1
 80094ea:	ed8d 7b00 	vstr	d7, [sp]
 80094ee:	9c01      	ldr	r4, [sp, #4]
 80094f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80094f8:	2401      	movs	r4, #1
 80094fa:	e7a0      	b.n	800943e <_dtoa_r+0x106>
 80094fc:	2301      	movs	r3, #1
 80094fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009500:	1a43      	subs	r3, r0, r1
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	bf45      	ittet	mi
 8009506:	f1c3 0301 	rsbmi	r3, r3, #1
 800950a:	9305      	strmi	r3, [sp, #20]
 800950c:	2300      	movpl	r3, #0
 800950e:	2300      	movmi	r3, #0
 8009510:	9206      	str	r2, [sp, #24]
 8009512:	bf54      	ite	pl
 8009514:	9305      	strpl	r3, [sp, #20]
 8009516:	9306      	strmi	r3, [sp, #24]
 8009518:	f1bb 0f00 	cmp.w	fp, #0
 800951c:	db18      	blt.n	8009550 <_dtoa_r+0x218>
 800951e:	9b06      	ldr	r3, [sp, #24]
 8009520:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009524:	445b      	add	r3, fp
 8009526:	9306      	str	r3, [sp, #24]
 8009528:	2300      	movs	r3, #0
 800952a:	9a07      	ldr	r2, [sp, #28]
 800952c:	2a09      	cmp	r2, #9
 800952e:	d849      	bhi.n	80095c4 <_dtoa_r+0x28c>
 8009530:	2a05      	cmp	r2, #5
 8009532:	bfc4      	itt	gt
 8009534:	3a04      	subgt	r2, #4
 8009536:	9207      	strgt	r2, [sp, #28]
 8009538:	9a07      	ldr	r2, [sp, #28]
 800953a:	f1a2 0202 	sub.w	r2, r2, #2
 800953e:	bfcc      	ite	gt
 8009540:	2400      	movgt	r4, #0
 8009542:	2401      	movle	r4, #1
 8009544:	2a03      	cmp	r2, #3
 8009546:	d848      	bhi.n	80095da <_dtoa_r+0x2a2>
 8009548:	e8df f002 	tbb	[pc, r2]
 800954c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009550:	9b05      	ldr	r3, [sp, #20]
 8009552:	2200      	movs	r2, #0
 8009554:	eba3 030b 	sub.w	r3, r3, fp
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	920e      	str	r2, [sp, #56]	; 0x38
 800955c:	f1cb 0300 	rsb	r3, fp, #0
 8009560:	e7e3      	b.n	800952a <_dtoa_r+0x1f2>
 8009562:	2200      	movs	r2, #0
 8009564:	9208      	str	r2, [sp, #32]
 8009566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009568:	2a00      	cmp	r2, #0
 800956a:	dc39      	bgt.n	80095e0 <_dtoa_r+0x2a8>
 800956c:	f04f 0a01 	mov.w	sl, #1
 8009570:	46d1      	mov	r9, sl
 8009572:	4652      	mov	r2, sl
 8009574:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009578:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800957a:	2100      	movs	r1, #0
 800957c:	6079      	str	r1, [r7, #4]
 800957e:	2004      	movs	r0, #4
 8009580:	f100 0c14 	add.w	ip, r0, #20
 8009584:	4594      	cmp	ip, r2
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	d92f      	bls.n	80095ea <_dtoa_r+0x2b2>
 800958a:	4630      	mov	r0, r6
 800958c:	930c      	str	r3, [sp, #48]	; 0x30
 800958e:	f000 fff1 	bl	800a574 <_Balloc>
 8009592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009594:	9000      	str	r0, [sp, #0]
 8009596:	4602      	mov	r2, r0
 8009598:	2800      	cmp	r0, #0
 800959a:	d149      	bne.n	8009630 <_dtoa_r+0x2f8>
 800959c:	4b23      	ldr	r3, [pc, #140]	; (800962c <_dtoa_r+0x2f4>)
 800959e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095a2:	e6df      	b.n	8009364 <_dtoa_r+0x2c>
 80095a4:	2201      	movs	r2, #1
 80095a6:	e7dd      	b.n	8009564 <_dtoa_r+0x22c>
 80095a8:	2200      	movs	r2, #0
 80095aa:	9208      	str	r2, [sp, #32]
 80095ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ae:	eb0b 0a02 	add.w	sl, fp, r2
 80095b2:	f10a 0901 	add.w	r9, sl, #1
 80095b6:	464a      	mov	r2, r9
 80095b8:	2a01      	cmp	r2, #1
 80095ba:	bfb8      	it	lt
 80095bc:	2201      	movlt	r2, #1
 80095be:	e7db      	b.n	8009578 <_dtoa_r+0x240>
 80095c0:	2201      	movs	r2, #1
 80095c2:	e7f2      	b.n	80095aa <_dtoa_r+0x272>
 80095c4:	2401      	movs	r4, #1
 80095c6:	2200      	movs	r2, #0
 80095c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80095cc:	f04f 3aff 	mov.w	sl, #4294967295
 80095d0:	2100      	movs	r1, #0
 80095d2:	46d1      	mov	r9, sl
 80095d4:	2212      	movs	r2, #18
 80095d6:	9109      	str	r1, [sp, #36]	; 0x24
 80095d8:	e7ce      	b.n	8009578 <_dtoa_r+0x240>
 80095da:	2201      	movs	r2, #1
 80095dc:	9208      	str	r2, [sp, #32]
 80095de:	e7f5      	b.n	80095cc <_dtoa_r+0x294>
 80095e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80095e4:	46d1      	mov	r9, sl
 80095e6:	4652      	mov	r2, sl
 80095e8:	e7c6      	b.n	8009578 <_dtoa_r+0x240>
 80095ea:	3101      	adds	r1, #1
 80095ec:	6079      	str	r1, [r7, #4]
 80095ee:	0040      	lsls	r0, r0, #1
 80095f0:	e7c6      	b.n	8009580 <_dtoa_r+0x248>
 80095f2:	bf00      	nop
 80095f4:	f3af 8000 	nop.w
 80095f8:	636f4361 	.word	0x636f4361
 80095fc:	3fd287a7 	.word	0x3fd287a7
 8009600:	8b60c8b3 	.word	0x8b60c8b3
 8009604:	3fc68a28 	.word	0x3fc68a28
 8009608:	509f79fb 	.word	0x509f79fb
 800960c:	3fd34413 	.word	0x3fd34413
 8009610:	0800c005 	.word	0x0800c005
 8009614:	0800c01c 	.word	0x0800c01c
 8009618:	7ff00000 	.word	0x7ff00000
 800961c:	0800c001 	.word	0x0800c001
 8009620:	0800bff8 	.word	0x0800bff8
 8009624:	0800bf81 	.word	0x0800bf81
 8009628:	0800c198 	.word	0x0800c198
 800962c:	0800c07b 	.word	0x0800c07b
 8009630:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009632:	9900      	ldr	r1, [sp, #0]
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	f1b9 0f0e 	cmp.w	r9, #14
 800963a:	d872      	bhi.n	8009722 <_dtoa_r+0x3ea>
 800963c:	2c00      	cmp	r4, #0
 800963e:	d070      	beq.n	8009722 <_dtoa_r+0x3ea>
 8009640:	f1bb 0f00 	cmp.w	fp, #0
 8009644:	f340 80a6 	ble.w	8009794 <_dtoa_r+0x45c>
 8009648:	49ca      	ldr	r1, [pc, #808]	; (8009974 <_dtoa_r+0x63c>)
 800964a:	f00b 020f 	and.w	r2, fp, #15
 800964e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009652:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009656:	ed92 7b00 	vldr	d7, [r2]
 800965a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800965e:	f000 808d 	beq.w	800977c <_dtoa_r+0x444>
 8009662:	4ac5      	ldr	r2, [pc, #788]	; (8009978 <_dtoa_r+0x640>)
 8009664:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009668:	ed92 6b08 	vldr	d6, [r2, #32]
 800966c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009670:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009674:	f001 010f 	and.w	r1, r1, #15
 8009678:	2203      	movs	r2, #3
 800967a:	48bf      	ldr	r0, [pc, #764]	; (8009978 <_dtoa_r+0x640>)
 800967c:	2900      	cmp	r1, #0
 800967e:	d17f      	bne.n	8009780 <_dtoa_r+0x448>
 8009680:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009684:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009688:	ed8d 7b02 	vstr	d7, [sp, #8]
 800968c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800968e:	2900      	cmp	r1, #0
 8009690:	f000 80b2 	beq.w	80097f8 <_dtoa_r+0x4c0>
 8009694:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009698:	ed9d 7b02 	vldr	d7, [sp, #8]
 800969c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	f140 80a8 	bpl.w	80097f8 <_dtoa_r+0x4c0>
 80096a8:	f1b9 0f00 	cmp.w	r9, #0
 80096ac:	f000 80a4 	beq.w	80097f8 <_dtoa_r+0x4c0>
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	dd31      	ble.n	800971a <_dtoa_r+0x3e2>
 80096b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80096ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80096c6:	3201      	adds	r2, #1
 80096c8:	4650      	mov	r0, sl
 80096ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80096ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80096d2:	ee07 2a90 	vmov	s15, r2
 80096d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80096da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80096de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80096e2:	9c03      	ldr	r4, [sp, #12]
 80096e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80096e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f040 8086 	bne.w	80097fe <_dtoa_r+0x4c6>
 80096f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80096f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096fa:	ec42 1b17 	vmov	d7, r1, r2
 80096fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009706:	f300 8272 	bgt.w	8009bee <_dtoa_r+0x8b6>
 800970a:	eeb1 7b47 	vneg.f64	d7, d7
 800970e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009716:	f100 8267 	bmi.w	8009be8 <_dtoa_r+0x8b0>
 800971a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800971e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009724:	2a00      	cmp	r2, #0
 8009726:	f2c0 8129 	blt.w	800997c <_dtoa_r+0x644>
 800972a:	f1bb 0f0e 	cmp.w	fp, #14
 800972e:	f300 8125 	bgt.w	800997c <_dtoa_r+0x644>
 8009732:	4b90      	ldr	r3, [pc, #576]	; (8009974 <_dtoa_r+0x63c>)
 8009734:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009738:	ed93 6b00 	vldr	d6, [r3]
 800973c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	f280 80c3 	bge.w	80098ca <_dtoa_r+0x592>
 8009744:	f1b9 0f00 	cmp.w	r9, #0
 8009748:	f300 80bf 	bgt.w	80098ca <_dtoa_r+0x592>
 800974c:	f040 824c 	bne.w	8009be8 <_dtoa_r+0x8b0>
 8009750:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009754:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009758:	ed9d 7b02 	vldr	d7, [sp, #8]
 800975c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009764:	464c      	mov	r4, r9
 8009766:	464f      	mov	r7, r9
 8009768:	f280 8222 	bge.w	8009bb0 <_dtoa_r+0x878>
 800976c:	f8dd 8000 	ldr.w	r8, [sp]
 8009770:	2331      	movs	r3, #49	; 0x31
 8009772:	f808 3b01 	strb.w	r3, [r8], #1
 8009776:	f10b 0b01 	add.w	fp, fp, #1
 800977a:	e21e      	b.n	8009bba <_dtoa_r+0x882>
 800977c:	2202      	movs	r2, #2
 800977e:	e77c      	b.n	800967a <_dtoa_r+0x342>
 8009780:	07cc      	lsls	r4, r1, #31
 8009782:	d504      	bpl.n	800978e <_dtoa_r+0x456>
 8009784:	ed90 6b00 	vldr	d6, [r0]
 8009788:	3201      	adds	r2, #1
 800978a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800978e:	1049      	asrs	r1, r1, #1
 8009790:	3008      	adds	r0, #8
 8009792:	e773      	b.n	800967c <_dtoa_r+0x344>
 8009794:	d02e      	beq.n	80097f4 <_dtoa_r+0x4bc>
 8009796:	f1cb 0100 	rsb	r1, fp, #0
 800979a:	4a76      	ldr	r2, [pc, #472]	; (8009974 <_dtoa_r+0x63c>)
 800979c:	f001 000f 	and.w	r0, r1, #15
 80097a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80097a4:	ed92 7b00 	vldr	d7, [r2]
 80097a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80097ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80097b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80097b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80097bc:	486e      	ldr	r0, [pc, #440]	; (8009978 <_dtoa_r+0x640>)
 80097be:	1109      	asrs	r1, r1, #4
 80097c0:	2400      	movs	r4, #0
 80097c2:	2202      	movs	r2, #2
 80097c4:	b939      	cbnz	r1, 80097d6 <_dtoa_r+0x49e>
 80097c6:	2c00      	cmp	r4, #0
 80097c8:	f43f af60 	beq.w	800968c <_dtoa_r+0x354>
 80097cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d4:	e75a      	b.n	800968c <_dtoa_r+0x354>
 80097d6:	07cf      	lsls	r7, r1, #31
 80097d8:	d509      	bpl.n	80097ee <_dtoa_r+0x4b6>
 80097da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80097de:	ed90 7b00 	vldr	d7, [r0]
 80097e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80097e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80097ea:	3201      	adds	r2, #1
 80097ec:	2401      	movs	r4, #1
 80097ee:	1049      	asrs	r1, r1, #1
 80097f0:	3008      	adds	r0, #8
 80097f2:	e7e7      	b.n	80097c4 <_dtoa_r+0x48c>
 80097f4:	2202      	movs	r2, #2
 80097f6:	e749      	b.n	800968c <_dtoa_r+0x354>
 80097f8:	465f      	mov	r7, fp
 80097fa:	4648      	mov	r0, r9
 80097fc:	e765      	b.n	80096ca <_dtoa_r+0x392>
 80097fe:	ec42 1b17 	vmov	d7, r1, r2
 8009802:	4a5c      	ldr	r2, [pc, #368]	; (8009974 <_dtoa_r+0x63c>)
 8009804:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009808:	ed12 4b02 	vldr	d4, [r2, #-8]
 800980c:	9a00      	ldr	r2, [sp, #0]
 800980e:	1814      	adds	r4, r2, r0
 8009810:	9a08      	ldr	r2, [sp, #32]
 8009812:	b352      	cbz	r2, 800986a <_dtoa_r+0x532>
 8009814:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009818:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800981c:	f8dd 8000 	ldr.w	r8, [sp]
 8009820:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009824:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009828:	ee35 7b47 	vsub.f64	d7, d5, d7
 800982c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009830:	ee14 2a90 	vmov	r2, s9
 8009834:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009838:	3230      	adds	r2, #48	; 0x30
 800983a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800983e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	f808 2b01 	strb.w	r2, [r8], #1
 800984a:	d439      	bmi.n	80098c0 <_dtoa_r+0x588>
 800984c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009850:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009858:	d472      	bmi.n	8009940 <_dtoa_r+0x608>
 800985a:	45a0      	cmp	r8, r4
 800985c:	f43f af5d 	beq.w	800971a <_dtoa_r+0x3e2>
 8009860:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009864:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009868:	e7e0      	b.n	800982c <_dtoa_r+0x4f4>
 800986a:	f8dd 8000 	ldr.w	r8, [sp]
 800986e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009872:	4621      	mov	r1, r4
 8009874:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009878:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800987c:	ee14 2a90 	vmov	r2, s9
 8009880:	3230      	adds	r2, #48	; 0x30
 8009882:	f808 2b01 	strb.w	r2, [r8], #1
 8009886:	45a0      	cmp	r8, r4
 8009888:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800988c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009890:	d118      	bne.n	80098c4 <_dtoa_r+0x58c>
 8009892:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009896:	ee37 4b05 	vadd.f64	d4, d7, d5
 800989a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a2:	dc4d      	bgt.n	8009940 <_dtoa_r+0x608>
 80098a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80098a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b0:	f57f af33 	bpl.w	800971a <_dtoa_r+0x3e2>
 80098b4:	4688      	mov	r8, r1
 80098b6:	3901      	subs	r1, #1
 80098b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80098bc:	2b30      	cmp	r3, #48	; 0x30
 80098be:	d0f9      	beq.n	80098b4 <_dtoa_r+0x57c>
 80098c0:	46bb      	mov	fp, r7
 80098c2:	e02a      	b.n	800991a <_dtoa_r+0x5e2>
 80098c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80098c8:	e7d6      	b.n	8009878 <_dtoa_r+0x540>
 80098ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80098d2:	f8dd 8000 	ldr.w	r8, [sp]
 80098d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80098da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80098de:	ee15 3a10 	vmov	r3, s10
 80098e2:	3330      	adds	r3, #48	; 0x30
 80098e4:	f808 3b01 	strb.w	r3, [r8], #1
 80098e8:	9b00      	ldr	r3, [sp, #0]
 80098ea:	eba8 0303 	sub.w	r3, r8, r3
 80098ee:	4599      	cmp	r9, r3
 80098f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80098f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80098f8:	d133      	bne.n	8009962 <_dtoa_r+0x62a>
 80098fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80098fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009906:	dc1a      	bgt.n	800993e <_dtoa_r+0x606>
 8009908:	eeb4 7b46 	vcmp.f64	d7, d6
 800990c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009910:	d103      	bne.n	800991a <_dtoa_r+0x5e2>
 8009912:	ee15 3a10 	vmov	r3, s10
 8009916:	07d9      	lsls	r1, r3, #31
 8009918:	d411      	bmi.n	800993e <_dtoa_r+0x606>
 800991a:	4629      	mov	r1, r5
 800991c:	4630      	mov	r0, r6
 800991e:	f000 fe69 	bl	800a5f4 <_Bfree>
 8009922:	2300      	movs	r3, #0
 8009924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009926:	f888 3000 	strb.w	r3, [r8]
 800992a:	f10b 0301 	add.w	r3, fp, #1
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009932:	2b00      	cmp	r3, #0
 8009934:	f43f ad4d 	beq.w	80093d2 <_dtoa_r+0x9a>
 8009938:	f8c3 8000 	str.w	r8, [r3]
 800993c:	e549      	b.n	80093d2 <_dtoa_r+0x9a>
 800993e:	465f      	mov	r7, fp
 8009940:	4643      	mov	r3, r8
 8009942:	4698      	mov	r8, r3
 8009944:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009948:	2a39      	cmp	r2, #57	; 0x39
 800994a:	d106      	bne.n	800995a <_dtoa_r+0x622>
 800994c:	9a00      	ldr	r2, [sp, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d1f7      	bne.n	8009942 <_dtoa_r+0x60a>
 8009952:	9900      	ldr	r1, [sp, #0]
 8009954:	2230      	movs	r2, #48	; 0x30
 8009956:	3701      	adds	r7, #1
 8009958:	700a      	strb	r2, [r1, #0]
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	3201      	adds	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	e7ae      	b.n	80098c0 <_dtoa_r+0x588>
 8009962:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009966:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800996a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800996e:	d1b2      	bne.n	80098d6 <_dtoa_r+0x59e>
 8009970:	e7d3      	b.n	800991a <_dtoa_r+0x5e2>
 8009972:	bf00      	nop
 8009974:	0800c198 	.word	0x0800c198
 8009978:	0800c170 	.word	0x0800c170
 800997c:	9908      	ldr	r1, [sp, #32]
 800997e:	2900      	cmp	r1, #0
 8009980:	f000 80d1 	beq.w	8009b26 <_dtoa_r+0x7ee>
 8009984:	9907      	ldr	r1, [sp, #28]
 8009986:	2901      	cmp	r1, #1
 8009988:	f300 80b4 	bgt.w	8009af4 <_dtoa_r+0x7bc>
 800998c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800998e:	2900      	cmp	r1, #0
 8009990:	f000 80ac 	beq.w	8009aec <_dtoa_r+0x7b4>
 8009994:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009998:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800999c:	461c      	mov	r4, r3
 800999e:	930a      	str	r3, [sp, #40]	; 0x28
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	4413      	add	r3, r2
 80099a4:	9305      	str	r3, [sp, #20]
 80099a6:	9b06      	ldr	r3, [sp, #24]
 80099a8:	2101      	movs	r1, #1
 80099aa:	4413      	add	r3, r2
 80099ac:	4630      	mov	r0, r6
 80099ae:	9306      	str	r3, [sp, #24]
 80099b0:	f000 ff26 	bl	800a800 <__i2b>
 80099b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b6:	4607      	mov	r7, r0
 80099b8:	f1b8 0f00 	cmp.w	r8, #0
 80099bc:	dd0d      	ble.n	80099da <_dtoa_r+0x6a2>
 80099be:	9a06      	ldr	r2, [sp, #24]
 80099c0:	2a00      	cmp	r2, #0
 80099c2:	dd0a      	ble.n	80099da <_dtoa_r+0x6a2>
 80099c4:	4542      	cmp	r2, r8
 80099c6:	9905      	ldr	r1, [sp, #20]
 80099c8:	bfa8      	it	ge
 80099ca:	4642      	movge	r2, r8
 80099cc:	1a89      	subs	r1, r1, r2
 80099ce:	9105      	str	r1, [sp, #20]
 80099d0:	9906      	ldr	r1, [sp, #24]
 80099d2:	eba8 0802 	sub.w	r8, r8, r2
 80099d6:	1a8a      	subs	r2, r1, r2
 80099d8:	9206      	str	r2, [sp, #24]
 80099da:	b303      	cbz	r3, 8009a1e <_dtoa_r+0x6e6>
 80099dc:	9a08      	ldr	r2, [sp, #32]
 80099de:	2a00      	cmp	r2, #0
 80099e0:	f000 80a6 	beq.w	8009b30 <_dtoa_r+0x7f8>
 80099e4:	2c00      	cmp	r4, #0
 80099e6:	dd13      	ble.n	8009a10 <_dtoa_r+0x6d8>
 80099e8:	4639      	mov	r1, r7
 80099ea:	4622      	mov	r2, r4
 80099ec:	4630      	mov	r0, r6
 80099ee:	930c      	str	r3, [sp, #48]	; 0x30
 80099f0:	f000 ffc2 	bl	800a978 <__pow5mult>
 80099f4:	462a      	mov	r2, r5
 80099f6:	4601      	mov	r1, r0
 80099f8:	4607      	mov	r7, r0
 80099fa:	4630      	mov	r0, r6
 80099fc:	f000 ff16 	bl	800a82c <__multiply>
 8009a00:	4629      	mov	r1, r5
 8009a02:	900a      	str	r0, [sp, #40]	; 0x28
 8009a04:	4630      	mov	r0, r6
 8009a06:	f000 fdf5 	bl	800a5f4 <_Bfree>
 8009a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a0e:	4615      	mov	r5, r2
 8009a10:	1b1a      	subs	r2, r3, r4
 8009a12:	d004      	beq.n	8009a1e <_dtoa_r+0x6e6>
 8009a14:	4629      	mov	r1, r5
 8009a16:	4630      	mov	r0, r6
 8009a18:	f000 ffae 	bl	800a978 <__pow5mult>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	2101      	movs	r1, #1
 8009a20:	4630      	mov	r0, r6
 8009a22:	f000 feed 	bl	800a800 <__i2b>
 8009a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	f340 8082 	ble.w	8009b34 <_dtoa_r+0x7fc>
 8009a30:	461a      	mov	r2, r3
 8009a32:	4601      	mov	r1, r0
 8009a34:	4630      	mov	r0, r6
 8009a36:	f000 ff9f 	bl	800a978 <__pow5mult>
 8009a3a:	9b07      	ldr	r3, [sp, #28]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	4604      	mov	r4, r0
 8009a40:	dd7b      	ble.n	8009b3a <_dtoa_r+0x802>
 8009a42:	2300      	movs	r3, #0
 8009a44:	930a      	str	r3, [sp, #40]	; 0x28
 8009a46:	6922      	ldr	r2, [r4, #16]
 8009a48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a4c:	6910      	ldr	r0, [r2, #16]
 8009a4e:	f000 fe87 	bl	800a760 <__hi0bits>
 8009a52:	f1c0 0020 	rsb	r0, r0, #32
 8009a56:	9b06      	ldr	r3, [sp, #24]
 8009a58:	4418      	add	r0, r3
 8009a5a:	f010 001f 	ands.w	r0, r0, #31
 8009a5e:	f000 808d 	beq.w	8009b7c <_dtoa_r+0x844>
 8009a62:	f1c0 0220 	rsb	r2, r0, #32
 8009a66:	2a04      	cmp	r2, #4
 8009a68:	f340 8086 	ble.w	8009b78 <_dtoa_r+0x840>
 8009a6c:	f1c0 001c 	rsb	r0, r0, #28
 8009a70:	9b05      	ldr	r3, [sp, #20]
 8009a72:	4403      	add	r3, r0
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	9b06      	ldr	r3, [sp, #24]
 8009a78:	4403      	add	r3, r0
 8009a7a:	4480      	add	r8, r0
 8009a7c:	9306      	str	r3, [sp, #24]
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dd05      	ble.n	8009a90 <_dtoa_r+0x758>
 8009a84:	4629      	mov	r1, r5
 8009a86:	461a      	mov	r2, r3
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f000 ffcf 	bl	800aa2c <__lshift>
 8009a8e:	4605      	mov	r5, r0
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	dd05      	ble.n	8009aa2 <_dtoa_r+0x76a>
 8009a96:	4621      	mov	r1, r4
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 ffc6 	bl	800aa2c <__lshift>
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d06b      	beq.n	8009b80 <_dtoa_r+0x848>
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f001 f82a 	bl	800ab04 <__mcmp>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	da65      	bge.n	8009b80 <_dtoa_r+0x848>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	220a      	movs	r2, #10
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 fdbc 	bl	800a638 <__multadd>
 8009ac0:	9b08      	ldr	r3, [sp, #32]
 8009ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8192 	beq.w	8009df2 <_dtoa_r+0xaba>
 8009ace:	4639      	mov	r1, r7
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	220a      	movs	r2, #10
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 fdaf 	bl	800a638 <__multadd>
 8009ada:	f1ba 0f00 	cmp.w	sl, #0
 8009ade:	4607      	mov	r7, r0
 8009ae0:	f300 808e 	bgt.w	8009c00 <_dtoa_r+0x8c8>
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	dc51      	bgt.n	8009b8e <_dtoa_r+0x856>
 8009aea:	e089      	b.n	8009c00 <_dtoa_r+0x8c8>
 8009aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009af2:	e751      	b.n	8009998 <_dtoa_r+0x660>
 8009af4:	f109 34ff 	add.w	r4, r9, #4294967295
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	bfbf      	itttt	lt
 8009afc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009afe:	1ae3      	sublt	r3, r4, r3
 8009b00:	18d2      	addlt	r2, r2, r3
 8009b02:	4613      	movlt	r3, r2
 8009b04:	bfb7      	itett	lt
 8009b06:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009b08:	1b1c      	subge	r4, r3, r4
 8009b0a:	4623      	movlt	r3, r4
 8009b0c:	2400      	movlt	r4, #0
 8009b0e:	f1b9 0f00 	cmp.w	r9, #0
 8009b12:	bfb5      	itete	lt
 8009b14:	9a05      	ldrlt	r2, [sp, #20]
 8009b16:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009b1a:	eba2 0809 	sublt.w	r8, r2, r9
 8009b1e:	464a      	movge	r2, r9
 8009b20:	bfb8      	it	lt
 8009b22:	2200      	movlt	r2, #0
 8009b24:	e73b      	b.n	800999e <_dtoa_r+0x666>
 8009b26:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009b2a:	9f08      	ldr	r7, [sp, #32]
 8009b2c:	461c      	mov	r4, r3
 8009b2e:	e743      	b.n	80099b8 <_dtoa_r+0x680>
 8009b30:	461a      	mov	r2, r3
 8009b32:	e76f      	b.n	8009a14 <_dtoa_r+0x6dc>
 8009b34:	9b07      	ldr	r3, [sp, #28]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	dc18      	bgt.n	8009b6c <_dtoa_r+0x834>
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	b9b3      	cbnz	r3, 8009b6c <_dtoa_r+0x834>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009b44:	b9a2      	cbnz	r2, 8009b70 <_dtoa_r+0x838>
 8009b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b4a:	0d12      	lsrs	r2, r2, #20
 8009b4c:	0512      	lsls	r2, r2, #20
 8009b4e:	b18a      	cbz	r2, 8009b74 <_dtoa_r+0x83c>
 8009b50:	9b05      	ldr	r3, [sp, #20]
 8009b52:	3301      	adds	r3, #1
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	9b06      	ldr	r3, [sp, #24]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f47f af6f 	bne.w	8009a46 <_dtoa_r+0x70e>
 8009b68:	2001      	movs	r0, #1
 8009b6a:	e774      	b.n	8009a56 <_dtoa_r+0x71e>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e7f6      	b.n	8009b5e <_dtoa_r+0x826>
 8009b70:	9b02      	ldr	r3, [sp, #8]
 8009b72:	e7f4      	b.n	8009b5e <_dtoa_r+0x826>
 8009b74:	920a      	str	r2, [sp, #40]	; 0x28
 8009b76:	e7f3      	b.n	8009b60 <_dtoa_r+0x828>
 8009b78:	d081      	beq.n	8009a7e <_dtoa_r+0x746>
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	301c      	adds	r0, #28
 8009b7e:	e777      	b.n	8009a70 <_dtoa_r+0x738>
 8009b80:	f1b9 0f00 	cmp.w	r9, #0
 8009b84:	dc37      	bgt.n	8009bf6 <_dtoa_r+0x8be>
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	dd34      	ble.n	8009bf6 <_dtoa_r+0x8be>
 8009b8c:	46ca      	mov	sl, r9
 8009b8e:	f1ba 0f00 	cmp.w	sl, #0
 8009b92:	d10d      	bne.n	8009bb0 <_dtoa_r+0x878>
 8009b94:	4621      	mov	r1, r4
 8009b96:	4653      	mov	r3, sl
 8009b98:	2205      	movs	r2, #5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 fd4c 	bl	800a638 <__multadd>
 8009ba0:	4601      	mov	r1, r0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 ffad 	bl	800ab04 <__mcmp>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	f73f adde 	bgt.w	800976c <_dtoa_r+0x434>
 8009bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb2:	f8dd 8000 	ldr.w	r8, [sp]
 8009bb6:	ea6f 0b03 	mvn.w	fp, r3
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f000 fd17 	bl	800a5f4 <_Bfree>
 8009bc6:	2f00      	cmp	r7, #0
 8009bc8:	f43f aea7 	beq.w	800991a <_dtoa_r+0x5e2>
 8009bcc:	f1b9 0f00 	cmp.w	r9, #0
 8009bd0:	d005      	beq.n	8009bde <_dtoa_r+0x8a6>
 8009bd2:	45b9      	cmp	r9, r7
 8009bd4:	d003      	beq.n	8009bde <_dtoa_r+0x8a6>
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 fd0b 	bl	800a5f4 <_Bfree>
 8009bde:	4639      	mov	r1, r7
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 fd07 	bl	800a5f4 <_Bfree>
 8009be6:	e698      	b.n	800991a <_dtoa_r+0x5e2>
 8009be8:	2400      	movs	r4, #0
 8009bea:	4627      	mov	r7, r4
 8009bec:	e7e0      	b.n	8009bb0 <_dtoa_r+0x878>
 8009bee:	46bb      	mov	fp, r7
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	4607      	mov	r7, r0
 8009bf4:	e5ba      	b.n	800976c <_dtoa_r+0x434>
 8009bf6:	9b08      	ldr	r3, [sp, #32]
 8009bf8:	46ca      	mov	sl, r9
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 8100 	beq.w	8009e00 <_dtoa_r+0xac8>
 8009c00:	f1b8 0f00 	cmp.w	r8, #0
 8009c04:	dd05      	ble.n	8009c12 <_dtoa_r+0x8da>
 8009c06:	4639      	mov	r1, r7
 8009c08:	4642      	mov	r2, r8
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 ff0e 	bl	800aa2c <__lshift>
 8009c10:	4607      	mov	r7, r0
 8009c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d05d      	beq.n	8009cd4 <_dtoa_r+0x99c>
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f000 fcaa 	bl	800a574 <_Balloc>
 8009c20:	4680      	mov	r8, r0
 8009c22:	b928      	cbnz	r0, 8009c30 <_dtoa_r+0x8f8>
 8009c24:	4b82      	ldr	r3, [pc, #520]	; (8009e30 <_dtoa_r+0xaf8>)
 8009c26:	4602      	mov	r2, r0
 8009c28:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c2c:	f7ff bb9a 	b.w	8009364 <_dtoa_r+0x2c>
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	3202      	adds	r2, #2
 8009c34:	0092      	lsls	r2, r2, #2
 8009c36:	f107 010c 	add.w	r1, r7, #12
 8009c3a:	300c      	adds	r0, #12
 8009c3c:	f000 fc8c 	bl	800a558 <memcpy>
 8009c40:	2201      	movs	r2, #1
 8009c42:	4641      	mov	r1, r8
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 fef1 	bl	800aa2c <__lshift>
 8009c4a:	9b00      	ldr	r3, [sp, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	9b00      	ldr	r3, [sp, #0]
 8009c52:	4453      	add	r3, sl
 8009c54:	9309      	str	r3, [sp, #36]	; 0x24
 8009c56:	9b02      	ldr	r3, [sp, #8]
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	46b9      	mov	r9, r7
 8009c5e:	9308      	str	r3, [sp, #32]
 8009c60:	4607      	mov	r7, r0
 8009c62:	9b05      	ldr	r3, [sp, #20]
 8009c64:	4621      	mov	r1, r4
 8009c66:	3b01      	subs	r3, #1
 8009c68:	4628      	mov	r0, r5
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	f7ff fad6 	bl	800921c <quorem>
 8009c70:	4603      	mov	r3, r0
 8009c72:	3330      	adds	r3, #48	; 0x30
 8009c74:	9006      	str	r0, [sp, #24]
 8009c76:	4649      	mov	r1, r9
 8009c78:	4628      	mov	r0, r5
 8009c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c7c:	f000 ff42 	bl	800ab04 <__mcmp>
 8009c80:	463a      	mov	r2, r7
 8009c82:	4682      	mov	sl, r0
 8009c84:	4621      	mov	r1, r4
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 ff58 	bl	800ab3c <__mdiff>
 8009c8c:	68c2      	ldr	r2, [r0, #12]
 8009c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c90:	4680      	mov	r8, r0
 8009c92:	bb0a      	cbnz	r2, 8009cd8 <_dtoa_r+0x9a0>
 8009c94:	4601      	mov	r1, r0
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 ff34 	bl	800ab04 <__mcmp>
 8009c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4641      	mov	r1, r8
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	920e      	str	r2, [sp, #56]	; 0x38
 8009ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ca8:	f000 fca4 	bl	800a5f4 <_Bfree>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009cb4:	ea43 0102 	orr.w	r1, r3, r2
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cbe:	d10d      	bne.n	8009cdc <_dtoa_r+0x9a4>
 8009cc0:	2b39      	cmp	r3, #57	; 0x39
 8009cc2:	d029      	beq.n	8009d18 <_dtoa_r+0x9e0>
 8009cc4:	f1ba 0f00 	cmp.w	sl, #0
 8009cc8:	dd01      	ble.n	8009cce <_dtoa_r+0x996>
 8009cca:	9b06      	ldr	r3, [sp, #24]
 8009ccc:	3331      	adds	r3, #49	; 0x31
 8009cce:	9a02      	ldr	r2, [sp, #8]
 8009cd0:	7013      	strb	r3, [r2, #0]
 8009cd2:	e774      	b.n	8009bbe <_dtoa_r+0x886>
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	e7b8      	b.n	8009c4a <_dtoa_r+0x912>
 8009cd8:	2201      	movs	r2, #1
 8009cda:	e7e1      	b.n	8009ca0 <_dtoa_r+0x968>
 8009cdc:	f1ba 0f00 	cmp.w	sl, #0
 8009ce0:	db06      	blt.n	8009cf0 <_dtoa_r+0x9b8>
 8009ce2:	9907      	ldr	r1, [sp, #28]
 8009ce4:	ea41 0a0a 	orr.w	sl, r1, sl
 8009ce8:	9908      	ldr	r1, [sp, #32]
 8009cea:	ea5a 0101 	orrs.w	r1, sl, r1
 8009cee:	d120      	bne.n	8009d32 <_dtoa_r+0x9fa>
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	ddec      	ble.n	8009cce <_dtoa_r+0x996>
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	9305      	str	r3, [sp, #20]
 8009cfc:	f000 fe96 	bl	800aa2c <__lshift>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4605      	mov	r5, r0
 8009d04:	f000 fefe 	bl	800ab04 <__mcmp>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	9b05      	ldr	r3, [sp, #20]
 8009d0c:	dc02      	bgt.n	8009d14 <_dtoa_r+0x9dc>
 8009d0e:	d1de      	bne.n	8009cce <_dtoa_r+0x996>
 8009d10:	07da      	lsls	r2, r3, #31
 8009d12:	d5dc      	bpl.n	8009cce <_dtoa_r+0x996>
 8009d14:	2b39      	cmp	r3, #57	; 0x39
 8009d16:	d1d8      	bne.n	8009cca <_dtoa_r+0x992>
 8009d18:	9a02      	ldr	r2, [sp, #8]
 8009d1a:	2339      	movs	r3, #57	; 0x39
 8009d1c:	7013      	strb	r3, [r2, #0]
 8009d1e:	4643      	mov	r3, r8
 8009d20:	4698      	mov	r8, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009d28:	2a39      	cmp	r2, #57	; 0x39
 8009d2a:	d051      	beq.n	8009dd0 <_dtoa_r+0xa98>
 8009d2c:	3201      	adds	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e745      	b.n	8009bbe <_dtoa_r+0x886>
 8009d32:	2a00      	cmp	r2, #0
 8009d34:	dd03      	ble.n	8009d3e <_dtoa_r+0xa06>
 8009d36:	2b39      	cmp	r3, #57	; 0x39
 8009d38:	d0ee      	beq.n	8009d18 <_dtoa_r+0x9e0>
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	e7c7      	b.n	8009cce <_dtoa_r+0x996>
 8009d3e:	9a05      	ldr	r2, [sp, #20]
 8009d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d42:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d46:	428a      	cmp	r2, r1
 8009d48:	d02b      	beq.n	8009da2 <_dtoa_r+0xa6a>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	220a      	movs	r2, #10
 8009d50:	4630      	mov	r0, r6
 8009d52:	f000 fc71 	bl	800a638 <__multadd>
 8009d56:	45b9      	cmp	r9, r7
 8009d58:	4605      	mov	r5, r0
 8009d5a:	f04f 0300 	mov.w	r3, #0
 8009d5e:	f04f 020a 	mov.w	r2, #10
 8009d62:	4649      	mov	r1, r9
 8009d64:	4630      	mov	r0, r6
 8009d66:	d107      	bne.n	8009d78 <_dtoa_r+0xa40>
 8009d68:	f000 fc66 	bl	800a638 <__multadd>
 8009d6c:	4681      	mov	r9, r0
 8009d6e:	4607      	mov	r7, r0
 8009d70:	9b05      	ldr	r3, [sp, #20]
 8009d72:	3301      	adds	r3, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	e774      	b.n	8009c62 <_dtoa_r+0x92a>
 8009d78:	f000 fc5e 	bl	800a638 <__multadd>
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	4681      	mov	r9, r0
 8009d80:	2300      	movs	r3, #0
 8009d82:	220a      	movs	r2, #10
 8009d84:	4630      	mov	r0, r6
 8009d86:	f000 fc57 	bl	800a638 <__multadd>
 8009d8a:	4607      	mov	r7, r0
 8009d8c:	e7f0      	b.n	8009d70 <_dtoa_r+0xa38>
 8009d8e:	f1ba 0f00 	cmp.w	sl, #0
 8009d92:	9a00      	ldr	r2, [sp, #0]
 8009d94:	bfcc      	ite	gt
 8009d96:	46d0      	movgt	r8, sl
 8009d98:	f04f 0801 	movle.w	r8, #1
 8009d9c:	4490      	add	r8, r2
 8009d9e:	f04f 0900 	mov.w	r9, #0
 8009da2:	4629      	mov	r1, r5
 8009da4:	2201      	movs	r2, #1
 8009da6:	4630      	mov	r0, r6
 8009da8:	9302      	str	r3, [sp, #8]
 8009daa:	f000 fe3f 	bl	800aa2c <__lshift>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4605      	mov	r5, r0
 8009db2:	f000 fea7 	bl	800ab04 <__mcmp>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	dcb1      	bgt.n	8009d1e <_dtoa_r+0x9e6>
 8009dba:	d102      	bne.n	8009dc2 <_dtoa_r+0xa8a>
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	07db      	lsls	r3, r3, #31
 8009dc0:	d4ad      	bmi.n	8009d1e <_dtoa_r+0x9e6>
 8009dc2:	4643      	mov	r3, r8
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dca:	2a30      	cmp	r2, #48	; 0x30
 8009dcc:	d0fa      	beq.n	8009dc4 <_dtoa_r+0xa8c>
 8009dce:	e6f6      	b.n	8009bbe <_dtoa_r+0x886>
 8009dd0:	9a00      	ldr	r2, [sp, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d1a4      	bne.n	8009d20 <_dtoa_r+0x9e8>
 8009dd6:	f10b 0b01 	add.w	fp, fp, #1
 8009dda:	2331      	movs	r3, #49	; 0x31
 8009ddc:	e778      	b.n	8009cd0 <_dtoa_r+0x998>
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <_dtoa_r+0xafc>)
 8009de0:	f7ff bb12 	b.w	8009408 <_dtoa_r+0xd0>
 8009de4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f47f aaee 	bne.w	80093c8 <_dtoa_r+0x90>
 8009dec:	4b12      	ldr	r3, [pc, #72]	; (8009e38 <_dtoa_r+0xb00>)
 8009dee:	f7ff bb0b 	b.w	8009408 <_dtoa_r+0xd0>
 8009df2:	f1ba 0f00 	cmp.w	sl, #0
 8009df6:	dc03      	bgt.n	8009e00 <_dtoa_r+0xac8>
 8009df8:	9b07      	ldr	r3, [sp, #28]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	f73f aec7 	bgt.w	8009b8e <_dtoa_r+0x856>
 8009e00:	f8dd 8000 	ldr.w	r8, [sp]
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7ff fa08 	bl	800921c <quorem>
 8009e0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009e10:	f808 3b01 	strb.w	r3, [r8], #1
 8009e14:	9a00      	ldr	r2, [sp, #0]
 8009e16:	eba8 0202 	sub.w	r2, r8, r2
 8009e1a:	4592      	cmp	sl, r2
 8009e1c:	ddb7      	ble.n	8009d8e <_dtoa_r+0xa56>
 8009e1e:	4629      	mov	r1, r5
 8009e20:	2300      	movs	r3, #0
 8009e22:	220a      	movs	r2, #10
 8009e24:	4630      	mov	r0, r6
 8009e26:	f000 fc07 	bl	800a638 <__multadd>
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	e7ea      	b.n	8009e04 <_dtoa_r+0xacc>
 8009e2e:	bf00      	nop
 8009e30:	0800c07b 	.word	0x0800c07b
 8009e34:	0800bf80 	.word	0x0800bf80
 8009e38:	0800bff8 	.word	0x0800bff8

08009e3c <rshift>:
 8009e3c:	6903      	ldr	r3, [r0, #16]
 8009e3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e4a:	f100 0414 	add.w	r4, r0, #20
 8009e4e:	dd45      	ble.n	8009edc <rshift+0xa0>
 8009e50:	f011 011f 	ands.w	r1, r1, #31
 8009e54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e5c:	d10c      	bne.n	8009e78 <rshift+0x3c>
 8009e5e:	f100 0710 	add.w	r7, r0, #16
 8009e62:	4629      	mov	r1, r5
 8009e64:	42b1      	cmp	r1, r6
 8009e66:	d334      	bcc.n	8009ed2 <rshift+0x96>
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	1eea      	subs	r2, r5, #3
 8009e6e:	4296      	cmp	r6, r2
 8009e70:	bf38      	it	cc
 8009e72:	2300      	movcc	r3, #0
 8009e74:	4423      	add	r3, r4
 8009e76:	e015      	b.n	8009ea4 <rshift+0x68>
 8009e78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e7c:	f1c1 0820 	rsb	r8, r1, #32
 8009e80:	40cf      	lsrs	r7, r1
 8009e82:	f105 0e04 	add.w	lr, r5, #4
 8009e86:	46a1      	mov	r9, r4
 8009e88:	4576      	cmp	r6, lr
 8009e8a:	46f4      	mov	ip, lr
 8009e8c:	d815      	bhi.n	8009eba <rshift+0x7e>
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	009a      	lsls	r2, r3, #2
 8009e92:	3a04      	subs	r2, #4
 8009e94:	3501      	adds	r5, #1
 8009e96:	42ae      	cmp	r6, r5
 8009e98:	bf38      	it	cc
 8009e9a:	2200      	movcc	r2, #0
 8009e9c:	18a3      	adds	r3, r4, r2
 8009e9e:	50a7      	str	r7, [r4, r2]
 8009ea0:	b107      	cbz	r7, 8009ea4 <rshift+0x68>
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	1b1a      	subs	r2, r3, r4
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009eac:	bf08      	it	eq
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	6102      	str	r2, [r0, #16]
 8009eb2:	bf08      	it	eq
 8009eb4:	6143      	streq	r3, [r0, #20]
 8009eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eba:	f8dc c000 	ldr.w	ip, [ip]
 8009ebe:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ec2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ec6:	f849 7b04 	str.w	r7, [r9], #4
 8009eca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ece:	40cf      	lsrs	r7, r1
 8009ed0:	e7da      	b.n	8009e88 <rshift+0x4c>
 8009ed2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ed6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009eda:	e7c3      	b.n	8009e64 <rshift+0x28>
 8009edc:	4623      	mov	r3, r4
 8009ede:	e7e1      	b.n	8009ea4 <rshift+0x68>

08009ee0 <__hexdig_fun>:
 8009ee0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d802      	bhi.n	8009eee <__hexdig_fun+0xe>
 8009ee8:	3820      	subs	r0, #32
 8009eea:	b2c0      	uxtb	r0, r0
 8009eec:	4770      	bx	lr
 8009eee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ef2:	2b05      	cmp	r3, #5
 8009ef4:	d801      	bhi.n	8009efa <__hexdig_fun+0x1a>
 8009ef6:	3847      	subs	r0, #71	; 0x47
 8009ef8:	e7f7      	b.n	8009eea <__hexdig_fun+0xa>
 8009efa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d801      	bhi.n	8009f06 <__hexdig_fun+0x26>
 8009f02:	3827      	subs	r0, #39	; 0x27
 8009f04:	e7f1      	b.n	8009eea <__hexdig_fun+0xa>
 8009f06:	2000      	movs	r0, #0
 8009f08:	4770      	bx	lr
	...

08009f0c <__gethex>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	ed2d 8b02 	vpush	{d8}
 8009f14:	b089      	sub	sp, #36	; 0x24
 8009f16:	ee08 0a10 	vmov	s16, r0
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	4bbc      	ldr	r3, [pc, #752]	; (800a210 <__gethex+0x304>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	4618      	mov	r0, r3
 8009f24:	468b      	mov	fp, r1
 8009f26:	4690      	mov	r8, r2
 8009f28:	f7f6 f98a 	bl	8000240 <strlen>
 8009f2c:	9b01      	ldr	r3, [sp, #4]
 8009f2e:	f8db 2000 	ldr.w	r2, [fp]
 8009f32:	4403      	add	r3, r0
 8009f34:	4682      	mov	sl, r0
 8009f36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	1c93      	adds	r3, r2, #2
 8009f3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f46:	32fe      	adds	r2, #254	; 0xfe
 8009f48:	18d1      	adds	r1, r2, r3
 8009f4a:	461f      	mov	r7, r3
 8009f4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f50:	9100      	str	r1, [sp, #0]
 8009f52:	2830      	cmp	r0, #48	; 0x30
 8009f54:	d0f8      	beq.n	8009f48 <__gethex+0x3c>
 8009f56:	f7ff ffc3 	bl	8009ee0 <__hexdig_fun>
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d13a      	bne.n	8009fd6 <__gethex+0xca>
 8009f60:	9901      	ldr	r1, [sp, #4]
 8009f62:	4652      	mov	r2, sl
 8009f64:	4638      	mov	r0, r7
 8009f66:	f7fe fb49 	bl	80085fc <strncmp>
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d168      	bne.n	800a042 <__gethex+0x136>
 8009f70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009f74:	eb07 060a 	add.w	r6, r7, sl
 8009f78:	f7ff ffb2 	bl	8009ee0 <__hexdig_fun>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d062      	beq.n	800a046 <__gethex+0x13a>
 8009f80:	4633      	mov	r3, r6
 8009f82:	7818      	ldrb	r0, [r3, #0]
 8009f84:	2830      	cmp	r0, #48	; 0x30
 8009f86:	461f      	mov	r7, r3
 8009f88:	f103 0301 	add.w	r3, r3, #1
 8009f8c:	d0f9      	beq.n	8009f82 <__gethex+0x76>
 8009f8e:	f7ff ffa7 	bl	8009ee0 <__hexdig_fun>
 8009f92:	2301      	movs	r3, #1
 8009f94:	fab0 f480 	clz	r4, r0
 8009f98:	0964      	lsrs	r4, r4, #5
 8009f9a:	4635      	mov	r5, r6
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	463a      	mov	r2, r7
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	7830      	ldrb	r0, [r6, #0]
 8009fa6:	f7ff ff9b 	bl	8009ee0 <__hexdig_fun>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d1f8      	bne.n	8009fa0 <__gethex+0x94>
 8009fae:	9901      	ldr	r1, [sp, #4]
 8009fb0:	4652      	mov	r2, sl
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7fe fb22 	bl	80085fc <strncmp>
 8009fb8:	b980      	cbnz	r0, 8009fdc <__gethex+0xd0>
 8009fba:	b94d      	cbnz	r5, 8009fd0 <__gethex+0xc4>
 8009fbc:	eb06 050a 	add.w	r5, r6, sl
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	3201      	adds	r2, #1
 8009fc6:	7830      	ldrb	r0, [r6, #0]
 8009fc8:	f7ff ff8a 	bl	8009ee0 <__hexdig_fun>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d1f8      	bne.n	8009fc2 <__gethex+0xb6>
 8009fd0:	1bad      	subs	r5, r5, r6
 8009fd2:	00ad      	lsls	r5, r5, #2
 8009fd4:	e004      	b.n	8009fe0 <__gethex+0xd4>
 8009fd6:	2400      	movs	r4, #0
 8009fd8:	4625      	mov	r5, r4
 8009fda:	e7e0      	b.n	8009f9e <__gethex+0x92>
 8009fdc:	2d00      	cmp	r5, #0
 8009fde:	d1f7      	bne.n	8009fd0 <__gethex+0xc4>
 8009fe0:	7833      	ldrb	r3, [r6, #0]
 8009fe2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fe6:	2b50      	cmp	r3, #80	; 0x50
 8009fe8:	d13b      	bne.n	800a062 <__gethex+0x156>
 8009fea:	7873      	ldrb	r3, [r6, #1]
 8009fec:	2b2b      	cmp	r3, #43	; 0x2b
 8009fee:	d02c      	beq.n	800a04a <__gethex+0x13e>
 8009ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8009ff2:	d02e      	beq.n	800a052 <__gethex+0x146>
 8009ff4:	1c71      	adds	r1, r6, #1
 8009ff6:	f04f 0900 	mov.w	r9, #0
 8009ffa:	7808      	ldrb	r0, [r1, #0]
 8009ffc:	f7ff ff70 	bl	8009ee0 <__hexdig_fun>
 800a000:	1e43      	subs	r3, r0, #1
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b18      	cmp	r3, #24
 800a006:	d82c      	bhi.n	800a062 <__gethex+0x156>
 800a008:	f1a0 0210 	sub.w	r2, r0, #16
 800a00c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a010:	f7ff ff66 	bl	8009ee0 <__hexdig_fun>
 800a014:	1e43      	subs	r3, r0, #1
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b18      	cmp	r3, #24
 800a01a:	d91d      	bls.n	800a058 <__gethex+0x14c>
 800a01c:	f1b9 0f00 	cmp.w	r9, #0
 800a020:	d000      	beq.n	800a024 <__gethex+0x118>
 800a022:	4252      	negs	r2, r2
 800a024:	4415      	add	r5, r2
 800a026:	f8cb 1000 	str.w	r1, [fp]
 800a02a:	b1e4      	cbz	r4, 800a066 <__gethex+0x15a>
 800a02c:	9b00      	ldr	r3, [sp, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bf14      	ite	ne
 800a032:	2700      	movne	r7, #0
 800a034:	2706      	moveq	r7, #6
 800a036:	4638      	mov	r0, r7
 800a038:	b009      	add	sp, #36	; 0x24
 800a03a:	ecbd 8b02 	vpop	{d8}
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	463e      	mov	r6, r7
 800a044:	4625      	mov	r5, r4
 800a046:	2401      	movs	r4, #1
 800a048:	e7ca      	b.n	8009fe0 <__gethex+0xd4>
 800a04a:	f04f 0900 	mov.w	r9, #0
 800a04e:	1cb1      	adds	r1, r6, #2
 800a050:	e7d3      	b.n	8009ffa <__gethex+0xee>
 800a052:	f04f 0901 	mov.w	r9, #1
 800a056:	e7fa      	b.n	800a04e <__gethex+0x142>
 800a058:	230a      	movs	r3, #10
 800a05a:	fb03 0202 	mla	r2, r3, r2, r0
 800a05e:	3a10      	subs	r2, #16
 800a060:	e7d4      	b.n	800a00c <__gethex+0x100>
 800a062:	4631      	mov	r1, r6
 800a064:	e7df      	b.n	800a026 <__gethex+0x11a>
 800a066:	1bf3      	subs	r3, r6, r7
 800a068:	3b01      	subs	r3, #1
 800a06a:	4621      	mov	r1, r4
 800a06c:	2b07      	cmp	r3, #7
 800a06e:	dc0b      	bgt.n	800a088 <__gethex+0x17c>
 800a070:	ee18 0a10 	vmov	r0, s16
 800a074:	f000 fa7e 	bl	800a574 <_Balloc>
 800a078:	4604      	mov	r4, r0
 800a07a:	b940      	cbnz	r0, 800a08e <__gethex+0x182>
 800a07c:	4b65      	ldr	r3, [pc, #404]	; (800a214 <__gethex+0x308>)
 800a07e:	4602      	mov	r2, r0
 800a080:	21de      	movs	r1, #222	; 0xde
 800a082:	4865      	ldr	r0, [pc, #404]	; (800a218 <__gethex+0x30c>)
 800a084:	f001 f96e 	bl	800b364 <__assert_func>
 800a088:	3101      	adds	r1, #1
 800a08a:	105b      	asrs	r3, r3, #1
 800a08c:	e7ee      	b.n	800a06c <__gethex+0x160>
 800a08e:	f100 0914 	add.w	r9, r0, #20
 800a092:	f04f 0b00 	mov.w	fp, #0
 800a096:	f1ca 0301 	rsb	r3, sl, #1
 800a09a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a09e:	f8cd b000 	str.w	fp, [sp]
 800a0a2:	9306      	str	r3, [sp, #24]
 800a0a4:	42b7      	cmp	r7, r6
 800a0a6:	d340      	bcc.n	800a12a <__gethex+0x21e>
 800a0a8:	9802      	ldr	r0, [sp, #8]
 800a0aa:	9b00      	ldr	r3, [sp, #0]
 800a0ac:	f840 3b04 	str.w	r3, [r0], #4
 800a0b0:	eba0 0009 	sub.w	r0, r0, r9
 800a0b4:	1080      	asrs	r0, r0, #2
 800a0b6:	0146      	lsls	r6, r0, #5
 800a0b8:	6120      	str	r0, [r4, #16]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fb50 	bl	800a760 <__hi0bits>
 800a0c0:	1a30      	subs	r0, r6, r0
 800a0c2:	f8d8 6000 	ldr.w	r6, [r8]
 800a0c6:	42b0      	cmp	r0, r6
 800a0c8:	dd63      	ble.n	800a192 <__gethex+0x286>
 800a0ca:	1b87      	subs	r7, r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 feeb 	bl	800aeaa <__any_on>
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	b1a8      	cbz	r0, 800a104 <__gethex+0x1f8>
 800a0d8:	1e7b      	subs	r3, r7, #1
 800a0da:	1159      	asrs	r1, r3, #5
 800a0dc:	f003 021f 	and.w	r2, r3, #31
 800a0e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a0e4:	f04f 0a01 	mov.w	sl, #1
 800a0e8:	fa0a f202 	lsl.w	r2, sl, r2
 800a0ec:	420a      	tst	r2, r1
 800a0ee:	d009      	beq.n	800a104 <__gethex+0x1f8>
 800a0f0:	4553      	cmp	r3, sl
 800a0f2:	dd05      	ble.n	800a100 <__gethex+0x1f4>
 800a0f4:	1eb9      	subs	r1, r7, #2
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 fed7 	bl	800aeaa <__any_on>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d145      	bne.n	800a18c <__gethex+0x280>
 800a100:	f04f 0a02 	mov.w	sl, #2
 800a104:	4639      	mov	r1, r7
 800a106:	4620      	mov	r0, r4
 800a108:	f7ff fe98 	bl	8009e3c <rshift>
 800a10c:	443d      	add	r5, r7
 800a10e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a112:	42ab      	cmp	r3, r5
 800a114:	da4c      	bge.n	800a1b0 <__gethex+0x2a4>
 800a116:	ee18 0a10 	vmov	r0, s16
 800a11a:	4621      	mov	r1, r4
 800a11c:	f000 fa6a 	bl	800a5f4 <_Bfree>
 800a120:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a122:	2300      	movs	r3, #0
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	27a3      	movs	r7, #163	; 0xa3
 800a128:	e785      	b.n	800a036 <__gethex+0x12a>
 800a12a:	1e73      	subs	r3, r6, #1
 800a12c:	9a05      	ldr	r2, [sp, #20]
 800a12e:	9303      	str	r3, [sp, #12]
 800a130:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a134:	4293      	cmp	r3, r2
 800a136:	d019      	beq.n	800a16c <__gethex+0x260>
 800a138:	f1bb 0f20 	cmp.w	fp, #32
 800a13c:	d107      	bne.n	800a14e <__gethex+0x242>
 800a13e:	9b02      	ldr	r3, [sp, #8]
 800a140:	9a00      	ldr	r2, [sp, #0]
 800a142:	f843 2b04 	str.w	r2, [r3], #4
 800a146:	9302      	str	r3, [sp, #8]
 800a148:	2300      	movs	r3, #0
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	469b      	mov	fp, r3
 800a14e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a152:	f7ff fec5 	bl	8009ee0 <__hexdig_fun>
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	f000 000f 	and.w	r0, r0, #15
 800a15c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a160:	4303      	orrs	r3, r0
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	f10b 0b04 	add.w	fp, fp, #4
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	e00d      	b.n	800a188 <__gethex+0x27c>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	9a06      	ldr	r2, [sp, #24]
 800a170:	4413      	add	r3, r2
 800a172:	42bb      	cmp	r3, r7
 800a174:	d3e0      	bcc.n	800a138 <__gethex+0x22c>
 800a176:	4618      	mov	r0, r3
 800a178:	9901      	ldr	r1, [sp, #4]
 800a17a:	9307      	str	r3, [sp, #28]
 800a17c:	4652      	mov	r2, sl
 800a17e:	f7fe fa3d 	bl	80085fc <strncmp>
 800a182:	9b07      	ldr	r3, [sp, #28]
 800a184:	2800      	cmp	r0, #0
 800a186:	d1d7      	bne.n	800a138 <__gethex+0x22c>
 800a188:	461e      	mov	r6, r3
 800a18a:	e78b      	b.n	800a0a4 <__gethex+0x198>
 800a18c:	f04f 0a03 	mov.w	sl, #3
 800a190:	e7b8      	b.n	800a104 <__gethex+0x1f8>
 800a192:	da0a      	bge.n	800a1aa <__gethex+0x29e>
 800a194:	1a37      	subs	r7, r6, r0
 800a196:	4621      	mov	r1, r4
 800a198:	ee18 0a10 	vmov	r0, s16
 800a19c:	463a      	mov	r2, r7
 800a19e:	f000 fc45 	bl	800aa2c <__lshift>
 800a1a2:	1bed      	subs	r5, r5, r7
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f100 0914 	add.w	r9, r0, #20
 800a1aa:	f04f 0a00 	mov.w	sl, #0
 800a1ae:	e7ae      	b.n	800a10e <__gethex+0x202>
 800a1b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a1b4:	42a8      	cmp	r0, r5
 800a1b6:	dd72      	ble.n	800a29e <__gethex+0x392>
 800a1b8:	1b45      	subs	r5, r0, r5
 800a1ba:	42ae      	cmp	r6, r5
 800a1bc:	dc36      	bgt.n	800a22c <__gethex+0x320>
 800a1be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d02a      	beq.n	800a21c <__gethex+0x310>
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d02c      	beq.n	800a224 <__gethex+0x318>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d115      	bne.n	800a1fa <__gethex+0x2ee>
 800a1ce:	42ae      	cmp	r6, r5
 800a1d0:	d113      	bne.n	800a1fa <__gethex+0x2ee>
 800a1d2:	2e01      	cmp	r6, #1
 800a1d4:	d10b      	bne.n	800a1ee <__gethex+0x2e2>
 800a1d6:	9a04      	ldr	r2, [sp, #16]
 800a1d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	2301      	movs	r3, #1
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	f8c9 3000 	str.w	r3, [r9]
 800a1e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1e8:	2762      	movs	r7, #98	; 0x62
 800a1ea:	601c      	str	r4, [r3, #0]
 800a1ec:	e723      	b.n	800a036 <__gethex+0x12a>
 800a1ee:	1e71      	subs	r1, r6, #1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fe5a 	bl	800aeaa <__any_on>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d1ed      	bne.n	800a1d6 <__gethex+0x2ca>
 800a1fa:	ee18 0a10 	vmov	r0, s16
 800a1fe:	4621      	mov	r1, r4
 800a200:	f000 f9f8 	bl	800a5f4 <_Bfree>
 800a204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a206:	2300      	movs	r3, #0
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	2750      	movs	r7, #80	; 0x50
 800a20c:	e713      	b.n	800a036 <__gethex+0x12a>
 800a20e:	bf00      	nop
 800a210:	0800c0f8 	.word	0x0800c0f8
 800a214:	0800c07b 	.word	0x0800c07b
 800a218:	0800c08c 	.word	0x0800c08c
 800a21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1eb      	bne.n	800a1fa <__gethex+0x2ee>
 800a222:	e7d8      	b.n	800a1d6 <__gethex+0x2ca>
 800a224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1d5      	bne.n	800a1d6 <__gethex+0x2ca>
 800a22a:	e7e6      	b.n	800a1fa <__gethex+0x2ee>
 800a22c:	1e6f      	subs	r7, r5, #1
 800a22e:	f1ba 0f00 	cmp.w	sl, #0
 800a232:	d131      	bne.n	800a298 <__gethex+0x38c>
 800a234:	b127      	cbz	r7, 800a240 <__gethex+0x334>
 800a236:	4639      	mov	r1, r7
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fe36 	bl	800aeaa <__any_on>
 800a23e:	4682      	mov	sl, r0
 800a240:	117b      	asrs	r3, r7, #5
 800a242:	2101      	movs	r1, #1
 800a244:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a248:	f007 071f 	and.w	r7, r7, #31
 800a24c:	fa01 f707 	lsl.w	r7, r1, r7
 800a250:	421f      	tst	r7, r3
 800a252:	4629      	mov	r1, r5
 800a254:	4620      	mov	r0, r4
 800a256:	bf18      	it	ne
 800a258:	f04a 0a02 	orrne.w	sl, sl, #2
 800a25c:	1b76      	subs	r6, r6, r5
 800a25e:	f7ff fded 	bl	8009e3c <rshift>
 800a262:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a266:	2702      	movs	r7, #2
 800a268:	f1ba 0f00 	cmp.w	sl, #0
 800a26c:	d048      	beq.n	800a300 <__gethex+0x3f4>
 800a26e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d015      	beq.n	800a2a2 <__gethex+0x396>
 800a276:	2b03      	cmp	r3, #3
 800a278:	d017      	beq.n	800a2aa <__gethex+0x39e>
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d109      	bne.n	800a292 <__gethex+0x386>
 800a27e:	f01a 0f02 	tst.w	sl, #2
 800a282:	d006      	beq.n	800a292 <__gethex+0x386>
 800a284:	f8d9 0000 	ldr.w	r0, [r9]
 800a288:	ea4a 0a00 	orr.w	sl, sl, r0
 800a28c:	f01a 0f01 	tst.w	sl, #1
 800a290:	d10e      	bne.n	800a2b0 <__gethex+0x3a4>
 800a292:	f047 0710 	orr.w	r7, r7, #16
 800a296:	e033      	b.n	800a300 <__gethex+0x3f4>
 800a298:	f04f 0a01 	mov.w	sl, #1
 800a29c:	e7d0      	b.n	800a240 <__gethex+0x334>
 800a29e:	2701      	movs	r7, #1
 800a2a0:	e7e2      	b.n	800a268 <__gethex+0x35c>
 800a2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a4:	f1c3 0301 	rsb	r3, r3, #1
 800a2a8:	9315      	str	r3, [sp, #84]	; 0x54
 800a2aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0f0      	beq.n	800a292 <__gethex+0x386>
 800a2b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2b4:	f104 0314 	add.w	r3, r4, #20
 800a2b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2c0:	f04f 0c00 	mov.w	ip, #0
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2ce:	d01c      	beq.n	800a30a <__gethex+0x3fe>
 800a2d0:	3201      	adds	r2, #1
 800a2d2:	6002      	str	r2, [r0, #0]
 800a2d4:	2f02      	cmp	r7, #2
 800a2d6:	f104 0314 	add.w	r3, r4, #20
 800a2da:	d13f      	bne.n	800a35c <__gethex+0x450>
 800a2dc:	f8d8 2000 	ldr.w	r2, [r8]
 800a2e0:	3a01      	subs	r2, #1
 800a2e2:	42b2      	cmp	r2, r6
 800a2e4:	d10a      	bne.n	800a2fc <__gethex+0x3f0>
 800a2e6:	1171      	asrs	r1, r6, #5
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2ee:	f006 061f 	and.w	r6, r6, #31
 800a2f2:	fa02 f606 	lsl.w	r6, r2, r6
 800a2f6:	421e      	tst	r6, r3
 800a2f8:	bf18      	it	ne
 800a2fa:	4617      	movne	r7, r2
 800a2fc:	f047 0720 	orr.w	r7, r7, #32
 800a300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a302:	601c      	str	r4, [r3, #0]
 800a304:	9b04      	ldr	r3, [sp, #16]
 800a306:	601d      	str	r5, [r3, #0]
 800a308:	e695      	b.n	800a036 <__gethex+0x12a>
 800a30a:	4299      	cmp	r1, r3
 800a30c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a310:	d8d8      	bhi.n	800a2c4 <__gethex+0x3b8>
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	459b      	cmp	fp, r3
 800a316:	db19      	blt.n	800a34c <__gethex+0x440>
 800a318:	6861      	ldr	r1, [r4, #4]
 800a31a:	ee18 0a10 	vmov	r0, s16
 800a31e:	3101      	adds	r1, #1
 800a320:	f000 f928 	bl	800a574 <_Balloc>
 800a324:	4681      	mov	r9, r0
 800a326:	b918      	cbnz	r0, 800a330 <__gethex+0x424>
 800a328:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <__gethex+0x488>)
 800a32a:	4602      	mov	r2, r0
 800a32c:	2184      	movs	r1, #132	; 0x84
 800a32e:	e6a8      	b.n	800a082 <__gethex+0x176>
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	3202      	adds	r2, #2
 800a334:	f104 010c 	add.w	r1, r4, #12
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	300c      	adds	r0, #12
 800a33c:	f000 f90c 	bl	800a558 <memcpy>
 800a340:	4621      	mov	r1, r4
 800a342:	ee18 0a10 	vmov	r0, s16
 800a346:	f000 f955 	bl	800a5f4 <_Bfree>
 800a34a:	464c      	mov	r4, r9
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a354:	6122      	str	r2, [r4, #16]
 800a356:	2201      	movs	r2, #1
 800a358:	615a      	str	r2, [r3, #20]
 800a35a:	e7bb      	b.n	800a2d4 <__gethex+0x3c8>
 800a35c:	6922      	ldr	r2, [r4, #16]
 800a35e:	455a      	cmp	r2, fp
 800a360:	dd0b      	ble.n	800a37a <__gethex+0x46e>
 800a362:	2101      	movs	r1, #1
 800a364:	4620      	mov	r0, r4
 800a366:	f7ff fd69 	bl	8009e3c <rshift>
 800a36a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a36e:	3501      	adds	r5, #1
 800a370:	42ab      	cmp	r3, r5
 800a372:	f6ff aed0 	blt.w	800a116 <__gethex+0x20a>
 800a376:	2701      	movs	r7, #1
 800a378:	e7c0      	b.n	800a2fc <__gethex+0x3f0>
 800a37a:	f016 061f 	ands.w	r6, r6, #31
 800a37e:	d0fa      	beq.n	800a376 <__gethex+0x46a>
 800a380:	449a      	add	sl, r3
 800a382:	f1c6 0620 	rsb	r6, r6, #32
 800a386:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a38a:	f000 f9e9 	bl	800a760 <__hi0bits>
 800a38e:	42b0      	cmp	r0, r6
 800a390:	dbe7      	blt.n	800a362 <__gethex+0x456>
 800a392:	e7f0      	b.n	800a376 <__gethex+0x46a>
 800a394:	0800c07b 	.word	0x0800c07b

0800a398 <L_shift>:
 800a398:	f1c2 0208 	rsb	r2, r2, #8
 800a39c:	0092      	lsls	r2, r2, #2
 800a39e:	b570      	push	{r4, r5, r6, lr}
 800a3a0:	f1c2 0620 	rsb	r6, r2, #32
 800a3a4:	6843      	ldr	r3, [r0, #4]
 800a3a6:	6804      	ldr	r4, [r0, #0]
 800a3a8:	fa03 f506 	lsl.w	r5, r3, r6
 800a3ac:	432c      	orrs	r4, r5
 800a3ae:	40d3      	lsrs	r3, r2
 800a3b0:	6004      	str	r4, [r0, #0]
 800a3b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3b6:	4288      	cmp	r0, r1
 800a3b8:	d3f4      	bcc.n	800a3a4 <L_shift+0xc>
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}

0800a3bc <__match>:
 800a3bc:	b530      	push	{r4, r5, lr}
 800a3be:	6803      	ldr	r3, [r0, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3c6:	b914      	cbnz	r4, 800a3ce <__match+0x12>
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	bd30      	pop	{r4, r5, pc}
 800a3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3d6:	2d19      	cmp	r5, #25
 800a3d8:	bf98      	it	ls
 800a3da:	3220      	addls	r2, #32
 800a3dc:	42a2      	cmp	r2, r4
 800a3de:	d0f0      	beq.n	800a3c2 <__match+0x6>
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7f3      	b.n	800a3cc <__match+0x10>

0800a3e4 <__hexnan>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	680b      	ldr	r3, [r1, #0]
 800a3ea:	6801      	ldr	r1, [r0, #0]
 800a3ec:	115e      	asrs	r6, r3, #5
 800a3ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3f2:	f013 031f 	ands.w	r3, r3, #31
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	bf18      	it	ne
 800a3fa:	3604      	addne	r6, #4
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	1f37      	subs	r7, r6, #4
 800a400:	4682      	mov	sl, r0
 800a402:	4690      	mov	r8, r2
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	f846 5c04 	str.w	r5, [r6, #-4]
 800a40a:	46b9      	mov	r9, r7
 800a40c:	463c      	mov	r4, r7
 800a40e:	9502      	str	r5, [sp, #8]
 800a410:	46ab      	mov	fp, r5
 800a412:	784a      	ldrb	r2, [r1, #1]
 800a414:	1c4b      	adds	r3, r1, #1
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	b342      	cbz	r2, 800a46c <__hexnan+0x88>
 800a41a:	4610      	mov	r0, r2
 800a41c:	9105      	str	r1, [sp, #20]
 800a41e:	9204      	str	r2, [sp, #16]
 800a420:	f7ff fd5e 	bl	8009ee0 <__hexdig_fun>
 800a424:	2800      	cmp	r0, #0
 800a426:	d14f      	bne.n	800a4c8 <__hexnan+0xe4>
 800a428:	9a04      	ldr	r2, [sp, #16]
 800a42a:	9905      	ldr	r1, [sp, #20]
 800a42c:	2a20      	cmp	r2, #32
 800a42e:	d818      	bhi.n	800a462 <__hexnan+0x7e>
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	459b      	cmp	fp, r3
 800a434:	dd13      	ble.n	800a45e <__hexnan+0x7a>
 800a436:	454c      	cmp	r4, r9
 800a438:	d206      	bcs.n	800a448 <__hexnan+0x64>
 800a43a:	2d07      	cmp	r5, #7
 800a43c:	dc04      	bgt.n	800a448 <__hexnan+0x64>
 800a43e:	462a      	mov	r2, r5
 800a440:	4649      	mov	r1, r9
 800a442:	4620      	mov	r0, r4
 800a444:	f7ff ffa8 	bl	800a398 <L_shift>
 800a448:	4544      	cmp	r4, r8
 800a44a:	d950      	bls.n	800a4ee <__hexnan+0x10a>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f1a4 0904 	sub.w	r9, r4, #4
 800a452:	f844 3c04 	str.w	r3, [r4, #-4]
 800a456:	f8cd b008 	str.w	fp, [sp, #8]
 800a45a:	464c      	mov	r4, r9
 800a45c:	461d      	mov	r5, r3
 800a45e:	9903      	ldr	r1, [sp, #12]
 800a460:	e7d7      	b.n	800a412 <__hexnan+0x2e>
 800a462:	2a29      	cmp	r2, #41	; 0x29
 800a464:	d156      	bne.n	800a514 <__hexnan+0x130>
 800a466:	3102      	adds	r1, #2
 800a468:	f8ca 1000 	str.w	r1, [sl]
 800a46c:	f1bb 0f00 	cmp.w	fp, #0
 800a470:	d050      	beq.n	800a514 <__hexnan+0x130>
 800a472:	454c      	cmp	r4, r9
 800a474:	d206      	bcs.n	800a484 <__hexnan+0xa0>
 800a476:	2d07      	cmp	r5, #7
 800a478:	dc04      	bgt.n	800a484 <__hexnan+0xa0>
 800a47a:	462a      	mov	r2, r5
 800a47c:	4649      	mov	r1, r9
 800a47e:	4620      	mov	r0, r4
 800a480:	f7ff ff8a 	bl	800a398 <L_shift>
 800a484:	4544      	cmp	r4, r8
 800a486:	d934      	bls.n	800a4f2 <__hexnan+0x10e>
 800a488:	f1a8 0204 	sub.w	r2, r8, #4
 800a48c:	4623      	mov	r3, r4
 800a48e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a492:	f842 1f04 	str.w	r1, [r2, #4]!
 800a496:	429f      	cmp	r7, r3
 800a498:	d2f9      	bcs.n	800a48e <__hexnan+0xaa>
 800a49a:	1b3b      	subs	r3, r7, r4
 800a49c:	f023 0303 	bic.w	r3, r3, #3
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	3401      	adds	r4, #1
 800a4a4:	3e03      	subs	r6, #3
 800a4a6:	42b4      	cmp	r4, r6
 800a4a8:	bf88      	it	hi
 800a4aa:	2304      	movhi	r3, #4
 800a4ac:	4443      	add	r3, r8
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f843 2b04 	str.w	r2, [r3], #4
 800a4b4:	429f      	cmp	r7, r3
 800a4b6:	d2fb      	bcs.n	800a4b0 <__hexnan+0xcc>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	b91b      	cbnz	r3, 800a4c4 <__hexnan+0xe0>
 800a4bc:	4547      	cmp	r7, r8
 800a4be:	d127      	bne.n	800a510 <__hexnan+0x12c>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	2005      	movs	r0, #5
 800a4c6:	e026      	b.n	800a516 <__hexnan+0x132>
 800a4c8:	3501      	adds	r5, #1
 800a4ca:	2d08      	cmp	r5, #8
 800a4cc:	f10b 0b01 	add.w	fp, fp, #1
 800a4d0:	dd06      	ble.n	800a4e0 <__hexnan+0xfc>
 800a4d2:	4544      	cmp	r4, r8
 800a4d4:	d9c3      	bls.n	800a45e <__hexnan+0x7a>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4dc:	2501      	movs	r5, #1
 800a4de:	3c04      	subs	r4, #4
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	f000 000f 	and.w	r0, r0, #15
 800a4e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a4ea:	6022      	str	r2, [r4, #0]
 800a4ec:	e7b7      	b.n	800a45e <__hexnan+0x7a>
 800a4ee:	2508      	movs	r5, #8
 800a4f0:	e7b5      	b.n	800a45e <__hexnan+0x7a>
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0df      	beq.n	800a4b8 <__hexnan+0xd4>
 800a4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fc:	f1c3 0320 	rsb	r3, r3, #32
 800a500:	fa22 f303 	lsr.w	r3, r2, r3
 800a504:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a508:	401a      	ands	r2, r3
 800a50a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a50e:	e7d3      	b.n	800a4b8 <__hexnan+0xd4>
 800a510:	3f04      	subs	r7, #4
 800a512:	e7d1      	b.n	800a4b8 <__hexnan+0xd4>
 800a514:	2004      	movs	r0, #4
 800a516:	b007      	add	sp, #28
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a51c <_localeconv_r>:
 800a51c:	4800      	ldr	r0, [pc, #0]	; (800a520 <_localeconv_r+0x4>)
 800a51e:	4770      	bx	lr
 800a520:	20000264 	.word	0x20000264

0800a524 <malloc>:
 800a524:	4b02      	ldr	r3, [pc, #8]	; (800a530 <malloc+0xc>)
 800a526:	4601      	mov	r1, r0
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	f000 bd3f 	b.w	800afac <_malloc_r>
 800a52e:	bf00      	nop
 800a530:	2000010c 	.word	0x2000010c

0800a534 <__ascii_mbtowc>:
 800a534:	b082      	sub	sp, #8
 800a536:	b901      	cbnz	r1, 800a53a <__ascii_mbtowc+0x6>
 800a538:	a901      	add	r1, sp, #4
 800a53a:	b142      	cbz	r2, 800a54e <__ascii_mbtowc+0x1a>
 800a53c:	b14b      	cbz	r3, 800a552 <__ascii_mbtowc+0x1e>
 800a53e:	7813      	ldrb	r3, [r2, #0]
 800a540:	600b      	str	r3, [r1, #0]
 800a542:	7812      	ldrb	r2, [r2, #0]
 800a544:	1e10      	subs	r0, r2, #0
 800a546:	bf18      	it	ne
 800a548:	2001      	movne	r0, #1
 800a54a:	b002      	add	sp, #8
 800a54c:	4770      	bx	lr
 800a54e:	4610      	mov	r0, r2
 800a550:	e7fb      	b.n	800a54a <__ascii_mbtowc+0x16>
 800a552:	f06f 0001 	mvn.w	r0, #1
 800a556:	e7f8      	b.n	800a54a <__ascii_mbtowc+0x16>

0800a558 <memcpy>:
 800a558:	440a      	add	r2, r1
 800a55a:	4291      	cmp	r1, r2
 800a55c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a560:	d100      	bne.n	800a564 <memcpy+0xc>
 800a562:	4770      	bx	lr
 800a564:	b510      	push	{r4, lr}
 800a566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a56a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a56e:	4291      	cmp	r1, r2
 800a570:	d1f9      	bne.n	800a566 <memcpy+0xe>
 800a572:	bd10      	pop	{r4, pc}

0800a574 <_Balloc>:
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a578:	4604      	mov	r4, r0
 800a57a:	460d      	mov	r5, r1
 800a57c:	b976      	cbnz	r6, 800a59c <_Balloc+0x28>
 800a57e:	2010      	movs	r0, #16
 800a580:	f7ff ffd0 	bl	800a524 <malloc>
 800a584:	4602      	mov	r2, r0
 800a586:	6260      	str	r0, [r4, #36]	; 0x24
 800a588:	b920      	cbnz	r0, 800a594 <_Balloc+0x20>
 800a58a:	4b18      	ldr	r3, [pc, #96]	; (800a5ec <_Balloc+0x78>)
 800a58c:	4818      	ldr	r0, [pc, #96]	; (800a5f0 <_Balloc+0x7c>)
 800a58e:	2166      	movs	r1, #102	; 0x66
 800a590:	f000 fee8 	bl	800b364 <__assert_func>
 800a594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a598:	6006      	str	r6, [r0, #0]
 800a59a:	60c6      	str	r6, [r0, #12]
 800a59c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a59e:	68f3      	ldr	r3, [r6, #12]
 800a5a0:	b183      	cbz	r3, 800a5c4 <_Balloc+0x50>
 800a5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5aa:	b9b8      	cbnz	r0, 800a5dc <_Balloc+0x68>
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	fa01 f605 	lsl.w	r6, r1, r5
 800a5b2:	1d72      	adds	r2, r6, #5
 800a5b4:	0092      	lsls	r2, r2, #2
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f000 fc98 	bl	800aeec <_calloc_r>
 800a5bc:	b160      	cbz	r0, 800a5d8 <_Balloc+0x64>
 800a5be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5c2:	e00e      	b.n	800a5e2 <_Balloc+0x6e>
 800a5c4:	2221      	movs	r2, #33	; 0x21
 800a5c6:	2104      	movs	r1, #4
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 fc8f 	bl	800aeec <_calloc_r>
 800a5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5d0:	60f0      	str	r0, [r6, #12]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e4      	bne.n	800a5a2 <_Balloc+0x2e>
 800a5d8:	2000      	movs	r0, #0
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	6802      	ldr	r2, [r0, #0]
 800a5de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5e8:	e7f7      	b.n	800a5da <_Balloc+0x66>
 800a5ea:	bf00      	nop
 800a5ec:	0800c005 	.word	0x0800c005
 800a5f0:	0800c10c 	.word	0x0800c10c

0800a5f4 <_Bfree>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b976      	cbnz	r6, 800a61c <_Bfree+0x28>
 800a5fe:	2010      	movs	r0, #16
 800a600:	f7ff ff90 	bl	800a524 <malloc>
 800a604:	4602      	mov	r2, r0
 800a606:	6268      	str	r0, [r5, #36]	; 0x24
 800a608:	b920      	cbnz	r0, 800a614 <_Bfree+0x20>
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <_Bfree+0x3c>)
 800a60c:	4809      	ldr	r0, [pc, #36]	; (800a634 <_Bfree+0x40>)
 800a60e:	218a      	movs	r1, #138	; 0x8a
 800a610:	f000 fea8 	bl	800b364 <__assert_func>
 800a614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a618:	6006      	str	r6, [r0, #0]
 800a61a:	60c6      	str	r6, [r0, #12]
 800a61c:	b13c      	cbz	r4, 800a62e <_Bfree+0x3a>
 800a61e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a620:	6862      	ldr	r2, [r4, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a628:	6021      	str	r1, [r4, #0]
 800a62a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	0800c005 	.word	0x0800c005
 800a634:	0800c10c 	.word	0x0800c10c

0800a638 <__multadd>:
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	690e      	ldr	r6, [r1, #16]
 800a63e:	4607      	mov	r7, r0
 800a640:	4698      	mov	r8, r3
 800a642:	460c      	mov	r4, r1
 800a644:	f101 0014 	add.w	r0, r1, #20
 800a648:	2300      	movs	r3, #0
 800a64a:	6805      	ldr	r5, [r0, #0]
 800a64c:	b2a9      	uxth	r1, r5
 800a64e:	fb02 8101 	mla	r1, r2, r1, r8
 800a652:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a656:	0c2d      	lsrs	r5, r5, #16
 800a658:	fb02 c505 	mla	r5, r2, r5, ip
 800a65c:	b289      	uxth	r1, r1
 800a65e:	3301      	adds	r3, #1
 800a660:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a664:	429e      	cmp	r6, r3
 800a666:	f840 1b04 	str.w	r1, [r0], #4
 800a66a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a66e:	dcec      	bgt.n	800a64a <__multadd+0x12>
 800a670:	f1b8 0f00 	cmp.w	r8, #0
 800a674:	d022      	beq.n	800a6bc <__multadd+0x84>
 800a676:	68a3      	ldr	r3, [r4, #8]
 800a678:	42b3      	cmp	r3, r6
 800a67a:	dc19      	bgt.n	800a6b0 <__multadd+0x78>
 800a67c:	6861      	ldr	r1, [r4, #4]
 800a67e:	4638      	mov	r0, r7
 800a680:	3101      	adds	r1, #1
 800a682:	f7ff ff77 	bl	800a574 <_Balloc>
 800a686:	4605      	mov	r5, r0
 800a688:	b928      	cbnz	r0, 800a696 <__multadd+0x5e>
 800a68a:	4602      	mov	r2, r0
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <__multadd+0x8c>)
 800a68e:	480e      	ldr	r0, [pc, #56]	; (800a6c8 <__multadd+0x90>)
 800a690:	21b5      	movs	r1, #181	; 0xb5
 800a692:	f000 fe67 	bl	800b364 <__assert_func>
 800a696:	6922      	ldr	r2, [r4, #16]
 800a698:	3202      	adds	r2, #2
 800a69a:	f104 010c 	add.w	r1, r4, #12
 800a69e:	0092      	lsls	r2, r2, #2
 800a6a0:	300c      	adds	r0, #12
 800a6a2:	f7ff ff59 	bl	800a558 <memcpy>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7ff ffa3 	bl	800a5f4 <_Bfree>
 800a6ae:	462c      	mov	r4, r5
 800a6b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a6b4:	3601      	adds	r6, #1
 800a6b6:	f8c3 8014 	str.w	r8, [r3, #20]
 800a6ba:	6126      	str	r6, [r4, #16]
 800a6bc:	4620      	mov	r0, r4
 800a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c2:	bf00      	nop
 800a6c4:	0800c07b 	.word	0x0800c07b
 800a6c8:	0800c10c 	.word	0x0800c10c

0800a6cc <__s2b>:
 800a6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	4615      	mov	r5, r2
 800a6d4:	461f      	mov	r7, r3
 800a6d6:	2209      	movs	r2, #9
 800a6d8:	3308      	adds	r3, #8
 800a6da:	4606      	mov	r6, r0
 800a6dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	db09      	blt.n	800a6fc <__s2b+0x30>
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff ff43 	bl	800a574 <_Balloc>
 800a6ee:	b940      	cbnz	r0, 800a702 <__s2b+0x36>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	4b19      	ldr	r3, [pc, #100]	; (800a758 <__s2b+0x8c>)
 800a6f4:	4819      	ldr	r0, [pc, #100]	; (800a75c <__s2b+0x90>)
 800a6f6:	21ce      	movs	r1, #206	; 0xce
 800a6f8:	f000 fe34 	bl	800b364 <__assert_func>
 800a6fc:	0052      	lsls	r2, r2, #1
 800a6fe:	3101      	adds	r1, #1
 800a700:	e7f0      	b.n	800a6e4 <__s2b+0x18>
 800a702:	9b08      	ldr	r3, [sp, #32]
 800a704:	6143      	str	r3, [r0, #20]
 800a706:	2d09      	cmp	r5, #9
 800a708:	f04f 0301 	mov.w	r3, #1
 800a70c:	6103      	str	r3, [r0, #16]
 800a70e:	dd16      	ble.n	800a73e <__s2b+0x72>
 800a710:	f104 0909 	add.w	r9, r4, #9
 800a714:	46c8      	mov	r8, r9
 800a716:	442c      	add	r4, r5
 800a718:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a71c:	4601      	mov	r1, r0
 800a71e:	3b30      	subs	r3, #48	; 0x30
 800a720:	220a      	movs	r2, #10
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ff88 	bl	800a638 <__multadd>
 800a728:	45a0      	cmp	r8, r4
 800a72a:	d1f5      	bne.n	800a718 <__s2b+0x4c>
 800a72c:	f1a5 0408 	sub.w	r4, r5, #8
 800a730:	444c      	add	r4, r9
 800a732:	1b2d      	subs	r5, r5, r4
 800a734:	1963      	adds	r3, r4, r5
 800a736:	42bb      	cmp	r3, r7
 800a738:	db04      	blt.n	800a744 <__s2b+0x78>
 800a73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a73e:	340a      	adds	r4, #10
 800a740:	2509      	movs	r5, #9
 800a742:	e7f6      	b.n	800a732 <__s2b+0x66>
 800a744:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a748:	4601      	mov	r1, r0
 800a74a:	3b30      	subs	r3, #48	; 0x30
 800a74c:	220a      	movs	r2, #10
 800a74e:	4630      	mov	r0, r6
 800a750:	f7ff ff72 	bl	800a638 <__multadd>
 800a754:	e7ee      	b.n	800a734 <__s2b+0x68>
 800a756:	bf00      	nop
 800a758:	0800c07b 	.word	0x0800c07b
 800a75c:	0800c10c 	.word	0x0800c10c

0800a760 <__hi0bits>:
 800a760:	0c03      	lsrs	r3, r0, #16
 800a762:	041b      	lsls	r3, r3, #16
 800a764:	b9d3      	cbnz	r3, 800a79c <__hi0bits+0x3c>
 800a766:	0400      	lsls	r0, r0, #16
 800a768:	2310      	movs	r3, #16
 800a76a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a76e:	bf04      	itt	eq
 800a770:	0200      	lsleq	r0, r0, #8
 800a772:	3308      	addeq	r3, #8
 800a774:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a778:	bf04      	itt	eq
 800a77a:	0100      	lsleq	r0, r0, #4
 800a77c:	3304      	addeq	r3, #4
 800a77e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a782:	bf04      	itt	eq
 800a784:	0080      	lsleq	r0, r0, #2
 800a786:	3302      	addeq	r3, #2
 800a788:	2800      	cmp	r0, #0
 800a78a:	db05      	blt.n	800a798 <__hi0bits+0x38>
 800a78c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a790:	f103 0301 	add.w	r3, r3, #1
 800a794:	bf08      	it	eq
 800a796:	2320      	moveq	r3, #32
 800a798:	4618      	mov	r0, r3
 800a79a:	4770      	bx	lr
 800a79c:	2300      	movs	r3, #0
 800a79e:	e7e4      	b.n	800a76a <__hi0bits+0xa>

0800a7a0 <__lo0bits>:
 800a7a0:	6803      	ldr	r3, [r0, #0]
 800a7a2:	f013 0207 	ands.w	r2, r3, #7
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	d00b      	beq.n	800a7c2 <__lo0bits+0x22>
 800a7aa:	07da      	lsls	r2, r3, #31
 800a7ac:	d424      	bmi.n	800a7f8 <__lo0bits+0x58>
 800a7ae:	0798      	lsls	r0, r3, #30
 800a7b0:	bf49      	itett	mi
 800a7b2:	085b      	lsrmi	r3, r3, #1
 800a7b4:	089b      	lsrpl	r3, r3, #2
 800a7b6:	2001      	movmi	r0, #1
 800a7b8:	600b      	strmi	r3, [r1, #0]
 800a7ba:	bf5c      	itt	pl
 800a7bc:	600b      	strpl	r3, [r1, #0]
 800a7be:	2002      	movpl	r0, #2
 800a7c0:	4770      	bx	lr
 800a7c2:	b298      	uxth	r0, r3
 800a7c4:	b9b0      	cbnz	r0, 800a7f4 <__lo0bits+0x54>
 800a7c6:	0c1b      	lsrs	r3, r3, #16
 800a7c8:	2010      	movs	r0, #16
 800a7ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a7ce:	bf04      	itt	eq
 800a7d0:	0a1b      	lsreq	r3, r3, #8
 800a7d2:	3008      	addeq	r0, #8
 800a7d4:	071a      	lsls	r2, r3, #28
 800a7d6:	bf04      	itt	eq
 800a7d8:	091b      	lsreq	r3, r3, #4
 800a7da:	3004      	addeq	r0, #4
 800a7dc:	079a      	lsls	r2, r3, #30
 800a7de:	bf04      	itt	eq
 800a7e0:	089b      	lsreq	r3, r3, #2
 800a7e2:	3002      	addeq	r0, #2
 800a7e4:	07da      	lsls	r2, r3, #31
 800a7e6:	d403      	bmi.n	800a7f0 <__lo0bits+0x50>
 800a7e8:	085b      	lsrs	r3, r3, #1
 800a7ea:	f100 0001 	add.w	r0, r0, #1
 800a7ee:	d005      	beq.n	800a7fc <__lo0bits+0x5c>
 800a7f0:	600b      	str	r3, [r1, #0]
 800a7f2:	4770      	bx	lr
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	e7e8      	b.n	800a7ca <__lo0bits+0x2a>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	4770      	bx	lr
 800a7fc:	2020      	movs	r0, #32
 800a7fe:	4770      	bx	lr

0800a800 <__i2b>:
 800a800:	b510      	push	{r4, lr}
 800a802:	460c      	mov	r4, r1
 800a804:	2101      	movs	r1, #1
 800a806:	f7ff feb5 	bl	800a574 <_Balloc>
 800a80a:	4602      	mov	r2, r0
 800a80c:	b928      	cbnz	r0, 800a81a <__i2b+0x1a>
 800a80e:	4b05      	ldr	r3, [pc, #20]	; (800a824 <__i2b+0x24>)
 800a810:	4805      	ldr	r0, [pc, #20]	; (800a828 <__i2b+0x28>)
 800a812:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a816:	f000 fda5 	bl	800b364 <__assert_func>
 800a81a:	2301      	movs	r3, #1
 800a81c:	6144      	str	r4, [r0, #20]
 800a81e:	6103      	str	r3, [r0, #16]
 800a820:	bd10      	pop	{r4, pc}
 800a822:	bf00      	nop
 800a824:	0800c07b 	.word	0x0800c07b
 800a828:	0800c10c 	.word	0x0800c10c

0800a82c <__multiply>:
 800a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a830:	4614      	mov	r4, r2
 800a832:	690a      	ldr	r2, [r1, #16]
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	429a      	cmp	r2, r3
 800a838:	bfb8      	it	lt
 800a83a:	460b      	movlt	r3, r1
 800a83c:	460d      	mov	r5, r1
 800a83e:	bfbc      	itt	lt
 800a840:	4625      	movlt	r5, r4
 800a842:	461c      	movlt	r4, r3
 800a844:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a848:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a84c:	68ab      	ldr	r3, [r5, #8]
 800a84e:	6869      	ldr	r1, [r5, #4]
 800a850:	eb0a 0709 	add.w	r7, sl, r9
 800a854:	42bb      	cmp	r3, r7
 800a856:	b085      	sub	sp, #20
 800a858:	bfb8      	it	lt
 800a85a:	3101      	addlt	r1, #1
 800a85c:	f7ff fe8a 	bl	800a574 <_Balloc>
 800a860:	b930      	cbnz	r0, 800a870 <__multiply+0x44>
 800a862:	4602      	mov	r2, r0
 800a864:	4b42      	ldr	r3, [pc, #264]	; (800a970 <__multiply+0x144>)
 800a866:	4843      	ldr	r0, [pc, #268]	; (800a974 <__multiply+0x148>)
 800a868:	f240 115d 	movw	r1, #349	; 0x15d
 800a86c:	f000 fd7a 	bl	800b364 <__assert_func>
 800a870:	f100 0614 	add.w	r6, r0, #20
 800a874:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a878:	4633      	mov	r3, r6
 800a87a:	2200      	movs	r2, #0
 800a87c:	4543      	cmp	r3, r8
 800a87e:	d31e      	bcc.n	800a8be <__multiply+0x92>
 800a880:	f105 0c14 	add.w	ip, r5, #20
 800a884:	f104 0314 	add.w	r3, r4, #20
 800a888:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a88c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a890:	9202      	str	r2, [sp, #8]
 800a892:	ebac 0205 	sub.w	r2, ip, r5
 800a896:	3a15      	subs	r2, #21
 800a898:	f022 0203 	bic.w	r2, r2, #3
 800a89c:	3204      	adds	r2, #4
 800a89e:	f105 0115 	add.w	r1, r5, #21
 800a8a2:	458c      	cmp	ip, r1
 800a8a4:	bf38      	it	cc
 800a8a6:	2204      	movcc	r2, #4
 800a8a8:	9201      	str	r2, [sp, #4]
 800a8aa:	9a02      	ldr	r2, [sp, #8]
 800a8ac:	9303      	str	r3, [sp, #12]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d808      	bhi.n	800a8c4 <__multiply+0x98>
 800a8b2:	2f00      	cmp	r7, #0
 800a8b4:	dc55      	bgt.n	800a962 <__multiply+0x136>
 800a8b6:	6107      	str	r7, [r0, #16]
 800a8b8:	b005      	add	sp, #20
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	f843 2b04 	str.w	r2, [r3], #4
 800a8c2:	e7db      	b.n	800a87c <__multiply+0x50>
 800a8c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8c8:	f1ba 0f00 	cmp.w	sl, #0
 800a8cc:	d020      	beq.n	800a910 <__multiply+0xe4>
 800a8ce:	f105 0e14 	add.w	lr, r5, #20
 800a8d2:	46b1      	mov	r9, r6
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a8da:	f8d9 b000 	ldr.w	fp, [r9]
 800a8de:	b2a1      	uxth	r1, r4
 800a8e0:	fa1f fb8b 	uxth.w	fp, fp
 800a8e4:	fb0a b101 	mla	r1, sl, r1, fp
 800a8e8:	4411      	add	r1, r2
 800a8ea:	f8d9 2000 	ldr.w	r2, [r9]
 800a8ee:	0c24      	lsrs	r4, r4, #16
 800a8f0:	0c12      	lsrs	r2, r2, #16
 800a8f2:	fb0a 2404 	mla	r4, sl, r4, r2
 800a8f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a8fa:	b289      	uxth	r1, r1
 800a8fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a900:	45f4      	cmp	ip, lr
 800a902:	f849 1b04 	str.w	r1, [r9], #4
 800a906:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a90a:	d8e4      	bhi.n	800a8d6 <__multiply+0xaa>
 800a90c:	9901      	ldr	r1, [sp, #4]
 800a90e:	5072      	str	r2, [r6, r1]
 800a910:	9a03      	ldr	r2, [sp, #12]
 800a912:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a916:	3304      	adds	r3, #4
 800a918:	f1b9 0f00 	cmp.w	r9, #0
 800a91c:	d01f      	beq.n	800a95e <__multiply+0x132>
 800a91e:	6834      	ldr	r4, [r6, #0]
 800a920:	f105 0114 	add.w	r1, r5, #20
 800a924:	46b6      	mov	lr, r6
 800a926:	f04f 0a00 	mov.w	sl, #0
 800a92a:	880a      	ldrh	r2, [r1, #0]
 800a92c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a930:	fb09 b202 	mla	r2, r9, r2, fp
 800a934:	4492      	add	sl, r2
 800a936:	b2a4      	uxth	r4, r4
 800a938:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a93c:	f84e 4b04 	str.w	r4, [lr], #4
 800a940:	f851 4b04 	ldr.w	r4, [r1], #4
 800a944:	f8be 2000 	ldrh.w	r2, [lr]
 800a948:	0c24      	lsrs	r4, r4, #16
 800a94a:	fb09 2404 	mla	r4, r9, r4, r2
 800a94e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a952:	458c      	cmp	ip, r1
 800a954:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a958:	d8e7      	bhi.n	800a92a <__multiply+0xfe>
 800a95a:	9a01      	ldr	r2, [sp, #4]
 800a95c:	50b4      	str	r4, [r6, r2]
 800a95e:	3604      	adds	r6, #4
 800a960:	e7a3      	b.n	800a8aa <__multiply+0x7e>
 800a962:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1a5      	bne.n	800a8b6 <__multiply+0x8a>
 800a96a:	3f01      	subs	r7, #1
 800a96c:	e7a1      	b.n	800a8b2 <__multiply+0x86>
 800a96e:	bf00      	nop
 800a970:	0800c07b 	.word	0x0800c07b
 800a974:	0800c10c 	.word	0x0800c10c

0800a978 <__pow5mult>:
 800a978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a97c:	4615      	mov	r5, r2
 800a97e:	f012 0203 	ands.w	r2, r2, #3
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	d007      	beq.n	800a998 <__pow5mult+0x20>
 800a988:	4c25      	ldr	r4, [pc, #148]	; (800aa20 <__pow5mult+0xa8>)
 800a98a:	3a01      	subs	r2, #1
 800a98c:	2300      	movs	r3, #0
 800a98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a992:	f7ff fe51 	bl	800a638 <__multadd>
 800a996:	4607      	mov	r7, r0
 800a998:	10ad      	asrs	r5, r5, #2
 800a99a:	d03d      	beq.n	800aa18 <__pow5mult+0xa0>
 800a99c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a99e:	b97c      	cbnz	r4, 800a9c0 <__pow5mult+0x48>
 800a9a0:	2010      	movs	r0, #16
 800a9a2:	f7ff fdbf 	bl	800a524 <malloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a9aa:	b928      	cbnz	r0, 800a9b8 <__pow5mult+0x40>
 800a9ac:	4b1d      	ldr	r3, [pc, #116]	; (800aa24 <__pow5mult+0xac>)
 800a9ae:	481e      	ldr	r0, [pc, #120]	; (800aa28 <__pow5mult+0xb0>)
 800a9b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9b4:	f000 fcd6 	bl	800b364 <__assert_func>
 800a9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9bc:	6004      	str	r4, [r0, #0]
 800a9be:	60c4      	str	r4, [r0, #12]
 800a9c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9c8:	b94c      	cbnz	r4, 800a9de <__pow5mult+0x66>
 800a9ca:	f240 2171 	movw	r1, #625	; 0x271
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f7ff ff16 	bl	800a800 <__i2b>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9da:	4604      	mov	r4, r0
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	f04f 0900 	mov.w	r9, #0
 800a9e2:	07eb      	lsls	r3, r5, #31
 800a9e4:	d50a      	bpl.n	800a9fc <__pow5mult+0x84>
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7ff ff1e 	bl	800a82c <__multiply>
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff fdfd 	bl	800a5f4 <_Bfree>
 800a9fa:	4647      	mov	r7, r8
 800a9fc:	106d      	asrs	r5, r5, #1
 800a9fe:	d00b      	beq.n	800aa18 <__pow5mult+0xa0>
 800aa00:	6820      	ldr	r0, [r4, #0]
 800aa02:	b938      	cbnz	r0, 800aa14 <__pow5mult+0x9c>
 800aa04:	4622      	mov	r2, r4
 800aa06:	4621      	mov	r1, r4
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f7ff ff0f 	bl	800a82c <__multiply>
 800aa0e:	6020      	str	r0, [r4, #0]
 800aa10:	f8c0 9000 	str.w	r9, [r0]
 800aa14:	4604      	mov	r4, r0
 800aa16:	e7e4      	b.n	800a9e2 <__pow5mult+0x6a>
 800aa18:	4638      	mov	r0, r7
 800aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1e:	bf00      	nop
 800aa20:	0800c260 	.word	0x0800c260
 800aa24:	0800c005 	.word	0x0800c005
 800aa28:	0800c10c 	.word	0x0800c10c

0800aa2c <__lshift>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	460c      	mov	r4, r1
 800aa32:	6849      	ldr	r1, [r1, #4]
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	4691      	mov	r9, r2
 800aa40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa44:	f108 0601 	add.w	r6, r8, #1
 800aa48:	42b3      	cmp	r3, r6
 800aa4a:	db0b      	blt.n	800aa64 <__lshift+0x38>
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff fd91 	bl	800a574 <_Balloc>
 800aa52:	4605      	mov	r5, r0
 800aa54:	b948      	cbnz	r0, 800aa6a <__lshift+0x3e>
 800aa56:	4602      	mov	r2, r0
 800aa58:	4b28      	ldr	r3, [pc, #160]	; (800aafc <__lshift+0xd0>)
 800aa5a:	4829      	ldr	r0, [pc, #164]	; (800ab00 <__lshift+0xd4>)
 800aa5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa60:	f000 fc80 	bl	800b364 <__assert_func>
 800aa64:	3101      	adds	r1, #1
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	e7ee      	b.n	800aa48 <__lshift+0x1c>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f100 0114 	add.w	r1, r0, #20
 800aa70:	f100 0210 	add.w	r2, r0, #16
 800aa74:	4618      	mov	r0, r3
 800aa76:	4553      	cmp	r3, sl
 800aa78:	db33      	blt.n	800aae2 <__lshift+0xb6>
 800aa7a:	6920      	ldr	r0, [r4, #16]
 800aa7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa80:	f104 0314 	add.w	r3, r4, #20
 800aa84:	f019 091f 	ands.w	r9, r9, #31
 800aa88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa90:	d02b      	beq.n	800aaea <__lshift+0xbe>
 800aa92:	f1c9 0e20 	rsb	lr, r9, #32
 800aa96:	468a      	mov	sl, r1
 800aa98:	2200      	movs	r2, #0
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	fa00 f009 	lsl.w	r0, r0, r9
 800aaa0:	4302      	orrs	r2, r0
 800aaa2:	f84a 2b04 	str.w	r2, [sl], #4
 800aaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaaa:	459c      	cmp	ip, r3
 800aaac:	fa22 f20e 	lsr.w	r2, r2, lr
 800aab0:	d8f3      	bhi.n	800aa9a <__lshift+0x6e>
 800aab2:	ebac 0304 	sub.w	r3, ip, r4
 800aab6:	3b15      	subs	r3, #21
 800aab8:	f023 0303 	bic.w	r3, r3, #3
 800aabc:	3304      	adds	r3, #4
 800aabe:	f104 0015 	add.w	r0, r4, #21
 800aac2:	4584      	cmp	ip, r0
 800aac4:	bf38      	it	cc
 800aac6:	2304      	movcc	r3, #4
 800aac8:	50ca      	str	r2, [r1, r3]
 800aaca:	b10a      	cbz	r2, 800aad0 <__lshift+0xa4>
 800aacc:	f108 0602 	add.w	r6, r8, #2
 800aad0:	3e01      	subs	r6, #1
 800aad2:	4638      	mov	r0, r7
 800aad4:	612e      	str	r6, [r5, #16]
 800aad6:	4621      	mov	r1, r4
 800aad8:	f7ff fd8c 	bl	800a5f4 <_Bfree>
 800aadc:	4628      	mov	r0, r5
 800aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aae6:	3301      	adds	r3, #1
 800aae8:	e7c5      	b.n	800aa76 <__lshift+0x4a>
 800aaea:	3904      	subs	r1, #4
 800aaec:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaf4:	459c      	cmp	ip, r3
 800aaf6:	d8f9      	bhi.n	800aaec <__lshift+0xc0>
 800aaf8:	e7ea      	b.n	800aad0 <__lshift+0xa4>
 800aafa:	bf00      	nop
 800aafc:	0800c07b 	.word	0x0800c07b
 800ab00:	0800c10c 	.word	0x0800c10c

0800ab04 <__mcmp>:
 800ab04:	b530      	push	{r4, r5, lr}
 800ab06:	6902      	ldr	r2, [r0, #16]
 800ab08:	690c      	ldr	r4, [r1, #16]
 800ab0a:	1b12      	subs	r2, r2, r4
 800ab0c:	d10e      	bne.n	800ab2c <__mcmp+0x28>
 800ab0e:	f100 0314 	add.w	r3, r0, #20
 800ab12:	3114      	adds	r1, #20
 800ab14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab24:	42a5      	cmp	r5, r4
 800ab26:	d003      	beq.n	800ab30 <__mcmp+0x2c>
 800ab28:	d305      	bcc.n	800ab36 <__mcmp+0x32>
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	bd30      	pop	{r4, r5, pc}
 800ab30:	4283      	cmp	r3, r0
 800ab32:	d3f3      	bcc.n	800ab1c <__mcmp+0x18>
 800ab34:	e7fa      	b.n	800ab2c <__mcmp+0x28>
 800ab36:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3a:	e7f7      	b.n	800ab2c <__mcmp+0x28>

0800ab3c <__mdiff>:
 800ab3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	460c      	mov	r4, r1
 800ab42:	4606      	mov	r6, r0
 800ab44:	4611      	mov	r1, r2
 800ab46:	4620      	mov	r0, r4
 800ab48:	4617      	mov	r7, r2
 800ab4a:	f7ff ffdb 	bl	800ab04 <__mcmp>
 800ab4e:	1e05      	subs	r5, r0, #0
 800ab50:	d110      	bne.n	800ab74 <__mdiff+0x38>
 800ab52:	4629      	mov	r1, r5
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7ff fd0d 	bl	800a574 <_Balloc>
 800ab5a:	b930      	cbnz	r0, 800ab6a <__mdiff+0x2e>
 800ab5c:	4b39      	ldr	r3, [pc, #228]	; (800ac44 <__mdiff+0x108>)
 800ab5e:	4602      	mov	r2, r0
 800ab60:	f240 2132 	movw	r1, #562	; 0x232
 800ab64:	4838      	ldr	r0, [pc, #224]	; (800ac48 <__mdiff+0x10c>)
 800ab66:	f000 fbfd 	bl	800b364 <__assert_func>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab74:	bfa4      	itt	ge
 800ab76:	463b      	movge	r3, r7
 800ab78:	4627      	movge	r7, r4
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	bfa6      	itte	ge
 800ab80:	461c      	movge	r4, r3
 800ab82:	2500      	movge	r5, #0
 800ab84:	2501      	movlt	r5, #1
 800ab86:	f7ff fcf5 	bl	800a574 <_Balloc>
 800ab8a:	b920      	cbnz	r0, 800ab96 <__mdiff+0x5a>
 800ab8c:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <__mdiff+0x108>)
 800ab8e:	4602      	mov	r2, r0
 800ab90:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab94:	e7e6      	b.n	800ab64 <__mdiff+0x28>
 800ab96:	693e      	ldr	r6, [r7, #16]
 800ab98:	60c5      	str	r5, [r0, #12]
 800ab9a:	6925      	ldr	r5, [r4, #16]
 800ab9c:	f107 0114 	add.w	r1, r7, #20
 800aba0:	f104 0914 	add.w	r9, r4, #20
 800aba4:	f100 0e14 	add.w	lr, r0, #20
 800aba8:	f107 0210 	add.w	r2, r7, #16
 800abac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800abb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800abb4:	46f2      	mov	sl, lr
 800abb6:	2700      	movs	r7, #0
 800abb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800abbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abc0:	fa1f f883 	uxth.w	r8, r3
 800abc4:	fa17 f78b 	uxtah	r7, r7, fp
 800abc8:	0c1b      	lsrs	r3, r3, #16
 800abca:	eba7 0808 	sub.w	r8, r7, r8
 800abce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abd6:	fa1f f888 	uxth.w	r8, r8
 800abda:	141f      	asrs	r7, r3, #16
 800abdc:	454d      	cmp	r5, r9
 800abde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abe2:	f84a 3b04 	str.w	r3, [sl], #4
 800abe6:	d8e7      	bhi.n	800abb8 <__mdiff+0x7c>
 800abe8:	1b2b      	subs	r3, r5, r4
 800abea:	3b15      	subs	r3, #21
 800abec:	f023 0303 	bic.w	r3, r3, #3
 800abf0:	3304      	adds	r3, #4
 800abf2:	3415      	adds	r4, #21
 800abf4:	42a5      	cmp	r5, r4
 800abf6:	bf38      	it	cc
 800abf8:	2304      	movcc	r3, #4
 800abfa:	4419      	add	r1, r3
 800abfc:	4473      	add	r3, lr
 800abfe:	469e      	mov	lr, r3
 800ac00:	460d      	mov	r5, r1
 800ac02:	4565      	cmp	r5, ip
 800ac04:	d30e      	bcc.n	800ac24 <__mdiff+0xe8>
 800ac06:	f10c 0203 	add.w	r2, ip, #3
 800ac0a:	1a52      	subs	r2, r2, r1
 800ac0c:	f022 0203 	bic.w	r2, r2, #3
 800ac10:	3903      	subs	r1, #3
 800ac12:	458c      	cmp	ip, r1
 800ac14:	bf38      	it	cc
 800ac16:	2200      	movcc	r2, #0
 800ac18:	441a      	add	r2, r3
 800ac1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac1e:	b17b      	cbz	r3, 800ac40 <__mdiff+0x104>
 800ac20:	6106      	str	r6, [r0, #16]
 800ac22:	e7a5      	b.n	800ab70 <__mdiff+0x34>
 800ac24:	f855 8b04 	ldr.w	r8, [r5], #4
 800ac28:	fa17 f488 	uxtah	r4, r7, r8
 800ac2c:	1422      	asrs	r2, r4, #16
 800ac2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ac32:	b2a4      	uxth	r4, r4
 800ac34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ac38:	f84e 4b04 	str.w	r4, [lr], #4
 800ac3c:	1417      	asrs	r7, r2, #16
 800ac3e:	e7e0      	b.n	800ac02 <__mdiff+0xc6>
 800ac40:	3e01      	subs	r6, #1
 800ac42:	e7ea      	b.n	800ac1a <__mdiff+0xde>
 800ac44:	0800c07b 	.word	0x0800c07b
 800ac48:	0800c10c 	.word	0x0800c10c

0800ac4c <__ulp>:
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	ed8d 0b00 	vstr	d0, [sp]
 800ac52:	9b01      	ldr	r3, [sp, #4]
 800ac54:	4912      	ldr	r1, [pc, #72]	; (800aca0 <__ulp+0x54>)
 800ac56:	4019      	ands	r1, r3
 800ac58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	dd05      	ble.n	800ac6c <__ulp+0x20>
 800ac60:	2200      	movs	r2, #0
 800ac62:	460b      	mov	r3, r1
 800ac64:	ec43 2b10 	vmov	d0, r2, r3
 800ac68:	b002      	add	sp, #8
 800ac6a:	4770      	bx	lr
 800ac6c:	4249      	negs	r1, r1
 800ac6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ac72:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ac76:	f04f 0200 	mov.w	r2, #0
 800ac7a:	f04f 0300 	mov.w	r3, #0
 800ac7e:	da04      	bge.n	800ac8a <__ulp+0x3e>
 800ac80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ac84:	fa41 f300 	asr.w	r3, r1, r0
 800ac88:	e7ec      	b.n	800ac64 <__ulp+0x18>
 800ac8a:	f1a0 0114 	sub.w	r1, r0, #20
 800ac8e:	291e      	cmp	r1, #30
 800ac90:	bfda      	itte	le
 800ac92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ac96:	fa20 f101 	lsrle.w	r1, r0, r1
 800ac9a:	2101      	movgt	r1, #1
 800ac9c:	460a      	mov	r2, r1
 800ac9e:	e7e1      	b.n	800ac64 <__ulp+0x18>
 800aca0:	7ff00000 	.word	0x7ff00000

0800aca4 <__b2d>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	6905      	ldr	r5, [r0, #16]
 800aca8:	f100 0714 	add.w	r7, r0, #20
 800acac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800acb0:	1f2e      	subs	r6, r5, #4
 800acb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff fd52 	bl	800a760 <__hi0bits>
 800acbc:	f1c0 0320 	rsb	r3, r0, #32
 800acc0:	280a      	cmp	r0, #10
 800acc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ad40 <__b2d+0x9c>
 800acc6:	600b      	str	r3, [r1, #0]
 800acc8:	dc14      	bgt.n	800acf4 <__b2d+0x50>
 800acca:	f1c0 0e0b 	rsb	lr, r0, #11
 800acce:	fa24 f10e 	lsr.w	r1, r4, lr
 800acd2:	42b7      	cmp	r7, r6
 800acd4:	ea41 030c 	orr.w	r3, r1, ip
 800acd8:	bf34      	ite	cc
 800acda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800acde:	2100      	movcs	r1, #0
 800ace0:	3015      	adds	r0, #21
 800ace2:	fa04 f000 	lsl.w	r0, r4, r0
 800ace6:	fa21 f10e 	lsr.w	r1, r1, lr
 800acea:	ea40 0201 	orr.w	r2, r0, r1
 800acee:	ec43 2b10 	vmov	d0, r2, r3
 800acf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf4:	42b7      	cmp	r7, r6
 800acf6:	bf3a      	itte	cc
 800acf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800acfc:	f1a5 0608 	subcc.w	r6, r5, #8
 800ad00:	2100      	movcs	r1, #0
 800ad02:	380b      	subs	r0, #11
 800ad04:	d017      	beq.n	800ad36 <__b2d+0x92>
 800ad06:	f1c0 0c20 	rsb	ip, r0, #32
 800ad0a:	fa04 f500 	lsl.w	r5, r4, r0
 800ad0e:	42be      	cmp	r6, r7
 800ad10:	fa21 f40c 	lsr.w	r4, r1, ip
 800ad14:	ea45 0504 	orr.w	r5, r5, r4
 800ad18:	bf8c      	ite	hi
 800ad1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ad1e:	2400      	movls	r4, #0
 800ad20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ad24:	fa01 f000 	lsl.w	r0, r1, r0
 800ad28:	fa24 f40c 	lsr.w	r4, r4, ip
 800ad2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad30:	ea40 0204 	orr.w	r2, r0, r4
 800ad34:	e7db      	b.n	800acee <__b2d+0x4a>
 800ad36:	ea44 030c 	orr.w	r3, r4, ip
 800ad3a:	460a      	mov	r2, r1
 800ad3c:	e7d7      	b.n	800acee <__b2d+0x4a>
 800ad3e:	bf00      	nop
 800ad40:	3ff00000 	.word	0x3ff00000

0800ad44 <__d2b>:
 800ad44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad48:	4689      	mov	r9, r1
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	ec57 6b10 	vmov	r6, r7, d0
 800ad50:	4690      	mov	r8, r2
 800ad52:	f7ff fc0f 	bl	800a574 <_Balloc>
 800ad56:	4604      	mov	r4, r0
 800ad58:	b930      	cbnz	r0, 800ad68 <__d2b+0x24>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	4b25      	ldr	r3, [pc, #148]	; (800adf4 <__d2b+0xb0>)
 800ad5e:	4826      	ldr	r0, [pc, #152]	; (800adf8 <__d2b+0xb4>)
 800ad60:	f240 310a 	movw	r1, #778	; 0x30a
 800ad64:	f000 fafe 	bl	800b364 <__assert_func>
 800ad68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad70:	bb35      	cbnz	r5, 800adc0 <__d2b+0x7c>
 800ad72:	2e00      	cmp	r6, #0
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	d028      	beq.n	800adca <__d2b+0x86>
 800ad78:	4668      	mov	r0, sp
 800ad7a:	9600      	str	r6, [sp, #0]
 800ad7c:	f7ff fd10 	bl	800a7a0 <__lo0bits>
 800ad80:	9900      	ldr	r1, [sp, #0]
 800ad82:	b300      	cbz	r0, 800adc6 <__d2b+0x82>
 800ad84:	9a01      	ldr	r2, [sp, #4]
 800ad86:	f1c0 0320 	rsb	r3, r0, #32
 800ad8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	40c2      	lsrs	r2, r0
 800ad92:	6163      	str	r3, [r4, #20]
 800ad94:	9201      	str	r2, [sp, #4]
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	61a3      	str	r3, [r4, #24]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2202      	movne	r2, #2
 800ada0:	2201      	moveq	r2, #1
 800ada2:	6122      	str	r2, [r4, #16]
 800ada4:	b1d5      	cbz	r5, 800addc <__d2b+0x98>
 800ada6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adaa:	4405      	add	r5, r0
 800adac:	f8c9 5000 	str.w	r5, [r9]
 800adb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adb4:	f8c8 0000 	str.w	r0, [r8]
 800adb8:	4620      	mov	r0, r4
 800adba:	b003      	add	sp, #12
 800adbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adc4:	e7d5      	b.n	800ad72 <__d2b+0x2e>
 800adc6:	6161      	str	r1, [r4, #20]
 800adc8:	e7e5      	b.n	800ad96 <__d2b+0x52>
 800adca:	a801      	add	r0, sp, #4
 800adcc:	f7ff fce8 	bl	800a7a0 <__lo0bits>
 800add0:	9b01      	ldr	r3, [sp, #4]
 800add2:	6163      	str	r3, [r4, #20]
 800add4:	2201      	movs	r2, #1
 800add6:	6122      	str	r2, [r4, #16]
 800add8:	3020      	adds	r0, #32
 800adda:	e7e3      	b.n	800ada4 <__d2b+0x60>
 800addc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ade0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ade4:	f8c9 0000 	str.w	r0, [r9]
 800ade8:	6918      	ldr	r0, [r3, #16]
 800adea:	f7ff fcb9 	bl	800a760 <__hi0bits>
 800adee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adf2:	e7df      	b.n	800adb4 <__d2b+0x70>
 800adf4:	0800c07b 	.word	0x0800c07b
 800adf8:	0800c10c 	.word	0x0800c10c

0800adfc <__ratio>:
 800adfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	468a      	mov	sl, r1
 800ae02:	4669      	mov	r1, sp
 800ae04:	4683      	mov	fp, r0
 800ae06:	f7ff ff4d 	bl	800aca4 <__b2d>
 800ae0a:	a901      	add	r1, sp, #4
 800ae0c:	4650      	mov	r0, sl
 800ae0e:	ec59 8b10 	vmov	r8, r9, d0
 800ae12:	ee10 6a10 	vmov	r6, s0
 800ae16:	f7ff ff45 	bl	800aca4 <__b2d>
 800ae1a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ae1e:	f8da 2010 	ldr.w	r2, [sl, #16]
 800ae22:	eba3 0c02 	sub.w	ip, r3, r2
 800ae26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae2a:	1a9b      	subs	r3, r3, r2
 800ae2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ae30:	ec55 4b10 	vmov	r4, r5, d0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	ee10 0a10 	vmov	r0, s0
 800ae3a:	bfce      	itee	gt
 800ae3c:	464a      	movgt	r2, r9
 800ae3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ae42:	462a      	movle	r2, r5
 800ae44:	464f      	mov	r7, r9
 800ae46:	4629      	mov	r1, r5
 800ae48:	bfcc      	ite	gt
 800ae4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ae4e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ae52:	ec47 6b17 	vmov	d7, r6, r7
 800ae56:	ec41 0b16 	vmov	d6, r0, r1
 800ae5a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800ae5e:	b003      	add	sp, #12
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae64 <__copybits>:
 800ae64:	3901      	subs	r1, #1
 800ae66:	b570      	push	{r4, r5, r6, lr}
 800ae68:	1149      	asrs	r1, r1, #5
 800ae6a:	6914      	ldr	r4, [r2, #16]
 800ae6c:	3101      	adds	r1, #1
 800ae6e:	f102 0314 	add.w	r3, r2, #20
 800ae72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae7a:	1f05      	subs	r5, r0, #4
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	d30c      	bcc.n	800ae9a <__copybits+0x36>
 800ae80:	1aa3      	subs	r3, r4, r2
 800ae82:	3b11      	subs	r3, #17
 800ae84:	f023 0303 	bic.w	r3, r3, #3
 800ae88:	3211      	adds	r2, #17
 800ae8a:	42a2      	cmp	r2, r4
 800ae8c:	bf88      	it	hi
 800ae8e:	2300      	movhi	r3, #0
 800ae90:	4418      	add	r0, r3
 800ae92:	2300      	movs	r3, #0
 800ae94:	4288      	cmp	r0, r1
 800ae96:	d305      	bcc.n	800aea4 <__copybits+0x40>
 800ae98:	bd70      	pop	{r4, r5, r6, pc}
 800ae9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800aea2:	e7eb      	b.n	800ae7c <__copybits+0x18>
 800aea4:	f840 3b04 	str.w	r3, [r0], #4
 800aea8:	e7f4      	b.n	800ae94 <__copybits+0x30>

0800aeaa <__any_on>:
 800aeaa:	f100 0214 	add.w	r2, r0, #20
 800aeae:	6900      	ldr	r0, [r0, #16]
 800aeb0:	114b      	asrs	r3, r1, #5
 800aeb2:	4298      	cmp	r0, r3
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	db11      	blt.n	800aedc <__any_on+0x32>
 800aeb8:	dd0a      	ble.n	800aed0 <__any_on+0x26>
 800aeba:	f011 011f 	ands.w	r1, r1, #31
 800aebe:	d007      	beq.n	800aed0 <__any_on+0x26>
 800aec0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aec4:	fa24 f001 	lsr.w	r0, r4, r1
 800aec8:	fa00 f101 	lsl.w	r1, r0, r1
 800aecc:	428c      	cmp	r4, r1
 800aece:	d10b      	bne.n	800aee8 <__any_on+0x3e>
 800aed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d803      	bhi.n	800aee0 <__any_on+0x36>
 800aed8:	2000      	movs	r0, #0
 800aeda:	bd10      	pop	{r4, pc}
 800aedc:	4603      	mov	r3, r0
 800aede:	e7f7      	b.n	800aed0 <__any_on+0x26>
 800aee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aee4:	2900      	cmp	r1, #0
 800aee6:	d0f5      	beq.n	800aed4 <__any_on+0x2a>
 800aee8:	2001      	movs	r0, #1
 800aeea:	e7f6      	b.n	800aeda <__any_on+0x30>

0800aeec <_calloc_r>:
 800aeec:	b513      	push	{r0, r1, r4, lr}
 800aeee:	434a      	muls	r2, r1
 800aef0:	4611      	mov	r1, r2
 800aef2:	9201      	str	r2, [sp, #4]
 800aef4:	f000 f85a 	bl	800afac <_malloc_r>
 800aef8:	4604      	mov	r4, r0
 800aefa:	b118      	cbz	r0, 800af04 <_calloc_r+0x18>
 800aefc:	9a01      	ldr	r2, [sp, #4]
 800aefe:	2100      	movs	r1, #0
 800af00:	f7fc ff12 	bl	8007d28 <memset>
 800af04:	4620      	mov	r0, r4
 800af06:	b002      	add	sp, #8
 800af08:	bd10      	pop	{r4, pc}
	...

0800af0c <_free_r>:
 800af0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af0e:	2900      	cmp	r1, #0
 800af10:	d048      	beq.n	800afa4 <_free_r+0x98>
 800af12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af16:	9001      	str	r0, [sp, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f1a1 0404 	sub.w	r4, r1, #4
 800af1e:	bfb8      	it	lt
 800af20:	18e4      	addlt	r4, r4, r3
 800af22:	f000 fa69 	bl	800b3f8 <__malloc_lock>
 800af26:	4a20      	ldr	r2, [pc, #128]	; (800afa8 <_free_r+0x9c>)
 800af28:	9801      	ldr	r0, [sp, #4]
 800af2a:	6813      	ldr	r3, [r2, #0]
 800af2c:	4615      	mov	r5, r2
 800af2e:	b933      	cbnz	r3, 800af3e <_free_r+0x32>
 800af30:	6063      	str	r3, [r4, #4]
 800af32:	6014      	str	r4, [r2, #0]
 800af34:	b003      	add	sp, #12
 800af36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af3a:	f000 ba63 	b.w	800b404 <__malloc_unlock>
 800af3e:	42a3      	cmp	r3, r4
 800af40:	d90b      	bls.n	800af5a <_free_r+0x4e>
 800af42:	6821      	ldr	r1, [r4, #0]
 800af44:	1862      	adds	r2, r4, r1
 800af46:	4293      	cmp	r3, r2
 800af48:	bf04      	itt	eq
 800af4a:	681a      	ldreq	r2, [r3, #0]
 800af4c:	685b      	ldreq	r3, [r3, #4]
 800af4e:	6063      	str	r3, [r4, #4]
 800af50:	bf04      	itt	eq
 800af52:	1852      	addeq	r2, r2, r1
 800af54:	6022      	streq	r2, [r4, #0]
 800af56:	602c      	str	r4, [r5, #0]
 800af58:	e7ec      	b.n	800af34 <_free_r+0x28>
 800af5a:	461a      	mov	r2, r3
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	b10b      	cbz	r3, 800af64 <_free_r+0x58>
 800af60:	42a3      	cmp	r3, r4
 800af62:	d9fa      	bls.n	800af5a <_free_r+0x4e>
 800af64:	6811      	ldr	r1, [r2, #0]
 800af66:	1855      	adds	r5, r2, r1
 800af68:	42a5      	cmp	r5, r4
 800af6a:	d10b      	bne.n	800af84 <_free_r+0x78>
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	4421      	add	r1, r4
 800af70:	1854      	adds	r4, r2, r1
 800af72:	42a3      	cmp	r3, r4
 800af74:	6011      	str	r1, [r2, #0]
 800af76:	d1dd      	bne.n	800af34 <_free_r+0x28>
 800af78:	681c      	ldr	r4, [r3, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	6053      	str	r3, [r2, #4]
 800af7e:	4421      	add	r1, r4
 800af80:	6011      	str	r1, [r2, #0]
 800af82:	e7d7      	b.n	800af34 <_free_r+0x28>
 800af84:	d902      	bls.n	800af8c <_free_r+0x80>
 800af86:	230c      	movs	r3, #12
 800af88:	6003      	str	r3, [r0, #0]
 800af8a:	e7d3      	b.n	800af34 <_free_r+0x28>
 800af8c:	6825      	ldr	r5, [r4, #0]
 800af8e:	1961      	adds	r1, r4, r5
 800af90:	428b      	cmp	r3, r1
 800af92:	bf04      	itt	eq
 800af94:	6819      	ldreq	r1, [r3, #0]
 800af96:	685b      	ldreq	r3, [r3, #4]
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	bf04      	itt	eq
 800af9c:	1949      	addeq	r1, r1, r5
 800af9e:	6021      	streq	r1, [r4, #0]
 800afa0:	6054      	str	r4, [r2, #4]
 800afa2:	e7c7      	b.n	800af34 <_free_r+0x28>
 800afa4:	b003      	add	sp, #12
 800afa6:	bd30      	pop	{r4, r5, pc}
 800afa8:	20000434 	.word	0x20000434

0800afac <_malloc_r>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	1ccd      	adds	r5, r1, #3
 800afb0:	f025 0503 	bic.w	r5, r5, #3
 800afb4:	3508      	adds	r5, #8
 800afb6:	2d0c      	cmp	r5, #12
 800afb8:	bf38      	it	cc
 800afba:	250c      	movcc	r5, #12
 800afbc:	2d00      	cmp	r5, #0
 800afbe:	4606      	mov	r6, r0
 800afc0:	db01      	blt.n	800afc6 <_malloc_r+0x1a>
 800afc2:	42a9      	cmp	r1, r5
 800afc4:	d903      	bls.n	800afce <_malloc_r+0x22>
 800afc6:	230c      	movs	r3, #12
 800afc8:	6033      	str	r3, [r6, #0]
 800afca:	2000      	movs	r0, #0
 800afcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afce:	f000 fa13 	bl	800b3f8 <__malloc_lock>
 800afd2:	4921      	ldr	r1, [pc, #132]	; (800b058 <_malloc_r+0xac>)
 800afd4:	680a      	ldr	r2, [r1, #0]
 800afd6:	4614      	mov	r4, r2
 800afd8:	b99c      	cbnz	r4, 800b002 <_malloc_r+0x56>
 800afda:	4f20      	ldr	r7, [pc, #128]	; (800b05c <_malloc_r+0xb0>)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	b923      	cbnz	r3, 800afea <_malloc_r+0x3e>
 800afe0:	4621      	mov	r1, r4
 800afe2:	4630      	mov	r0, r6
 800afe4:	f000 f9a0 	bl	800b328 <_sbrk_r>
 800afe8:	6038      	str	r0, [r7, #0]
 800afea:	4629      	mov	r1, r5
 800afec:	4630      	mov	r0, r6
 800afee:	f000 f99b 	bl	800b328 <_sbrk_r>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	d123      	bne.n	800b03e <_malloc_r+0x92>
 800aff6:	230c      	movs	r3, #12
 800aff8:	6033      	str	r3, [r6, #0]
 800affa:	4630      	mov	r0, r6
 800affc:	f000 fa02 	bl	800b404 <__malloc_unlock>
 800b000:	e7e3      	b.n	800afca <_malloc_r+0x1e>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	1b5b      	subs	r3, r3, r5
 800b006:	d417      	bmi.n	800b038 <_malloc_r+0x8c>
 800b008:	2b0b      	cmp	r3, #11
 800b00a:	d903      	bls.n	800b014 <_malloc_r+0x68>
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	441c      	add	r4, r3
 800b010:	6025      	str	r5, [r4, #0]
 800b012:	e004      	b.n	800b01e <_malloc_r+0x72>
 800b014:	6863      	ldr	r3, [r4, #4]
 800b016:	42a2      	cmp	r2, r4
 800b018:	bf0c      	ite	eq
 800b01a:	600b      	streq	r3, [r1, #0]
 800b01c:	6053      	strne	r3, [r2, #4]
 800b01e:	4630      	mov	r0, r6
 800b020:	f000 f9f0 	bl	800b404 <__malloc_unlock>
 800b024:	f104 000b 	add.w	r0, r4, #11
 800b028:	1d23      	adds	r3, r4, #4
 800b02a:	f020 0007 	bic.w	r0, r0, #7
 800b02e:	1ac2      	subs	r2, r0, r3
 800b030:	d0cc      	beq.n	800afcc <_malloc_r+0x20>
 800b032:	1a1b      	subs	r3, r3, r0
 800b034:	50a3      	str	r3, [r4, r2]
 800b036:	e7c9      	b.n	800afcc <_malloc_r+0x20>
 800b038:	4622      	mov	r2, r4
 800b03a:	6864      	ldr	r4, [r4, #4]
 800b03c:	e7cc      	b.n	800afd8 <_malloc_r+0x2c>
 800b03e:	1cc4      	adds	r4, r0, #3
 800b040:	f024 0403 	bic.w	r4, r4, #3
 800b044:	42a0      	cmp	r0, r4
 800b046:	d0e3      	beq.n	800b010 <_malloc_r+0x64>
 800b048:	1a21      	subs	r1, r4, r0
 800b04a:	4630      	mov	r0, r6
 800b04c:	f000 f96c 	bl	800b328 <_sbrk_r>
 800b050:	3001      	adds	r0, #1
 800b052:	d1dd      	bne.n	800b010 <_malloc_r+0x64>
 800b054:	e7cf      	b.n	800aff6 <_malloc_r+0x4a>
 800b056:	bf00      	nop
 800b058:	20000434 	.word	0x20000434
 800b05c:	20000438 	.word	0x20000438

0800b060 <__ssputs_r>:
 800b060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b064:	688e      	ldr	r6, [r1, #8]
 800b066:	429e      	cmp	r6, r3
 800b068:	4682      	mov	sl, r0
 800b06a:	460c      	mov	r4, r1
 800b06c:	4690      	mov	r8, r2
 800b06e:	461f      	mov	r7, r3
 800b070:	d838      	bhi.n	800b0e4 <__ssputs_r+0x84>
 800b072:	898a      	ldrh	r2, [r1, #12]
 800b074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b078:	d032      	beq.n	800b0e0 <__ssputs_r+0x80>
 800b07a:	6825      	ldr	r5, [r4, #0]
 800b07c:	6909      	ldr	r1, [r1, #16]
 800b07e:	eba5 0901 	sub.w	r9, r5, r1
 800b082:	6965      	ldr	r5, [r4, #20]
 800b084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b08c:	3301      	adds	r3, #1
 800b08e:	444b      	add	r3, r9
 800b090:	106d      	asrs	r5, r5, #1
 800b092:	429d      	cmp	r5, r3
 800b094:	bf38      	it	cc
 800b096:	461d      	movcc	r5, r3
 800b098:	0553      	lsls	r3, r2, #21
 800b09a:	d531      	bpl.n	800b100 <__ssputs_r+0xa0>
 800b09c:	4629      	mov	r1, r5
 800b09e:	f7ff ff85 	bl	800afac <_malloc_r>
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	b950      	cbnz	r0, 800b0bc <__ssputs_r+0x5c>
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	f8ca 3000 	str.w	r3, [sl]
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0bc:	6921      	ldr	r1, [r4, #16]
 800b0be:	464a      	mov	r2, r9
 800b0c0:	f7ff fa4a 	bl	800a558 <memcpy>
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	6126      	str	r6, [r4, #16]
 800b0d2:	6165      	str	r5, [r4, #20]
 800b0d4:	444e      	add	r6, r9
 800b0d6:	eba5 0509 	sub.w	r5, r5, r9
 800b0da:	6026      	str	r6, [r4, #0]
 800b0dc:	60a5      	str	r5, [r4, #8]
 800b0de:	463e      	mov	r6, r7
 800b0e0:	42be      	cmp	r6, r7
 800b0e2:	d900      	bls.n	800b0e6 <__ssputs_r+0x86>
 800b0e4:	463e      	mov	r6, r7
 800b0e6:	4632      	mov	r2, r6
 800b0e8:	6820      	ldr	r0, [r4, #0]
 800b0ea:	4641      	mov	r1, r8
 800b0ec:	f000 f96a 	bl	800b3c4 <memmove>
 800b0f0:	68a3      	ldr	r3, [r4, #8]
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	1b9b      	subs	r3, r3, r6
 800b0f6:	4432      	add	r2, r6
 800b0f8:	60a3      	str	r3, [r4, #8]
 800b0fa:	6022      	str	r2, [r4, #0]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e7db      	b.n	800b0b8 <__ssputs_r+0x58>
 800b100:	462a      	mov	r2, r5
 800b102:	f000 f985 	bl	800b410 <_realloc_r>
 800b106:	4606      	mov	r6, r0
 800b108:	2800      	cmp	r0, #0
 800b10a:	d1e1      	bne.n	800b0d0 <__ssputs_r+0x70>
 800b10c:	6921      	ldr	r1, [r4, #16]
 800b10e:	4650      	mov	r0, sl
 800b110:	f7ff fefc 	bl	800af0c <_free_r>
 800b114:	e7c7      	b.n	800b0a6 <__ssputs_r+0x46>
	...

0800b118 <_svfiprintf_r>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	4698      	mov	r8, r3
 800b11e:	898b      	ldrh	r3, [r1, #12]
 800b120:	061b      	lsls	r3, r3, #24
 800b122:	b09d      	sub	sp, #116	; 0x74
 800b124:	4607      	mov	r7, r0
 800b126:	460d      	mov	r5, r1
 800b128:	4614      	mov	r4, r2
 800b12a:	d50e      	bpl.n	800b14a <_svfiprintf_r+0x32>
 800b12c:	690b      	ldr	r3, [r1, #16]
 800b12e:	b963      	cbnz	r3, 800b14a <_svfiprintf_r+0x32>
 800b130:	2140      	movs	r1, #64	; 0x40
 800b132:	f7ff ff3b 	bl	800afac <_malloc_r>
 800b136:	6028      	str	r0, [r5, #0]
 800b138:	6128      	str	r0, [r5, #16]
 800b13a:	b920      	cbnz	r0, 800b146 <_svfiprintf_r+0x2e>
 800b13c:	230c      	movs	r3, #12
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e0d1      	b.n	800b2ea <_svfiprintf_r+0x1d2>
 800b146:	2340      	movs	r3, #64	; 0x40
 800b148:	616b      	str	r3, [r5, #20]
 800b14a:	2300      	movs	r3, #0
 800b14c:	9309      	str	r3, [sp, #36]	; 0x24
 800b14e:	2320      	movs	r3, #32
 800b150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b154:	f8cd 800c 	str.w	r8, [sp, #12]
 800b158:	2330      	movs	r3, #48	; 0x30
 800b15a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b304 <_svfiprintf_r+0x1ec>
 800b15e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b162:	f04f 0901 	mov.w	r9, #1
 800b166:	4623      	mov	r3, r4
 800b168:	469a      	mov	sl, r3
 800b16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b16e:	b10a      	cbz	r2, 800b174 <_svfiprintf_r+0x5c>
 800b170:	2a25      	cmp	r2, #37	; 0x25
 800b172:	d1f9      	bne.n	800b168 <_svfiprintf_r+0x50>
 800b174:	ebba 0b04 	subs.w	fp, sl, r4
 800b178:	d00b      	beq.n	800b192 <_svfiprintf_r+0x7a>
 800b17a:	465b      	mov	r3, fp
 800b17c:	4622      	mov	r2, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	4638      	mov	r0, r7
 800b182:	f7ff ff6d 	bl	800b060 <__ssputs_r>
 800b186:	3001      	adds	r0, #1
 800b188:	f000 80aa 	beq.w	800b2e0 <_svfiprintf_r+0x1c8>
 800b18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b18e:	445a      	add	r2, fp
 800b190:	9209      	str	r2, [sp, #36]	; 0x24
 800b192:	f89a 3000 	ldrb.w	r3, [sl]
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 80a2 	beq.w	800b2e0 <_svfiprintf_r+0x1c8>
 800b19c:	2300      	movs	r3, #0
 800b19e:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1a6:	f10a 0a01 	add.w	sl, sl, #1
 800b1aa:	9304      	str	r3, [sp, #16]
 800b1ac:	9307      	str	r3, [sp, #28]
 800b1ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b1b4:	4654      	mov	r4, sl
 800b1b6:	2205      	movs	r2, #5
 800b1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1bc:	4851      	ldr	r0, [pc, #324]	; (800b304 <_svfiprintf_r+0x1ec>)
 800b1be:	f7f5 f847 	bl	8000250 <memchr>
 800b1c2:	9a04      	ldr	r2, [sp, #16]
 800b1c4:	b9d8      	cbnz	r0, 800b1fe <_svfiprintf_r+0xe6>
 800b1c6:	06d0      	lsls	r0, r2, #27
 800b1c8:	bf44      	itt	mi
 800b1ca:	2320      	movmi	r3, #32
 800b1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1d0:	0711      	lsls	r1, r2, #28
 800b1d2:	bf44      	itt	mi
 800b1d4:	232b      	movmi	r3, #43	; 0x2b
 800b1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1da:	f89a 3000 	ldrb.w	r3, [sl]
 800b1de:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e0:	d015      	beq.n	800b20e <_svfiprintf_r+0xf6>
 800b1e2:	9a07      	ldr	r2, [sp, #28]
 800b1e4:	4654      	mov	r4, sl
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	f04f 0c0a 	mov.w	ip, #10
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1f2:	3b30      	subs	r3, #48	; 0x30
 800b1f4:	2b09      	cmp	r3, #9
 800b1f6:	d94e      	bls.n	800b296 <_svfiprintf_r+0x17e>
 800b1f8:	b1b0      	cbz	r0, 800b228 <_svfiprintf_r+0x110>
 800b1fa:	9207      	str	r2, [sp, #28]
 800b1fc:	e014      	b.n	800b228 <_svfiprintf_r+0x110>
 800b1fe:	eba0 0308 	sub.w	r3, r0, r8
 800b202:	fa09 f303 	lsl.w	r3, r9, r3
 800b206:	4313      	orrs	r3, r2
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	46a2      	mov	sl, r4
 800b20c:	e7d2      	b.n	800b1b4 <_svfiprintf_r+0x9c>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	1d19      	adds	r1, r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	9103      	str	r1, [sp, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bfbb      	ittet	lt
 800b21a:	425b      	neglt	r3, r3
 800b21c:	f042 0202 	orrlt.w	r2, r2, #2
 800b220:	9307      	strge	r3, [sp, #28]
 800b222:	9307      	strlt	r3, [sp, #28]
 800b224:	bfb8      	it	lt
 800b226:	9204      	strlt	r2, [sp, #16]
 800b228:	7823      	ldrb	r3, [r4, #0]
 800b22a:	2b2e      	cmp	r3, #46	; 0x2e
 800b22c:	d10c      	bne.n	800b248 <_svfiprintf_r+0x130>
 800b22e:	7863      	ldrb	r3, [r4, #1]
 800b230:	2b2a      	cmp	r3, #42	; 0x2a
 800b232:	d135      	bne.n	800b2a0 <_svfiprintf_r+0x188>
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	1d1a      	adds	r2, r3, #4
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	9203      	str	r2, [sp, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bfb8      	it	lt
 800b240:	f04f 33ff 	movlt.w	r3, #4294967295
 800b244:	3402      	adds	r4, #2
 800b246:	9305      	str	r3, [sp, #20]
 800b248:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b314 <_svfiprintf_r+0x1fc>
 800b24c:	7821      	ldrb	r1, [r4, #0]
 800b24e:	2203      	movs	r2, #3
 800b250:	4650      	mov	r0, sl
 800b252:	f7f4 fffd 	bl	8000250 <memchr>
 800b256:	b140      	cbz	r0, 800b26a <_svfiprintf_r+0x152>
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	eba0 000a 	sub.w	r0, r0, sl
 800b25e:	fa03 f000 	lsl.w	r0, r3, r0
 800b262:	9b04      	ldr	r3, [sp, #16]
 800b264:	4303      	orrs	r3, r0
 800b266:	3401      	adds	r4, #1
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26e:	4826      	ldr	r0, [pc, #152]	; (800b308 <_svfiprintf_r+0x1f0>)
 800b270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b274:	2206      	movs	r2, #6
 800b276:	f7f4 ffeb 	bl	8000250 <memchr>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d038      	beq.n	800b2f0 <_svfiprintf_r+0x1d8>
 800b27e:	4b23      	ldr	r3, [pc, #140]	; (800b30c <_svfiprintf_r+0x1f4>)
 800b280:	bb1b      	cbnz	r3, 800b2ca <_svfiprintf_r+0x1b2>
 800b282:	9b03      	ldr	r3, [sp, #12]
 800b284:	3307      	adds	r3, #7
 800b286:	f023 0307 	bic.w	r3, r3, #7
 800b28a:	3308      	adds	r3, #8
 800b28c:	9303      	str	r3, [sp, #12]
 800b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b290:	4433      	add	r3, r6
 800b292:	9309      	str	r3, [sp, #36]	; 0x24
 800b294:	e767      	b.n	800b166 <_svfiprintf_r+0x4e>
 800b296:	fb0c 3202 	mla	r2, ip, r2, r3
 800b29a:	460c      	mov	r4, r1
 800b29c:	2001      	movs	r0, #1
 800b29e:	e7a5      	b.n	800b1ec <_svfiprintf_r+0xd4>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	3401      	adds	r4, #1
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	f04f 0c0a 	mov.w	ip, #10
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2b2:	3a30      	subs	r2, #48	; 0x30
 800b2b4:	2a09      	cmp	r2, #9
 800b2b6:	d903      	bls.n	800b2c0 <_svfiprintf_r+0x1a8>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d0c5      	beq.n	800b248 <_svfiprintf_r+0x130>
 800b2bc:	9105      	str	r1, [sp, #20]
 800b2be:	e7c3      	b.n	800b248 <_svfiprintf_r+0x130>
 800b2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e7f0      	b.n	800b2ac <_svfiprintf_r+0x194>
 800b2ca:	ab03      	add	r3, sp, #12
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	462a      	mov	r2, r5
 800b2d0:	4b0f      	ldr	r3, [pc, #60]	; (800b310 <_svfiprintf_r+0x1f8>)
 800b2d2:	a904      	add	r1, sp, #16
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f7fc fdbf 	bl	8007e58 <_printf_float>
 800b2da:	1c42      	adds	r2, r0, #1
 800b2dc:	4606      	mov	r6, r0
 800b2de:	d1d6      	bne.n	800b28e <_svfiprintf_r+0x176>
 800b2e0:	89ab      	ldrh	r3, [r5, #12]
 800b2e2:	065b      	lsls	r3, r3, #25
 800b2e4:	f53f af2c 	bmi.w	800b140 <_svfiprintf_r+0x28>
 800b2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ea:	b01d      	add	sp, #116	; 0x74
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	ab03      	add	r3, sp, #12
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	462a      	mov	r2, r5
 800b2f6:	4b06      	ldr	r3, [pc, #24]	; (800b310 <_svfiprintf_r+0x1f8>)
 800b2f8:	a904      	add	r1, sp, #16
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f7fd f838 	bl	8008370 <_printf_i>
 800b300:	e7eb      	b.n	800b2da <_svfiprintf_r+0x1c2>
 800b302:	bf00      	nop
 800b304:	0800c26c 	.word	0x0800c26c
 800b308:	0800c276 	.word	0x0800c276
 800b30c:	08007e59 	.word	0x08007e59
 800b310:	0800b061 	.word	0x0800b061
 800b314:	0800c272 	.word	0x0800c272

0800b318 <nan>:
 800b318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b320 <nan+0x8>
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	00000000 	.word	0x00000000
 800b324:	7ff80000 	.word	0x7ff80000

0800b328 <_sbrk_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	; (800b344 <_sbrk_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7f6 f9d4 	bl	80016e0 <_sbrk>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_sbrk_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_sbrk_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20000b50 	.word	0x20000b50

0800b348 <__ascii_wctomb>:
 800b348:	b149      	cbz	r1, 800b35e <__ascii_wctomb+0x16>
 800b34a:	2aff      	cmp	r2, #255	; 0xff
 800b34c:	bf85      	ittet	hi
 800b34e:	238a      	movhi	r3, #138	; 0x8a
 800b350:	6003      	strhi	r3, [r0, #0]
 800b352:	700a      	strbls	r2, [r1, #0]
 800b354:	f04f 30ff 	movhi.w	r0, #4294967295
 800b358:	bf98      	it	ls
 800b35a:	2001      	movls	r0, #1
 800b35c:	4770      	bx	lr
 800b35e:	4608      	mov	r0, r1
 800b360:	4770      	bx	lr
	...

0800b364 <__assert_func>:
 800b364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b366:	4614      	mov	r4, r2
 800b368:	461a      	mov	r2, r3
 800b36a:	4b09      	ldr	r3, [pc, #36]	; (800b390 <__assert_func+0x2c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4605      	mov	r5, r0
 800b370:	68d8      	ldr	r0, [r3, #12]
 800b372:	b14c      	cbz	r4, 800b388 <__assert_func+0x24>
 800b374:	4b07      	ldr	r3, [pc, #28]	; (800b394 <__assert_func+0x30>)
 800b376:	9100      	str	r1, [sp, #0]
 800b378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b37c:	4906      	ldr	r1, [pc, #24]	; (800b398 <__assert_func+0x34>)
 800b37e:	462b      	mov	r3, r5
 800b380:	f000 f80e 	bl	800b3a0 <fiprintf>
 800b384:	f000 fa84 	bl	800b890 <abort>
 800b388:	4b04      	ldr	r3, [pc, #16]	; (800b39c <__assert_func+0x38>)
 800b38a:	461c      	mov	r4, r3
 800b38c:	e7f3      	b.n	800b376 <__assert_func+0x12>
 800b38e:	bf00      	nop
 800b390:	2000010c 	.word	0x2000010c
 800b394:	0800c27d 	.word	0x0800c27d
 800b398:	0800c28a 	.word	0x0800c28a
 800b39c:	0800c2b8 	.word	0x0800c2b8

0800b3a0 <fiprintf>:
 800b3a0:	b40e      	push	{r1, r2, r3}
 800b3a2:	b503      	push	{r0, r1, lr}
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	ab03      	add	r3, sp, #12
 800b3a8:	4805      	ldr	r0, [pc, #20]	; (800b3c0 <fiprintf+0x20>)
 800b3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ae:	6800      	ldr	r0, [r0, #0]
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	f000 f87d 	bl	800b4b0 <_vfiprintf_r>
 800b3b6:	b002      	add	sp, #8
 800b3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3bc:	b003      	add	sp, #12
 800b3be:	4770      	bx	lr
 800b3c0:	2000010c 	.word	0x2000010c

0800b3c4 <memmove>:
 800b3c4:	4288      	cmp	r0, r1
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	eb01 0402 	add.w	r4, r1, r2
 800b3cc:	d902      	bls.n	800b3d4 <memmove+0x10>
 800b3ce:	4284      	cmp	r4, r0
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	d807      	bhi.n	800b3e4 <memmove+0x20>
 800b3d4:	1e43      	subs	r3, r0, #1
 800b3d6:	42a1      	cmp	r1, r4
 800b3d8:	d008      	beq.n	800b3ec <memmove+0x28>
 800b3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3e2:	e7f8      	b.n	800b3d6 <memmove+0x12>
 800b3e4:	4402      	add	r2, r0
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	428a      	cmp	r2, r1
 800b3ea:	d100      	bne.n	800b3ee <memmove+0x2a>
 800b3ec:	bd10      	pop	{r4, pc}
 800b3ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3f6:	e7f7      	b.n	800b3e8 <memmove+0x24>

0800b3f8 <__malloc_lock>:
 800b3f8:	4801      	ldr	r0, [pc, #4]	; (800b400 <__malloc_lock+0x8>)
 800b3fa:	f000 bc09 	b.w	800bc10 <__retarget_lock_acquire_recursive>
 800b3fe:	bf00      	nop
 800b400:	20000b58 	.word	0x20000b58

0800b404 <__malloc_unlock>:
 800b404:	4801      	ldr	r0, [pc, #4]	; (800b40c <__malloc_unlock+0x8>)
 800b406:	f000 bc04 	b.w	800bc12 <__retarget_lock_release_recursive>
 800b40a:	bf00      	nop
 800b40c:	20000b58 	.word	0x20000b58

0800b410 <_realloc_r>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	4607      	mov	r7, r0
 800b414:	4614      	mov	r4, r2
 800b416:	460e      	mov	r6, r1
 800b418:	b921      	cbnz	r1, 800b424 <_realloc_r+0x14>
 800b41a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b41e:	4611      	mov	r1, r2
 800b420:	f7ff bdc4 	b.w	800afac <_malloc_r>
 800b424:	b922      	cbnz	r2, 800b430 <_realloc_r+0x20>
 800b426:	f7ff fd71 	bl	800af0c <_free_r>
 800b42a:	4625      	mov	r5, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b430:	f000 fc54 	bl	800bcdc <_malloc_usable_size_r>
 800b434:	42a0      	cmp	r0, r4
 800b436:	d20f      	bcs.n	800b458 <_realloc_r+0x48>
 800b438:	4621      	mov	r1, r4
 800b43a:	4638      	mov	r0, r7
 800b43c:	f7ff fdb6 	bl	800afac <_malloc_r>
 800b440:	4605      	mov	r5, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	d0f2      	beq.n	800b42c <_realloc_r+0x1c>
 800b446:	4631      	mov	r1, r6
 800b448:	4622      	mov	r2, r4
 800b44a:	f7ff f885 	bl	800a558 <memcpy>
 800b44e:	4631      	mov	r1, r6
 800b450:	4638      	mov	r0, r7
 800b452:	f7ff fd5b 	bl	800af0c <_free_r>
 800b456:	e7e9      	b.n	800b42c <_realloc_r+0x1c>
 800b458:	4635      	mov	r5, r6
 800b45a:	e7e7      	b.n	800b42c <_realloc_r+0x1c>

0800b45c <__sfputc_r>:
 800b45c:	6893      	ldr	r3, [r2, #8]
 800b45e:	3b01      	subs	r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	b410      	push	{r4}
 800b464:	6093      	str	r3, [r2, #8]
 800b466:	da08      	bge.n	800b47a <__sfputc_r+0x1e>
 800b468:	6994      	ldr	r4, [r2, #24]
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	db01      	blt.n	800b472 <__sfputc_r+0x16>
 800b46e:	290a      	cmp	r1, #10
 800b470:	d103      	bne.n	800b47a <__sfputc_r+0x1e>
 800b472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b476:	f000 b94b 	b.w	800b710 <__swbuf_r>
 800b47a:	6813      	ldr	r3, [r2, #0]
 800b47c:	1c58      	adds	r0, r3, #1
 800b47e:	6010      	str	r0, [r2, #0]
 800b480:	7019      	strb	r1, [r3, #0]
 800b482:	4608      	mov	r0, r1
 800b484:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <__sfputs_r>:
 800b48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48c:	4606      	mov	r6, r0
 800b48e:	460f      	mov	r7, r1
 800b490:	4614      	mov	r4, r2
 800b492:	18d5      	adds	r5, r2, r3
 800b494:	42ac      	cmp	r4, r5
 800b496:	d101      	bne.n	800b49c <__sfputs_r+0x12>
 800b498:	2000      	movs	r0, #0
 800b49a:	e007      	b.n	800b4ac <__sfputs_r+0x22>
 800b49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7ff ffda 	bl	800b45c <__sfputc_r>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	d1f3      	bne.n	800b494 <__sfputs_r+0xa>
 800b4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4b0 <_vfiprintf_r>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	460d      	mov	r5, r1
 800b4b6:	b09d      	sub	sp, #116	; 0x74
 800b4b8:	4614      	mov	r4, r2
 800b4ba:	4698      	mov	r8, r3
 800b4bc:	4606      	mov	r6, r0
 800b4be:	b118      	cbz	r0, 800b4c8 <_vfiprintf_r+0x18>
 800b4c0:	6983      	ldr	r3, [r0, #24]
 800b4c2:	b90b      	cbnz	r3, 800b4c8 <_vfiprintf_r+0x18>
 800b4c4:	f000 fb06 	bl	800bad4 <__sinit>
 800b4c8:	4b89      	ldr	r3, [pc, #548]	; (800b6f0 <_vfiprintf_r+0x240>)
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	d11b      	bne.n	800b506 <_vfiprintf_r+0x56>
 800b4ce:	6875      	ldr	r5, [r6, #4]
 800b4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4d2:	07d9      	lsls	r1, r3, #31
 800b4d4:	d405      	bmi.n	800b4e2 <_vfiprintf_r+0x32>
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	059a      	lsls	r2, r3, #22
 800b4da:	d402      	bmi.n	800b4e2 <_vfiprintf_r+0x32>
 800b4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4de:	f000 fb97 	bl	800bc10 <__retarget_lock_acquire_recursive>
 800b4e2:	89ab      	ldrh	r3, [r5, #12]
 800b4e4:	071b      	lsls	r3, r3, #28
 800b4e6:	d501      	bpl.n	800b4ec <_vfiprintf_r+0x3c>
 800b4e8:	692b      	ldr	r3, [r5, #16]
 800b4ea:	b9eb      	cbnz	r3, 800b528 <_vfiprintf_r+0x78>
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f000 f960 	bl	800b7b4 <__swsetup_r>
 800b4f4:	b1c0      	cbz	r0, 800b528 <_vfiprintf_r+0x78>
 800b4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4f8:	07dc      	lsls	r4, r3, #31
 800b4fa:	d50e      	bpl.n	800b51a <_vfiprintf_r+0x6a>
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b500:	b01d      	add	sp, #116	; 0x74
 800b502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b506:	4b7b      	ldr	r3, [pc, #492]	; (800b6f4 <_vfiprintf_r+0x244>)
 800b508:	429d      	cmp	r5, r3
 800b50a:	d101      	bne.n	800b510 <_vfiprintf_r+0x60>
 800b50c:	68b5      	ldr	r5, [r6, #8]
 800b50e:	e7df      	b.n	800b4d0 <_vfiprintf_r+0x20>
 800b510:	4b79      	ldr	r3, [pc, #484]	; (800b6f8 <_vfiprintf_r+0x248>)
 800b512:	429d      	cmp	r5, r3
 800b514:	bf08      	it	eq
 800b516:	68f5      	ldreq	r5, [r6, #12]
 800b518:	e7da      	b.n	800b4d0 <_vfiprintf_r+0x20>
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	0598      	lsls	r0, r3, #22
 800b51e:	d4ed      	bmi.n	800b4fc <_vfiprintf_r+0x4c>
 800b520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b522:	f000 fb76 	bl	800bc12 <__retarget_lock_release_recursive>
 800b526:	e7e9      	b.n	800b4fc <_vfiprintf_r+0x4c>
 800b528:	2300      	movs	r3, #0
 800b52a:	9309      	str	r3, [sp, #36]	; 0x24
 800b52c:	2320      	movs	r3, #32
 800b52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b532:	f8cd 800c 	str.w	r8, [sp, #12]
 800b536:	2330      	movs	r3, #48	; 0x30
 800b538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b6fc <_vfiprintf_r+0x24c>
 800b53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b540:	f04f 0901 	mov.w	r9, #1
 800b544:	4623      	mov	r3, r4
 800b546:	469a      	mov	sl, r3
 800b548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b54c:	b10a      	cbz	r2, 800b552 <_vfiprintf_r+0xa2>
 800b54e:	2a25      	cmp	r2, #37	; 0x25
 800b550:	d1f9      	bne.n	800b546 <_vfiprintf_r+0x96>
 800b552:	ebba 0b04 	subs.w	fp, sl, r4
 800b556:	d00b      	beq.n	800b570 <_vfiprintf_r+0xc0>
 800b558:	465b      	mov	r3, fp
 800b55a:	4622      	mov	r2, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	4630      	mov	r0, r6
 800b560:	f7ff ff93 	bl	800b48a <__sfputs_r>
 800b564:	3001      	adds	r0, #1
 800b566:	f000 80aa 	beq.w	800b6be <_vfiprintf_r+0x20e>
 800b56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b56c:	445a      	add	r2, fp
 800b56e:	9209      	str	r2, [sp, #36]	; 0x24
 800b570:	f89a 3000 	ldrb.w	r3, [sl]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80a2 	beq.w	800b6be <_vfiprintf_r+0x20e>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f04f 32ff 	mov.w	r2, #4294967295
 800b580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b584:	f10a 0a01 	add.w	sl, sl, #1
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b590:	931a      	str	r3, [sp, #104]	; 0x68
 800b592:	4654      	mov	r4, sl
 800b594:	2205      	movs	r2, #5
 800b596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59a:	4858      	ldr	r0, [pc, #352]	; (800b6fc <_vfiprintf_r+0x24c>)
 800b59c:	f7f4 fe58 	bl	8000250 <memchr>
 800b5a0:	9a04      	ldr	r2, [sp, #16]
 800b5a2:	b9d8      	cbnz	r0, 800b5dc <_vfiprintf_r+0x12c>
 800b5a4:	06d1      	lsls	r1, r2, #27
 800b5a6:	bf44      	itt	mi
 800b5a8:	2320      	movmi	r3, #32
 800b5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ae:	0713      	lsls	r3, r2, #28
 800b5b0:	bf44      	itt	mi
 800b5b2:	232b      	movmi	r3, #43	; 0x2b
 800b5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5be:	d015      	beq.n	800b5ec <_vfiprintf_r+0x13c>
 800b5c0:	9a07      	ldr	r2, [sp, #28]
 800b5c2:	4654      	mov	r4, sl
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	f04f 0c0a 	mov.w	ip, #10
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d0:	3b30      	subs	r3, #48	; 0x30
 800b5d2:	2b09      	cmp	r3, #9
 800b5d4:	d94e      	bls.n	800b674 <_vfiprintf_r+0x1c4>
 800b5d6:	b1b0      	cbz	r0, 800b606 <_vfiprintf_r+0x156>
 800b5d8:	9207      	str	r2, [sp, #28]
 800b5da:	e014      	b.n	800b606 <_vfiprintf_r+0x156>
 800b5dc:	eba0 0308 	sub.w	r3, r0, r8
 800b5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	46a2      	mov	sl, r4
 800b5ea:	e7d2      	b.n	800b592 <_vfiprintf_r+0xe2>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	1d19      	adds	r1, r3, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	9103      	str	r1, [sp, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bfbb      	ittet	lt
 800b5f8:	425b      	neglt	r3, r3
 800b5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b5fe:	9307      	strge	r3, [sp, #28]
 800b600:	9307      	strlt	r3, [sp, #28]
 800b602:	bfb8      	it	lt
 800b604:	9204      	strlt	r2, [sp, #16]
 800b606:	7823      	ldrb	r3, [r4, #0]
 800b608:	2b2e      	cmp	r3, #46	; 0x2e
 800b60a:	d10c      	bne.n	800b626 <_vfiprintf_r+0x176>
 800b60c:	7863      	ldrb	r3, [r4, #1]
 800b60e:	2b2a      	cmp	r3, #42	; 0x2a
 800b610:	d135      	bne.n	800b67e <_vfiprintf_r+0x1ce>
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	1d1a      	adds	r2, r3, #4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	9203      	str	r2, [sp, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bfb8      	it	lt
 800b61e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b622:	3402      	adds	r4, #2
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b70c <_vfiprintf_r+0x25c>
 800b62a:	7821      	ldrb	r1, [r4, #0]
 800b62c:	2203      	movs	r2, #3
 800b62e:	4650      	mov	r0, sl
 800b630:	f7f4 fe0e 	bl	8000250 <memchr>
 800b634:	b140      	cbz	r0, 800b648 <_vfiprintf_r+0x198>
 800b636:	2340      	movs	r3, #64	; 0x40
 800b638:	eba0 000a 	sub.w	r0, r0, sl
 800b63c:	fa03 f000 	lsl.w	r0, r3, r0
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	4303      	orrs	r3, r0
 800b644:	3401      	adds	r4, #1
 800b646:	9304      	str	r3, [sp, #16]
 800b648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64c:	482c      	ldr	r0, [pc, #176]	; (800b700 <_vfiprintf_r+0x250>)
 800b64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b652:	2206      	movs	r2, #6
 800b654:	f7f4 fdfc 	bl	8000250 <memchr>
 800b658:	2800      	cmp	r0, #0
 800b65a:	d03f      	beq.n	800b6dc <_vfiprintf_r+0x22c>
 800b65c:	4b29      	ldr	r3, [pc, #164]	; (800b704 <_vfiprintf_r+0x254>)
 800b65e:	bb1b      	cbnz	r3, 800b6a8 <_vfiprintf_r+0x1f8>
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	3307      	adds	r3, #7
 800b664:	f023 0307 	bic.w	r3, r3, #7
 800b668:	3308      	adds	r3, #8
 800b66a:	9303      	str	r3, [sp, #12]
 800b66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66e:	443b      	add	r3, r7
 800b670:	9309      	str	r3, [sp, #36]	; 0x24
 800b672:	e767      	b.n	800b544 <_vfiprintf_r+0x94>
 800b674:	fb0c 3202 	mla	r2, ip, r2, r3
 800b678:	460c      	mov	r4, r1
 800b67a:	2001      	movs	r0, #1
 800b67c:	e7a5      	b.n	800b5ca <_vfiprintf_r+0x11a>
 800b67e:	2300      	movs	r3, #0
 800b680:	3401      	adds	r4, #1
 800b682:	9305      	str	r3, [sp, #20]
 800b684:	4619      	mov	r1, r3
 800b686:	f04f 0c0a 	mov.w	ip, #10
 800b68a:	4620      	mov	r0, r4
 800b68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b690:	3a30      	subs	r2, #48	; 0x30
 800b692:	2a09      	cmp	r2, #9
 800b694:	d903      	bls.n	800b69e <_vfiprintf_r+0x1ee>
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0c5      	beq.n	800b626 <_vfiprintf_r+0x176>
 800b69a:	9105      	str	r1, [sp, #20]
 800b69c:	e7c3      	b.n	800b626 <_vfiprintf_r+0x176>
 800b69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e7f0      	b.n	800b68a <_vfiprintf_r+0x1da>
 800b6a8:	ab03      	add	r3, sp, #12
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	4b16      	ldr	r3, [pc, #88]	; (800b708 <_vfiprintf_r+0x258>)
 800b6b0:	a904      	add	r1, sp, #16
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7fc fbd0 	bl	8007e58 <_printf_float>
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	1c78      	adds	r0, r7, #1
 800b6bc:	d1d6      	bne.n	800b66c <_vfiprintf_r+0x1bc>
 800b6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c0:	07d9      	lsls	r1, r3, #31
 800b6c2:	d405      	bmi.n	800b6d0 <_vfiprintf_r+0x220>
 800b6c4:	89ab      	ldrh	r3, [r5, #12]
 800b6c6:	059a      	lsls	r2, r3, #22
 800b6c8:	d402      	bmi.n	800b6d0 <_vfiprintf_r+0x220>
 800b6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6cc:	f000 faa1 	bl	800bc12 <__retarget_lock_release_recursive>
 800b6d0:	89ab      	ldrh	r3, [r5, #12]
 800b6d2:	065b      	lsls	r3, r3, #25
 800b6d4:	f53f af12 	bmi.w	800b4fc <_vfiprintf_r+0x4c>
 800b6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6da:	e711      	b.n	800b500 <_vfiprintf_r+0x50>
 800b6dc:	ab03      	add	r3, sp, #12
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	4b09      	ldr	r3, [pc, #36]	; (800b708 <_vfiprintf_r+0x258>)
 800b6e4:	a904      	add	r1, sp, #16
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7fc fe42 	bl	8008370 <_printf_i>
 800b6ec:	e7e4      	b.n	800b6b8 <_vfiprintf_r+0x208>
 800b6ee:	bf00      	nop
 800b6f0:	0800c3dc 	.word	0x0800c3dc
 800b6f4:	0800c3fc 	.word	0x0800c3fc
 800b6f8:	0800c3bc 	.word	0x0800c3bc
 800b6fc:	0800c26c 	.word	0x0800c26c
 800b700:	0800c276 	.word	0x0800c276
 800b704:	08007e59 	.word	0x08007e59
 800b708:	0800b48b 	.word	0x0800b48b
 800b70c:	0800c272 	.word	0x0800c272

0800b710 <__swbuf_r>:
 800b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b712:	460e      	mov	r6, r1
 800b714:	4614      	mov	r4, r2
 800b716:	4605      	mov	r5, r0
 800b718:	b118      	cbz	r0, 800b722 <__swbuf_r+0x12>
 800b71a:	6983      	ldr	r3, [r0, #24]
 800b71c:	b90b      	cbnz	r3, 800b722 <__swbuf_r+0x12>
 800b71e:	f000 f9d9 	bl	800bad4 <__sinit>
 800b722:	4b21      	ldr	r3, [pc, #132]	; (800b7a8 <__swbuf_r+0x98>)
 800b724:	429c      	cmp	r4, r3
 800b726:	d12b      	bne.n	800b780 <__swbuf_r+0x70>
 800b728:	686c      	ldr	r4, [r5, #4]
 800b72a:	69a3      	ldr	r3, [r4, #24]
 800b72c:	60a3      	str	r3, [r4, #8]
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	071a      	lsls	r2, r3, #28
 800b732:	d52f      	bpl.n	800b794 <__swbuf_r+0x84>
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	b36b      	cbz	r3, 800b794 <__swbuf_r+0x84>
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	6820      	ldr	r0, [r4, #0]
 800b73c:	1ac0      	subs	r0, r0, r3
 800b73e:	6963      	ldr	r3, [r4, #20]
 800b740:	b2f6      	uxtb	r6, r6
 800b742:	4283      	cmp	r3, r0
 800b744:	4637      	mov	r7, r6
 800b746:	dc04      	bgt.n	800b752 <__swbuf_r+0x42>
 800b748:	4621      	mov	r1, r4
 800b74a:	4628      	mov	r0, r5
 800b74c:	f000 f92e 	bl	800b9ac <_fflush_r>
 800b750:	bb30      	cbnz	r0, 800b7a0 <__swbuf_r+0x90>
 800b752:	68a3      	ldr	r3, [r4, #8]
 800b754:	3b01      	subs	r3, #1
 800b756:	60a3      	str	r3, [r4, #8]
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	6022      	str	r2, [r4, #0]
 800b75e:	701e      	strb	r6, [r3, #0]
 800b760:	6963      	ldr	r3, [r4, #20]
 800b762:	3001      	adds	r0, #1
 800b764:	4283      	cmp	r3, r0
 800b766:	d004      	beq.n	800b772 <__swbuf_r+0x62>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	07db      	lsls	r3, r3, #31
 800b76c:	d506      	bpl.n	800b77c <__swbuf_r+0x6c>
 800b76e:	2e0a      	cmp	r6, #10
 800b770:	d104      	bne.n	800b77c <__swbuf_r+0x6c>
 800b772:	4621      	mov	r1, r4
 800b774:	4628      	mov	r0, r5
 800b776:	f000 f919 	bl	800b9ac <_fflush_r>
 800b77a:	b988      	cbnz	r0, 800b7a0 <__swbuf_r+0x90>
 800b77c:	4638      	mov	r0, r7
 800b77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b780:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <__swbuf_r+0x9c>)
 800b782:	429c      	cmp	r4, r3
 800b784:	d101      	bne.n	800b78a <__swbuf_r+0x7a>
 800b786:	68ac      	ldr	r4, [r5, #8]
 800b788:	e7cf      	b.n	800b72a <__swbuf_r+0x1a>
 800b78a:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <__swbuf_r+0xa0>)
 800b78c:	429c      	cmp	r4, r3
 800b78e:	bf08      	it	eq
 800b790:	68ec      	ldreq	r4, [r5, #12]
 800b792:	e7ca      	b.n	800b72a <__swbuf_r+0x1a>
 800b794:	4621      	mov	r1, r4
 800b796:	4628      	mov	r0, r5
 800b798:	f000 f80c 	bl	800b7b4 <__swsetup_r>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d0cb      	beq.n	800b738 <__swbuf_r+0x28>
 800b7a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b7a4:	e7ea      	b.n	800b77c <__swbuf_r+0x6c>
 800b7a6:	bf00      	nop
 800b7a8:	0800c3dc 	.word	0x0800c3dc
 800b7ac:	0800c3fc 	.word	0x0800c3fc
 800b7b0:	0800c3bc 	.word	0x0800c3bc

0800b7b4 <__swsetup_r>:
 800b7b4:	4b32      	ldr	r3, [pc, #200]	; (800b880 <__swsetup_r+0xcc>)
 800b7b6:	b570      	push	{r4, r5, r6, lr}
 800b7b8:	681d      	ldr	r5, [r3, #0]
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	460c      	mov	r4, r1
 800b7be:	b125      	cbz	r5, 800b7ca <__swsetup_r+0x16>
 800b7c0:	69ab      	ldr	r3, [r5, #24]
 800b7c2:	b913      	cbnz	r3, 800b7ca <__swsetup_r+0x16>
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f000 f985 	bl	800bad4 <__sinit>
 800b7ca:	4b2e      	ldr	r3, [pc, #184]	; (800b884 <__swsetup_r+0xd0>)
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	d10f      	bne.n	800b7f0 <__swsetup_r+0x3c>
 800b7d0:	686c      	ldr	r4, [r5, #4]
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7d8:	0719      	lsls	r1, r3, #28
 800b7da:	d42c      	bmi.n	800b836 <__swsetup_r+0x82>
 800b7dc:	06dd      	lsls	r5, r3, #27
 800b7de:	d411      	bmi.n	800b804 <__swsetup_r+0x50>
 800b7e0:	2309      	movs	r3, #9
 800b7e2:	6033      	str	r3, [r6, #0]
 800b7e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ee:	e03e      	b.n	800b86e <__swsetup_r+0xba>
 800b7f0:	4b25      	ldr	r3, [pc, #148]	; (800b888 <__swsetup_r+0xd4>)
 800b7f2:	429c      	cmp	r4, r3
 800b7f4:	d101      	bne.n	800b7fa <__swsetup_r+0x46>
 800b7f6:	68ac      	ldr	r4, [r5, #8]
 800b7f8:	e7eb      	b.n	800b7d2 <__swsetup_r+0x1e>
 800b7fa:	4b24      	ldr	r3, [pc, #144]	; (800b88c <__swsetup_r+0xd8>)
 800b7fc:	429c      	cmp	r4, r3
 800b7fe:	bf08      	it	eq
 800b800:	68ec      	ldreq	r4, [r5, #12]
 800b802:	e7e6      	b.n	800b7d2 <__swsetup_r+0x1e>
 800b804:	0758      	lsls	r0, r3, #29
 800b806:	d512      	bpl.n	800b82e <__swsetup_r+0x7a>
 800b808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b80a:	b141      	cbz	r1, 800b81e <__swsetup_r+0x6a>
 800b80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b810:	4299      	cmp	r1, r3
 800b812:	d002      	beq.n	800b81a <__swsetup_r+0x66>
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff fb79 	bl	800af0c <_free_r>
 800b81a:	2300      	movs	r3, #0
 800b81c:	6363      	str	r3, [r4, #52]	; 0x34
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b824:	81a3      	strh	r3, [r4, #12]
 800b826:	2300      	movs	r3, #0
 800b828:	6063      	str	r3, [r4, #4]
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	f043 0308 	orr.w	r3, r3, #8
 800b834:	81a3      	strh	r3, [r4, #12]
 800b836:	6923      	ldr	r3, [r4, #16]
 800b838:	b94b      	cbnz	r3, 800b84e <__swsetup_r+0x9a>
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b844:	d003      	beq.n	800b84e <__swsetup_r+0x9a>
 800b846:	4621      	mov	r1, r4
 800b848:	4630      	mov	r0, r6
 800b84a:	f000 fa07 	bl	800bc5c <__smakebuf_r>
 800b84e:	89a0      	ldrh	r0, [r4, #12]
 800b850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b854:	f010 0301 	ands.w	r3, r0, #1
 800b858:	d00a      	beq.n	800b870 <__swsetup_r+0xbc>
 800b85a:	2300      	movs	r3, #0
 800b85c:	60a3      	str	r3, [r4, #8]
 800b85e:	6963      	ldr	r3, [r4, #20]
 800b860:	425b      	negs	r3, r3
 800b862:	61a3      	str	r3, [r4, #24]
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	b943      	cbnz	r3, 800b87a <__swsetup_r+0xc6>
 800b868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b86c:	d1ba      	bne.n	800b7e4 <__swsetup_r+0x30>
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	0781      	lsls	r1, r0, #30
 800b872:	bf58      	it	pl
 800b874:	6963      	ldrpl	r3, [r4, #20]
 800b876:	60a3      	str	r3, [r4, #8]
 800b878:	e7f4      	b.n	800b864 <__swsetup_r+0xb0>
 800b87a:	2000      	movs	r0, #0
 800b87c:	e7f7      	b.n	800b86e <__swsetup_r+0xba>
 800b87e:	bf00      	nop
 800b880:	2000010c 	.word	0x2000010c
 800b884:	0800c3dc 	.word	0x0800c3dc
 800b888:	0800c3fc 	.word	0x0800c3fc
 800b88c:	0800c3bc 	.word	0x0800c3bc

0800b890 <abort>:
 800b890:	b508      	push	{r3, lr}
 800b892:	2006      	movs	r0, #6
 800b894:	f000 fa52 	bl	800bd3c <raise>
 800b898:	2001      	movs	r0, #1
 800b89a:	f7f5 fea9 	bl	80015f0 <_exit>
	...

0800b8a0 <__sflush_r>:
 800b8a0:	898a      	ldrh	r2, [r1, #12]
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	0710      	lsls	r0, r2, #28
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	d458      	bmi.n	800b960 <__sflush_r+0xc0>
 800b8ae:	684b      	ldr	r3, [r1, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc05      	bgt.n	800b8c0 <__sflush_r+0x20>
 800b8b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	dc02      	bgt.n	800b8c0 <__sflush_r+0x20>
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8c2:	2e00      	cmp	r6, #0
 800b8c4:	d0f9      	beq.n	800b8ba <__sflush_r+0x1a>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8cc:	682f      	ldr	r7, [r5, #0]
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	d032      	beq.n	800b938 <__sflush_r+0x98>
 800b8d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	075a      	lsls	r2, r3, #29
 800b8d8:	d505      	bpl.n	800b8e6 <__sflush_r+0x46>
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	1ac0      	subs	r0, r0, r3
 800b8de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8e0:	b10b      	cbz	r3, 800b8e6 <__sflush_r+0x46>
 800b8e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8e4:	1ac0      	subs	r0, r0, r3
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8ec:	6a21      	ldr	r1, [r4, #32]
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	47b0      	blx	r6
 800b8f2:	1c43      	adds	r3, r0, #1
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	d106      	bne.n	800b906 <__sflush_r+0x66>
 800b8f8:	6829      	ldr	r1, [r5, #0]
 800b8fa:	291d      	cmp	r1, #29
 800b8fc:	d82c      	bhi.n	800b958 <__sflush_r+0xb8>
 800b8fe:	4a2a      	ldr	r2, [pc, #168]	; (800b9a8 <__sflush_r+0x108>)
 800b900:	40ca      	lsrs	r2, r1
 800b902:	07d6      	lsls	r6, r2, #31
 800b904:	d528      	bpl.n	800b958 <__sflush_r+0xb8>
 800b906:	2200      	movs	r2, #0
 800b908:	6062      	str	r2, [r4, #4]
 800b90a:	04d9      	lsls	r1, r3, #19
 800b90c:	6922      	ldr	r2, [r4, #16]
 800b90e:	6022      	str	r2, [r4, #0]
 800b910:	d504      	bpl.n	800b91c <__sflush_r+0x7c>
 800b912:	1c42      	adds	r2, r0, #1
 800b914:	d101      	bne.n	800b91a <__sflush_r+0x7a>
 800b916:	682b      	ldr	r3, [r5, #0]
 800b918:	b903      	cbnz	r3, 800b91c <__sflush_r+0x7c>
 800b91a:	6560      	str	r0, [r4, #84]	; 0x54
 800b91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b91e:	602f      	str	r7, [r5, #0]
 800b920:	2900      	cmp	r1, #0
 800b922:	d0ca      	beq.n	800b8ba <__sflush_r+0x1a>
 800b924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b928:	4299      	cmp	r1, r3
 800b92a:	d002      	beq.n	800b932 <__sflush_r+0x92>
 800b92c:	4628      	mov	r0, r5
 800b92e:	f7ff faed 	bl	800af0c <_free_r>
 800b932:	2000      	movs	r0, #0
 800b934:	6360      	str	r0, [r4, #52]	; 0x34
 800b936:	e7c1      	b.n	800b8bc <__sflush_r+0x1c>
 800b938:	6a21      	ldr	r1, [r4, #32]
 800b93a:	2301      	movs	r3, #1
 800b93c:	4628      	mov	r0, r5
 800b93e:	47b0      	blx	r6
 800b940:	1c41      	adds	r1, r0, #1
 800b942:	d1c7      	bne.n	800b8d4 <__sflush_r+0x34>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0c4      	beq.n	800b8d4 <__sflush_r+0x34>
 800b94a:	2b1d      	cmp	r3, #29
 800b94c:	d001      	beq.n	800b952 <__sflush_r+0xb2>
 800b94e:	2b16      	cmp	r3, #22
 800b950:	d101      	bne.n	800b956 <__sflush_r+0xb6>
 800b952:	602f      	str	r7, [r5, #0]
 800b954:	e7b1      	b.n	800b8ba <__sflush_r+0x1a>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	e7ad      	b.n	800b8bc <__sflush_r+0x1c>
 800b960:	690f      	ldr	r7, [r1, #16]
 800b962:	2f00      	cmp	r7, #0
 800b964:	d0a9      	beq.n	800b8ba <__sflush_r+0x1a>
 800b966:	0793      	lsls	r3, r2, #30
 800b968:	680e      	ldr	r6, [r1, #0]
 800b96a:	bf08      	it	eq
 800b96c:	694b      	ldreq	r3, [r1, #20]
 800b96e:	600f      	str	r7, [r1, #0]
 800b970:	bf18      	it	ne
 800b972:	2300      	movne	r3, #0
 800b974:	eba6 0807 	sub.w	r8, r6, r7
 800b978:	608b      	str	r3, [r1, #8]
 800b97a:	f1b8 0f00 	cmp.w	r8, #0
 800b97e:	dd9c      	ble.n	800b8ba <__sflush_r+0x1a>
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b984:	4643      	mov	r3, r8
 800b986:	463a      	mov	r2, r7
 800b988:	4628      	mov	r0, r5
 800b98a:	47b0      	blx	r6
 800b98c:	2800      	cmp	r0, #0
 800b98e:	dc06      	bgt.n	800b99e <__sflush_r+0xfe>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b996:	81a3      	strh	r3, [r4, #12]
 800b998:	f04f 30ff 	mov.w	r0, #4294967295
 800b99c:	e78e      	b.n	800b8bc <__sflush_r+0x1c>
 800b99e:	4407      	add	r7, r0
 800b9a0:	eba8 0800 	sub.w	r8, r8, r0
 800b9a4:	e7e9      	b.n	800b97a <__sflush_r+0xda>
 800b9a6:	bf00      	nop
 800b9a8:	20400001 	.word	0x20400001

0800b9ac <_fflush_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	690b      	ldr	r3, [r1, #16]
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	b913      	cbnz	r3, 800b9bc <_fflush_r+0x10>
 800b9b6:	2500      	movs	r5, #0
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	b118      	cbz	r0, 800b9c6 <_fflush_r+0x1a>
 800b9be:	6983      	ldr	r3, [r0, #24]
 800b9c0:	b90b      	cbnz	r3, 800b9c6 <_fflush_r+0x1a>
 800b9c2:	f000 f887 	bl	800bad4 <__sinit>
 800b9c6:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <_fflush_r+0x6c>)
 800b9c8:	429c      	cmp	r4, r3
 800b9ca:	d11b      	bne.n	800ba04 <_fflush_r+0x58>
 800b9cc:	686c      	ldr	r4, [r5, #4]
 800b9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0ef      	beq.n	800b9b6 <_fflush_r+0xa>
 800b9d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9d8:	07d0      	lsls	r0, r2, #31
 800b9da:	d404      	bmi.n	800b9e6 <_fflush_r+0x3a>
 800b9dc:	0599      	lsls	r1, r3, #22
 800b9de:	d402      	bmi.n	800b9e6 <_fflush_r+0x3a>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9e2:	f000 f915 	bl	800bc10 <__retarget_lock_acquire_recursive>
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f7ff ff59 	bl	800b8a0 <__sflush_r>
 800b9ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9f0:	07da      	lsls	r2, r3, #31
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	d4e0      	bmi.n	800b9b8 <_fflush_r+0xc>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	059b      	lsls	r3, r3, #22
 800b9fa:	d4dd      	bmi.n	800b9b8 <_fflush_r+0xc>
 800b9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9fe:	f000 f908 	bl	800bc12 <__retarget_lock_release_recursive>
 800ba02:	e7d9      	b.n	800b9b8 <_fflush_r+0xc>
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <_fflush_r+0x70>)
 800ba06:	429c      	cmp	r4, r3
 800ba08:	d101      	bne.n	800ba0e <_fflush_r+0x62>
 800ba0a:	68ac      	ldr	r4, [r5, #8]
 800ba0c:	e7df      	b.n	800b9ce <_fflush_r+0x22>
 800ba0e:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <_fflush_r+0x74>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	bf08      	it	eq
 800ba14:	68ec      	ldreq	r4, [r5, #12]
 800ba16:	e7da      	b.n	800b9ce <_fflush_r+0x22>
 800ba18:	0800c3dc 	.word	0x0800c3dc
 800ba1c:	0800c3fc 	.word	0x0800c3fc
 800ba20:	0800c3bc 	.word	0x0800c3bc

0800ba24 <std>:
 800ba24:	2300      	movs	r3, #0
 800ba26:	b510      	push	{r4, lr}
 800ba28:	4604      	mov	r4, r0
 800ba2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba32:	6083      	str	r3, [r0, #8]
 800ba34:	8181      	strh	r1, [r0, #12]
 800ba36:	6643      	str	r3, [r0, #100]	; 0x64
 800ba38:	81c2      	strh	r2, [r0, #14]
 800ba3a:	6183      	str	r3, [r0, #24]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	2208      	movs	r2, #8
 800ba40:	305c      	adds	r0, #92	; 0x5c
 800ba42:	f7fc f971 	bl	8007d28 <memset>
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <std+0x38>)
 800ba48:	6263      	str	r3, [r4, #36]	; 0x24
 800ba4a:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <std+0x3c>)
 800ba4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba4e:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <std+0x40>)
 800ba50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <std+0x44>)
 800ba54:	6224      	str	r4, [r4, #32]
 800ba56:	6323      	str	r3, [r4, #48]	; 0x30
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800bd75 	.word	0x0800bd75
 800ba60:	0800bd97 	.word	0x0800bd97
 800ba64:	0800bdcf 	.word	0x0800bdcf
 800ba68:	0800bdf3 	.word	0x0800bdf3

0800ba6c <_cleanup_r>:
 800ba6c:	4901      	ldr	r1, [pc, #4]	; (800ba74 <_cleanup_r+0x8>)
 800ba6e:	f000 b8af 	b.w	800bbd0 <_fwalk_reent>
 800ba72:	bf00      	nop
 800ba74:	0800b9ad 	.word	0x0800b9ad

0800ba78 <__sfmoreglue>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	1e4a      	subs	r2, r1, #1
 800ba7c:	2568      	movs	r5, #104	; 0x68
 800ba7e:	4355      	muls	r5, r2
 800ba80:	460e      	mov	r6, r1
 800ba82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba86:	f7ff fa91 	bl	800afac <_malloc_r>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	b140      	cbz	r0, 800baa0 <__sfmoreglue+0x28>
 800ba8e:	2100      	movs	r1, #0
 800ba90:	e9c0 1600 	strd	r1, r6, [r0]
 800ba94:	300c      	adds	r0, #12
 800ba96:	60a0      	str	r0, [r4, #8]
 800ba98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba9c:	f7fc f944 	bl	8007d28 <memset>
 800baa0:	4620      	mov	r0, r4
 800baa2:	bd70      	pop	{r4, r5, r6, pc}

0800baa4 <__sfp_lock_acquire>:
 800baa4:	4801      	ldr	r0, [pc, #4]	; (800baac <__sfp_lock_acquire+0x8>)
 800baa6:	f000 b8b3 	b.w	800bc10 <__retarget_lock_acquire_recursive>
 800baaa:	bf00      	nop
 800baac:	20000b5c 	.word	0x20000b5c

0800bab0 <__sfp_lock_release>:
 800bab0:	4801      	ldr	r0, [pc, #4]	; (800bab8 <__sfp_lock_release+0x8>)
 800bab2:	f000 b8ae 	b.w	800bc12 <__retarget_lock_release_recursive>
 800bab6:	bf00      	nop
 800bab8:	20000b5c 	.word	0x20000b5c

0800babc <__sinit_lock_acquire>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__sinit_lock_acquire+0x8>)
 800babe:	f000 b8a7 	b.w	800bc10 <__retarget_lock_acquire_recursive>
 800bac2:	bf00      	nop
 800bac4:	20000b57 	.word	0x20000b57

0800bac8 <__sinit_lock_release>:
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <__sinit_lock_release+0x8>)
 800baca:	f000 b8a2 	b.w	800bc12 <__retarget_lock_release_recursive>
 800bace:	bf00      	nop
 800bad0:	20000b57 	.word	0x20000b57

0800bad4 <__sinit>:
 800bad4:	b510      	push	{r4, lr}
 800bad6:	4604      	mov	r4, r0
 800bad8:	f7ff fff0 	bl	800babc <__sinit_lock_acquire>
 800badc:	69a3      	ldr	r3, [r4, #24]
 800bade:	b11b      	cbz	r3, 800bae8 <__sinit+0x14>
 800bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae4:	f7ff bff0 	b.w	800bac8 <__sinit_lock_release>
 800bae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800baec:	6523      	str	r3, [r4, #80]	; 0x50
 800baee:	4b13      	ldr	r3, [pc, #76]	; (800bb3c <__sinit+0x68>)
 800baf0:	4a13      	ldr	r2, [pc, #76]	; (800bb40 <__sinit+0x6c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	62a2      	str	r2, [r4, #40]	; 0x28
 800baf6:	42a3      	cmp	r3, r4
 800baf8:	bf04      	itt	eq
 800bafa:	2301      	moveq	r3, #1
 800bafc:	61a3      	streq	r3, [r4, #24]
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 f820 	bl	800bb44 <__sfp>
 800bb04:	6060      	str	r0, [r4, #4]
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 f81c 	bl	800bb44 <__sfp>
 800bb0c:	60a0      	str	r0, [r4, #8]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 f818 	bl	800bb44 <__sfp>
 800bb14:	2200      	movs	r2, #0
 800bb16:	60e0      	str	r0, [r4, #12]
 800bb18:	2104      	movs	r1, #4
 800bb1a:	6860      	ldr	r0, [r4, #4]
 800bb1c:	f7ff ff82 	bl	800ba24 <std>
 800bb20:	68a0      	ldr	r0, [r4, #8]
 800bb22:	2201      	movs	r2, #1
 800bb24:	2109      	movs	r1, #9
 800bb26:	f7ff ff7d 	bl	800ba24 <std>
 800bb2a:	68e0      	ldr	r0, [r4, #12]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	2112      	movs	r1, #18
 800bb30:	f7ff ff78 	bl	800ba24 <std>
 800bb34:	2301      	movs	r3, #1
 800bb36:	61a3      	str	r3, [r4, #24]
 800bb38:	e7d2      	b.n	800bae0 <__sinit+0xc>
 800bb3a:	bf00      	nop
 800bb3c:	0800bf6c 	.word	0x0800bf6c
 800bb40:	0800ba6d 	.word	0x0800ba6d

0800bb44 <__sfp>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	4607      	mov	r7, r0
 800bb48:	f7ff ffac 	bl	800baa4 <__sfp_lock_acquire>
 800bb4c:	4b1e      	ldr	r3, [pc, #120]	; (800bbc8 <__sfp+0x84>)
 800bb4e:	681e      	ldr	r6, [r3, #0]
 800bb50:	69b3      	ldr	r3, [r6, #24]
 800bb52:	b913      	cbnz	r3, 800bb5a <__sfp+0x16>
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff ffbd 	bl	800bad4 <__sinit>
 800bb5a:	3648      	adds	r6, #72	; 0x48
 800bb5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	d503      	bpl.n	800bb6c <__sfp+0x28>
 800bb64:	6833      	ldr	r3, [r6, #0]
 800bb66:	b30b      	cbz	r3, 800bbac <__sfp+0x68>
 800bb68:	6836      	ldr	r6, [r6, #0]
 800bb6a:	e7f7      	b.n	800bb5c <__sfp+0x18>
 800bb6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb70:	b9d5      	cbnz	r5, 800bba8 <__sfp+0x64>
 800bb72:	4b16      	ldr	r3, [pc, #88]	; (800bbcc <__sfp+0x88>)
 800bb74:	60e3      	str	r3, [r4, #12]
 800bb76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb7a:	6665      	str	r5, [r4, #100]	; 0x64
 800bb7c:	f000 f847 	bl	800bc0e <__retarget_lock_init_recursive>
 800bb80:	f7ff ff96 	bl	800bab0 <__sfp_lock_release>
 800bb84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb8c:	6025      	str	r5, [r4, #0]
 800bb8e:	61a5      	str	r5, [r4, #24]
 800bb90:	2208      	movs	r2, #8
 800bb92:	4629      	mov	r1, r5
 800bb94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb98:	f7fc f8c6 	bl	8007d28 <memset>
 800bb9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bba4:	4620      	mov	r0, r4
 800bba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba8:	3468      	adds	r4, #104	; 0x68
 800bbaa:	e7d9      	b.n	800bb60 <__sfp+0x1c>
 800bbac:	2104      	movs	r1, #4
 800bbae:	4638      	mov	r0, r7
 800bbb0:	f7ff ff62 	bl	800ba78 <__sfmoreglue>
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	6030      	str	r0, [r6, #0]
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d1d5      	bne.n	800bb68 <__sfp+0x24>
 800bbbc:	f7ff ff78 	bl	800bab0 <__sfp_lock_release>
 800bbc0:	230c      	movs	r3, #12
 800bbc2:	603b      	str	r3, [r7, #0]
 800bbc4:	e7ee      	b.n	800bba4 <__sfp+0x60>
 800bbc6:	bf00      	nop
 800bbc8:	0800bf6c 	.word	0x0800bf6c
 800bbcc:	ffff0001 	.word	0xffff0001

0800bbd0 <_fwalk_reent>:
 800bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	4688      	mov	r8, r1
 800bbd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbdc:	2700      	movs	r7, #0
 800bbde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbe2:	f1b9 0901 	subs.w	r9, r9, #1
 800bbe6:	d505      	bpl.n	800bbf4 <_fwalk_reent+0x24>
 800bbe8:	6824      	ldr	r4, [r4, #0]
 800bbea:	2c00      	cmp	r4, #0
 800bbec:	d1f7      	bne.n	800bbde <_fwalk_reent+0xe>
 800bbee:	4638      	mov	r0, r7
 800bbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf4:	89ab      	ldrh	r3, [r5, #12]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d907      	bls.n	800bc0a <_fwalk_reent+0x3a>
 800bbfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	d003      	beq.n	800bc0a <_fwalk_reent+0x3a>
 800bc02:	4629      	mov	r1, r5
 800bc04:	4630      	mov	r0, r6
 800bc06:	47c0      	blx	r8
 800bc08:	4307      	orrs	r7, r0
 800bc0a:	3568      	adds	r5, #104	; 0x68
 800bc0c:	e7e9      	b.n	800bbe2 <_fwalk_reent+0x12>

0800bc0e <__retarget_lock_init_recursive>:
 800bc0e:	4770      	bx	lr

0800bc10 <__retarget_lock_acquire_recursive>:
 800bc10:	4770      	bx	lr

0800bc12 <__retarget_lock_release_recursive>:
 800bc12:	4770      	bx	lr

0800bc14 <__swhatbuf_r>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	460e      	mov	r6, r1
 800bc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	b096      	sub	sp, #88	; 0x58
 800bc20:	4614      	mov	r4, r2
 800bc22:	461d      	mov	r5, r3
 800bc24:	da07      	bge.n	800bc36 <__swhatbuf_r+0x22>
 800bc26:	2300      	movs	r3, #0
 800bc28:	602b      	str	r3, [r5, #0]
 800bc2a:	89b3      	ldrh	r3, [r6, #12]
 800bc2c:	061a      	lsls	r2, r3, #24
 800bc2e:	d410      	bmi.n	800bc52 <__swhatbuf_r+0x3e>
 800bc30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc34:	e00e      	b.n	800bc54 <__swhatbuf_r+0x40>
 800bc36:	466a      	mov	r2, sp
 800bc38:	f000 f902 	bl	800be40 <_fstat_r>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	dbf2      	blt.n	800bc26 <__swhatbuf_r+0x12>
 800bc40:	9a01      	ldr	r2, [sp, #4]
 800bc42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc4a:	425a      	negs	r2, r3
 800bc4c:	415a      	adcs	r2, r3
 800bc4e:	602a      	str	r2, [r5, #0]
 800bc50:	e7ee      	b.n	800bc30 <__swhatbuf_r+0x1c>
 800bc52:	2340      	movs	r3, #64	; 0x40
 800bc54:	2000      	movs	r0, #0
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	b016      	add	sp, #88	; 0x58
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}

0800bc5c <__smakebuf_r>:
 800bc5c:	898b      	ldrh	r3, [r1, #12]
 800bc5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc60:	079d      	lsls	r5, r3, #30
 800bc62:	4606      	mov	r6, r0
 800bc64:	460c      	mov	r4, r1
 800bc66:	d507      	bpl.n	800bc78 <__smakebuf_r+0x1c>
 800bc68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	6123      	str	r3, [r4, #16]
 800bc70:	2301      	movs	r3, #1
 800bc72:	6163      	str	r3, [r4, #20]
 800bc74:	b002      	add	sp, #8
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	ab01      	add	r3, sp, #4
 800bc7a:	466a      	mov	r2, sp
 800bc7c:	f7ff ffca 	bl	800bc14 <__swhatbuf_r>
 800bc80:	9900      	ldr	r1, [sp, #0]
 800bc82:	4605      	mov	r5, r0
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7ff f991 	bl	800afac <_malloc_r>
 800bc8a:	b948      	cbnz	r0, 800bca0 <__smakebuf_r+0x44>
 800bc8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc90:	059a      	lsls	r2, r3, #22
 800bc92:	d4ef      	bmi.n	800bc74 <__smakebuf_r+0x18>
 800bc94:	f023 0303 	bic.w	r3, r3, #3
 800bc98:	f043 0302 	orr.w	r3, r3, #2
 800bc9c:	81a3      	strh	r3, [r4, #12]
 800bc9e:	e7e3      	b.n	800bc68 <__smakebuf_r+0xc>
 800bca0:	4b0d      	ldr	r3, [pc, #52]	; (800bcd8 <__smakebuf_r+0x7c>)
 800bca2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	6020      	str	r0, [r4, #0]
 800bca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcac:	81a3      	strh	r3, [r4, #12]
 800bcae:	9b00      	ldr	r3, [sp, #0]
 800bcb0:	6163      	str	r3, [r4, #20]
 800bcb2:	9b01      	ldr	r3, [sp, #4]
 800bcb4:	6120      	str	r0, [r4, #16]
 800bcb6:	b15b      	cbz	r3, 800bcd0 <__smakebuf_r+0x74>
 800bcb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f000 f8d1 	bl	800be64 <_isatty_r>
 800bcc2:	b128      	cbz	r0, 800bcd0 <__smakebuf_r+0x74>
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	f023 0303 	bic.w	r3, r3, #3
 800bcca:	f043 0301 	orr.w	r3, r3, #1
 800bcce:	81a3      	strh	r3, [r4, #12]
 800bcd0:	89a0      	ldrh	r0, [r4, #12]
 800bcd2:	4305      	orrs	r5, r0
 800bcd4:	81a5      	strh	r5, [r4, #12]
 800bcd6:	e7cd      	b.n	800bc74 <__smakebuf_r+0x18>
 800bcd8:	0800ba6d 	.word	0x0800ba6d

0800bcdc <_malloc_usable_size_r>:
 800bcdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce0:	1f18      	subs	r0, r3, #4
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	bfbc      	itt	lt
 800bce6:	580b      	ldrlt	r3, [r1, r0]
 800bce8:	18c0      	addlt	r0, r0, r3
 800bcea:	4770      	bx	lr

0800bcec <_raise_r>:
 800bcec:	291f      	cmp	r1, #31
 800bcee:	b538      	push	{r3, r4, r5, lr}
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	d904      	bls.n	800bd00 <_raise_r+0x14>
 800bcf6:	2316      	movs	r3, #22
 800bcf8:	6003      	str	r3, [r0, #0]
 800bcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd02:	b112      	cbz	r2, 800bd0a <_raise_r+0x1e>
 800bd04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd08:	b94b      	cbnz	r3, 800bd1e <_raise_r+0x32>
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f000 f830 	bl	800bd70 <_getpid_r>
 800bd10:	462a      	mov	r2, r5
 800bd12:	4601      	mov	r1, r0
 800bd14:	4620      	mov	r0, r4
 800bd16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd1a:	f000 b817 	b.w	800bd4c <_kill_r>
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d00a      	beq.n	800bd38 <_raise_r+0x4c>
 800bd22:	1c59      	adds	r1, r3, #1
 800bd24:	d103      	bne.n	800bd2e <_raise_r+0x42>
 800bd26:	2316      	movs	r3, #22
 800bd28:	6003      	str	r3, [r0, #0]
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	e7e7      	b.n	800bcfe <_raise_r+0x12>
 800bd2e:	2400      	movs	r4, #0
 800bd30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd34:	4628      	mov	r0, r5
 800bd36:	4798      	blx	r3
 800bd38:	2000      	movs	r0, #0
 800bd3a:	e7e0      	b.n	800bcfe <_raise_r+0x12>

0800bd3c <raise>:
 800bd3c:	4b02      	ldr	r3, [pc, #8]	; (800bd48 <raise+0xc>)
 800bd3e:	4601      	mov	r1, r0
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	f7ff bfd3 	b.w	800bcec <_raise_r>
 800bd46:	bf00      	nop
 800bd48:	2000010c 	.word	0x2000010c

0800bd4c <_kill_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d07      	ldr	r5, [pc, #28]	; (800bd6c <_kill_r+0x20>)
 800bd50:	2300      	movs	r3, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	4611      	mov	r1, r2
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	f7f5 fc39 	bl	80015d0 <_kill>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	d102      	bne.n	800bd68 <_kill_r+0x1c>
 800bd62:	682b      	ldr	r3, [r5, #0]
 800bd64:	b103      	cbz	r3, 800bd68 <_kill_r+0x1c>
 800bd66:	6023      	str	r3, [r4, #0]
 800bd68:	bd38      	pop	{r3, r4, r5, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20000b50 	.word	0x20000b50

0800bd70 <_getpid_r>:
 800bd70:	f7f5 bc26 	b.w	80015c0 <_getpid>

0800bd74 <__sread>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	460c      	mov	r4, r1
 800bd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd7c:	f000 f894 	bl	800bea8 <_read_r>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	bfab      	itete	ge
 800bd84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd86:	89a3      	ldrhlt	r3, [r4, #12]
 800bd88:	181b      	addge	r3, r3, r0
 800bd8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd8e:	bfac      	ite	ge
 800bd90:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd92:	81a3      	strhlt	r3, [r4, #12]
 800bd94:	bd10      	pop	{r4, pc}

0800bd96 <__swrite>:
 800bd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9a:	461f      	mov	r7, r3
 800bd9c:	898b      	ldrh	r3, [r1, #12]
 800bd9e:	05db      	lsls	r3, r3, #23
 800bda0:	4605      	mov	r5, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	4616      	mov	r6, r2
 800bda6:	d505      	bpl.n	800bdb4 <__swrite+0x1e>
 800bda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdac:	2302      	movs	r3, #2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f000 f868 	bl	800be84 <_lseek_r>
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdbe:	81a3      	strh	r3, [r4, #12]
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdca:	f000 b817 	b.w	800bdfc <_write_r>

0800bdce <__sseek>:
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd6:	f000 f855 	bl	800be84 <_lseek_r>
 800bdda:	1c43      	adds	r3, r0, #1
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	bf15      	itete	ne
 800bde0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bde2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bde6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdea:	81a3      	strheq	r3, [r4, #12]
 800bdec:	bf18      	it	ne
 800bdee:	81a3      	strhne	r3, [r4, #12]
 800bdf0:	bd10      	pop	{r4, pc}

0800bdf2 <__sclose>:
 800bdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf6:	f000 b813 	b.w	800be20 <_close_r>
	...

0800bdfc <_write_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	; (800be1c <_write_r+0x20>)
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	2200      	movs	r2, #0
 800be08:	602a      	str	r2, [r5, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	f7f5 fc17 	bl	800163e <_write>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_write_r+0x1e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_write_r+0x1e>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	20000b50 	.word	0x20000b50

0800be20 <_close_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d06      	ldr	r5, [pc, #24]	; (800be3c <_close_r+0x1c>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	f7f5 fc23 	bl	8001676 <_close>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_close_r+0x1a>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_close_r+0x1a>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	20000b50 	.word	0x20000b50

0800be40 <_fstat_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d07      	ldr	r5, [pc, #28]	; (800be60 <_fstat_r+0x20>)
 800be44:	2300      	movs	r3, #0
 800be46:	4604      	mov	r4, r0
 800be48:	4608      	mov	r0, r1
 800be4a:	4611      	mov	r1, r2
 800be4c:	602b      	str	r3, [r5, #0]
 800be4e:	f7f5 fc1e 	bl	800168e <_fstat>
 800be52:	1c43      	adds	r3, r0, #1
 800be54:	d102      	bne.n	800be5c <_fstat_r+0x1c>
 800be56:	682b      	ldr	r3, [r5, #0]
 800be58:	b103      	cbz	r3, 800be5c <_fstat_r+0x1c>
 800be5a:	6023      	str	r3, [r4, #0]
 800be5c:	bd38      	pop	{r3, r4, r5, pc}
 800be5e:	bf00      	nop
 800be60:	20000b50 	.word	0x20000b50

0800be64 <_isatty_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4d06      	ldr	r5, [pc, #24]	; (800be80 <_isatty_r+0x1c>)
 800be68:	2300      	movs	r3, #0
 800be6a:	4604      	mov	r4, r0
 800be6c:	4608      	mov	r0, r1
 800be6e:	602b      	str	r3, [r5, #0]
 800be70:	f7f5 fc1d 	bl	80016ae <_isatty>
 800be74:	1c43      	adds	r3, r0, #1
 800be76:	d102      	bne.n	800be7e <_isatty_r+0x1a>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	b103      	cbz	r3, 800be7e <_isatty_r+0x1a>
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	20000b50 	.word	0x20000b50

0800be84 <_lseek_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d07      	ldr	r5, [pc, #28]	; (800bea4 <_lseek_r+0x20>)
 800be88:	4604      	mov	r4, r0
 800be8a:	4608      	mov	r0, r1
 800be8c:	4611      	mov	r1, r2
 800be8e:	2200      	movs	r2, #0
 800be90:	602a      	str	r2, [r5, #0]
 800be92:	461a      	mov	r2, r3
 800be94:	f7f5 fc16 	bl	80016c4 <_lseek>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_lseek_r+0x1e>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_lseek_r+0x1e>
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	20000b50 	.word	0x20000b50

0800bea8 <_read_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4d07      	ldr	r5, [pc, #28]	; (800bec8 <_read_r+0x20>)
 800beac:	4604      	mov	r4, r0
 800beae:	4608      	mov	r0, r1
 800beb0:	4611      	mov	r1, r2
 800beb2:	2200      	movs	r2, #0
 800beb4:	602a      	str	r2, [r5, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	f7f5 fba4 	bl	8001604 <_read>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d102      	bne.n	800bec6 <_read_r+0x1e>
 800bec0:	682b      	ldr	r3, [r5, #0]
 800bec2:	b103      	cbz	r3, 800bec6 <_read_r+0x1e>
 800bec4:	6023      	str	r3, [r4, #0]
 800bec6:	bd38      	pop	{r3, r4, r5, pc}
 800bec8:	20000b50 	.word	0x20000b50

0800becc <_init>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	bf00      	nop
 800bed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bed2:	bc08      	pop	{r3}
 800bed4:	469e      	mov	lr, r3
 800bed6:	4770      	bx	lr

0800bed8 <_fini>:
 800bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beda:	bf00      	nop
 800bedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bede:	bc08      	pop	{r3}
 800bee0:	469e      	mov	lr, r3
 800bee2:	4770      	bx	lr
