
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08009578  08009578  00019578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f4  080099f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099fc  080099fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001e0  08009be4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08009be4  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cb2  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e9  00000000  00000000  00039ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab3e  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018387  00000000  00000000  0006a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010160e  00000000  00000000  0008266d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00183c7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  00183d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08009560 	.word	0x08009560

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08009560 	.word	0x08009560

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b6e      	ldr	r3, [pc, #440]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a6d      	ldr	r2, [pc, #436]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b6b      	ldr	r3, [pc, #428]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	61bb      	str	r3, [r7, #24]
 80009fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a67      	ldr	r2, [pc, #412]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b62      	ldr	r3, [pc, #392]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a61      	ldr	r2, [pc, #388]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a5b      	ldr	r2, [pc, #364]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b59      	ldr	r3, [pc, #356]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a55      	ldr	r2, [pc, #340]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a76:	4b4a      	ldr	r3, [pc, #296]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a49      	ldr	r2, [pc, #292]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a94:	4843      	ldr	r0, [pc, #268]	; (8000ba4 <MX_GPIO_Init+0x1d4>)
 8000a96:	f001 fb3d 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4842      	ldr	r0, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000aa0:	f001 fb38 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	483c      	ldr	r0, [pc, #240]	; (8000bac <MX_GPIO_Init+0x1dc>)
 8000abc:	f001 f97e 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac0:	2332      	movs	r3, #50	; 0x32
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4834      	ldr	r0, [pc, #208]	; (8000bac <MX_GPIO_Init+0x1dc>)
 8000adc:	f001 f96e 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae0:	2386      	movs	r3, #134	; 0x86
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	482d      	ldr	r0, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0x1e0>)
 8000afc:	f001 f95e 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b00:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4822      	ldr	r0, [pc, #136]	; (8000ba4 <MX_GPIO_Init+0x1d4>)
 8000b1a:	f001 f94f 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <MX_GPIO_Init+0x1d4>)
 8000b3c:	f001 f93e 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000b58:	f001 f930 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000b70:	f001 f924 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000b92:	f001 f913 	bl	8001dbc <HAL_GPIO_Init>

}
 8000b96:	bf00      	nop
 8000b98:	3730      	adds	r7, #48	; 0x30
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40021800 	.word	0x40021800
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <SpeedCalculation>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SpeedCalculation(int16_t count){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	speed = (float)((count * TIMER_FREQENCY * MINUTE_IN_SECOND)/
 8000bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bd6:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000bf8 <SpeedCalculation+0x40>
 8000bda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <SpeedCalculation+0x48>)
 8000be4:	edc3 7a00 	vstr	s15, [r3]
			(ENCODER_RESOLUTION*TIMER_CONF_BOTH_EDGE_T1T2));
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	cccccccd 	.word	0xcccccccd
 8000bfc:	408c0ccc 	.word	0x408c0ccc
 8000c00:	20000210 	.word	0x20000210

08000c04 <SetDutyPID>:

void SetDutyPID(arm_pid_instance_f32* pid, float32_t y_ref, float32_t y){
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c10:	edc7 0a01 	vstr	s1, [r7, #4]

	PID_Error = y_ref - y; //Error calc
 8000c14:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <SetDutyPID+0x118>)
 8000c22:	edc3 7a00 	vstr	s15, [r3]
	PID_Output = arm_pid_f32(pid, PID_Error); // Output PID signal
 8000c26:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <SetDutyPID+0x118>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	61fa      	str	r2, [r7, #28]
 8000c2e:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	ed93 7a00 	vldr	s14, [r3]
 8000c36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	edd3 6a01 	vldr	s13, [r3, #4]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	edd3 6a02 	vldr	s13, [r3, #8]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c70:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <SetDutyPID+0x11c>)
 8000c8c:	6013      	str	r3, [r2, #0]
//	}
//	else if (PID_Duty < 0){
//		PID_Duty = 0;
//	}

	if(PID_Output > 0){
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <SetDutyPID+0x11c>)
 8000c90:	edd3 7a00 	vldr	s15, [r3]
 8000c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9c:	dd1c      	ble.n	8000cd8 <SetDutyPID+0xd4>
		duty_A = (uint16_t)(abs(PID_Output));
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <SetDutyPID+0x11c>)
 8000ca0:	edd3 7a00 	vldr	s15, [r3]
 8000ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca8:	ee17 3a90 	vmov	r3, s15
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bfb8      	it	lt
 8000cb0:	425b      	neglt	r3, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <SetDutyPID+0x120>)
 8000cb6:	801a      	strh	r2, [r3, #0]
		duty_B = 0;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <SetDutyPID+0x124>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <SetDutyPID+0x120>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <SetDutyPID+0x128>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <SetDutyPID+0x124>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <SetDutyPID+0x128>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
	}


}
 8000cd6:	e01b      	b.n	8000d10 <SetDutyPID+0x10c>
		duty_A = 0;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <SetDutyPID+0x120>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	801a      	strh	r2, [r3, #0]
		duty_B = (uint16_t)(abs(PID_Output));;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <SetDutyPID+0x11c>)
 8000ce0:	edd3 7a00 	vldr	s15, [r3]
 8000ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce8:	ee17 3a90 	vmov	r3, s15
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bfb8      	it	lt
 8000cf0:	425b      	neglt	r3, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <SetDutyPID+0x124>)
 8000cf6:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <SetDutyPID+0x120>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <SetDutyPID+0x128>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <SetDutyPID+0x124>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <SetDutyPID+0x128>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d10:	bf00      	nop
 8000d12:	3724      	adds	r7, #36	; 0x24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	2000021c 	.word	0x2000021c
 8000d20:	20000218 	.word	0x20000218
 8000d24:	200001fc 	.word	0x200001fc
 8000d28:	200001fe 	.word	0x200001fe
 8000d2c:	20000254 	.word	0x20000254

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PID.Kp = PID_KP;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <main+0x84>)
 8000d36:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <main+0x88>)
 8000d38:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_KI;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <main+0x84>)
 8000d3c:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <main+0x8c>)
 8000d3e:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_KD;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <main+0x84>)
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]

	arm_pid_init_f32(&PID, 1);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	481a      	ldr	r0, [pc, #104]	; (8000db4 <main+0x84>)
 8000d4c:	f005 fd70 	bl	8006830 <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f000 fe0f 	bl	8001972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f842 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f7ff fe3a 	bl	80009d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d5c:	f000 fcda 	bl	8001714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d60:	f000 fd54 	bl	800180c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000d64:	f000 fb40 	bl	80013e8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000d68:	f000 fae4 	bl	8001334 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000d6c:	f000 fbbe 	bl	80014ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // PWM CONFIG // CounterPeriod = 100
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d70:	2100      	movs	r1, #0
 8000d72:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <main+0x90>)
 8000d74:	f002 fd9a 	bl	80038ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <main+0x90>)
 8000d7c:	f002 fd96 	bl	80038ac <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <main+0x94>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <main+0x90>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <main+0x98>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <main+0x90>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	639a      	str	r2, [r3, #56]	; 0x38

  // UART CONFIG
  HAL_UART_Receive_IT(&huart3, &user_val, 4);
 8000d98:	2204      	movs	r2, #4
 8000d9a:	490c      	ldr	r1, [pc, #48]	; (8000dcc <main+0x9c>)
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <main+0xa0>)
 8000d9e:	f004 f824 	bl	8004dea <HAL_UART_Receive_IT>

  // ENCODER CONFIG
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000da2:	213c      	movs	r1, #60	; 0x3c
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <main+0xa4>)
 8000da6:	f002 ff21 	bl	8003bec <HAL_TIM_Encoder_Start>

  // MAIN TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim6);
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <main+0xa8>)
 8000dac:	f002 fca4 	bl	80036f8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <main+0x80>
 8000db2:	bf00      	nop
 8000db4:	2000022c 	.word	0x2000022c
 8000db8:	3e4ccccd 	.word	0x3e4ccccd
 8000dbc:	3e99999a 	.word	0x3e99999a
 8000dc0:	20000254 	.word	0x20000254
 8000dc4:	200001fc 	.word	0x200001fc
 8000dc8:	200001fe 	.word	0x200001fe
 8000dcc:	20000250 	.word	0x20000250
 8000dd0:	20000338 	.word	0x20000338
 8000dd4:	200002ec 	.word	0x200002ec
 8000dd8:	200002a0 	.word	0x200002a0

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0b8      	sub	sp, #224	; 0xe0
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000de6:	2234      	movs	r2, #52	; 0x34
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 fd6c 	bl	80068c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	2290      	movs	r2, #144	; 0x90
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f005 fd5d 	bl	80068c8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e0e:	f001 fae3 	bl	80023d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <SystemClock_Config+0x128>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a3b      	ldr	r2, [pc, #236]	; (8000f04 <SystemClock_Config+0x128>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <SystemClock_Config+0x128>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e2a:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <SystemClock_Config+0x12c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e32:	4a35      	ldr	r2, [pc, #212]	; (8000f08 <SystemClock_Config+0x12c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <SystemClock_Config+0x12c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e62:	2304      	movs	r3, #4
 8000e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fb07 	bl	8002498 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000e90:	f000 f906 	bl	80010a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e94:	f001 fab0 	bl	80023f8 <HAL_PWREx_EnableOverDrive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e9e:	f000 f8ff 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ec2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fd93 	bl	80029f4 <HAL_RCC_ClockConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000ed4:	f000 f8e4 	bl	80010a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <SystemClock_Config+0x130>)
 8000eda:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 ff84 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000ef6:	f000 f8d3 	bl	80010a0 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	37e0      	adds	r7, #224	; 0xe0
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	00200100 	.word	0x00200100

08000f10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// UART CONFIG // Przerobic na predkosc // TODO
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <HAL_UART_RxCpltCallback+0xec>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d15d      	bne.n	8000fdc <HAL_UART_RxCpltCallback+0xcc>
		user_speed = (float32_t)(atof(user_val));
 8000f20:	4837      	ldr	r0, [pc, #220]	; (8001000 <HAL_UART_RxCpltCallback+0xf0>)
 8000f22:	f005 fca3 	bl	800686c <atof>
 8000f26:	eeb0 7b40 	vmov.f64	d7, d0
 8000f2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f2e:	4b35      	ldr	r3, [pc, #212]	; (8001004 <HAL_UART_RxCpltCallback+0xf4>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
		if(user_speed >= 35 && user_speed <= 270){
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <HAL_UART_RxCpltCallback+0xf4>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001008 <HAL_UART_RxCpltCallback+0xf8>
 8000f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	db3f      	blt.n	8000fc8 <HAL_UART_RxCpltCallback+0xb8>
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <HAL_UART_RxCpltCallback+0xf4>)
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800100c <HAL_UART_RxCpltCallback+0xfc>
 8000f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	d835      	bhi.n	8000fc8 <HAL_UART_RxCpltCallback+0xb8>
			flag = 1;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <HAL_UART_RxCpltCallback+0x100>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]

			if(user_val[3] == 'R' && flag == 1){
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_UART_RxCpltCallback+0xf0>)
 8000f64:	78db      	ldrb	r3, [r3, #3]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b52      	cmp	r3, #82	; 0x52
 8000f6a:	d10c      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x76>
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_UART_RxCpltCallback+0x100>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <HAL_UART_RxCpltCallback+0x76>
				dir = 1;
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_UART_RxCpltCallback+0x104>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
				reference_speed = user_speed;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_UART_RxCpltCallback+0xf4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a25      	ldr	r2, [pc, #148]	; (8001018 <HAL_UART_RxCpltCallback+0x108>)
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e01f      	b.n	8000fc6 <HAL_UART_RxCpltCallback+0xb6>
			}
			else if(user_val[3] == 'L' && flag == 1){
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_UART_RxCpltCallback+0xf0>)
 8000f88:	78db      	ldrb	r3, [r3, #3]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b4c      	cmp	r3, #76	; 0x4c
 8000f8e:	d110      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0xa2>
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_UART_RxCpltCallback+0x100>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10b      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0xa2>
				dir = 2;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_UART_RxCpltCallback+0x104>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	701a      	strb	r2, [r3, #0]
				reference_speed = -(user_speed);
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_UART_RxCpltCallback+0xf4>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	eef1 7a67 	vneg.f32	s15, s15
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_UART_RxCpltCallback+0x108>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
 8000fb0:	e009      	b.n	8000fc6 <HAL_UART_RxCpltCallback+0xb6>
			}
			else{
				flag = 0;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_UART_RxCpltCallback+0x100>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, &error_1, strlen(error_1), 100);
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	220c      	movs	r2, #12
 8000fbc:	4917      	ldr	r1, [pc, #92]	; (800101c <HAL_UART_RxCpltCallback+0x10c>)
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <HAL_UART_RxCpltCallback+0xec>)
 8000fc0:	f003 fe80 	bl	8004cc4 <HAL_UART_Transmit>
			if(user_val[3] == 'R' && flag == 1){
 8000fc4:	e010      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0xd8>
 8000fc6:	e00f      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0xd8>
			}
		}

		else{
			flag = 0;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_UART_RxCpltCallback+0x100>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &error_2, strlen(error_2), 100);
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	220e      	movs	r2, #14
 8000fd2:	4913      	ldr	r1, [pc, #76]	; (8001020 <HAL_UART_RxCpltCallback+0x110>)
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_UART_RxCpltCallback+0xec>)
 8000fd6:	f003 fe75 	bl	8004cc4 <HAL_UART_Transmit>
 8000fda:	e005      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	else{
		HAL_UART_Transmit(&huart3, &error_3, strlen(error_3), 100);
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	220c      	movs	r2, #12
 8000fe0:	4910      	ldr	r1, [pc, #64]	; (8001024 <HAL_UART_RxCpltCallback+0x114>)
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <HAL_UART_RxCpltCallback+0xec>)
 8000fe4:	f003 fe6e 	bl	8004cc4 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(&huart3, &user_val, 4);
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4905      	ldr	r1, [pc, #20]	; (8001000 <HAL_UART_RxCpltCallback+0xf0>)
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <HAL_UART_RxCpltCallback+0xec>)
 8000fee:	f003 fefc 	bl	8004dea <HAL_UART_Receive_IT>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000338 	.word	0x20000338
 8001000:	20000250 	.word	0x20000250
 8001004:	20000200 	.word	0x20000200
 8001008:	420c0000 	.word	0x420c0000
 800100c:	43870000 	.word	0x43870000
 8001010:	20000204 	.word	0x20000204
 8001014:	20000205 	.word	0x20000205
 8001018:	20000214 	.word	0x20000214
 800101c:	08009578 	.word	0x08009578
 8001020:	08009588 	.word	0x08009588
 8001024:	08009598 	.word	0x08009598

08001028 <HAL_TIM_PeriodElapsedCallback>:

// MAIN TIMER CONFIG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a13      	ldr	r2, [pc, #76]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d120      	bne.n	800107c <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		// SPEED CALCULATION
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001042:	6013      	str	r3, [r2, #0]
		count = (int16_t)counter;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800104c:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
		SpeedCalculation(count);
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fdab 	bl	8000bb8 <SpeedCalculation>

		// SPEED REGULATION
		SetDutyPID(&PID, reference_speed, speed);
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	eef0 0a47 	vmov.f32	s1, s14
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001078:	f7ff fdc4 	bl	8000c04 <SetDutyPID>
	}
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40001000 	.word	0x40001000
 8001088:	200002ec 	.word	0x200002ec
 800108c:	20000208 	.word	0x20000208
 8001090:	2000020c 	.word	0x2000020c
 8001094:	20000214 	.word	0x20000214
 8001098:	20000210 	.word	0x20000210
 800109c:	2000022c 	.word	0x2000022c

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_MspInit+0x44>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_MspInit+0x44>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_MspInit+0x44>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_MspInit+0x44>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_MspInit+0x44>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_MspInit+0x44>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 fc54 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM3_IRQHandler+0x10>)
 800114e:	f002 fddb 	bl	8003d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000254 	.word	0x20000254

0800115c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <USART3_IRQHandler+0x10>)
 8001162:	f003 fe91 	bl	8004e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000338 	.word	0x20000338

08001170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM6_DAC_IRQHandler+0x10>)
 8001176:	f002 fdc7 	bl	8003d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002a0 	.word	0x200002a0

08001184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	return 1;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_kill>:

int _kill(int pid, int sig)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800119e:	f005 fb69 	bl	8006874 <__errno>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2216      	movs	r2, #22
 80011a6:	601a      	str	r2, [r3, #0]
	return -1;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_exit>:

void _exit (int status)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffe7 	bl	8001194 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011c6:	e7fe      	b.n	80011c6 <_exit+0x12>

080011c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e00a      	b.n	80011f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011da:	f3af 8000 	nop.w
 80011de:	4601      	mov	r1, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	b2ca      	uxtb	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf0      	blt.n	80011da <_read+0x12>
	}

return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e009      	b.n	8001228 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf1      	blt.n	8001214 <_write+0x12>
	}
	return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_close>:

int _close(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	605a      	str	r2, [r3, #4]
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_isatty>:

int _isatty(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
	return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f005 face 	bl	8006874 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20080000 	.word	0x20080000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000220 	.word	0x20000220
 800130c:	200007d8 	.word	0x200007d8

08001310 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2224      	movs	r2, #36	; 0x24
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fac0 	bl	80068c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <MX_TIM1_Init+0xac>)
 8001354:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <MX_TIM1_Init+0xb0>)
 8001356:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_TIM1_Init+0xac>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <MX_TIM1_Init+0xac>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_TIM1_Init+0xac>)
 8001366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_TIM1_Init+0xac>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_TIM1_Init+0xac>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_TIM1_Init+0xac>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800137e:	2303      	movs	r3, #3
 8001380:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800138e:	230f      	movs	r3, #15
 8001390:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800139e:	230f      	movs	r3, #15
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM1_Init+0xac>)
 80013aa:	f002 fb79 	bl	8003aa0 <HAL_TIM_Encoder_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80013b4:	f7ff fe74 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_TIM1_Init+0xac>)
 80013ca:	f003 fb81 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013d4:	f7ff fe64 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3730      	adds	r7, #48	; 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200002ec 	.word	0x200002ec
 80013e4:	40010000 	.word	0x40010000

080013e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <MX_TIM3_Init+0xfc>)
 800141c:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <MX_TIM3_Init+0x100>)
 800141e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <MX_TIM3_Init+0xfc>)
 8001422:	222f      	movs	r2, #47	; 0x2f
 8001424:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <MX_TIM3_Init+0xfc>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <MX_TIM3_Init+0xfc>)
 800142e:	2263      	movs	r2, #99	; 0x63
 8001430:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <MX_TIM3_Init+0xfc>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <MX_TIM3_Init+0xfc>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800143e:	4829      	ldr	r0, [pc, #164]	; (80014e4 <MX_TIM3_Init+0xfc>)
 8001440:	f002 f902 	bl	8003648 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800144a:	f7ff fe29 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001458:	4619      	mov	r1, r3
 800145a:	4822      	ldr	r0, [pc, #136]	; (80014e4 <MX_TIM3_Init+0xfc>)
 800145c:	f002 fe88 	bl	8004170 <HAL_TIM_ConfigClockSource>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001466:	f7ff fe1b 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <MX_TIM3_Init+0xfc>)
 800146c:	f002 f9bc 	bl	80037e8 <HAL_TIM_PWM_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001476:	f7ff fe13 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MX_TIM3_Init+0xfc>)
 800148a:	f003 fb21 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001494:	f7ff fe04 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_TIM3_Init+0xfc>)
 80014b0:	f002 fd4a 	bl	8003f48 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014ba:	f7ff fdf1 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	2204      	movs	r2, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_TIM3_Init+0xfc>)
 80014c6:	f002 fd3f 	bl	8003f48 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014d0:	f7ff fde6 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_TIM3_Init+0xfc>)
 80014d6:	f000 f8c7 	bl	8001668 <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3738      	adds	r7, #56	; 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000254 	.word	0x20000254
 80014e8:	40000400 	.word	0x40000400

080014ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_TIM6_Init+0x68>)
 80014fe:	4a16      	ldr	r2, [pc, #88]	; (8001558 <MX_TIM6_Init+0x6c>)
 8001500:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_TIM6_Init+0x68>)
 8001504:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001508:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_TIM6_Init+0x68>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_TIM6_Init+0x68>)
 8001512:	f242 720f 	movw	r2, #9999	; 0x270f
 8001516:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_TIM6_Init+0x68>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_TIM6_Init+0x68>)
 8001520:	f002 f892 	bl	8003648 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800152a:	f7ff fdb9 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_TIM6_Init+0x68>)
 800153c:	f003 fac8 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001546:	f7ff fdab 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002a0 	.word	0x200002a0
 8001558:	40001000 	.word	0x40001000

0800155c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d128      	bne.n	80015d0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_TIM_Encoder_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80015ae:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_TIM_Encoder_MspInit+0x84>)
 80015cc:	f000 fbf6 	bl	8001dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d114      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_TIM_Base_MspInit+0x7c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_TIM_Base_MspInit+0x7c>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_TIM_Base_MspInit+0x7c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	201d      	movs	r0, #29
 8001614:	f000 fb09 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001618:	201d      	movs	r0, #29
 800161a:	f000 fb22 	bl	8001c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800161e:	e018      	b.n	8001652 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_TIM_Base_MspInit+0x80>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d113      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_TIM_Base_MspInit+0x7c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <HAL_TIM_Base_MspInit+0x7c>)
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_TIM_Base_MspInit+0x7c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2036      	movs	r0, #54	; 0x36
 8001648:	f000 faef 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800164c:	2036      	movs	r0, #54	; 0x36
 800164e:	f000 fb08 	bl	8001c62 <HAL_NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40000400 	.word	0x40000400
 8001660:	40023800 	.word	0x40023800
 8001664:	40001000 	.word	0x40001000

08001668 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_TIM_MspPostInit+0x9c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d137      	bne.n	80016fa <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a18      	ldr	r2, [pc, #96]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ca:	2302      	movs	r3, #2
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 80016d6:	f000 fb71 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ea:	2302      	movs	r3, #2
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4806      	ldr	r0, [pc, #24]	; (8001710 <HAL_TIM_MspPostInit+0xa8>)
 80016f6:	f000 fb61 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40000400 	.word	0x40000400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020800 	.word	0x40020800

08001714 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_USART3_UART_Init+0x58>)
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <MX_USART3_UART_Init+0x5c>)
 800171c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_USART3_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_USART3_UART_Init+0x58>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_USART3_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_USART3_UART_Init+0x58>)
 8001758:	f003 fa66 	bl	8004c28 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001762:	f7ff fc9d 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000338 	.word	0x20000338
 8001770:	40004800 	.word	0x40004800

08001774 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_UART_MspInit+0x8c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d130      	bne.n	80017f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_UART_MspInit+0x90>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a1a      	ldr	r2, [pc, #104]	; (8001804 <HAL_UART_MspInit+0x90>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_UART_MspInit+0x90>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_UART_MspInit+0x90>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a14      	ldr	r2, [pc, #80]	; (8001804 <HAL_UART_MspInit+0x90>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_UART_MspInit+0x90>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d8:	2307      	movs	r3, #7
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <HAL_UART_MspInit+0x94>)
 80017e4:	f000 faea 	bl	8001dbc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2027      	movs	r0, #39	; 0x27
 80017ee:	f000 fa1c 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017f2:	2027      	movs	r0, #39	; 0x27
 80017f4:	f000 fa35 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004800 	.word	0x40004800
 8001804:	40023800 	.word	0x40023800
 8001808:	40020c00 	.word	0x40020c00

0800180c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001816:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181a:	2206      	movs	r2, #6
 800181c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001820:	2202      	movs	r2, #2
 8001822:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182c:	2202      	movs	r2, #2
 800182e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001832:	2201      	movs	r2, #1
 8001834:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001844:	2201      	movs	r2, #1
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001850:	f000 fc79 	bl	8002146 <HAL_PCD_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800185a:	f7ff fc21 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200003bc 	.word	0x200003bc

08001868 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001888:	d141      	bne.n	800190e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018b4:	230a      	movs	r3, #10
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_PCD_MspInit+0xb4>)
 80018c0:	f000 fa7c 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4810      	ldr	r0, [pc, #64]	; (800191c <HAL_PCD_MspInit+0xb4>)
 80018da:	f000 fa6f 	bl	8001dbc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e8:	6353      	str	r3, [r2, #52]	; 0x34
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_PCD_MspInit+0xb0>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001926:	490e      	ldr	r1, [pc, #56]	; (8001960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001928:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800193c:	4c0b      	ldr	r4, [pc, #44]	; (800196c <LoopFillZerobss+0x26>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800194a:	f7ff fce1 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f004 ff97 	bl	8006880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff f9ed 	bl	8000d30 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001964:	08009a04 	.word	0x08009a04
  ldr r2, =_sbss
 8001968:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800196c:	200007d4 	.word	0x200007d4

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>

08001972 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001976:	2003      	movs	r0, #3
 8001978:	f000 f94c 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197c:	2000      	movs	r0, #0
 800197e:	f000 f805 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001982:	f7ff fb93 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f967 	bl	8001c7e <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 f92f 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000008 	.word	0x20000008
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	200007c0 	.word	0x200007c0

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	200007c0 	.word	0x200007c0

08001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff ffee 	bl	8001a14 <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d005      	beq.n	8001a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_Delay+0x44>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a52:	bf00      	nop
 8001a54:	f7ff ffde 	bl	8001a14 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f7      	bhi.n	8001a54 <HAL_Delay+0x28>
  {
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60d3      	str	r3, [r2, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00
 8001ab8:	05fa0000 	.word	0x05fa0000

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff29 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff3e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff31 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff feb6 	bl	8001a14 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d008      	beq.n	8001cc8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e052      	b.n	8001d6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0216 	bic.w	r2, r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <HAL_DMA_Abort+0x62>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0208 	bic.w	r2, r2, #8
 8001d06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d18:	e013      	b.n	8001d42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1a:	f7ff fe7b 	bl	8001a14 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d90c      	bls.n	8001d42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2203      	movs	r2, #3
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e015      	b.n	8001d6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e4      	bne.n	8001d1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	223f      	movs	r2, #63	; 0x3f
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d004      	beq.n	8001d94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e00c      	b.n	8001dae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2205      	movs	r2, #5
 8001d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e175      	b.n	80020c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8164 	bne.w	80020c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d005      	beq.n	8001e12 <HAL_GPIO_Init+0x56>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d130      	bne.n	8001e74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0201 	and.w	r2, r3, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d017      	beq.n	8001eb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d123      	bne.n	8001f04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0203 	and.w	r2, r3, #3
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80be 	beq.w	80020c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_GPIO_Init+0x324>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_GPIO_Init+0x324>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_GPIO_Init+0x324>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f5e:	4a61      	ldr	r2, [pc, #388]	; (80020e4 <HAL_GPIO_Init+0x328>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_GPIO_Init+0x32c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d037      	beq.n	8001ffa <HAL_GPIO_Init+0x23e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_GPIO_Init+0x330>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_GPIO_Init+0x23a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a56      	ldr	r2, [pc, #344]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02b      	beq.n	8001ff2 <HAL_GPIO_Init+0x236>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a55      	ldr	r2, [pc, #340]	; (80020f4 <HAL_GPIO_Init+0x338>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d025      	beq.n	8001fee <HAL_GPIO_Init+0x232>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a54      	ldr	r2, [pc, #336]	; (80020f8 <HAL_GPIO_Init+0x33c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <HAL_GPIO_Init+0x22e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a53      	ldr	r2, [pc, #332]	; (80020fc <HAL_GPIO_Init+0x340>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x22a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_GPIO_Init+0x344>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a51      	ldr	r2, [pc, #324]	; (8002104 <HAL_GPIO_Init+0x348>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x222>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a50      	ldr	r2, [pc, #320]	; (8002108 <HAL_GPIO_Init+0x34c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x21e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4f      	ldr	r2, [pc, #316]	; (800210c <HAL_GPIO_Init+0x350>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x21a>
 8001fd2:	2309      	movs	r3, #9
 8001fd4:	e012      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	e010      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001fda:	2308      	movs	r3, #8
 8001fdc:	e00e      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001fde:	2307      	movs	r3, #7
 8001fe0:	e00c      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	e00a      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	e008      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001fea:	2304      	movs	r3, #4
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e004      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x240>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f002 0203 	and.w	r2, r2, #3
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	4093      	lsls	r3, r2
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800200c:	4935      	ldr	r1, [pc, #212]	; (80020e4 <HAL_GPIO_Init+0x328>)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201a:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_GPIO_Init+0x354>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_GPIO_Init+0x354>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_GPIO_Init+0x354>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <HAL_GPIO_Init+0x354>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800206e:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_GPIO_Init+0x354>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002092:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <HAL_GPIO_Init+0x354>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_GPIO_Init+0x354>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_GPIO_Init+0x354>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3301      	adds	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	f67f ae86 	bls.w	8001ddc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020400 	.word	0x40020400
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40021400 	.word	0x40021400
 8002100:	40021800 	.word	0x40021800
 8002104:	40021c00 	.word	0x40021c00
 8002108:	40022000 	.word	0x40022000
 800210c:	40022400 	.word	0x40022400
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002148:	b08f      	sub	sp, #60	; 0x3c
 800214a:	af0a      	add	r7, sp, #40	; 0x28
 800214c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e116      	b.n	8002386 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fb78 	bl	8001868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2203      	movs	r2, #3
 800217c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f8b4 	bl	8006304 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	687e      	ldr	r6, [r7, #4]
 80021a4:	466d      	mov	r5, sp
 80021a6:	f106 0410 	add.w	r4, r6, #16
 80021aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ba:	1d33      	adds	r3, r6, #4
 80021bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021be:	6838      	ldr	r0, [r7, #0]
 80021c0:	f004 f848 	bl	8006254 <USB_CoreInit>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0d7      	b.n	8002386 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 f8a2 	bl	8006326 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	e04a      	b.n	800227e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	333d      	adds	r3, #61	; 0x3d
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	333c      	adds	r3, #60	; 0x3c
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	b298      	uxth	r0, r3
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3342      	adds	r3, #66	; 0x42
 8002224:	4602      	mov	r2, r0
 8002226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	333f      	adds	r3, #63	; 0x3f
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3344      	adds	r3, #68	; 0x44
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3348      	adds	r3, #72	; 0x48
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3350      	adds	r3, #80	; 0x50
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	3301      	adds	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3af      	bcc.n	80021e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e044      	b.n	8002318 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	3301      	adds	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d3b5      	bcc.n	800228e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	687e      	ldr	r6, [r7, #4]
 800232a:	466d      	mov	r5, sp
 800232c:	f106 0410 	add.w	r4, r6, #16
 8002330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800233c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002340:	1d33      	adds	r3, r6, #4
 8002342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002344:	6838      	ldr	r0, [r7, #0]
 8002346:	f004 f83b 	bl	80063c0 <USB_DevInit>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e014      	b.n	8002386 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	d102      	bne.n	800237a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f80b 	bl	8002390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f004 f9f5 	bl	800676e <USB_DevDisconnect>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	10000003 	.word	0x10000003

080023d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40007000 	.word	0x40007000

080023f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_PWREx_EnableOverDrive+0x98>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_PWREx_EnableOverDrive+0x98>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_PWREx_EnableOverDrive+0x98>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_PWREx_EnableOverDrive+0x9c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002426:	f7ff faf5 	bl	8001a14 <HAL_GetTick>
 800242a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800242c:	e009      	b.n	8002442 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800242e:	f7ff faf1 	bl	8001a14 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800243c:	d901      	bls.n	8002442 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e022      	b.n	8002488 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244e:	d1ee      	bne.n	800242e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800245c:	f7ff fada 	bl	8001a14 <HAL_GetTick>
 8002460:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002462:	e009      	b.n	8002478 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002464:	f7ff fad6 	bl	8001a14 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002472:	d901      	bls.n	8002478 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e007      	b.n	8002488 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_PWREx_EnableOverDrive+0x9c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002484:	d1ee      	bne.n	8002464 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000

08002498 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e29b      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024bc:	4b96      	ldr	r3, [pc, #600]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c8:	4b93      	ldr	r3, [pc, #588]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x62>
 80024d4:	4b90      	ldr	r3, [pc, #576]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b8d      	ldr	r3, [pc, #564]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x130>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d168      	bne.n	80025c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e275      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x7a>
 8002504:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a83      	ldr	r2, [pc, #524]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e02e      	b.n	8002570 <HAL_RCC_OscConfig+0xd8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x9c>
 800251a:	4b7f      	ldr	r3, [pc, #508]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7e      	ldr	r2, [pc, #504]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7b      	ldr	r2, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xd8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0xc0>
 800253e:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a75      	ldr	r2, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b73      	ldr	r3, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a72      	ldr	r2, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xd8>
 8002558:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b6c      	ldr	r3, [pc, #432]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6b      	ldr	r2, [pc, #428]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7ff fa4c 	bl	8001a14 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fa48 	bl	8001a14 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e229      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b61      	ldr	r3, [pc, #388]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xe8>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff fa38 	bl	8001a14 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fa34 	bl	8001a14 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e215      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b57      	ldr	r3, [pc, #348]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x110>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d069      	beq.n	80026aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d6:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x190>
 80025ee:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x17a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1e9      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	493d      	ldr	r1, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e040      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d023      	beq.n	8002678 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a38      	ldr	r2, [pc, #224]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff f9ea 	bl	8001a14 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff f9e6 	bl	8001a14 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1c7      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b30      	ldr	r3, [pc, #192]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4929      	ldr	r1, [pc, #164]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
 8002676:	e018      	b.n	80026aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff f9c6 	bl	8001a14 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7ff f9c2 	bl	8001a14 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1a3      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d038      	beq.n	8002728 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d019      	beq.n	80026f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b16      	ldr	r3, [pc, #88]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	4a15      	ldr	r2, [pc, #84]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7ff f9a3 	bl	8001a14 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d2:	f7ff f99f 	bl	8001a14 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e180      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x23a>
 80026f0:	e01a      	b.n	8002728 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	4a08      	ldr	r2, [pc, #32]	; (8002718 <HAL_RCC_OscConfig+0x280>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7ff f989 	bl	8001a14 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff f985 	bl	8001a14 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d903      	bls.n	800271c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e166      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
 8002718:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b92      	ldr	r3, [pc, #584]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a4 	beq.w	800287e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002736:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	4b89      	ldr	r3, [pc, #548]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a88      	ldr	r2, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b86      	ldr	r3, [pc, #536]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275e:	4b83      	ldr	r3, [pc, #524]	; (800296c <HAL_RCC_OscConfig+0x4d4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800276a:	4b80      	ldr	r3, [pc, #512]	; (800296c <HAL_RCC_OscConfig+0x4d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7f      	ldr	r2, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x4d4>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7ff f94d 	bl	8001a14 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7ff f949 	bl	8001a14 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b64      	cmp	r3, #100	; 0x64
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e12a      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	4b76      	ldr	r3, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x4d4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x31a>
 80027a4:	4b70      	ldr	r3, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a6f      	ldr	r2, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e02d      	b.n	800280e <HAL_RCC_OscConfig+0x376>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x33c>
 80027ba:	4b6b      	ldr	r3, [pc, #428]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a67      	ldr	r2, [pc, #412]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e01c      	b.n	800280e <HAL_RCC_OscConfig+0x376>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d10c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x35e>
 80027dc:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a61      	ldr	r2, [pc, #388]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	4b5f      	ldr	r3, [pc, #380]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a5e      	ldr	r2, [pc, #376]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e00b      	b.n	800280e <HAL_RCC_OscConfig+0x376>
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a5b      	ldr	r2, [pc, #364]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d015      	beq.n	8002842 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7ff f8fd 	bl	8001a14 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7ff f8f9 	bl	8001a14 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0d8      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RCC_OscConfig+0x386>
 8002840:	e014      	b.n	800286c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7ff f8e7 	bl	8001a14 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7ff f8e3 	bl	8001a14 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0c2      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002860:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ee      	bne.n	800284a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a3c      	ldr	r2, [pc, #240]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80ae 	beq.w	80029e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002888:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d06d      	beq.n	8002970 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d14b      	bne.n	8002934 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a31      	ldr	r2, [pc, #196]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80028a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff f8b4 	bl	8001a14 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff f8b0 	bl	8001a14 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e091      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	085b      	lsrs	r3, r3, #1
 80028e6:	3b01      	subs	r3, #1
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	071b      	lsls	r3, r3, #28
 80028fa:	491b      	ldr	r1, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7ff f882 	bl	8001a14 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff f87e 	bl	8001a14 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e05f      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x47c>
 8002932:	e057      	b.n	80029e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 800293a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800293e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7ff f868 	bl	8001a14 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff f864 	bl	8001a14 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e045      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_RCC_OscConfig+0x4d0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x4b0>
 8002966:	e03d      	b.n	80029e4 <HAL_RCC_OscConfig+0x54c>
 8002968:	40023800 	.word	0x40023800
 800296c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <HAL_RCC_OscConfig+0x558>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d030      	beq.n	80029e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d129      	bne.n	80029e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d122      	bne.n	80029e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d119      	bne.n	80029e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	3b01      	subs	r3, #1
 80029ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d10f      	bne.n	80029e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0d0      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d910      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b67      	ldr	r3, [pc, #412]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020f 	bic.w	r2, r3, #15
 8002a22:	4965      	ldr	r1, [pc, #404]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b8      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	494d      	ldr	r1, [pc, #308]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d040      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e07f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e073      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06b      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4936      	ldr	r1, [pc, #216]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe ff94 	bl	8001a14 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe ff90 	bl	8001a14 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e053      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d210      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	4922      	ldr	r1, [pc, #136]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e032      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4916      	ldr	r1, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	490e      	ldr	r1, [pc, #56]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b86:	f000 f821 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b98:	5ccb      	ldrb	r3, [r1, r3]
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fef0 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023c00 	.word	0x40023c00
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	080095a8 	.word	0x080095a8
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be4:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d00d      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x40>
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	f200 80bd 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x34>
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bfe:	e0b7      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c02:	60bb      	str	r3, [r7, #8]
      break;
 8002c04:	e0b7      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c08:	60bb      	str	r3, [r7, #8]
      break;
 8002c0a:	e0b4      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c0c:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d04d      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	ea02 0800 	and.w	r8, r2, r0
 8002c3a:	ea03 0901 	and.w	r9, r3, r1
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4649      	mov	r1, r9
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	014b      	lsls	r3, r1, #5
 8002c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c50:	0142      	lsls	r2, r0, #5
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	ebb0 0008 	subs.w	r0, r0, r8
 8002c5a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	018b      	lsls	r3, r1, #6
 8002c68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c6c:	0182      	lsls	r2, r0, #6
 8002c6e:	1a12      	subs	r2, r2, r0
 8002c70:	eb63 0301 	sbc.w	r3, r3, r1
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	00d9      	lsls	r1, r3, #3
 8002c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c82:	00d0      	lsls	r0, r2, #3
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	eb12 0208 	adds.w	r2, r2, r8
 8002c8c:	eb43 0309 	adc.w	r3, r3, r9
 8002c90:	f04f 0000 	mov.w	r0, #0
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	0259      	lsls	r1, r3, #9
 8002c9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c9e:	0250      	lsls	r0, r2, #9
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f7fd fcda 	bl	8000668 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e04a      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	ea02 0400 	and.w	r4, r2, r0
 8002cd6:	ea03 0501 	and.w	r5, r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	014b      	lsls	r3, r1, #5
 8002ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cec:	0142      	lsls	r2, r0, #5
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	018b      	lsls	r3, r1, #6
 8002d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d06:	0182      	lsls	r2, r0, #6
 8002d08:	1a12      	subs	r2, r2, r0
 8002d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	00d9      	lsls	r1, r3, #3
 8002d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d1c:	00d0      	lsls	r0, r2, #3
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	1912      	adds	r2, r2, r4
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0299      	lsls	r1, r3, #10
 8002d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d36:	0290      	lsls	r0, r2, #10
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f7fd fc8e 	bl	8000668 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	60bb      	str	r3, [r7, #8]
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d72:	60bb      	str	r3, [r7, #8]
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	68bb      	ldr	r3, [r7, #8]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	080095b8 	.word	0x080095b8

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd4:	f7ff ffdc 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	080095b8 	.word	0x080095b8

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d012      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e20:	4b69      	ldr	r3, [pc, #420]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a68      	ldr	r2, [pc, #416]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e2a:	6093      	str	r3, [r2, #8]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	4964      	ldr	r1, [pc, #400]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	4959      	ldr	r1, [pc, #356]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d017      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	494a      	ldr	r1, [pc, #296]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 808b 	beq.w	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	4a39      	ldr	r2, [pc, #228]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee8:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f00:	f7fe fd88 	bl	8001a14 <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fe fd84 	bl	8001a14 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e38f      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d035      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d02e      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d114      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fd4c 	bl	8001a14 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7fe fd48 	bl	8001a14 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e351      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ee      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	4901      	ldr	r1, [pc, #4]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	0ffffcff 	.word	0x0ffffcff
 8002fd4:	4bb3      	ldr	r3, [pc, #716]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4ab2      	ldr	r2, [pc, #712]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fde:	6093      	str	r3, [r2, #8]
 8002fe0:	4bb0      	ldr	r3, [pc, #704]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	49ad      	ldr	r1, [pc, #692]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ffe:	4ba9      	ldr	r3, [pc, #676]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003004:	4aa7      	ldr	r2, [pc, #668]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800300e:	4ba5      	ldr	r3, [pc, #660]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003010:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	49a2      	ldr	r1, [pc, #648]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302c:	4b9d      	ldr	r3, [pc, #628]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303a:	499a      	ldr	r1, [pc, #616]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800304e:	4b95      	ldr	r3, [pc, #596]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800305c:	4991      	ldr	r1, [pc, #580]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003070:	4b8c      	ldr	r3, [pc, #560]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307e:	4989      	ldr	r1, [pc, #548]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003092:	4b84      	ldr	r3, [pc, #528]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4980      	ldr	r1, [pc, #512]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b4:	4b7b      	ldr	r3, [pc, #492]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4978      	ldr	r1, [pc, #480]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d6:	4b73      	ldr	r3, [pc, #460]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f023 020c 	bic.w	r2, r3, #12
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	496f      	ldr	r1, [pc, #444]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	4967      	ldr	r1, [pc, #412]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800311a:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003128:	495e      	ldr	r1, [pc, #376]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	4956      	ldr	r1, [pc, #344]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	494d      	ldr	r1, [pc, #308]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003180:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	4945      	ldr	r1, [pc, #276]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b0:	493c      	ldr	r1, [pc, #240]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031c4:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d2:	4934      	ldr	r1, [pc, #208]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d011      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f4:	492b      	ldr	r1, [pc, #172]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003226:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	491b      	ldr	r1, [pc, #108]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003258:	4912      	ldr	r1, [pc, #72]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327c:	4909      	ldr	r1, [pc, #36]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00f      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003296:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	e002      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	4986      	ldr	r1, [pc, #536]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032bc:	4b81      	ldr	r3, [pc, #516]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032cc:	497d      	ldr	r1, [pc, #500]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d006      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80d6 	beq.w	8003494 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032e8:	4b76      	ldr	r3, [pc, #472]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a75      	ldr	r2, [pc, #468]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7fe fb8e 	bl	8001a14 <HAL_GetTick>
 80032f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032fc:	f7fe fb8a 	bl	8001a14 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e195      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800330e:	4b6d      	ldr	r3, [pc, #436]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d021      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11d      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800333c:	4b61      	ldr	r3, [pc, #388]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	0e1b      	lsrs	r3, r3, #24
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	019a      	lsls	r2, r3, #6
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	4958      	ldr	r1, [pc, #352]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003388:	2b00      	cmp	r3, #0
 800338a:	d02e      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003394:	d129      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003396:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033a4:	4b47      	ldr	r3, [pc, #284]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	0f1b      	lsrs	r3, r3, #28
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	019a      	lsls	r2, r3, #6
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	061b      	lsls	r3, r3, #24
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	071b      	lsls	r3, r3, #28
 80033ca:	493e      	ldr	r1, [pc, #248]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033d2:	4b3c      	ldr	r3, [pc, #240]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d8:	f023 021f 	bic.w	r2, r3, #31
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	3b01      	subs	r3, #1
 80033e2:	4938      	ldr	r1, [pc, #224]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01d      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fc:	0e1b      	lsrs	r3, r3, #24
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003404:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340a:	0f1b      	lsrs	r3, r3, #28
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	019a      	lsls	r2, r3, #6
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	431a      	orrs	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	071b      	lsls	r3, r3, #28
 800342a:	4926      	ldr	r1, [pc, #152]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d011      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	019a      	lsls	r2, r3, #6
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	071b      	lsls	r3, r3, #28
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800346c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346e:	f7fe fad1 	bl	8001a14 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003476:	f7fe facd 	bl	8001a14 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b64      	cmp	r3, #100	; 0x64
 8003482:	d901      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0d8      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	f040 80ce 	bne.w	8003638 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a8:	f7fe fab4 	bl	8001a14 <HAL_GetTick>
 80034ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ae:	e00b      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034b0:	f7fe fab0 	bl	8001a14 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d904      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0bb      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034c8:	4b5e      	ldr	r3, [pc, #376]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d4:	d0ec      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d02e      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d12a      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034fe:	4b51      	ldr	r3, [pc, #324]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800350c:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	0f1b      	lsrs	r3, r3, #28
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	019a      	lsls	r2, r3, #6
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	041b      	lsls	r3, r3, #16
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	061b      	lsls	r3, r3, #24
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	071b      	lsls	r3, r3, #28
 8003532:	4944      	ldr	r1, [pc, #272]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800353a:	4b42      	ldr	r3, [pc, #264]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003540:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	493d      	ldr	r1, [pc, #244]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d022      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003568:	d11d      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800356a:	4b36      	ldr	r3, [pc, #216]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	0e1b      	lsrs	r3, r3, #24
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003578:	4b32      	ldr	r3, [pc, #200]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	0f1b      	lsrs	r3, r3, #28
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	019a      	lsls	r2, r3, #6
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	431a      	orrs	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	071b      	lsls	r3, r3, #28
 800359e:	4929      	ldr	r1, [pc, #164]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d028      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	0e1b      	lsrs	r3, r3, #24
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	019a      	lsls	r2, r3, #6
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	431a      	orrs	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	061b      	lsls	r3, r3, #24
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	071b      	lsls	r3, r3, #28
 80035e6:	4917      	ldr	r1, [pc, #92]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4911      	ldr	r1, [pc, #68]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003610:	f7fe fa00 	bl	8001a14 <HAL_GetTick>
 8003614:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003618:	f7fe f9fc 	bl	8001a14 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e007      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003636:	d1ef      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e049      	b.n	80036ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd ffb8 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 fe64 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e054      	b.n	80037ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d022      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373a:	d01d      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_TIM_Base_Start_IT+0xe4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x80>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d115      	bne.n	80037a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b06      	cmp	r3, #6
 8003788:	d015      	beq.n	80037b6 <HAL_TIM_Base_Start_IT+0xbe>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d011      	beq.n	80037b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a2:	e008      	b.n	80037b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e000      	b.n	80037b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	40010400 	.word	0x40010400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40001800 	.word	0x40001800
 80037e4:	00010007 	.word	0x00010007

080037e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e049      	b.n	800388e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f841 	bl	8003896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 fd94 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_TIM_PWM_Start+0x24>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e03c      	b.n	800394a <HAL_TIM_PWM_Start+0x9e>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d109      	bne.n	80038ea <HAL_TIM_PWM_Start+0x3e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e02f      	b.n	800394a <HAL_TIM_PWM_Start+0x9e>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d109      	bne.n	8003904 <HAL_TIM_PWM_Start+0x58>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e022      	b.n	800394a <HAL_TIM_PWM_Start+0x9e>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d109      	bne.n	800391e <HAL_TIM_PWM_Start+0x72>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e015      	b.n	800394a <HAL_TIM_PWM_Start+0x9e>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b10      	cmp	r3, #16
 8003922:	d109      	bne.n	8003938 <HAL_TIM_PWM_Start+0x8c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e008      	b.n	800394a <HAL_TIM_PWM_Start+0x9e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e092      	b.n	8003a78 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_TIM_PWM_Start+0xb6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003960:	e023      	b.n	80039aa <HAL_TIM_PWM_Start+0xfe>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d104      	bne.n	8003972 <HAL_TIM_PWM_Start+0xc6>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003970:	e01b      	b.n	80039aa <HAL_TIM_PWM_Start+0xfe>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Start+0xd6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003980:	e013      	b.n	80039aa <HAL_TIM_PWM_Start+0xfe>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start+0xe6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003990:	e00b      	b.n	80039aa <HAL_TIM_PWM_Start+0xfe>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0xf6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	e003      	b.n	80039aa <HAL_TIM_PWM_Start+0xfe>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	6839      	ldr	r1, [r7, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f866 	bl	8004a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_TIM_PWM_Start+0x1d4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_TIM_PWM_Start+0x120>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <HAL_TIM_PWM_Start+0x1d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_PWM_Start+0x124>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_TIM_PWM_Start+0x126>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <HAL_TIM_PWM_Start+0x1d4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x18a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d01d      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x18a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_TIM_PWM_Start+0x1dc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d018      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x18a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_TIM_PWM_Start+0x1e0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x18a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_TIM_PWM_Start+0x1e4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x18a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_TIM_PWM_Start+0x1d8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x18a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIM_PWM_Start+0x1e8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x18a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_TIM_PWM_Start+0x1ec>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d115      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <HAL_TIM_PWM_Start+0x1f0>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d015      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1c8>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d011      	beq.n	8003a74 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	e008      	b.n	8003a74 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e000      	b.n	8003a76 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40010400 	.word	0x40010400
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40001800 	.word	0x40001800
 8003a9c:	00010007 	.word	0x00010007

08003aa0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e08f      	b.n	8003bd4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fd fd47 	bl	800155c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <HAL_TIM_Encoder_Init+0x13c>)
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f000 fc2f 	bl	8004354 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_TIM_Encoder_Init+0x140>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_TIM_Encoder_Init+0x144>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <HAL_TIM_Encoder_Init+0x148>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	011a      	lsls	r2, r3, #4
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	031b      	lsls	r3, r3, #12
 8003b60:	4313      	orrs	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	4313      	orrs	r3, r2
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	fffebff8 	.word	0xfffebff8
 8003be0:	fffffcfc 	.word	0xfffffcfc
 8003be4:	fffff3f3 	.word	0xfffff3f3
 8003be8:	ffff0f0f 	.word	0xffff0f0f

08003bec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c14:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d110      	bne.n	8003c3e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d102      	bne.n	8003c28 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c22:	7b7b      	ldrb	r3, [r7, #13]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e069      	b.n	8003d00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	e031      	b.n	8003ca2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d110      	bne.n	8003c66 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c44:	7bbb      	ldrb	r3, [r7, #14]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c4a:	7b3b      	ldrb	r3, [r7, #12]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e055      	b.n	8003d00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c64:	e01d      	b.n	8003ca2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d108      	bne.n	8003c7e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c6c:	7bbb      	ldrb	r3, [r7, #14]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c72:	7b7b      	ldrb	r3, [r7, #13]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d102      	bne.n	8003c7e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c78:	7b3b      	ldrb	r3, [r7, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e03e      	b.n	8003d00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_TIM_Encoder_Start+0xc4>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d008      	beq.n	8003cc0 <HAL_TIM_Encoder_Start+0xd4>
 8003cae:	e00f      	b.n	8003cd0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fee3 	bl	8004a84 <TIM_CCxChannelCmd>
      break;
 8003cbe:	e016      	b.n	8003cee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fedb 	bl	8004a84 <TIM_CCxChannelCmd>
      break;
 8003cce:	e00e      	b.n	8003cee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fed3 	bl	8004a84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fecc 	bl	8004a84 <TIM_CCxChannelCmd>
      break;
 8003cec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0202 	mvn.w	r2, #2
 8003d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fae4 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fad6 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fae7 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d122      	bne.n	8003db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d11b      	bne.n	8003db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0204 	mvn.w	r2, #4
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 faba 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 faac 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fabd 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d122      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d11b      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0208 	mvn.w	r2, #8
 8003ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa90 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003df8:	e005      	b.n	8003e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa82 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa93 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d122      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d11b      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0210 	mvn.w	r2, #16
 8003e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2208      	movs	r2, #8
 8003e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa66 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e005      	b.n	8003e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fa58 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa69 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0201 	mvn.w	r2, #1
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd f8ce 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b80      	cmp	r3, #128	; 0x80
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fea4 	bl	8004c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fe97 	bl	8004c14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fa17 	bl	8004340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0220 	mvn.w	r2, #32
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fe57 	bl	8004bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0ff      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b14      	cmp	r3, #20
 8003f72:	f200 80f0 	bhi.w	8004156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fd1 	.word	0x08003fd1
 8003f80:	08004157 	.word	0x08004157
 8003f84:	08004157 	.word	0x08004157
 8003f88:	08004157 	.word	0x08004157
 8003f8c:	08004011 	.word	0x08004011
 8003f90:	08004157 	.word	0x08004157
 8003f94:	08004157 	.word	0x08004157
 8003f98:	08004157 	.word	0x08004157
 8003f9c:	08004053 	.word	0x08004053
 8003fa0:	08004157 	.word	0x08004157
 8003fa4:	08004157 	.word	0x08004157
 8003fa8:	08004157 	.word	0x08004157
 8003fac:	08004093 	.word	0x08004093
 8003fb0:	08004157 	.word	0x08004157
 8003fb4:	08004157 	.word	0x08004157
 8003fb8:	08004157 	.word	0x08004157
 8003fbc:	080040d5 	.word	0x080040d5
 8003fc0:	08004157 	.word	0x08004157
 8003fc4:	08004157 	.word	0x08004157
 8003fc8:	08004157 	.word	0x08004157
 8003fcc:	08004115 	.word	0x08004115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fa5c 	bl	8004494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6999      	ldr	r1, [r3, #24]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	619a      	str	r2, [r3, #24]
      break;
 800400e:	e0a5      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 faae 	bl	8004578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6999      	ldr	r1, [r3, #24]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	619a      	str	r2, [r3, #24]
      break;
 8004050:	e084      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fb05 	bl	8004668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0208 	orr.w	r2, r2, #8
 800406c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0204 	bic.w	r2, r2, #4
 800407c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69d9      	ldr	r1, [r3, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	61da      	str	r2, [r3, #28]
      break;
 8004090:	e064      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fb5b 	bl	8004754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	021a      	lsls	r2, r3, #8
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	61da      	str	r2, [r3, #28]
      break;
 80040d2:	e043      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fb92 	bl	8004804 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0208 	orr.w	r2, r2, #8
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004112:	e023      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fbc4 	bl	80048a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004154:	e002      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	75fb      	strb	r3, [r7, #23]
      break;
 800415a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop

08004170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIM_ConfigClockSource+0x1c>
 8004188:	2302      	movs	r3, #2
 800418a:	e0b4      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x186>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4b56      	ldr	r3, [pc, #344]	; (8004300 <HAL_TIM_ConfigClockSource+0x190>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c4:	d03e      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0xd4>
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ca:	f200 8087 	bhi.w	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	f000 8086 	beq.w	80042e2 <HAL_TIM_ConfigClockSource+0x172>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041da:	d87f      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 80041dc:	2b70      	cmp	r3, #112	; 0x70
 80041de:	d01a      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0xa6>
 80041e0:	2b70      	cmp	r3, #112	; 0x70
 80041e2:	d87b      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b60      	cmp	r3, #96	; 0x60
 80041e6:	d050      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x11a>
 80041e8:	2b60      	cmp	r3, #96	; 0x60
 80041ea:	d877      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 80041ec:	2b50      	cmp	r3, #80	; 0x50
 80041ee:	d03c      	beq.n	800426a <HAL_TIM_ConfigClockSource+0xfa>
 80041f0:	2b50      	cmp	r3, #80	; 0x50
 80041f2:	d873      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d058      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x13a>
 80041f8:	2b40      	cmp	r3, #64	; 0x40
 80041fa:	d86f      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b30      	cmp	r3, #48	; 0x30
 80041fe:	d064      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x15a>
 8004200:	2b30      	cmp	r3, #48	; 0x30
 8004202:	d86b      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b20      	cmp	r3, #32
 8004206:	d060      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x15a>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d867      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05c      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x15a>
 8004210:	2b10      	cmp	r3, #16
 8004212:	d05a      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x15a>
 8004214:	e062      	b.n	80042dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6899      	ldr	r1, [r3, #8]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f000 fc0d 	bl	8004a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	609a      	str	r2, [r3, #8]
      break;
 8004242:	e04f      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f000 fbf6 	bl	8004a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004266:	609a      	str	r2, [r3, #8]
      break;
 8004268:	e03c      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	461a      	mov	r2, r3
 8004278:	f000 fb6a 	bl	8004950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2150      	movs	r1, #80	; 0x50
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fbc3 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8004288:	e02c      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	461a      	mov	r2, r3
 8004298:	f000 fb89 	bl	80049ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2160      	movs	r1, #96	; 0x60
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fbb3 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 80042a8:	e01c      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 fb4a 	bl	8004950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fba3 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 80042c8:	e00c      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f000 fb9a 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 80042da:	e003      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e000      	b.n	80042e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	fffeff88 	.word	0xfffeff88

08004304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a40      	ldr	r2, [pc, #256]	; (8004468 <TIM_Base_SetConfig+0x114>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d00f      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3d      	ldr	r2, [pc, #244]	; (800446c <TIM_Base_SetConfig+0x118>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00b      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <TIM_Base_SetConfig+0x11c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <TIM_Base_SetConfig+0x120>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3a      	ldr	r2, [pc, #232]	; (8004478 <TIM_Base_SetConfig+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d108      	bne.n	80043a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <TIM_Base_SetConfig+0x114>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02b      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b4:	d027      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2c      	ldr	r2, [pc, #176]	; (800446c <TIM_Base_SetConfig+0x118>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d023      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <TIM_Base_SetConfig+0x11c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <TIM_Base_SetConfig+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01b      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a29      	ldr	r2, [pc, #164]	; (8004478 <TIM_Base_SetConfig+0x124>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d017      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a28      	ldr	r2, [pc, #160]	; (800447c <TIM_Base_SetConfig+0x128>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a27      	ldr	r2, [pc, #156]	; (8004480 <TIM_Base_SetConfig+0x12c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a26      	ldr	r2, [pc, #152]	; (8004484 <TIM_Base_SetConfig+0x130>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a25      	ldr	r2, [pc, #148]	; (8004488 <TIM_Base_SetConfig+0x134>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a24      	ldr	r2, [pc, #144]	; (800448c <TIM_Base_SetConfig+0x138>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <TIM_Base_SetConfig+0x13c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d108      	bne.n	8004418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0a      	ldr	r2, [pc, #40]	; (8004468 <TIM_Base_SetConfig+0x114>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <TIM_Base_SetConfig+0xf8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <TIM_Base_SetConfig+0x124>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d103      	bne.n	8004454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	615a      	str	r2, [r3, #20]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40010400 	.word	0x40010400
 800447c:	40014000 	.word	0x40014000
 8004480:	40014400 	.word	0x40014400
 8004484:	40014800 	.word	0x40014800
 8004488:	40001800 	.word	0x40001800
 800448c:	40001c00 	.word	0x40001c00
 8004490:	40002000 	.word	0x40002000

08004494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4b2b      	ldr	r3, [pc, #172]	; (800456c <TIM_OC1_SetConfig+0xd8>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0302 	bic.w	r3, r3, #2
 80044dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a21      	ldr	r2, [pc, #132]	; (8004570 <TIM_OC1_SetConfig+0xdc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC1_SetConfig+0x64>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a20      	ldr	r2, [pc, #128]	; (8004574 <TIM_OC1_SetConfig+0xe0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10c      	bne.n	8004512 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0308 	bic.w	r3, r3, #8
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a16      	ldr	r2, [pc, #88]	; (8004570 <TIM_OC1_SetConfig+0xdc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_OC1_SetConfig+0x8e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <TIM_OC1_SetConfig+0xe0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d111      	bne.n	8004546 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	fffeff8f 	.word	0xfffeff8f
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400

08004578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0210 	bic.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4b2e      	ldr	r3, [pc, #184]	; (800465c <TIM_OC2_SetConfig+0xe4>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0320 	bic.w	r3, r3, #32
 80045c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a23      	ldr	r2, [pc, #140]	; (8004660 <TIM_OC2_SetConfig+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC2_SetConfig+0x68>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a22      	ldr	r2, [pc, #136]	; (8004664 <TIM_OC2_SetConfig+0xec>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10d      	bne.n	80045fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <TIM_OC2_SetConfig+0xe8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC2_SetConfig+0x94>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a17      	ldr	r2, [pc, #92]	; (8004664 <TIM_OC2_SetConfig+0xec>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d113      	bne.n	8004634 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	feff8fff 	.word	0xfeff8fff
 8004660:	40010000 	.word	0x40010000
 8004664:	40010400 	.word	0x40010400

08004668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <TIM_OC3_SetConfig+0xe0>)
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a22      	ldr	r2, [pc, #136]	; (800474c <TIM_OC3_SetConfig+0xe4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC3_SetConfig+0x66>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <TIM_OC3_SetConfig+0xe8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d10d      	bne.n	80046ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <TIM_OC3_SetConfig+0xe4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_OC3_SetConfig+0x92>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <TIM_OC3_SetConfig+0xe8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d113      	bne.n	8004722 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	fffeff8f 	.word	0xfffeff8f
 800474c:	40010000 	.word	0x40010000
 8004750:	40010400 	.word	0x40010400

08004754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <TIM_OC4_SetConfig+0xa4>)
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800479e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	031b      	lsls	r3, r3, #12
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a13      	ldr	r2, [pc, #76]	; (80047fc <TIM_OC4_SetConfig+0xa8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_OC4_SetConfig+0x68>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <TIM_OC4_SetConfig+0xac>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d109      	bne.n	80047d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	019b      	lsls	r3, r3, #6
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	feff8fff 	.word	0xfeff8fff
 80047fc:	40010000 	.word	0x40010000
 8004800:	40010400 	.word	0x40010400

08004804 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <TIM_OC5_SetConfig+0x98>)
 8004830:	4013      	ands	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004844:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <TIM_OC5_SetConfig+0x9c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_OC5_SetConfig+0x5e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <TIM_OC5_SetConfig+0xa0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d109      	bne.n	8004876 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004868:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	fffeff8f 	.word	0xfffeff8f
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40010400 	.word	0x40010400

080048a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <TIM_OC6_SetConfig+0x9c>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	051b      	lsls	r3, r3, #20
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a13      	ldr	r2, [pc, #76]	; (8004948 <TIM_OC6_SetConfig+0xa0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC6_SetConfig+0x60>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <TIM_OC6_SetConfig+0xa4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d109      	bne.n	800491c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	029b      	lsls	r3, r3, #10
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	feff8fff 	.word	0xfeff8fff
 8004948:	40010000 	.word	0x40010000
 800494c:	40010400 	.word	0x40010400

08004950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 030a 	bic.w	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f023 0210 	bic.w	r2, r3, #16
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f043 0307 	orr.w	r3, r3, #7
 8004a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1a      	ldr	r2, [r3, #32]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e06d      	b.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a30      	ldr	r2, [pc, #192]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d108      	bne.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40010400 	.word	0x40010400
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40001800 	.word	0x40001800

08004bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e040      	b.n	8004cbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc fd92 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2224      	movs	r2, #36	; 0x24
 8004c54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fc18 	bl	800549c <UART_SetConfig>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e022      	b.n	8004cbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fe6e 	bl	8005960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fef5 	bl	8005aa4 <UART_CheckIdleState>
 8004cba:	4603      	mov	r3, r0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	; 0x28
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	f040 8081 	bne.w	8004de0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_UART_Transmit+0x26>
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e079      	b.n	8004de2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Transmit+0x38>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e072      	b.n	8004de2 <HAL_UART_Transmit+0x11e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2221      	movs	r2, #33	; 0x21
 8004d10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d12:	f7fc fe7f 	bl	8001a14 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d108      	bne.n	8004d44 <HAL_UART_Transmit+0x80>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	e003      	b.n	8004d4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d54:	e02c      	b.n	8004db0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	; 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fee8 	bl	8005b36 <UART_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e038      	b.n	8004de2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e007      	b.n	8004d9e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1cc      	bne.n	8004d56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2140      	movs	r1, #64	; 0x40
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 feb5 	bl	8005b36 <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e005      	b.n	8004de2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b08a      	sub	sp, #40	; 0x28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	4613      	mov	r3, r2
 8004df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d13d      	bne.n	8004e7c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Receive_IT+0x22>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e036      	b.n	8004e7e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Receive_IT+0x34>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e02f      	b.n	8004e7e <HAL_UART_Receive_IT+0x94>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d018      	beq.n	8004e6c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	613b      	str	r3, [r7, #16]
   return(result);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	69f9      	ldr	r1, [r7, #28]
 8004e5e:	6a3a      	ldr	r2, [r7, #32]
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e6      	bne.n	8004e3a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 ff24 	bl	8005cc0 <UART_Start_Receive_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	e000      	b.n	8004e7e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3728      	adds	r7, #40	; 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b0ba      	sub	sp, #232	; 0xe8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004eae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004eb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d115      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00f      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 82a4 	beq.w	800542e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
      }
      return;
 8004eee:	e29e      	b.n	800542e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8117 	beq.w	8005128 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f0a:	4b85      	ldr	r3, [pc, #532]	; (8005120 <HAL_UART_IRQHandler+0x298>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 810a 	beq.w	8005128 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d011      	beq.n	8004f44 <HAL_UART_IRQHandler+0xbc>
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2201      	movs	r2, #1
 8004f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3a:	f043 0201 	orr.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d011      	beq.n	8004f74 <HAL_UART_IRQHandler+0xec>
 8004f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2202      	movs	r2, #2
 8004f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6a:	f043 0204 	orr.w	r2, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d011      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x11c>
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2204      	movs	r2, #4
 8004f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9a:	f043 0202 	orr.w	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd6:	f043 0208 	orr.w	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d012      	beq.n	8005012 <HAL_UART_IRQHandler+0x18a>
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 820a 	beq.w	8005432 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800505e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005062:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	d04f      	beq.n	800510a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fef2 	bl	8005e54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d141      	bne.n	8005102 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1d9      	bne.n	800507e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d013      	beq.n	80050fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	4a13      	ldr	r2, [pc, #76]	; (8005124 <HAL_UART_IRQHandler+0x29c>)
 80050d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fc fe49 	bl	8001d76 <HAL_DMA_Abort_IT>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d017      	beq.n	800511a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80050f4:	4610      	mov	r0, r2
 80050f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e00f      	b.n	800511a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9ae 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e00b      	b.n	800511a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9aa 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	e007      	b.n	800511a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f9a6 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005118:	e18b      	b.n	8005432 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511a:	bf00      	nop
    return;
 800511c:	e189      	b.n	8005432 <HAL_UART_IRQHandler+0x5aa>
 800511e:	bf00      	nop
 8005120:	04000120 	.word	0x04000120
 8005124:	08005f1b 	.word	0x08005f1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 8144 	bne.w	80053ba <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 813d 	beq.w	80053ba <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8136 	beq.w	80053ba <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2210      	movs	r2, #16
 8005154:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	f040 80b2 	bne.w	80052ca <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005172:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 815d 	beq.w	8005436 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005186:	429a      	cmp	r2, r3
 8005188:	f080 8155 	bcs.w	8005436 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005192:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a0:	f000 8085 	beq.w	80052ae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1da      	bne.n	80051a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005212:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005216:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800521a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e1      	bne.n	80051ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800523a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800524e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005250:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005254:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800525c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e3      	bne.n	800522a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800527c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527e:	f023 0310 	bic.w	r3, r3, #16
 8005282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005290:	65bb      	str	r3, [r7, #88]	; 0x58
 8005292:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e4      	bne.n	800526e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fc fcf4 	bl	8001c96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8d4 	bl	8005470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052c8:	e0b5      	b.n	8005436 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80a7 	beq.w	800543a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80052ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80a2 	beq.w	800543a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800530a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005318:	647b      	str	r3, [r7, #68]	; 0x44
 800531a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800531e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e4      	bne.n	80052f6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	623b      	str	r3, [r7, #32]
   return(result);
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3308      	adds	r3, #8
 800534c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005350:	633a      	str	r2, [r7, #48]	; 0x30
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e3      	bne.n	800532c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	60fb      	str	r3, [r7, #12]
   return(result);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0310 	bic.w	r3, r3, #16
 800538a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	69b9      	ldr	r1, [r7, #24]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	617b      	str	r3, [r7, #20]
   return(result);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e4      	bne.n	8005376 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f85c 	bl	8005470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053b8:	e03f      	b.n	800543a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <HAL_UART_IRQHandler+0x55c>
 80053c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f853 	bl	8005488 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053e2:	e02d      	b.n	8005440 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00e      	beq.n	800540e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01c      	beq.n	800543e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
    }
    return;
 800540c:	e017      	b.n	800543e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d012      	beq.n	8005440 <HAL_UART_IRQHandler+0x5b8>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fd8d 	bl	8005f46 <UART_EndTransmit_IT>
    return;
 800542c:	e008      	b.n	8005440 <HAL_UART_IRQHandler+0x5b8>
      return;
 800542e:	bf00      	nop
 8005430:	e006      	b.n	8005440 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <HAL_UART_IRQHandler+0x5b8>
      return;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <HAL_UART_IRQHandler+0x5b8>
    return;
 800543e:	bf00      	nop
  }

}
 8005440:	37e8      	adds	r7, #232	; 0xe8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4ba7      	ldr	r3, [pc, #668]	; (8005764 <UART_SetConfig+0x2c8>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a95      	ldr	r2, [pc, #596]	; (8005768 <UART_SetConfig+0x2cc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d120      	bne.n	800555a <UART_SetConfig+0xbe>
 8005518:	4b94      	ldr	r3, [pc, #592]	; (800576c <UART_SetConfig+0x2d0>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b03      	cmp	r3, #3
 8005524:	d816      	bhi.n	8005554 <UART_SetConfig+0xb8>
 8005526:	a201      	add	r2, pc, #4	; (adr r2, 800552c <UART_SetConfig+0x90>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	0800553d 	.word	0x0800553d
 8005530:	08005549 	.word	0x08005549
 8005534:	08005543 	.word	0x08005543
 8005538:	0800554f 	.word	0x0800554f
 800553c:	2301      	movs	r3, #1
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e14f      	b.n	80057e2 <UART_SetConfig+0x346>
 8005542:	2302      	movs	r3, #2
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e14c      	b.n	80057e2 <UART_SetConfig+0x346>
 8005548:	2304      	movs	r3, #4
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e149      	b.n	80057e2 <UART_SetConfig+0x346>
 800554e:	2308      	movs	r3, #8
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e146      	b.n	80057e2 <UART_SetConfig+0x346>
 8005554:	2310      	movs	r3, #16
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e143      	b.n	80057e2 <UART_SetConfig+0x346>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a84      	ldr	r2, [pc, #528]	; (8005770 <UART_SetConfig+0x2d4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d132      	bne.n	80055ca <UART_SetConfig+0x12e>
 8005564:	4b81      	ldr	r3, [pc, #516]	; (800576c <UART_SetConfig+0x2d0>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d828      	bhi.n	80055c4 <UART_SetConfig+0x128>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0xdc>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080055c5 	.word	0x080055c5
 8005580:	080055c5 	.word	0x080055c5
 8005584:	080055c5 	.word	0x080055c5
 8005588:	080055b9 	.word	0x080055b9
 800558c:	080055c5 	.word	0x080055c5
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055b3 	.word	0x080055b3
 800559c:	080055c5 	.word	0x080055c5
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055c5 	.word	0x080055c5
 80055a8:	080055bf 	.word	0x080055bf
 80055ac:	2300      	movs	r3, #0
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e117      	b.n	80057e2 <UART_SetConfig+0x346>
 80055b2:	2302      	movs	r3, #2
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e114      	b.n	80057e2 <UART_SetConfig+0x346>
 80055b8:	2304      	movs	r3, #4
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e111      	b.n	80057e2 <UART_SetConfig+0x346>
 80055be:	2308      	movs	r3, #8
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e10e      	b.n	80057e2 <UART_SetConfig+0x346>
 80055c4:	2310      	movs	r3, #16
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e10b      	b.n	80057e2 <UART_SetConfig+0x346>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a69      	ldr	r2, [pc, #420]	; (8005774 <UART_SetConfig+0x2d8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d120      	bne.n	8005616 <UART_SetConfig+0x17a>
 80055d4:	4b65      	ldr	r3, [pc, #404]	; (800576c <UART_SetConfig+0x2d0>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055de:	2b30      	cmp	r3, #48	; 0x30
 80055e0:	d013      	beq.n	800560a <UART_SetConfig+0x16e>
 80055e2:	2b30      	cmp	r3, #48	; 0x30
 80055e4:	d814      	bhi.n	8005610 <UART_SetConfig+0x174>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d009      	beq.n	80055fe <UART_SetConfig+0x162>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d810      	bhi.n	8005610 <UART_SetConfig+0x174>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <UART_SetConfig+0x15c>
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d006      	beq.n	8005604 <UART_SetConfig+0x168>
 80055f6:	e00b      	b.n	8005610 <UART_SetConfig+0x174>
 80055f8:	2300      	movs	r3, #0
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e0f1      	b.n	80057e2 <UART_SetConfig+0x346>
 80055fe:	2302      	movs	r3, #2
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e0ee      	b.n	80057e2 <UART_SetConfig+0x346>
 8005604:	2304      	movs	r3, #4
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e0eb      	b.n	80057e2 <UART_SetConfig+0x346>
 800560a:	2308      	movs	r3, #8
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e0e8      	b.n	80057e2 <UART_SetConfig+0x346>
 8005610:	2310      	movs	r3, #16
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e0e5      	b.n	80057e2 <UART_SetConfig+0x346>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a57      	ldr	r2, [pc, #348]	; (8005778 <UART_SetConfig+0x2dc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d120      	bne.n	8005662 <UART_SetConfig+0x1c6>
 8005620:	4b52      	ldr	r3, [pc, #328]	; (800576c <UART_SetConfig+0x2d0>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800562a:	2bc0      	cmp	r3, #192	; 0xc0
 800562c:	d013      	beq.n	8005656 <UART_SetConfig+0x1ba>
 800562e:	2bc0      	cmp	r3, #192	; 0xc0
 8005630:	d814      	bhi.n	800565c <UART_SetConfig+0x1c0>
 8005632:	2b80      	cmp	r3, #128	; 0x80
 8005634:	d009      	beq.n	800564a <UART_SetConfig+0x1ae>
 8005636:	2b80      	cmp	r3, #128	; 0x80
 8005638:	d810      	bhi.n	800565c <UART_SetConfig+0x1c0>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <UART_SetConfig+0x1a8>
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d006      	beq.n	8005650 <UART_SetConfig+0x1b4>
 8005642:	e00b      	b.n	800565c <UART_SetConfig+0x1c0>
 8005644:	2300      	movs	r3, #0
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e0cb      	b.n	80057e2 <UART_SetConfig+0x346>
 800564a:	2302      	movs	r3, #2
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e0c8      	b.n	80057e2 <UART_SetConfig+0x346>
 8005650:	2304      	movs	r3, #4
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e0c5      	b.n	80057e2 <UART_SetConfig+0x346>
 8005656:	2308      	movs	r3, #8
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e0c2      	b.n	80057e2 <UART_SetConfig+0x346>
 800565c:	2310      	movs	r3, #16
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e0bf      	b.n	80057e2 <UART_SetConfig+0x346>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a45      	ldr	r2, [pc, #276]	; (800577c <UART_SetConfig+0x2e0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d125      	bne.n	80056b8 <UART_SetConfig+0x21c>
 800566c:	4b3f      	ldr	r3, [pc, #252]	; (800576c <UART_SetConfig+0x2d0>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567a:	d017      	beq.n	80056ac <UART_SetConfig+0x210>
 800567c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005680:	d817      	bhi.n	80056b2 <UART_SetConfig+0x216>
 8005682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005686:	d00b      	beq.n	80056a0 <UART_SetConfig+0x204>
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d811      	bhi.n	80056b2 <UART_SetConfig+0x216>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <UART_SetConfig+0x1fe>
 8005692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005696:	d006      	beq.n	80056a6 <UART_SetConfig+0x20a>
 8005698:	e00b      	b.n	80056b2 <UART_SetConfig+0x216>
 800569a:	2300      	movs	r3, #0
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e0a0      	b.n	80057e2 <UART_SetConfig+0x346>
 80056a0:	2302      	movs	r3, #2
 80056a2:	77fb      	strb	r3, [r7, #31]
 80056a4:	e09d      	b.n	80057e2 <UART_SetConfig+0x346>
 80056a6:	2304      	movs	r3, #4
 80056a8:	77fb      	strb	r3, [r7, #31]
 80056aa:	e09a      	b.n	80057e2 <UART_SetConfig+0x346>
 80056ac:	2308      	movs	r3, #8
 80056ae:	77fb      	strb	r3, [r7, #31]
 80056b0:	e097      	b.n	80057e2 <UART_SetConfig+0x346>
 80056b2:	2310      	movs	r3, #16
 80056b4:	77fb      	strb	r3, [r7, #31]
 80056b6:	e094      	b.n	80057e2 <UART_SetConfig+0x346>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a30      	ldr	r2, [pc, #192]	; (8005780 <UART_SetConfig+0x2e4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d125      	bne.n	800570e <UART_SetConfig+0x272>
 80056c2:	4b2a      	ldr	r3, [pc, #168]	; (800576c <UART_SetConfig+0x2d0>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d0:	d017      	beq.n	8005702 <UART_SetConfig+0x266>
 80056d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d6:	d817      	bhi.n	8005708 <UART_SetConfig+0x26c>
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056dc:	d00b      	beq.n	80056f6 <UART_SetConfig+0x25a>
 80056de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e2:	d811      	bhi.n	8005708 <UART_SetConfig+0x26c>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <UART_SetConfig+0x254>
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d006      	beq.n	80056fc <UART_SetConfig+0x260>
 80056ee:	e00b      	b.n	8005708 <UART_SetConfig+0x26c>
 80056f0:	2301      	movs	r3, #1
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e075      	b.n	80057e2 <UART_SetConfig+0x346>
 80056f6:	2302      	movs	r3, #2
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e072      	b.n	80057e2 <UART_SetConfig+0x346>
 80056fc:	2304      	movs	r3, #4
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e06f      	b.n	80057e2 <UART_SetConfig+0x346>
 8005702:	2308      	movs	r3, #8
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e06c      	b.n	80057e2 <UART_SetConfig+0x346>
 8005708:	2310      	movs	r3, #16
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e069      	b.n	80057e2 <UART_SetConfig+0x346>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <UART_SetConfig+0x2e8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d137      	bne.n	8005788 <UART_SetConfig+0x2ec>
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <UART_SetConfig+0x2d0>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005726:	d017      	beq.n	8005758 <UART_SetConfig+0x2bc>
 8005728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800572c:	d817      	bhi.n	800575e <UART_SetConfig+0x2c2>
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005732:	d00b      	beq.n	800574c <UART_SetConfig+0x2b0>
 8005734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005738:	d811      	bhi.n	800575e <UART_SetConfig+0x2c2>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <UART_SetConfig+0x2aa>
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005742:	d006      	beq.n	8005752 <UART_SetConfig+0x2b6>
 8005744:	e00b      	b.n	800575e <UART_SetConfig+0x2c2>
 8005746:	2300      	movs	r3, #0
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e04a      	b.n	80057e2 <UART_SetConfig+0x346>
 800574c:	2302      	movs	r3, #2
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e047      	b.n	80057e2 <UART_SetConfig+0x346>
 8005752:	2304      	movs	r3, #4
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e044      	b.n	80057e2 <UART_SetConfig+0x346>
 8005758:	2308      	movs	r3, #8
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e041      	b.n	80057e2 <UART_SetConfig+0x346>
 800575e:	2310      	movs	r3, #16
 8005760:	77fb      	strb	r3, [r7, #31]
 8005762:	e03e      	b.n	80057e2 <UART_SetConfig+0x346>
 8005764:	efff69f3 	.word	0xefff69f3
 8005768:	40011000 	.word	0x40011000
 800576c:	40023800 	.word	0x40023800
 8005770:	40004400 	.word	0x40004400
 8005774:	40004800 	.word	0x40004800
 8005778:	40004c00 	.word	0x40004c00
 800577c:	40005000 	.word	0x40005000
 8005780:	40011400 	.word	0x40011400
 8005784:	40007800 	.word	0x40007800
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a71      	ldr	r2, [pc, #452]	; (8005954 <UART_SetConfig+0x4b8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d125      	bne.n	80057de <UART_SetConfig+0x342>
 8005792:	4b71      	ldr	r3, [pc, #452]	; (8005958 <UART_SetConfig+0x4bc>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800579c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057a0:	d017      	beq.n	80057d2 <UART_SetConfig+0x336>
 80057a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057a6:	d817      	bhi.n	80057d8 <UART_SetConfig+0x33c>
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ac:	d00b      	beq.n	80057c6 <UART_SetConfig+0x32a>
 80057ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b2:	d811      	bhi.n	80057d8 <UART_SetConfig+0x33c>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <UART_SetConfig+0x324>
 80057b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057bc:	d006      	beq.n	80057cc <UART_SetConfig+0x330>
 80057be:	e00b      	b.n	80057d8 <UART_SetConfig+0x33c>
 80057c0:	2300      	movs	r3, #0
 80057c2:	77fb      	strb	r3, [r7, #31]
 80057c4:	e00d      	b.n	80057e2 <UART_SetConfig+0x346>
 80057c6:	2302      	movs	r3, #2
 80057c8:	77fb      	strb	r3, [r7, #31]
 80057ca:	e00a      	b.n	80057e2 <UART_SetConfig+0x346>
 80057cc:	2304      	movs	r3, #4
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e007      	b.n	80057e2 <UART_SetConfig+0x346>
 80057d2:	2308      	movs	r3, #8
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e004      	b.n	80057e2 <UART_SetConfig+0x346>
 80057d8:	2310      	movs	r3, #16
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e001      	b.n	80057e2 <UART_SetConfig+0x346>
 80057de:	2310      	movs	r3, #16
 80057e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ea:	d15a      	bne.n	80058a2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80057ec:	7ffb      	ldrb	r3, [r7, #31]
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d827      	bhi.n	8005842 <UART_SetConfig+0x3a6>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x35c>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	08005843 	.word	0x08005843
 8005808:	08005833 	.word	0x08005833
 800580c:	08005843 	.word	0x08005843
 8005810:	08005843 	.word	0x08005843
 8005814:	08005843 	.word	0x08005843
 8005818:	0800583b 	.word	0x0800583b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581c:	f7fd fac4 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8005820:	61b8      	str	r0, [r7, #24]
        break;
 8005822:	e013      	b.n	800584c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fd fad4 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8005828:	61b8      	str	r0, [r7, #24]
        break;
 800582a:	e00f      	b.n	800584c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b4b      	ldr	r3, [pc, #300]	; (800595c <UART_SetConfig+0x4c0>)
 800582e:	61bb      	str	r3, [r7, #24]
        break;
 8005830:	e00c      	b.n	800584c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fd f9cb 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8005836:	61b8      	str	r0, [r7, #24]
        break;
 8005838:	e008      	b.n	800584c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	61bb      	str	r3, [r7, #24]
        break;
 8005840:	e004      	b.n	800584c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	77bb      	strb	r3, [r7, #30]
        break;
 800584a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d074      	beq.n	800593c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	005a      	lsls	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2b0f      	cmp	r3, #15
 800586c:	d916      	bls.n	800589c <UART_SetConfig+0x400>
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005874:	d212      	bcs.n	800589c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f023 030f 	bic.w	r3, r3, #15
 800587e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	b29b      	uxth	r3, r3
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	b29a      	uxth	r2, r3
 800588c:	89fb      	ldrh	r3, [r7, #14]
 800588e:	4313      	orrs	r3, r2
 8005890:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	89fa      	ldrh	r2, [r7, #14]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	e04f      	b.n	800593c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	77bb      	strb	r3, [r7, #30]
 80058a0:	e04c      	b.n	800593c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058a2:	7ffb      	ldrb	r3, [r7, #31]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d828      	bhi.n	80058fa <UART_SetConfig+0x45e>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0x414>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058e5 	.word	0x080058e5
 80058bc:	080058fb 	.word	0x080058fb
 80058c0:	080058eb 	.word	0x080058eb
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	080058fb 	.word	0x080058fb
 80058cc:	080058fb 	.word	0x080058fb
 80058d0:	080058f3 	.word	0x080058f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fd fa68 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 80058d8:	61b8      	str	r0, [r7, #24]
        break;
 80058da:	e013      	b.n	8005904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058dc:	f7fd fa78 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 80058e0:	61b8      	str	r0, [r7, #24]
        break;
 80058e2:	e00f      	b.n	8005904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	; (800595c <UART_SetConfig+0x4c0>)
 80058e6:	61bb      	str	r3, [r7, #24]
        break;
 80058e8:	e00c      	b.n	8005904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ea:	f7fd f96f 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 80058ee:	61b8      	str	r0, [r7, #24]
        break;
 80058f0:	e008      	b.n	8005904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f6:	61bb      	str	r3, [r7, #24]
        break;
 80058f8:	e004      	b.n	8005904 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	77bb      	strb	r3, [r7, #30]
        break;
 8005902:	bf00      	nop
    }

    if (pclk != 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	085a      	lsrs	r2, r3, #1
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	441a      	add	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d909      	bls.n	8005938 <UART_SetConfig+0x49c>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592a:	d205      	bcs.n	8005938 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	b29a      	uxth	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	e001      	b.n	800593c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005948:	7fbb      	ldrb	r3, [r7, #30]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40007c00 	.word	0x40007c00
 8005958:	40023800 	.word	0x40023800
 800595c:	00f42400 	.word	0x00f42400

08005960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01a      	beq.n	8005a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5e:	d10a      	bne.n	8005a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ab4:	f7fb ffae 	bl	8001a14 <HAL_GetTick>
 8005ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d10e      	bne.n	8005ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f82d 	bl	8005b36 <UART_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e023      	b.n	8005b2e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d10e      	bne.n	8005b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f817 	bl	8005b36 <UART_WaitOnFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e00d      	b.n	8005b2e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b09c      	sub	sp, #112	; 0x70
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b46:	e0a5      	b.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	f000 80a1 	beq.w	8005c94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fb ff5f 	bl	8001a14 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d13e      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e6      	bne.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bba:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e067      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d04f      	beq.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c02:	d147      	bne.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c60:	623a      	str	r2, [r7, #32]
 8005c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	69f9      	ldr	r1, [r7, #28]
 8005c66:	6a3a      	ldr	r2, [r7, #32]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e010      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69da      	ldr	r2, [r3, #28]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2301      	moveq	r3, #1
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	f43f af4a 	beq.w	8005b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3770      	adds	r7, #112	; 0x70
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b097      	sub	sp, #92	; 0x5c
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	88fa      	ldrh	r2, [r7, #6]
 8005cd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d10e      	bne.n	8005d12 <UART_Start_Receive_IT+0x52>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d105      	bne.n	8005d08 <UART_Start_Receive_IT+0x48>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d06:	e02d      	b.n	8005d64 <UART_Start_Receive_IT+0xa4>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	22ff      	movs	r2, #255	; 0xff
 8005d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d10:	e028      	b.n	8005d64 <UART_Start_Receive_IT+0xa4>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <UART_Start_Receive_IT+0x76>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <UART_Start_Receive_IT+0x6c>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	22ff      	movs	r2, #255	; 0xff
 8005d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d2a:	e01b      	b.n	8005d64 <UART_Start_Receive_IT+0xa4>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	227f      	movs	r2, #127	; 0x7f
 8005d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d34:	e016      	b.n	8005d64 <UART_Start_Receive_IT+0xa4>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d3e:	d10d      	bne.n	8005d5c <UART_Start_Receive_IT+0x9c>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <UART_Start_Receive_IT+0x92>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	227f      	movs	r2, #127	; 0x7f
 8005d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d50:	e008      	b.n	8005d64 <UART_Start_Receive_IT+0xa4>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	223f      	movs	r2, #63	; 0x3f
 8005d56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d5a:	e003      	b.n	8005d64 <UART_Start_Receive_IT+0xa4>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2222      	movs	r2, #34	; 0x22
 8005d70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3308      	adds	r3, #8
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	657b      	str	r3, [r7, #84]	; 0x54
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e5      	bne.n	8005d72 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dae:	d107      	bne.n	8005dc0 <UART_Start_Receive_IT+0x100>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d103      	bne.n	8005dc0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a24      	ldr	r2, [pc, #144]	; (8005e4c <UART_Start_Receive_IT+0x18c>)
 8005dbc:	665a      	str	r2, [r3, #100]	; 0x64
 8005dbe:	e002      	b.n	8005dc6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4a23      	ldr	r2, [pc, #140]	; (8005e50 <UART_Start_Receive_IT+0x190>)
 8005dc4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
 8005df6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_Start_Receive_IT+0x116>
 8005e08:	e018      	b.n	8005e3c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	613b      	str	r3, [r7, #16]
   return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f043 0320 	orr.w	r3, r3, #32
 8005e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	69f9      	ldr	r1, [r7, #28]
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e6      	bne.n	8005e0a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	375c      	adds	r7, #92	; 0x5c
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	080060f7 	.word	0x080060f7
 8005e50:	08005f9b 	.word	0x08005f9b

08005e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b095      	sub	sp, #84	; 0x54
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e6      	bne.n	8005e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3308      	adds	r3, #8
 8005e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d118      	bne.n	8005efc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f023 0310 	bic.w	r3, r3, #16
 8005ede:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6979      	ldr	r1, [r7, #20]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e6      	bne.n	8005eca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f0e:	bf00      	nop
 8005f10:	3754      	adds	r7, #84	; 0x54
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff fa8f 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6979      	ldr	r1, [r7, #20]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff fa5b 	bl	8005448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f92:	bf00      	nop
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b096      	sub	sp, #88	; 0x58
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fa8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb0:	2b22      	cmp	r3, #34	; 0x22
 8005fb2:	f040 8094 	bne.w	80060de <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fc0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005fc4:	b2d9      	uxtb	r1, r3
 8005fc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d177      	bne.n	80060ee <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006012:	653b      	str	r3, [r7, #80]	; 0x50
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800601c:	647b      	str	r3, [r7, #68]	; 0x44
 800601e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	623b      	str	r3, [r7, #32]
   return(result);
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006050:	633a      	str	r2, [r7, #48]	; 0x30
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006074:	2b01      	cmp	r3, #1
 8006076:	d12e      	bne.n	80060d6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	60fb      	str	r3, [r7, #12]
   return(result);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0310 	bic.w	r3, r3, #16
 8006092:	64bb      	str	r3, [r7, #72]	; 0x48
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	69b9      	ldr	r1, [r7, #24]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	617b      	str	r3, [r7, #20]
   return(result);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d103      	bne.n	80060c6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2210      	movs	r2, #16
 80060c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff f9ce 	bl	8005470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060d4:	e00b      	b.n	80060ee <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fa ff1a 	bl	8000f10 <HAL_UART_RxCpltCallback>
}
 80060dc:	e007      	b.n	80060ee <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0208 	orr.w	r2, r2, #8
 80060ec:	619a      	str	r2, [r3, #24]
}
 80060ee:	bf00      	nop
 80060f0:	3758      	adds	r7, #88	; 0x58
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b096      	sub	sp, #88	; 0x58
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006104:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800610c:	2b22      	cmp	r3, #34	; 0x22
 800610e:	f040 8094 	bne.w	800623a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006120:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006122:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006126:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800612a:	4013      	ands	r3, r2
 800612c:	b29a      	uxth	r2, r3
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d177      	bne.n	800624a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800616e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006178:	643b      	str	r3, [r7, #64]	; 0x40
 800617a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800617e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e6      	bne.n	800615a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	61fb      	str	r3, [r7, #28]
   return(result);
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f023 0301 	bic.w	r3, r3, #1
 80061a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3308      	adds	r3, #8
 80061aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e5      	bne.n	800618c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d12e      	bne.n	8006232 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f023 0310 	bic.w	r3, r3, #16
 80061ee:	647b      	str	r3, [r7, #68]	; 0x44
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6979      	ldr	r1, [r7, #20]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	613b      	str	r3, [r7, #16]
   return(result);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e6      	bne.n	80061da <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0310 	and.w	r3, r3, #16
 8006216:	2b10      	cmp	r3, #16
 8006218:	d103      	bne.n	8006222 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2210      	movs	r2, #16
 8006220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff f920 	bl	8005470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006230:	e00b      	b.n	800624a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fa fe6c 	bl	8000f10 <HAL_UART_RxCpltCallback>
}
 8006238:	e007      	b.n	800624a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699a      	ldr	r2, [r3, #24]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0208 	orr.w	r2, r2, #8
 8006248:	619a      	str	r2, [r3, #24]
}
 800624a:	bf00      	nop
 800624c:	3758      	adds	r7, #88	; 0x58
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006254:	b084      	sub	sp, #16
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	f107 001c 	add.w	r0, r7, #28
 8006262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b01      	cmp	r3, #1
 800626a:	d120      	bne.n	80062ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	4b20      	ldr	r3, [pc, #128]	; (8006300 <USB_CoreInit+0xac>)
 800627e:	4013      	ands	r3, r2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d105      	bne.n	80062a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa92 	bl	80067cc <USB_CoreReset>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	e010      	b.n	80062d0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa86 	bl	80067cc <USB_CoreReset>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10b      	bne.n	80062ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f043 0206 	orr.w	r2, r3, #6
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f043 0220 	orr.w	r2, r3, #32
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062fa:	b004      	add	sp, #16
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	ffbdffbf 	.word	0xffbdffbf

08006304 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f023 0201 	bic.w	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d115      	bne.n	8006374 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006354:	2001      	movs	r0, #1
 8006356:	f7fb fb69 	bl	8001a2c <HAL_Delay>
      ms++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3301      	adds	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa25 	bl	80067b0 <USB_GetMode>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d01e      	beq.n	80063aa <USB_SetCurrentMode+0x84>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b31      	cmp	r3, #49	; 0x31
 8006370:	d9f0      	bls.n	8006354 <USB_SetCurrentMode+0x2e>
 8006372:	e01a      	b.n	80063aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d115      	bne.n	80063a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006386:	2001      	movs	r0, #1
 8006388:	f7fb fb50 	bl	8001a2c <HAL_Delay>
      ms++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa0c 	bl	80067b0 <USB_GetMode>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <USB_SetCurrentMode+0x84>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b31      	cmp	r3, #49	; 0x31
 80063a2:	d9f0      	bls.n	8006386 <USB_SetCurrentMode+0x60>
 80063a4:	e001      	b.n	80063aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e005      	b.n	80063b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b32      	cmp	r3, #50	; 0x32
 80063ae:	d101      	bne.n	80063b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c0:	b084      	sub	sp, #16
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e009      	b.n	80063f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	3340      	adds	r3, #64	; 0x40
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	2200      	movs	r2, #0
 80063ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	3301      	adds	r3, #1
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b0e      	cmp	r3, #14
 80063f8:	d9f2      	bls.n	80063e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d11c      	bne.n	800643a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640e:	f043 0302 	orr.w	r3, r3, #2
 8006412:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e005      	b.n	8006446 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800644c:	461a      	mov	r2, r3
 800644e:	2300      	movs	r3, #0
 8006450:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	4619      	mov	r1, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006460:	461a      	mov	r2, r3
 8006462:	680b      	ldr	r3, [r1, #0]
 8006464:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2b01      	cmp	r3, #1
 800646a:	d10c      	bne.n	8006486 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006472:	2100      	movs	r1, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f961 	bl	800673c <USB_SetDevSpeed>
 800647a:	e008      	b.n	800648e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800647c:	2101      	movs	r1, #1
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f95c 	bl	800673c <USB_SetDevSpeed>
 8006484:	e003      	b.n	800648e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006486:	2103      	movs	r1, #3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f957 	bl	800673c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800648e:	2110      	movs	r1, #16
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f8f3 	bl	800667c <USB_FlushTxFifo>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f91d 	bl	80066e0 <USB_FlushRxFifo>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	461a      	mov	r2, r3
 80064b8:	2300      	movs	r3, #0
 80064ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	461a      	mov	r2, r3
 80064c4:	2300      	movs	r3, #0
 80064c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ce:	461a      	mov	r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	e043      	b.n	8006562 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f0:	d118      	bne.n	8006524 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	461a      	mov	r2, r3
 8006506:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	e013      	b.n	8006536 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	461a      	mov	r2, r3
 800651c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e008      	b.n	8006536 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	461a      	mov	r2, r3
 8006532:	2300      	movs	r3, #0
 8006534:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	461a      	mov	r2, r3
 8006544:	2300      	movs	r3, #0
 8006546:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006554:	461a      	mov	r2, r3
 8006556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800655a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	3301      	adds	r3, #1
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d3b7      	bcc.n	80064da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	e043      	b.n	80065f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006586:	d118      	bne.n	80065ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	461a      	mov	r2, r3
 800659c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	e013      	b.n	80065cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	461a      	mov	r2, r3
 80065b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	e008      	b.n	80065cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	461a      	mov	r2, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	461a      	mov	r2, r3
 80065ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3301      	adds	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d3b7      	bcc.n	8006570 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800660e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006612:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006620:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d105      	bne.n	8006634 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f043 0210 	orr.w	r2, r3, #16
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699a      	ldr	r2, [r3, #24]
 8006638:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <USB_DevInit+0x2b4>)
 800663a:	4313      	orrs	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f043 0208 	orr.w	r2, r3, #8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d105      	bne.n	8006664 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	4b06      	ldr	r3, [pc, #24]	; (8006678 <USB_DevInit+0x2b8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006670:	b004      	add	sp, #16
 8006672:	4770      	bx	lr
 8006674:	803c3800 	.word	0x803c3800
 8006678:	40000004 	.word	0x40000004

0800667c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	4a12      	ldr	r2, [pc, #72]	; (80066dc <USB_FlushTxFifo+0x60>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e01a      	b.n	80066d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	daf3      	bge.n	800668a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	019b      	lsls	r3, r3, #6
 80066aa:	f043 0220 	orr.w	r2, r3, #32
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	4a08      	ldr	r2, [pc, #32]	; (80066dc <USB_FlushTxFifo+0x60>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e006      	b.n	80066d0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d0f1      	beq.n	80066b2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	00030d40 	.word	0x00030d40

080066e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	4a11      	ldr	r2, [pc, #68]	; (8006738 <USB_FlushRxFifo+0x58>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e017      	b.n	800672c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	daf3      	bge.n	80066ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2210      	movs	r2, #16
 800670c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	4a08      	ldr	r2, [pc, #32]	; (8006738 <USB_FlushRxFifo+0x58>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e006      	b.n	800672c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b10      	cmp	r3, #16
 8006728:	d0f1      	beq.n	800670e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	00030d40 	.word	0x00030d40

0800673c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800675c:	4313      	orrs	r3, r2
 800675e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679c:	f043 0302 	orr.w	r3, r3, #2
 80067a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f003 0301 	and.w	r3, r3, #1
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	4a13      	ldr	r2, [pc, #76]	; (800682c <USB_CoreReset+0x60>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d901      	bls.n	80067e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e01a      	b.n	800681e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	daf3      	bge.n	80067d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f043 0201 	orr.w	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	4a09      	ldr	r2, [pc, #36]	; (800682c <USB_CoreReset+0x60>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d901      	bls.n	8006810 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e006      	b.n	800681e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	d0f1      	beq.n	8006800 <USB_CoreReset+0x34>

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	00030d40 	.word	0x00030d40

08006830 <arm_pid_init_f32>:
 8006830:	ed90 7a08 	vldr	s14, [r0, #32]
 8006834:	edd0 7a06 	vldr	s15, [r0, #24]
 8006838:	ed90 6a07 	vldr	s12, [r0, #28]
 800683c:	eef1 6a67 	vneg.f32	s13, s15
 8006840:	ed80 7a02 	vstr	s14, [r0, #8]
 8006844:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006848:	ee37 6a07 	vadd.f32	s12, s14, s14
 800684c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006850:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8006854:	edc0 7a00 	vstr	s15, [r0]
 8006858:	ed80 7a01 	vstr	s14, [r0, #4]
 800685c:	b901      	cbnz	r1, 8006860 <arm_pid_init_f32+0x30>
 800685e:	4770      	bx	lr
 8006860:	2300      	movs	r3, #0
 8006862:	60c3      	str	r3, [r0, #12]
 8006864:	6103      	str	r3, [r0, #16]
 8006866:	6143      	str	r3, [r0, #20]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <atof>:
 800686c:	2100      	movs	r1, #0
 800686e:	f000 be25 	b.w	80074bc <strtod>
	...

08006874 <__errno>:
 8006874:	4b01      	ldr	r3, [pc, #4]	; (800687c <__errno+0x8>)
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	2000000c 	.word	0x2000000c

08006880 <__libc_init_array>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4d0d      	ldr	r5, [pc, #52]	; (80068b8 <__libc_init_array+0x38>)
 8006884:	4c0d      	ldr	r4, [pc, #52]	; (80068bc <__libc_init_array+0x3c>)
 8006886:	1b64      	subs	r4, r4, r5
 8006888:	10a4      	asrs	r4, r4, #2
 800688a:	2600      	movs	r6, #0
 800688c:	42a6      	cmp	r6, r4
 800688e:	d109      	bne.n	80068a4 <__libc_init_array+0x24>
 8006890:	4d0b      	ldr	r5, [pc, #44]	; (80068c0 <__libc_init_array+0x40>)
 8006892:	4c0c      	ldr	r4, [pc, #48]	; (80068c4 <__libc_init_array+0x44>)
 8006894:	f002 fe64 	bl	8009560 <_init>
 8006898:	1b64      	subs	r4, r4, r5
 800689a:	10a4      	asrs	r4, r4, #2
 800689c:	2600      	movs	r6, #0
 800689e:	42a6      	cmp	r6, r4
 80068a0:	d105      	bne.n	80068ae <__libc_init_array+0x2e>
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a8:	4798      	blx	r3
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7ee      	b.n	800688c <__libc_init_array+0xc>
 80068ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b2:	4798      	blx	r3
 80068b4:	3601      	adds	r6, #1
 80068b6:	e7f2      	b.n	800689e <__libc_init_array+0x1e>
 80068b8:	080099fc 	.word	0x080099fc
 80068bc:	080099fc 	.word	0x080099fc
 80068c0:	080099fc 	.word	0x080099fc
 80068c4:	08009a00 	.word	0x08009a00

080068c8 <memset>:
 80068c8:	4402      	add	r2, r0
 80068ca:	4603      	mov	r3, r0
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d100      	bne.n	80068d2 <memset+0xa>
 80068d0:	4770      	bx	lr
 80068d2:	f803 1b01 	strb.w	r1, [r3], #1
 80068d6:	e7f9      	b.n	80068cc <memset+0x4>

080068d8 <sulp>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	460d      	mov	r5, r1
 80068de:	4616      	mov	r6, r2
 80068e0:	ec45 4b10 	vmov	d0, r4, r5
 80068e4:	f001 fcf2 	bl	80082cc <__ulp>
 80068e8:	b17e      	cbz	r6, 800690a <sulp+0x32>
 80068ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dd09      	ble.n	800690a <sulp+0x32>
 80068f6:	051b      	lsls	r3, r3, #20
 80068f8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80068fc:	2000      	movs	r0, #0
 80068fe:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006902:	ec41 0b17 	vmov	d7, r0, r1
 8006906:	ee20 0b07 	vmul.f64	d0, d0, d7
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	0000      	movs	r0, r0
	...

08006910 <_strtod_l>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	ed2d 8b0c 	vpush	{d8-d13}
 8006918:	b09d      	sub	sp, #116	; 0x74
 800691a:	461f      	mov	r7, r3
 800691c:	2300      	movs	r3, #0
 800691e:	9318      	str	r3, [sp, #96]	; 0x60
 8006920:	4ba6      	ldr	r3, [pc, #664]	; (8006bbc <_strtod_l+0x2ac>)
 8006922:	9213      	str	r2, [sp, #76]	; 0x4c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	9308      	str	r3, [sp, #32]
 8006928:	4604      	mov	r4, r0
 800692a:	4618      	mov	r0, r3
 800692c:	468a      	mov	sl, r1
 800692e:	f7f9 fc87 	bl	8000240 <strlen>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	4605      	mov	r5, r0
 8006938:	f04f 0900 	mov.w	r9, #0
 800693c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	2a2b      	cmp	r2, #43	; 0x2b
 8006946:	d04d      	beq.n	80069e4 <_strtod_l+0xd4>
 8006948:	d83a      	bhi.n	80069c0 <_strtod_l+0xb0>
 800694a:	2a0d      	cmp	r2, #13
 800694c:	d833      	bhi.n	80069b6 <_strtod_l+0xa6>
 800694e:	2a08      	cmp	r2, #8
 8006950:	d833      	bhi.n	80069ba <_strtod_l+0xaa>
 8006952:	2a00      	cmp	r2, #0
 8006954:	d03d      	beq.n	80069d2 <_strtod_l+0xc2>
 8006956:	2300      	movs	r3, #0
 8006958:	930b      	str	r3, [sp, #44]	; 0x2c
 800695a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800695c:	7833      	ldrb	r3, [r6, #0]
 800695e:	2b30      	cmp	r3, #48	; 0x30
 8006960:	f040 80b6 	bne.w	8006ad0 <_strtod_l+0x1c0>
 8006964:	7873      	ldrb	r3, [r6, #1]
 8006966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800696a:	2b58      	cmp	r3, #88	; 0x58
 800696c:	d16d      	bne.n	8006a4a <_strtod_l+0x13a>
 800696e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	ab18      	add	r3, sp, #96	; 0x60
 8006974:	9702      	str	r7, [sp, #8]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	4a91      	ldr	r2, [pc, #580]	; (8006bc0 <_strtod_l+0x2b0>)
 800697a:	ab19      	add	r3, sp, #100	; 0x64
 800697c:	a917      	add	r1, sp, #92	; 0x5c
 800697e:	4620      	mov	r0, r4
 8006980:	f000 fe10 	bl	80075a4 <__gethex>
 8006984:	f010 0507 	ands.w	r5, r0, #7
 8006988:	4607      	mov	r7, r0
 800698a:	d005      	beq.n	8006998 <_strtod_l+0x88>
 800698c:	2d06      	cmp	r5, #6
 800698e:	d12b      	bne.n	80069e8 <_strtod_l+0xd8>
 8006990:	3601      	adds	r6, #1
 8006992:	2300      	movs	r3, #0
 8006994:	9617      	str	r6, [sp, #92]	; 0x5c
 8006996:	930b      	str	r3, [sp, #44]	; 0x2c
 8006998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 856e 	bne.w	800747c <_strtod_l+0xb6c>
 80069a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a2:	b1e3      	cbz	r3, 80069de <_strtod_l+0xce>
 80069a4:	ec49 8b17 	vmov	d7, r8, r9
 80069a8:	eeb1 0b47 	vneg.f64	d0, d7
 80069ac:	b01d      	add	sp, #116	; 0x74
 80069ae:	ecbd 8b0c 	vpop	{d8-d13}
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	2a20      	cmp	r2, #32
 80069b8:	d1cd      	bne.n	8006956 <_strtod_l+0x46>
 80069ba:	3301      	adds	r3, #1
 80069bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80069be:	e7bf      	b.n	8006940 <_strtod_l+0x30>
 80069c0:	2a2d      	cmp	r2, #45	; 0x2d
 80069c2:	d1c8      	bne.n	8006956 <_strtod_l+0x46>
 80069c4:	2201      	movs	r2, #1
 80069c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1c3      	bne.n	800695a <_strtod_l+0x4a>
 80069d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 854d 	bne.w	8007478 <_strtod_l+0xb68>
 80069de:	ec49 8b10 	vmov	d0, r8, r9
 80069e2:	e7e3      	b.n	80069ac <_strtod_l+0x9c>
 80069e4:	2200      	movs	r2, #0
 80069e6:	e7ee      	b.n	80069c6 <_strtod_l+0xb6>
 80069e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069ea:	b13a      	cbz	r2, 80069fc <_strtod_l+0xec>
 80069ec:	2135      	movs	r1, #53	; 0x35
 80069ee:	a81a      	add	r0, sp, #104	; 0x68
 80069f0:	f001 fd78 	bl	80084e4 <__copybits>
 80069f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069f6:	4620      	mov	r0, r4
 80069f8:	f001 f93c 	bl	8007c74 <_Bfree>
 80069fc:	3d01      	subs	r5, #1
 80069fe:	2d05      	cmp	r5, #5
 8006a00:	d807      	bhi.n	8006a12 <_strtod_l+0x102>
 8006a02:	e8df f005 	tbb	[pc, r5]
 8006a06:	0b0e      	.short	0x0b0e
 8006a08:	030e1d18 	.word	0x030e1d18
 8006a0c:	f04f 0900 	mov.w	r9, #0
 8006a10:	46c8      	mov	r8, r9
 8006a12:	073b      	lsls	r3, r7, #28
 8006a14:	d5c0      	bpl.n	8006998 <_strtod_l+0x88>
 8006a16:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006a1a:	e7bd      	b.n	8006998 <_strtod_l+0x88>
 8006a1c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8006a20:	e7f7      	b.n	8006a12 <_strtod_l+0x102>
 8006a22:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8006a26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a2c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006a34:	e7ed      	b.n	8006a12 <_strtod_l+0x102>
 8006a36:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8006bc4 <_strtod_l+0x2b4>
 8006a3a:	f04f 0800 	mov.w	r8, #0
 8006a3e:	e7e8      	b.n	8006a12 <_strtod_l+0x102>
 8006a40:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006a44:	f04f 38ff 	mov.w	r8, #4294967295
 8006a48:	e7e3      	b.n	8006a12 <_strtod_l+0x102>
 8006a4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b30      	cmp	r3, #48	; 0x30
 8006a54:	d0f9      	beq.n	8006a4a <_strtod_l+0x13a>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d09e      	beq.n	8006998 <_strtod_l+0x88>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9306      	str	r3, [sp, #24]
 8006a5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a60:	930c      	str	r3, [sp, #48]	; 0x30
 8006a62:	2300      	movs	r3, #0
 8006a64:	9304      	str	r3, [sp, #16]
 8006a66:	930a      	str	r3, [sp, #40]	; 0x28
 8006a68:	461e      	mov	r6, r3
 8006a6a:	220a      	movs	r2, #10
 8006a6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006a6e:	f890 b000 	ldrb.w	fp, [r0]
 8006a72:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8006a76:	b2d9      	uxtb	r1, r3
 8006a78:	2909      	cmp	r1, #9
 8006a7a:	d92b      	bls.n	8006ad4 <_strtod_l+0x1c4>
 8006a7c:	9908      	ldr	r1, [sp, #32]
 8006a7e:	462a      	mov	r2, r5
 8006a80:	f001 fdf6 	bl	8008670 <strncmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d035      	beq.n	8006af4 <_strtod_l+0x1e4>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	465a      	mov	r2, fp
 8006a8c:	4633      	mov	r3, r6
 8006a8e:	4683      	mov	fp, r0
 8006a90:	4601      	mov	r1, r0
 8006a92:	2a65      	cmp	r2, #101	; 0x65
 8006a94:	d001      	beq.n	8006a9a <_strtod_l+0x18a>
 8006a96:	2a45      	cmp	r2, #69	; 0x45
 8006a98:	d118      	bne.n	8006acc <_strtod_l+0x1bc>
 8006a9a:	b91b      	cbnz	r3, 8006aa4 <_strtod_l+0x194>
 8006a9c:	9b06      	ldr	r3, [sp, #24]
 8006a9e:	4303      	orrs	r3, r0
 8006aa0:	d097      	beq.n	80069d2 <_strtod_l+0xc2>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8006aa8:	f10a 0201 	add.w	r2, sl, #1
 8006aac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006aae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006ab2:	2a2b      	cmp	r2, #43	; 0x2b
 8006ab4:	d077      	beq.n	8006ba6 <_strtod_l+0x296>
 8006ab6:	2a2d      	cmp	r2, #45	; 0x2d
 8006ab8:	d07d      	beq.n	8006bb6 <_strtod_l+0x2a6>
 8006aba:	f04f 0e00 	mov.w	lr, #0
 8006abe:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006ac2:	2d09      	cmp	r5, #9
 8006ac4:	f240 8084 	bls.w	8006bd0 <_strtod_l+0x2c0>
 8006ac8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006acc:	2500      	movs	r5, #0
 8006ace:	e09f      	b.n	8006c10 <_strtod_l+0x300>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e7c3      	b.n	8006a5c <_strtod_l+0x14c>
 8006ad4:	2e08      	cmp	r6, #8
 8006ad6:	bfd5      	itete	le
 8006ad8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006ada:	9904      	ldrgt	r1, [sp, #16]
 8006adc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ae0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006ae4:	f100 0001 	add.w	r0, r0, #1
 8006ae8:	bfd4      	ite	le
 8006aea:	930a      	strle	r3, [sp, #40]	; 0x28
 8006aec:	9304      	strgt	r3, [sp, #16]
 8006aee:	3601      	adds	r6, #1
 8006af0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006af2:	e7bb      	b.n	8006a6c <_strtod_l+0x15c>
 8006af4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006af6:	195a      	adds	r2, r3, r5
 8006af8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006afa:	5d5a      	ldrb	r2, [r3, r5]
 8006afc:	b3ae      	cbz	r6, 8006b6a <_strtod_l+0x25a>
 8006afe:	4683      	mov	fp, r0
 8006b00:	4633      	mov	r3, r6
 8006b02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006b06:	2909      	cmp	r1, #9
 8006b08:	d912      	bls.n	8006b30 <_strtod_l+0x220>
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	e7c1      	b.n	8006a92 <_strtod_l+0x182>
 8006b0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b14:	785a      	ldrb	r2, [r3, #1]
 8006b16:	3001      	adds	r0, #1
 8006b18:	2a30      	cmp	r2, #48	; 0x30
 8006b1a:	d0f8      	beq.n	8006b0e <_strtod_l+0x1fe>
 8006b1c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	f200 84b0 	bhi.w	8007486 <_strtod_l+0xb76>
 8006b26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b28:	930c      	str	r3, [sp, #48]	; 0x30
 8006b2a:	4683      	mov	fp, r0
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	3a30      	subs	r2, #48	; 0x30
 8006b32:	f100 0101 	add.w	r1, r0, #1
 8006b36:	d012      	beq.n	8006b5e <_strtod_l+0x24e>
 8006b38:	448b      	add	fp, r1
 8006b3a:	eb00 0c03 	add.w	ip, r0, r3
 8006b3e:	4619      	mov	r1, r3
 8006b40:	250a      	movs	r5, #10
 8006b42:	4561      	cmp	r1, ip
 8006b44:	d113      	bne.n	8006b6e <_strtod_l+0x25e>
 8006b46:	1819      	adds	r1, r3, r0
 8006b48:	2908      	cmp	r1, #8
 8006b4a:	f103 0301 	add.w	r3, r3, #1
 8006b4e:	4403      	add	r3, r0
 8006b50:	dc1d      	bgt.n	8006b8e <_strtod_l+0x27e>
 8006b52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b54:	210a      	movs	r1, #10
 8006b56:	fb01 2200 	mla	r2, r1, r0, r2
 8006b5a:	920a      	str	r2, [sp, #40]	; 0x28
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b60:	1c50      	adds	r0, r2, #1
 8006b62:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b64:	7852      	ldrb	r2, [r2, #1]
 8006b66:	4608      	mov	r0, r1
 8006b68:	e7cb      	b.n	8006b02 <_strtod_l+0x1f2>
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	e7d4      	b.n	8006b18 <_strtod_l+0x208>
 8006b6e:	2908      	cmp	r1, #8
 8006b70:	dc04      	bgt.n	8006b7c <_strtod_l+0x26c>
 8006b72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006b74:	436f      	muls	r7, r5
 8006b76:	970a      	str	r7, [sp, #40]	; 0x28
 8006b78:	3101      	adds	r1, #1
 8006b7a:	e7e2      	b.n	8006b42 <_strtod_l+0x232>
 8006b7c:	f101 0e01 	add.w	lr, r1, #1
 8006b80:	f1be 0f10 	cmp.w	lr, #16
 8006b84:	bfde      	ittt	le
 8006b86:	9f04      	ldrle	r7, [sp, #16]
 8006b88:	436f      	mulle	r7, r5
 8006b8a:	9704      	strle	r7, [sp, #16]
 8006b8c:	e7f4      	b.n	8006b78 <_strtod_l+0x268>
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	bfdf      	itttt	le
 8006b92:	9804      	ldrle	r0, [sp, #16]
 8006b94:	210a      	movle	r1, #10
 8006b96:	fb01 2200 	mlale	r2, r1, r0, r2
 8006b9a:	9204      	strle	r2, [sp, #16]
 8006b9c:	e7de      	b.n	8006b5c <_strtod_l+0x24c>
 8006b9e:	f04f 0b00 	mov.w	fp, #0
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	e77a      	b.n	8006a9c <_strtod_l+0x18c>
 8006ba6:	f04f 0e00 	mov.w	lr, #0
 8006baa:	f10a 0202 	add.w	r2, sl, #2
 8006bae:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bb0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006bb4:	e783      	b.n	8006abe <_strtod_l+0x1ae>
 8006bb6:	f04f 0e01 	mov.w	lr, #1
 8006bba:	e7f6      	b.n	8006baa <_strtod_l+0x29a>
 8006bbc:	0800969c 	.word	0x0800969c
 8006bc0:	080095d0 	.word	0x080095d0
 8006bc4:	7ff00000 	.word	0x7ff00000
 8006bc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bca:	1c55      	adds	r5, r2, #1
 8006bcc:	9517      	str	r5, [sp, #92]	; 0x5c
 8006bce:	7852      	ldrb	r2, [r2, #1]
 8006bd0:	2a30      	cmp	r2, #48	; 0x30
 8006bd2:	d0f9      	beq.n	8006bc8 <_strtod_l+0x2b8>
 8006bd4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006bd8:	2d08      	cmp	r5, #8
 8006bda:	f63f af77 	bhi.w	8006acc <_strtod_l+0x1bc>
 8006bde:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006be2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006be4:	9208      	str	r2, [sp, #32]
 8006be6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006be8:	1c55      	adds	r5, r2, #1
 8006bea:	9517      	str	r5, [sp, #92]	; 0x5c
 8006bec:	7852      	ldrb	r2, [r2, #1]
 8006bee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006bf2:	2f09      	cmp	r7, #9
 8006bf4:	d937      	bls.n	8006c66 <_strtod_l+0x356>
 8006bf6:	9f08      	ldr	r7, [sp, #32]
 8006bf8:	1bed      	subs	r5, r5, r7
 8006bfa:	2d08      	cmp	r5, #8
 8006bfc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006c00:	dc02      	bgt.n	8006c08 <_strtod_l+0x2f8>
 8006c02:	4565      	cmp	r5, ip
 8006c04:	bfa8      	it	ge
 8006c06:	4665      	movge	r5, ip
 8006c08:	f1be 0f00 	cmp.w	lr, #0
 8006c0c:	d000      	beq.n	8006c10 <_strtod_l+0x300>
 8006c0e:	426d      	negs	r5, r5
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d14f      	bne.n	8006cb4 <_strtod_l+0x3a4>
 8006c14:	9b06      	ldr	r3, [sp, #24]
 8006c16:	4303      	orrs	r3, r0
 8006c18:	f47f aebe 	bne.w	8006998 <_strtod_l+0x88>
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	f47f aed8 	bne.w	80069d2 <_strtod_l+0xc2>
 8006c22:	2a69      	cmp	r2, #105	; 0x69
 8006c24:	d027      	beq.n	8006c76 <_strtod_l+0x366>
 8006c26:	dc24      	bgt.n	8006c72 <_strtod_l+0x362>
 8006c28:	2a49      	cmp	r2, #73	; 0x49
 8006c2a:	d024      	beq.n	8006c76 <_strtod_l+0x366>
 8006c2c:	2a4e      	cmp	r2, #78	; 0x4e
 8006c2e:	f47f aed0 	bne.w	80069d2 <_strtod_l+0xc2>
 8006c32:	499b      	ldr	r1, [pc, #620]	; (8006ea0 <_strtod_l+0x590>)
 8006c34:	a817      	add	r0, sp, #92	; 0x5c
 8006c36:	f000 ff0d 	bl	8007a54 <__match>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f43f aec9 	beq.w	80069d2 <_strtod_l+0xc2>
 8006c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b28      	cmp	r3, #40	; 0x28
 8006c46:	d12d      	bne.n	8006ca4 <_strtod_l+0x394>
 8006c48:	4996      	ldr	r1, [pc, #600]	; (8006ea4 <_strtod_l+0x594>)
 8006c4a:	aa1a      	add	r2, sp, #104	; 0x68
 8006c4c:	a817      	add	r0, sp, #92	; 0x5c
 8006c4e:	f000 ff15 	bl	8007a7c <__hexnan>
 8006c52:	2805      	cmp	r0, #5
 8006c54:	d126      	bne.n	8006ca4 <_strtod_l+0x394>
 8006c56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006c60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006c64:	e698      	b.n	8006998 <_strtod_l+0x88>
 8006c66:	250a      	movs	r5, #10
 8006c68:	fb05 250c 	mla	r5, r5, ip, r2
 8006c6c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006c70:	e7b9      	b.n	8006be6 <_strtod_l+0x2d6>
 8006c72:	2a6e      	cmp	r2, #110	; 0x6e
 8006c74:	e7db      	b.n	8006c2e <_strtod_l+0x31e>
 8006c76:	498c      	ldr	r1, [pc, #560]	; (8006ea8 <_strtod_l+0x598>)
 8006c78:	a817      	add	r0, sp, #92	; 0x5c
 8006c7a:	f000 feeb 	bl	8007a54 <__match>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f aea7 	beq.w	80069d2 <_strtod_l+0xc2>
 8006c84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c86:	4989      	ldr	r1, [pc, #548]	; (8006eac <_strtod_l+0x59c>)
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	a817      	add	r0, sp, #92	; 0x5c
 8006c8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c8e:	f000 fee1 	bl	8007a54 <__match>
 8006c92:	b910      	cbnz	r0, 8006c9a <_strtod_l+0x38a>
 8006c94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c96:	3301      	adds	r3, #1
 8006c98:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c9a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8006ec0 <_strtod_l+0x5b0>
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	e679      	b.n	8006998 <_strtod_l+0x88>
 8006ca4:	4882      	ldr	r0, [pc, #520]	; (8006eb0 <_strtod_l+0x5a0>)
 8006ca6:	f001 fccb 	bl	8008640 <nan>
 8006caa:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006cae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006cb2:	e671      	b.n	8006998 <_strtod_l+0x88>
 8006cb4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8006cb8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006cbc:	eba5 020b 	sub.w	r2, r5, fp
 8006cc0:	2e00      	cmp	r6, #0
 8006cc2:	bf08      	it	eq
 8006cc4:	461e      	moveq	r6, r3
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006ccc:	9206      	str	r2, [sp, #24]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	bfa8      	it	ge
 8006cd2:	2210      	movge	r2, #16
 8006cd4:	2b09      	cmp	r3, #9
 8006cd6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006cda:	dd0e      	ble.n	8006cfa <_strtod_l+0x3ea>
 8006cdc:	4975      	ldr	r1, [pc, #468]	; (8006eb4 <_strtod_l+0x5a4>)
 8006cde:	eddd 7a04 	vldr	s15, [sp, #16]
 8006ce2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006ce6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8006cea:	ed9d 5b08 	vldr	d5, [sp, #32]
 8006cee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006cf2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006cf6:	ec59 8b17 	vmov	r8, r9, d7
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	dc37      	bgt.n	8006d6e <_strtod_l+0x45e>
 8006cfe:	9906      	ldr	r1, [sp, #24]
 8006d00:	2900      	cmp	r1, #0
 8006d02:	f43f ae49 	beq.w	8006998 <_strtod_l+0x88>
 8006d06:	dd23      	ble.n	8006d50 <_strtod_l+0x440>
 8006d08:	2916      	cmp	r1, #22
 8006d0a:	dc0b      	bgt.n	8006d24 <_strtod_l+0x414>
 8006d0c:	4b69      	ldr	r3, [pc, #420]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006d12:	ed93 7b00 	vldr	d7, [r3]
 8006d16:	ec49 8b16 	vmov	d6, r8, r9
 8006d1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d1e:	ec59 8b17 	vmov	r8, r9, d7
 8006d22:	e639      	b.n	8006998 <_strtod_l+0x88>
 8006d24:	9806      	ldr	r0, [sp, #24]
 8006d26:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006d2a:	4281      	cmp	r1, r0
 8006d2c:	db1f      	blt.n	8006d6e <_strtod_l+0x45e>
 8006d2e:	4a61      	ldr	r2, [pc, #388]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d30:	f1c3 030f 	rsb	r3, r3, #15
 8006d34:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006d38:	ed91 7b00 	vldr	d7, [r1]
 8006d3c:	ec49 8b16 	vmov	d6, r8, r9
 8006d40:	1ac3      	subs	r3, r0, r3
 8006d42:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006d46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d4a:	ed92 6b00 	vldr	d6, [r2]
 8006d4e:	e7e4      	b.n	8006d1a <_strtod_l+0x40a>
 8006d50:	9906      	ldr	r1, [sp, #24]
 8006d52:	3116      	adds	r1, #22
 8006d54:	db0b      	blt.n	8006d6e <_strtod_l+0x45e>
 8006d56:	4b57      	ldr	r3, [pc, #348]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d58:	ebab 0505 	sub.w	r5, fp, r5
 8006d5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d60:	ed95 7b00 	vldr	d7, [r5]
 8006d64:	ec49 8b16 	vmov	d6, r8, r9
 8006d68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006d6c:	e7d7      	b.n	8006d1e <_strtod_l+0x40e>
 8006d6e:	9906      	ldr	r1, [sp, #24]
 8006d70:	1a9a      	subs	r2, r3, r2
 8006d72:	440a      	add	r2, r1
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	dd74      	ble.n	8006e62 <_strtod_l+0x552>
 8006d78:	f012 000f 	ands.w	r0, r2, #15
 8006d7c:	d00a      	beq.n	8006d94 <_strtod_l+0x484>
 8006d7e:	494d      	ldr	r1, [pc, #308]	; (8006eb4 <_strtod_l+0x5a4>)
 8006d80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006d84:	ed91 7b00 	vldr	d7, [r1]
 8006d88:	ec49 8b16 	vmov	d6, r8, r9
 8006d8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d90:	ec59 8b17 	vmov	r8, r9, d7
 8006d94:	f032 020f 	bics.w	r2, r2, #15
 8006d98:	d04f      	beq.n	8006e3a <_strtod_l+0x52a>
 8006d9a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006d9e:	dd22      	ble.n	8006de6 <_strtod_l+0x4d6>
 8006da0:	2500      	movs	r5, #0
 8006da2:	462e      	mov	r6, r5
 8006da4:	950a      	str	r5, [sp, #40]	; 0x28
 8006da6:	462f      	mov	r7, r5
 8006da8:	2322      	movs	r3, #34	; 0x22
 8006daa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8006ec0 <_strtod_l+0x5b0>
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	f04f 0800 	mov.w	r8, #0
 8006db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f43f adee 	beq.w	8006998 <_strtod_l+0x88>
 8006dbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 ff58 	bl	8007c74 <_Bfree>
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 ff54 	bl	8007c74 <_Bfree>
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 ff50 	bl	8007c74 <_Bfree>
 8006dd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 ff4c 	bl	8007c74 <_Bfree>
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 ff48 	bl	8007c74 <_Bfree>
 8006de4:	e5d8      	b.n	8006998 <_strtod_l+0x88>
 8006de6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006dea:	2000      	movs	r0, #0
 8006dec:	4f32      	ldr	r7, [pc, #200]	; (8006eb8 <_strtod_l+0x5a8>)
 8006dee:	1112      	asrs	r2, r2, #4
 8006df0:	4601      	mov	r1, r0
 8006df2:	2a01      	cmp	r2, #1
 8006df4:	dc24      	bgt.n	8006e40 <_strtod_l+0x530>
 8006df6:	b108      	cbz	r0, 8006dfc <_strtod_l+0x4ec>
 8006df8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006dfc:	4a2e      	ldr	r2, [pc, #184]	; (8006eb8 <_strtod_l+0x5a8>)
 8006dfe:	482f      	ldr	r0, [pc, #188]	; (8006ebc <_strtod_l+0x5ac>)
 8006e00:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8006e04:	ed91 7b00 	vldr	d7, [r1]
 8006e08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006e0c:	ec49 8b16 	vmov	d6, r8, r9
 8006e10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e18:	9905      	ldr	r1, [sp, #20]
 8006e1a:	4a29      	ldr	r2, [pc, #164]	; (8006ec0 <_strtod_l+0x5b0>)
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	4282      	cmp	r2, r0
 8006e20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e24:	d8bc      	bhi.n	8006da0 <_strtod_l+0x490>
 8006e26:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006e2a:	4282      	cmp	r2, r0
 8006e2c:	bf86      	itte	hi
 8006e2e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006ec4 <_strtod_l+0x5b4>
 8006e32:	f04f 38ff 	movhi.w	r8, #4294967295
 8006e36:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	9204      	str	r2, [sp, #16]
 8006e3e:	e07f      	b.n	8006f40 <_strtod_l+0x630>
 8006e40:	f012 0f01 	tst.w	r2, #1
 8006e44:	d00a      	beq.n	8006e5c <_strtod_l+0x54c>
 8006e46:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8006e4a:	ed90 7b00 	vldr	d7, [r0]
 8006e4e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8006e52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006e56:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	1052      	asrs	r2, r2, #1
 8006e60:	e7c7      	b.n	8006df2 <_strtod_l+0x4e2>
 8006e62:	d0ea      	beq.n	8006e3a <_strtod_l+0x52a>
 8006e64:	4252      	negs	r2, r2
 8006e66:	f012 000f 	ands.w	r0, r2, #15
 8006e6a:	d00a      	beq.n	8006e82 <_strtod_l+0x572>
 8006e6c:	4911      	ldr	r1, [pc, #68]	; (8006eb4 <_strtod_l+0x5a4>)
 8006e6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006e72:	ed91 7b00 	vldr	d7, [r1]
 8006e76:	ec49 8b16 	vmov	d6, r8, r9
 8006e7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006e7e:	ec59 8b17 	vmov	r8, r9, d7
 8006e82:	1112      	asrs	r2, r2, #4
 8006e84:	d0d9      	beq.n	8006e3a <_strtod_l+0x52a>
 8006e86:	2a1f      	cmp	r2, #31
 8006e88:	dd1e      	ble.n	8006ec8 <_strtod_l+0x5b8>
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	462e      	mov	r6, r5
 8006e8e:	950a      	str	r5, [sp, #40]	; 0x28
 8006e90:	462f      	mov	r7, r5
 8006e92:	2322      	movs	r3, #34	; 0x22
 8006e94:	f04f 0800 	mov.w	r8, #0
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	e789      	b.n	8006db4 <_strtod_l+0x4a4>
 8006ea0:	080095cd 	.word	0x080095cd
 8006ea4:	080095e4 	.word	0x080095e4
 8006ea8:	080095c4 	.word	0x080095c4
 8006eac:	080095c7 	.word	0x080095c7
 8006eb0:	0800985f 	.word	0x0800985f
 8006eb4:	08009750 	.word	0x08009750
 8006eb8:	08009728 	.word	0x08009728
 8006ebc:	7ca00000 	.word	0x7ca00000
 8006ec0:	7ff00000 	.word	0x7ff00000
 8006ec4:	7fefffff 	.word	0x7fefffff
 8006ec8:	f012 0110 	ands.w	r1, r2, #16
 8006ecc:	bf18      	it	ne
 8006ece:	216a      	movne	r1, #106	; 0x6a
 8006ed0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8006ed4:	9104      	str	r1, [sp, #16]
 8006ed6:	49c0      	ldr	r1, [pc, #768]	; (80071d8 <_strtod_l+0x8c8>)
 8006ed8:	2000      	movs	r0, #0
 8006eda:	07d7      	lsls	r7, r2, #31
 8006edc:	d508      	bpl.n	8006ef0 <_strtod_l+0x5e0>
 8006ede:	ed9d 6b08 	vldr	d6, [sp, #32]
 8006ee2:	ed91 7b00 	vldr	d7, [r1]
 8006ee6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006eea:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006eee:	2001      	movs	r0, #1
 8006ef0:	1052      	asrs	r2, r2, #1
 8006ef2:	f101 0108 	add.w	r1, r1, #8
 8006ef6:	d1f0      	bne.n	8006eda <_strtod_l+0x5ca>
 8006ef8:	b108      	cbz	r0, 8006efe <_strtod_l+0x5ee>
 8006efa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006efe:	9a04      	ldr	r2, [sp, #16]
 8006f00:	b1ba      	cbz	r2, 8006f32 <_strtod_l+0x622>
 8006f02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006f06:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8006f0a:	2a00      	cmp	r2, #0
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	dd10      	ble.n	8006f32 <_strtod_l+0x622>
 8006f10:	2a1f      	cmp	r2, #31
 8006f12:	f340 8132 	ble.w	800717a <_strtod_l+0x86a>
 8006f16:	2a34      	cmp	r2, #52	; 0x34
 8006f18:	bfde      	ittt	le
 8006f1a:	3a20      	suble	r2, #32
 8006f1c:	f04f 30ff 	movle.w	r0, #4294967295
 8006f20:	fa00 f202 	lslle.w	r2, r0, r2
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	bfcc      	ite	gt
 8006f2a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006f2e:	ea02 0901 	andle.w	r9, r2, r1
 8006f32:	ec49 8b17 	vmov	d7, r8, r9
 8006f36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3e:	d0a4      	beq.n	8006e8a <_strtod_l+0x57a>
 8006f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f42:	9200      	str	r2, [sp, #0]
 8006f44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f46:	4632      	mov	r2, r6
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 feff 	bl	8007d4c <__s2b>
 8006f4e:	900a      	str	r0, [sp, #40]	; 0x28
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f43f af25 	beq.w	8006da0 <_strtod_l+0x490>
 8006f56:	9b06      	ldr	r3, [sp, #24]
 8006f58:	ebab 0505 	sub.w	r5, fp, r5
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bfb4      	ite	lt
 8006f60:	462b      	movlt	r3, r5
 8006f62:	2300      	movge	r3, #0
 8006f64:	930c      	str	r3, [sp, #48]	; 0x30
 8006f66:	9b06      	ldr	r3, [sp, #24]
 8006f68:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80071c0 <_strtod_l+0x8b0>
 8006f6c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80071c8 <_strtod_l+0x8b8>
 8006f70:	ed9f bb97 	vldr	d11, [pc, #604]	; 80071d0 <_strtod_l+0x8c0>
 8006f74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f78:	2500      	movs	r5, #0
 8006f7a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f7c:	462e      	mov	r6, r5
 8006f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f80:	4620      	mov	r0, r4
 8006f82:	6859      	ldr	r1, [r3, #4]
 8006f84:	f000 fe36 	bl	8007bf4 <_Balloc>
 8006f88:	4607      	mov	r7, r0
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	f43f af0c 	beq.w	8006da8 <_strtod_l+0x498>
 8006f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	3202      	adds	r2, #2
 8006f96:	f103 010c 	add.w	r1, r3, #12
 8006f9a:	0092      	lsls	r2, r2, #2
 8006f9c:	300c      	adds	r0, #12
 8006f9e:	f000 fe1b 	bl	8007bd8 <memcpy>
 8006fa2:	ec49 8b10 	vmov	d0, r8, r9
 8006fa6:	aa1a      	add	r2, sp, #104	; 0x68
 8006fa8:	a919      	add	r1, sp, #100	; 0x64
 8006faa:	4620      	mov	r0, r4
 8006fac:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8006fb0:	f001 fa08 	bl	80083c4 <__d2b>
 8006fb4:	9018      	str	r0, [sp, #96]	; 0x60
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f43f aef6 	beq.w	8006da8 <_strtod_l+0x498>
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 ff5e 	bl	8007e80 <__i2b>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f43f aeee 	beq.w	8006da8 <_strtod_l+0x498>
 8006fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bfab      	itete	ge
 8006fd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006fd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006fd8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8006fdc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8006fe0:	bfac      	ite	ge
 8006fe2:	eb03 0b02 	addge.w	fp, r3, r2
 8006fe6:	eba2 0a03 	sublt.w	sl, r2, r3
 8006fea:	9a04      	ldr	r2, [sp, #16]
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	440b      	add	r3, r1
 8006ff0:	4a7a      	ldr	r2, [pc, #488]	; (80071dc <_strtod_l+0x8cc>)
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8006ffa:	f280 80d1 	bge.w	80071a0 <_strtod_l+0x890>
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	2a1f      	cmp	r2, #31
 8007002:	eba1 0102 	sub.w	r1, r1, r2
 8007006:	f04f 0001 	mov.w	r0, #1
 800700a:	f300 80bd 	bgt.w	8007188 <_strtod_l+0x878>
 800700e:	fa00 f302 	lsl.w	r3, r0, r2
 8007012:	930e      	str	r3, [sp, #56]	; 0x38
 8007014:	2300      	movs	r3, #0
 8007016:	930d      	str	r3, [sp, #52]	; 0x34
 8007018:	eb0b 0301 	add.w	r3, fp, r1
 800701c:	9a04      	ldr	r2, [sp, #16]
 800701e:	459b      	cmp	fp, r3
 8007020:	448a      	add	sl, r1
 8007022:	4492      	add	sl, r2
 8007024:	465a      	mov	r2, fp
 8007026:	bfa8      	it	ge
 8007028:	461a      	movge	r2, r3
 800702a:	4552      	cmp	r2, sl
 800702c:	bfa8      	it	ge
 800702e:	4652      	movge	r2, sl
 8007030:	2a00      	cmp	r2, #0
 8007032:	bfc2      	ittt	gt
 8007034:	1a9b      	subgt	r3, r3, r2
 8007036:	ebaa 0a02 	subgt.w	sl, sl, r2
 800703a:	ebab 0b02 	subgt.w	fp, fp, r2
 800703e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007040:	2a00      	cmp	r2, #0
 8007042:	dd18      	ble.n	8007076 <_strtod_l+0x766>
 8007044:	4631      	mov	r1, r6
 8007046:	4620      	mov	r0, r4
 8007048:	9315      	str	r3, [sp, #84]	; 0x54
 800704a:	f000 ffd5 	bl	8007ff8 <__pow5mult>
 800704e:	4606      	mov	r6, r0
 8007050:	2800      	cmp	r0, #0
 8007052:	f43f aea9 	beq.w	8006da8 <_strtod_l+0x498>
 8007056:	4601      	mov	r1, r0
 8007058:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800705a:	4620      	mov	r0, r4
 800705c:	f000 ff26 	bl	8007eac <__multiply>
 8007060:	9014      	str	r0, [sp, #80]	; 0x50
 8007062:	2800      	cmp	r0, #0
 8007064:	f43f aea0 	beq.w	8006da8 <_strtod_l+0x498>
 8007068:	9918      	ldr	r1, [sp, #96]	; 0x60
 800706a:	4620      	mov	r0, r4
 800706c:	f000 fe02 	bl	8007c74 <_Bfree>
 8007070:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007074:	9218      	str	r2, [sp, #96]	; 0x60
 8007076:	2b00      	cmp	r3, #0
 8007078:	f300 8097 	bgt.w	80071aa <_strtod_l+0x89a>
 800707c:	9b06      	ldr	r3, [sp, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	dd08      	ble.n	8007094 <_strtod_l+0x784>
 8007082:	4639      	mov	r1, r7
 8007084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007086:	4620      	mov	r0, r4
 8007088:	f000 ffb6 	bl	8007ff8 <__pow5mult>
 800708c:	4607      	mov	r7, r0
 800708e:	2800      	cmp	r0, #0
 8007090:	f43f ae8a 	beq.w	8006da8 <_strtod_l+0x498>
 8007094:	f1ba 0f00 	cmp.w	sl, #0
 8007098:	dd08      	ble.n	80070ac <_strtod_l+0x79c>
 800709a:	4639      	mov	r1, r7
 800709c:	4652      	mov	r2, sl
 800709e:	4620      	mov	r0, r4
 80070a0:	f001 f804 	bl	80080ac <__lshift>
 80070a4:	4607      	mov	r7, r0
 80070a6:	2800      	cmp	r0, #0
 80070a8:	f43f ae7e 	beq.w	8006da8 <_strtod_l+0x498>
 80070ac:	f1bb 0f00 	cmp.w	fp, #0
 80070b0:	dd08      	ble.n	80070c4 <_strtod_l+0x7b4>
 80070b2:	4631      	mov	r1, r6
 80070b4:	465a      	mov	r2, fp
 80070b6:	4620      	mov	r0, r4
 80070b8:	f000 fff8 	bl	80080ac <__lshift>
 80070bc:	4606      	mov	r6, r0
 80070be:	2800      	cmp	r0, #0
 80070c0:	f43f ae72 	beq.w	8006da8 <_strtod_l+0x498>
 80070c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070c6:	463a      	mov	r2, r7
 80070c8:	4620      	mov	r0, r4
 80070ca:	f001 f877 	bl	80081bc <__mdiff>
 80070ce:	4605      	mov	r5, r0
 80070d0:	2800      	cmp	r0, #0
 80070d2:	f43f ae69 	beq.w	8006da8 <_strtod_l+0x498>
 80070d6:	2300      	movs	r3, #0
 80070d8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80070dc:	60c3      	str	r3, [r0, #12]
 80070de:	4631      	mov	r1, r6
 80070e0:	f001 f850 	bl	8008184 <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	da7f      	bge.n	80071e8 <_strtod_l+0x8d8>
 80070e8:	ea5a 0308 	orrs.w	r3, sl, r8
 80070ec:	f040 80a5 	bne.w	800723a <_strtod_l+0x92a>
 80070f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f040 80a0 	bne.w	800723a <_strtod_l+0x92a>
 80070fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070fe:	0d1b      	lsrs	r3, r3, #20
 8007100:	051b      	lsls	r3, r3, #20
 8007102:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007106:	f240 8098 	bls.w	800723a <_strtod_l+0x92a>
 800710a:	696b      	ldr	r3, [r5, #20]
 800710c:	b91b      	cbnz	r3, 8007116 <_strtod_l+0x806>
 800710e:	692b      	ldr	r3, [r5, #16]
 8007110:	2b01      	cmp	r3, #1
 8007112:	f340 8092 	ble.w	800723a <_strtod_l+0x92a>
 8007116:	4629      	mov	r1, r5
 8007118:	2201      	movs	r2, #1
 800711a:	4620      	mov	r0, r4
 800711c:	f000 ffc6 	bl	80080ac <__lshift>
 8007120:	4631      	mov	r1, r6
 8007122:	4605      	mov	r5, r0
 8007124:	f001 f82e 	bl	8008184 <__mcmp>
 8007128:	2800      	cmp	r0, #0
 800712a:	f340 8086 	ble.w	800723a <_strtod_l+0x92a>
 800712e:	9904      	ldr	r1, [sp, #16]
 8007130:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <_strtod_l+0x8d0>)
 8007132:	464b      	mov	r3, r9
 8007134:	2900      	cmp	r1, #0
 8007136:	f000 80a1 	beq.w	800727c <_strtod_l+0x96c>
 800713a:	ea02 0109 	and.w	r1, r2, r9
 800713e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007142:	f300 809b 	bgt.w	800727c <_strtod_l+0x96c>
 8007146:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800714a:	f77f aea2 	ble.w	8006e92 <_strtod_l+0x582>
 800714e:	4a25      	ldr	r2, [pc, #148]	; (80071e4 <_strtod_l+0x8d4>)
 8007150:	2300      	movs	r3, #0
 8007152:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007156:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800715a:	ec49 8b17 	vmov	d7, r8, r9
 800715e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007162:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007166:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	bf08      	it	eq
 800716e:	2322      	moveq	r3, #34	; 0x22
 8007170:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007174:	bf08      	it	eq
 8007176:	6023      	streq	r3, [r4, #0]
 8007178:	e620      	b.n	8006dbc <_strtod_l+0x4ac>
 800717a:	f04f 31ff 	mov.w	r1, #4294967295
 800717e:	fa01 f202 	lsl.w	r2, r1, r2
 8007182:	ea02 0808 	and.w	r8, r2, r8
 8007186:	e6d4      	b.n	8006f32 <_strtod_l+0x622>
 8007188:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800718c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007190:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007194:	33e2      	adds	r3, #226	; 0xe2
 8007196:	fa00 f303 	lsl.w	r3, r0, r3
 800719a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800719e:	e73b      	b.n	8007018 <_strtod_l+0x708>
 80071a0:	2000      	movs	r0, #0
 80071a2:	2301      	movs	r3, #1
 80071a4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80071a8:	e736      	b.n	8007018 <_strtod_l+0x708>
 80071aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071ac:	461a      	mov	r2, r3
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 ff7c 	bl	80080ac <__lshift>
 80071b4:	9018      	str	r0, [sp, #96]	; 0x60
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f47f af60 	bne.w	800707c <_strtod_l+0x76c>
 80071bc:	e5f4      	b.n	8006da8 <_strtod_l+0x498>
 80071be:	bf00      	nop
 80071c0:	94a03595 	.word	0x94a03595
 80071c4:	3fcfffff 	.word	0x3fcfffff
 80071c8:	94a03595 	.word	0x94a03595
 80071cc:	3fdfffff 	.word	0x3fdfffff
 80071d0:	35afe535 	.word	0x35afe535
 80071d4:	3fe00000 	.word	0x3fe00000
 80071d8:	080095f8 	.word	0x080095f8
 80071dc:	fffffc02 	.word	0xfffffc02
 80071e0:	7ff00000 	.word	0x7ff00000
 80071e4:	39500000 	.word	0x39500000
 80071e8:	46cb      	mov	fp, r9
 80071ea:	d165      	bne.n	80072b8 <_strtod_l+0x9a8>
 80071ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	d02a      	beq.n	800724c <_strtod_l+0x93c>
 80071f6:	4aaa      	ldr	r2, [pc, #680]	; (80074a0 <_strtod_l+0xb90>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d12b      	bne.n	8007254 <_strtod_l+0x944>
 80071fc:	9b04      	ldr	r3, [sp, #16]
 80071fe:	4641      	mov	r1, r8
 8007200:	b1fb      	cbz	r3, 8007242 <_strtod_l+0x932>
 8007202:	4aa8      	ldr	r2, [pc, #672]	; (80074a4 <_strtod_l+0xb94>)
 8007204:	ea09 0202 	and.w	r2, r9, r2
 8007208:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	d81a      	bhi.n	8007248 <_strtod_l+0x938>
 8007212:	0d12      	lsrs	r2, r2, #20
 8007214:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007218:	fa00 f303 	lsl.w	r3, r0, r3
 800721c:	4299      	cmp	r1, r3
 800721e:	d119      	bne.n	8007254 <_strtod_l+0x944>
 8007220:	4ba1      	ldr	r3, [pc, #644]	; (80074a8 <_strtod_l+0xb98>)
 8007222:	459b      	cmp	fp, r3
 8007224:	d102      	bne.n	800722c <_strtod_l+0x91c>
 8007226:	3101      	adds	r1, #1
 8007228:	f43f adbe 	beq.w	8006da8 <_strtod_l+0x498>
 800722c:	4b9d      	ldr	r3, [pc, #628]	; (80074a4 <_strtod_l+0xb94>)
 800722e:	ea0b 0303 	and.w	r3, fp, r3
 8007232:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007236:	f04f 0800 	mov.w	r8, #0
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d186      	bne.n	800714e <_strtod_l+0x83e>
 8007240:	e5bc      	b.n	8006dbc <_strtod_l+0x4ac>
 8007242:	f04f 33ff 	mov.w	r3, #4294967295
 8007246:	e7e9      	b.n	800721c <_strtod_l+0x90c>
 8007248:	4603      	mov	r3, r0
 800724a:	e7e7      	b.n	800721c <_strtod_l+0x90c>
 800724c:	ea53 0308 	orrs.w	r3, r3, r8
 8007250:	f43f af6d 	beq.w	800712e <_strtod_l+0x81e>
 8007254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007256:	b1db      	cbz	r3, 8007290 <_strtod_l+0x980>
 8007258:	ea13 0f0b 	tst.w	r3, fp
 800725c:	d0ed      	beq.n	800723a <_strtod_l+0x92a>
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	f1ba 0f00 	cmp.w	sl, #0
 8007268:	d016      	beq.n	8007298 <_strtod_l+0x988>
 800726a:	f7ff fb35 	bl	80068d8 <sulp>
 800726e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007272:	ee37 7b00 	vadd.f64	d7, d7, d0
 8007276:	ec59 8b17 	vmov	r8, r9, d7
 800727a:	e7de      	b.n	800723a <_strtod_l+0x92a>
 800727c:	4013      	ands	r3, r2
 800727e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007282:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007286:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800728a:	f04f 38ff 	mov.w	r8, #4294967295
 800728e:	e7d4      	b.n	800723a <_strtod_l+0x92a>
 8007290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007292:	ea13 0f08 	tst.w	r3, r8
 8007296:	e7e1      	b.n	800725c <_strtod_l+0x94c>
 8007298:	f7ff fb1e 	bl	80068d8 <sulp>
 800729c:	ed9d 7b08 	vldr	d7, [sp, #32]
 80072a0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80072a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80072b4:	d1c1      	bne.n	800723a <_strtod_l+0x92a>
 80072b6:	e5ec      	b.n	8006e92 <_strtod_l+0x582>
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	f001 f8de 	bl	800847c <__ratio>
 80072c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80072c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80072c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072cc:	d867      	bhi.n	800739e <_strtod_l+0xa8e>
 80072ce:	f1ba 0f00 	cmp.w	sl, #0
 80072d2:	d044      	beq.n	800735e <_strtod_l+0xa4e>
 80072d4:	4b75      	ldr	r3, [pc, #468]	; (80074ac <_strtod_l+0xb9c>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80072dc:	4971      	ldr	r1, [pc, #452]	; (80074a4 <_strtod_l+0xb94>)
 80072de:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80074b8 <_strtod_l+0xba8>
 80072e2:	ea0b 0001 	and.w	r0, fp, r1
 80072e6:	4560      	cmp	r0, ip
 80072e8:	900d      	str	r0, [sp, #52]	; 0x34
 80072ea:	f040 808b 	bne.w	8007404 <_strtod_l+0xaf4>
 80072ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072f2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80072f6:	ec49 8b10 	vmov	d0, r8, r9
 80072fa:	ec43 2b1c 	vmov	d12, r2, r3
 80072fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007302:	f000 ffe3 	bl	80082cc <__ulp>
 8007306:	ec49 8b1d 	vmov	d13, r8, r9
 800730a:	eeac db00 	vfma.f64	d13, d12, d0
 800730e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007314:	4963      	ldr	r1, [pc, #396]	; (80074a4 <_strtod_l+0xb94>)
 8007316:	4a66      	ldr	r2, [pc, #408]	; (80074b0 <_strtod_l+0xba0>)
 8007318:	4019      	ands	r1, r3
 800731a:	4291      	cmp	r1, r2
 800731c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007320:	d947      	bls.n	80073b2 <_strtod_l+0xaa2>
 8007322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007324:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007328:	4293      	cmp	r3, r2
 800732a:	d103      	bne.n	8007334 <_strtod_l+0xa24>
 800732c:	9b08      	ldr	r3, [sp, #32]
 800732e:	3301      	adds	r3, #1
 8007330:	f43f ad3a 	beq.w	8006da8 <_strtod_l+0x498>
 8007334:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80074a8 <_strtod_l+0xb98>
 8007338:	f04f 38ff 	mov.w	r8, #4294967295
 800733c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800733e:	4620      	mov	r0, r4
 8007340:	f000 fc98 	bl	8007c74 <_Bfree>
 8007344:	4639      	mov	r1, r7
 8007346:	4620      	mov	r0, r4
 8007348:	f000 fc94 	bl	8007c74 <_Bfree>
 800734c:	4631      	mov	r1, r6
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fc90 	bl	8007c74 <_Bfree>
 8007354:	4629      	mov	r1, r5
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fc8c 	bl	8007c74 <_Bfree>
 800735c:	e60f      	b.n	8006f7e <_strtod_l+0x66e>
 800735e:	f1b8 0f00 	cmp.w	r8, #0
 8007362:	d112      	bne.n	800738a <_strtod_l+0xa7a>
 8007364:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007368:	b9b3      	cbnz	r3, 8007398 <_strtod_l+0xa88>
 800736a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800736e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007376:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800737a:	d401      	bmi.n	8007380 <_strtod_l+0xa70>
 800737c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007380:	eeb1 7b48 	vneg.f64	d7, d8
 8007384:	ec53 2b17 	vmov	r2, r3, d7
 8007388:	e7a8      	b.n	80072dc <_strtod_l+0x9cc>
 800738a:	f1b8 0f01 	cmp.w	r8, #1
 800738e:	d103      	bne.n	8007398 <_strtod_l+0xa88>
 8007390:	f1b9 0f00 	cmp.w	r9, #0
 8007394:	f43f ad7d 	beq.w	8006e92 <_strtod_l+0x582>
 8007398:	4b46      	ldr	r3, [pc, #280]	; (80074b4 <_strtod_l+0xba4>)
 800739a:	2200      	movs	r2, #0
 800739c:	e79c      	b.n	80072d8 <_strtod_l+0x9c8>
 800739e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80073a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80073a6:	f1ba 0f00 	cmp.w	sl, #0
 80073aa:	d0e9      	beq.n	8007380 <_strtod_l+0xa70>
 80073ac:	ec53 2b18 	vmov	r2, r3, d8
 80073b0:	e794      	b.n	80072dc <_strtod_l+0x9cc>
 80073b2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1bf      	bne.n	800733c <_strtod_l+0xa2c>
 80073bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073c2:	0d1b      	lsrs	r3, r3, #20
 80073c4:	051b      	lsls	r3, r3, #20
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d1b8      	bne.n	800733c <_strtod_l+0xa2c>
 80073ca:	ec51 0b18 	vmov	r0, r1, d8
 80073ce:	f7f9 f963 	bl	8000698 <__aeabi_d2lz>
 80073d2:	f7f9 f91b 	bl	800060c <__aeabi_l2d>
 80073d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073da:	ec41 0b17 	vmov	d7, r0, r1
 80073de:	ea43 0308 	orr.w	r3, r3, r8
 80073e2:	ea53 030a 	orrs.w	r3, r3, sl
 80073e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80073ea:	d03e      	beq.n	800746a <_strtod_l+0xb5a>
 80073ec:	eeb4 8bca 	vcmpe.f64	d8, d10
 80073f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f4:	f53f ace2 	bmi.w	8006dbc <_strtod_l+0x4ac>
 80073f8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80073fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007400:	dd9c      	ble.n	800733c <_strtod_l+0xa2c>
 8007402:	e4db      	b.n	8006dbc <_strtod_l+0x4ac>
 8007404:	9904      	ldr	r1, [sp, #16]
 8007406:	b301      	cbz	r1, 800744a <_strtod_l+0xb3a>
 8007408:	990d      	ldr	r1, [sp, #52]	; 0x34
 800740a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800740e:	d81c      	bhi.n	800744a <_strtod_l+0xb3a>
 8007410:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007498 <_strtod_l+0xb88>
 8007414:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	d811      	bhi.n	8007442 <_strtod_l+0xb32>
 800741e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007422:	ee18 3a10 	vmov	r3, s16
 8007426:	2b01      	cmp	r3, #1
 8007428:	bf38      	it	cc
 800742a:	2301      	movcc	r3, #1
 800742c:	ee08 3a10 	vmov	s16, r3
 8007430:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007434:	f1ba 0f00 	cmp.w	sl, #0
 8007438:	d114      	bne.n	8007464 <_strtod_l+0xb54>
 800743a:	eeb1 7b48 	vneg.f64	d7, d8
 800743e:	ec53 2b17 	vmov	r2, r3, d7
 8007442:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007444:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007448:	1a0b      	subs	r3, r1, r0
 800744a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800744e:	ec43 2b1c 	vmov	d12, r2, r3
 8007452:	f000 ff3b 	bl	80082cc <__ulp>
 8007456:	ed9d 7b08 	vldr	d7, [sp, #32]
 800745a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800745e:	ec59 8b17 	vmov	r8, r9, d7
 8007462:	e7a8      	b.n	80073b6 <_strtod_l+0xaa6>
 8007464:	ec53 2b18 	vmov	r2, r3, d8
 8007468:	e7eb      	b.n	8007442 <_strtod_l+0xb32>
 800746a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800746e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007472:	f57f af63 	bpl.w	800733c <_strtod_l+0xa2c>
 8007476:	e4a1      	b.n	8006dbc <_strtod_l+0x4ac>
 8007478:	2300      	movs	r3, #0
 800747a:	930b      	str	r3, [sp, #44]	; 0x2c
 800747c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800747e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	f7ff ba8d 	b.w	80069a0 <_strtod_l+0x90>
 8007486:	2a65      	cmp	r2, #101	; 0x65
 8007488:	f43f ab89 	beq.w	8006b9e <_strtod_l+0x28e>
 800748c:	2a45      	cmp	r2, #69	; 0x45
 800748e:	f43f ab86 	beq.w	8006b9e <_strtod_l+0x28e>
 8007492:	2101      	movs	r1, #1
 8007494:	f7ff bbbe 	b.w	8006c14 <_strtod_l+0x304>
 8007498:	ffc00000 	.word	0xffc00000
 800749c:	41dfffff 	.word	0x41dfffff
 80074a0:	000fffff 	.word	0x000fffff
 80074a4:	7ff00000 	.word	0x7ff00000
 80074a8:	7fefffff 	.word	0x7fefffff
 80074ac:	3ff00000 	.word	0x3ff00000
 80074b0:	7c9fffff 	.word	0x7c9fffff
 80074b4:	bff00000 	.word	0xbff00000
 80074b8:	7fe00000 	.word	0x7fe00000

080074bc <strtod>:
 80074bc:	460a      	mov	r2, r1
 80074be:	4601      	mov	r1, r0
 80074c0:	4802      	ldr	r0, [pc, #8]	; (80074cc <strtod+0x10>)
 80074c2:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <strtod+0x14>)
 80074c4:	6800      	ldr	r0, [r0, #0]
 80074c6:	f7ff ba23 	b.w	8006910 <_strtod_l>
 80074ca:	bf00      	nop
 80074cc:	2000000c 	.word	0x2000000c
 80074d0:	20000074 	.word	0x20000074

080074d4 <rshift>:
 80074d4:	6903      	ldr	r3, [r0, #16]
 80074d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074e2:	f100 0414 	add.w	r4, r0, #20
 80074e6:	dd45      	ble.n	8007574 <rshift+0xa0>
 80074e8:	f011 011f 	ands.w	r1, r1, #31
 80074ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80074f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074f4:	d10c      	bne.n	8007510 <rshift+0x3c>
 80074f6:	f100 0710 	add.w	r7, r0, #16
 80074fa:	4629      	mov	r1, r5
 80074fc:	42b1      	cmp	r1, r6
 80074fe:	d334      	bcc.n	800756a <rshift+0x96>
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	1eea      	subs	r2, r5, #3
 8007506:	4296      	cmp	r6, r2
 8007508:	bf38      	it	cc
 800750a:	2300      	movcc	r3, #0
 800750c:	4423      	add	r3, r4
 800750e:	e015      	b.n	800753c <rshift+0x68>
 8007510:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007514:	f1c1 0820 	rsb	r8, r1, #32
 8007518:	40cf      	lsrs	r7, r1
 800751a:	f105 0e04 	add.w	lr, r5, #4
 800751e:	46a1      	mov	r9, r4
 8007520:	4576      	cmp	r6, lr
 8007522:	46f4      	mov	ip, lr
 8007524:	d815      	bhi.n	8007552 <rshift+0x7e>
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	009a      	lsls	r2, r3, #2
 800752a:	3a04      	subs	r2, #4
 800752c:	3501      	adds	r5, #1
 800752e:	42ae      	cmp	r6, r5
 8007530:	bf38      	it	cc
 8007532:	2200      	movcc	r2, #0
 8007534:	18a3      	adds	r3, r4, r2
 8007536:	50a7      	str	r7, [r4, r2]
 8007538:	b107      	cbz	r7, 800753c <rshift+0x68>
 800753a:	3304      	adds	r3, #4
 800753c:	1b1a      	subs	r2, r3, r4
 800753e:	42a3      	cmp	r3, r4
 8007540:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007544:	bf08      	it	eq
 8007546:	2300      	moveq	r3, #0
 8007548:	6102      	str	r2, [r0, #16]
 800754a:	bf08      	it	eq
 800754c:	6143      	streq	r3, [r0, #20]
 800754e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007552:	f8dc c000 	ldr.w	ip, [ip]
 8007556:	fa0c fc08 	lsl.w	ip, ip, r8
 800755a:	ea4c 0707 	orr.w	r7, ip, r7
 800755e:	f849 7b04 	str.w	r7, [r9], #4
 8007562:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007566:	40cf      	lsrs	r7, r1
 8007568:	e7da      	b.n	8007520 <rshift+0x4c>
 800756a:	f851 cb04 	ldr.w	ip, [r1], #4
 800756e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007572:	e7c3      	b.n	80074fc <rshift+0x28>
 8007574:	4623      	mov	r3, r4
 8007576:	e7e1      	b.n	800753c <rshift+0x68>

08007578 <__hexdig_fun>:
 8007578:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800757c:	2b09      	cmp	r3, #9
 800757e:	d802      	bhi.n	8007586 <__hexdig_fun+0xe>
 8007580:	3820      	subs	r0, #32
 8007582:	b2c0      	uxtb	r0, r0
 8007584:	4770      	bx	lr
 8007586:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800758a:	2b05      	cmp	r3, #5
 800758c:	d801      	bhi.n	8007592 <__hexdig_fun+0x1a>
 800758e:	3847      	subs	r0, #71	; 0x47
 8007590:	e7f7      	b.n	8007582 <__hexdig_fun+0xa>
 8007592:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007596:	2b05      	cmp	r3, #5
 8007598:	d801      	bhi.n	800759e <__hexdig_fun+0x26>
 800759a:	3827      	subs	r0, #39	; 0x27
 800759c:	e7f1      	b.n	8007582 <__hexdig_fun+0xa>
 800759e:	2000      	movs	r0, #0
 80075a0:	4770      	bx	lr
	...

080075a4 <__gethex>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	ed2d 8b02 	vpush	{d8}
 80075ac:	b089      	sub	sp, #36	; 0x24
 80075ae:	ee08 0a10 	vmov	s16, r0
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	4bbc      	ldr	r3, [pc, #752]	; (80078a8 <__gethex+0x304>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	468b      	mov	fp, r1
 80075be:	4690      	mov	r8, r2
 80075c0:	f7f8 fe3e 	bl	8000240 <strlen>
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	f8db 2000 	ldr.w	r2, [fp]
 80075ca:	4403      	add	r3, r0
 80075cc:	4682      	mov	sl, r0
 80075ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	1c93      	adds	r3, r2, #2
 80075d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075de:	32fe      	adds	r2, #254	; 0xfe
 80075e0:	18d1      	adds	r1, r2, r3
 80075e2:	461f      	mov	r7, r3
 80075e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075e8:	9100      	str	r1, [sp, #0]
 80075ea:	2830      	cmp	r0, #48	; 0x30
 80075ec:	d0f8      	beq.n	80075e0 <__gethex+0x3c>
 80075ee:	f7ff ffc3 	bl	8007578 <__hexdig_fun>
 80075f2:	4604      	mov	r4, r0
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d13a      	bne.n	800766e <__gethex+0xca>
 80075f8:	9901      	ldr	r1, [sp, #4]
 80075fa:	4652      	mov	r2, sl
 80075fc:	4638      	mov	r0, r7
 80075fe:	f001 f837 	bl	8008670 <strncmp>
 8007602:	4605      	mov	r5, r0
 8007604:	2800      	cmp	r0, #0
 8007606:	d168      	bne.n	80076da <__gethex+0x136>
 8007608:	f817 000a 	ldrb.w	r0, [r7, sl]
 800760c:	eb07 060a 	add.w	r6, r7, sl
 8007610:	f7ff ffb2 	bl	8007578 <__hexdig_fun>
 8007614:	2800      	cmp	r0, #0
 8007616:	d062      	beq.n	80076de <__gethex+0x13a>
 8007618:	4633      	mov	r3, r6
 800761a:	7818      	ldrb	r0, [r3, #0]
 800761c:	2830      	cmp	r0, #48	; 0x30
 800761e:	461f      	mov	r7, r3
 8007620:	f103 0301 	add.w	r3, r3, #1
 8007624:	d0f9      	beq.n	800761a <__gethex+0x76>
 8007626:	f7ff ffa7 	bl	8007578 <__hexdig_fun>
 800762a:	2301      	movs	r3, #1
 800762c:	fab0 f480 	clz	r4, r0
 8007630:	0964      	lsrs	r4, r4, #5
 8007632:	4635      	mov	r5, r6
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	463a      	mov	r2, r7
 8007638:	4616      	mov	r6, r2
 800763a:	3201      	adds	r2, #1
 800763c:	7830      	ldrb	r0, [r6, #0]
 800763e:	f7ff ff9b 	bl	8007578 <__hexdig_fun>
 8007642:	2800      	cmp	r0, #0
 8007644:	d1f8      	bne.n	8007638 <__gethex+0x94>
 8007646:	9901      	ldr	r1, [sp, #4]
 8007648:	4652      	mov	r2, sl
 800764a:	4630      	mov	r0, r6
 800764c:	f001 f810 	bl	8008670 <strncmp>
 8007650:	b980      	cbnz	r0, 8007674 <__gethex+0xd0>
 8007652:	b94d      	cbnz	r5, 8007668 <__gethex+0xc4>
 8007654:	eb06 050a 	add.w	r5, r6, sl
 8007658:	462a      	mov	r2, r5
 800765a:	4616      	mov	r6, r2
 800765c:	3201      	adds	r2, #1
 800765e:	7830      	ldrb	r0, [r6, #0]
 8007660:	f7ff ff8a 	bl	8007578 <__hexdig_fun>
 8007664:	2800      	cmp	r0, #0
 8007666:	d1f8      	bne.n	800765a <__gethex+0xb6>
 8007668:	1bad      	subs	r5, r5, r6
 800766a:	00ad      	lsls	r5, r5, #2
 800766c:	e004      	b.n	8007678 <__gethex+0xd4>
 800766e:	2400      	movs	r4, #0
 8007670:	4625      	mov	r5, r4
 8007672:	e7e0      	b.n	8007636 <__gethex+0x92>
 8007674:	2d00      	cmp	r5, #0
 8007676:	d1f7      	bne.n	8007668 <__gethex+0xc4>
 8007678:	7833      	ldrb	r3, [r6, #0]
 800767a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800767e:	2b50      	cmp	r3, #80	; 0x50
 8007680:	d13b      	bne.n	80076fa <__gethex+0x156>
 8007682:	7873      	ldrb	r3, [r6, #1]
 8007684:	2b2b      	cmp	r3, #43	; 0x2b
 8007686:	d02c      	beq.n	80076e2 <__gethex+0x13e>
 8007688:	2b2d      	cmp	r3, #45	; 0x2d
 800768a:	d02e      	beq.n	80076ea <__gethex+0x146>
 800768c:	1c71      	adds	r1, r6, #1
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	7808      	ldrb	r0, [r1, #0]
 8007694:	f7ff ff70 	bl	8007578 <__hexdig_fun>
 8007698:	1e43      	subs	r3, r0, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b18      	cmp	r3, #24
 800769e:	d82c      	bhi.n	80076fa <__gethex+0x156>
 80076a0:	f1a0 0210 	sub.w	r2, r0, #16
 80076a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076a8:	f7ff ff66 	bl	8007578 <__hexdig_fun>
 80076ac:	1e43      	subs	r3, r0, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b18      	cmp	r3, #24
 80076b2:	d91d      	bls.n	80076f0 <__gethex+0x14c>
 80076b4:	f1b9 0f00 	cmp.w	r9, #0
 80076b8:	d000      	beq.n	80076bc <__gethex+0x118>
 80076ba:	4252      	negs	r2, r2
 80076bc:	4415      	add	r5, r2
 80076be:	f8cb 1000 	str.w	r1, [fp]
 80076c2:	b1e4      	cbz	r4, 80076fe <__gethex+0x15a>
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf14      	ite	ne
 80076ca:	2700      	movne	r7, #0
 80076cc:	2706      	moveq	r7, #6
 80076ce:	4638      	mov	r0, r7
 80076d0:	b009      	add	sp, #36	; 0x24
 80076d2:	ecbd 8b02 	vpop	{d8}
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	463e      	mov	r6, r7
 80076dc:	4625      	mov	r5, r4
 80076de:	2401      	movs	r4, #1
 80076e0:	e7ca      	b.n	8007678 <__gethex+0xd4>
 80076e2:	f04f 0900 	mov.w	r9, #0
 80076e6:	1cb1      	adds	r1, r6, #2
 80076e8:	e7d3      	b.n	8007692 <__gethex+0xee>
 80076ea:	f04f 0901 	mov.w	r9, #1
 80076ee:	e7fa      	b.n	80076e6 <__gethex+0x142>
 80076f0:	230a      	movs	r3, #10
 80076f2:	fb03 0202 	mla	r2, r3, r2, r0
 80076f6:	3a10      	subs	r2, #16
 80076f8:	e7d4      	b.n	80076a4 <__gethex+0x100>
 80076fa:	4631      	mov	r1, r6
 80076fc:	e7df      	b.n	80076be <__gethex+0x11a>
 80076fe:	1bf3      	subs	r3, r6, r7
 8007700:	3b01      	subs	r3, #1
 8007702:	4621      	mov	r1, r4
 8007704:	2b07      	cmp	r3, #7
 8007706:	dc0b      	bgt.n	8007720 <__gethex+0x17c>
 8007708:	ee18 0a10 	vmov	r0, s16
 800770c:	f000 fa72 	bl	8007bf4 <_Balloc>
 8007710:	4604      	mov	r4, r0
 8007712:	b940      	cbnz	r0, 8007726 <__gethex+0x182>
 8007714:	4b65      	ldr	r3, [pc, #404]	; (80078ac <__gethex+0x308>)
 8007716:	4602      	mov	r2, r0
 8007718:	21de      	movs	r1, #222	; 0xde
 800771a:	4865      	ldr	r0, [pc, #404]	; (80078b0 <__gethex+0x30c>)
 800771c:	f000 ffc8 	bl	80086b0 <__assert_func>
 8007720:	3101      	adds	r1, #1
 8007722:	105b      	asrs	r3, r3, #1
 8007724:	e7ee      	b.n	8007704 <__gethex+0x160>
 8007726:	f100 0914 	add.w	r9, r0, #20
 800772a:	f04f 0b00 	mov.w	fp, #0
 800772e:	f1ca 0301 	rsb	r3, sl, #1
 8007732:	f8cd 9008 	str.w	r9, [sp, #8]
 8007736:	f8cd b000 	str.w	fp, [sp]
 800773a:	9306      	str	r3, [sp, #24]
 800773c:	42b7      	cmp	r7, r6
 800773e:	d340      	bcc.n	80077c2 <__gethex+0x21e>
 8007740:	9802      	ldr	r0, [sp, #8]
 8007742:	9b00      	ldr	r3, [sp, #0]
 8007744:	f840 3b04 	str.w	r3, [r0], #4
 8007748:	eba0 0009 	sub.w	r0, r0, r9
 800774c:	1080      	asrs	r0, r0, #2
 800774e:	0146      	lsls	r6, r0, #5
 8007750:	6120      	str	r0, [r4, #16]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fb44 	bl	8007de0 <__hi0bits>
 8007758:	1a30      	subs	r0, r6, r0
 800775a:	f8d8 6000 	ldr.w	r6, [r8]
 800775e:	42b0      	cmp	r0, r6
 8007760:	dd63      	ble.n	800782a <__gethex+0x286>
 8007762:	1b87      	subs	r7, r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	4620      	mov	r0, r4
 8007768:	f000 fedf 	bl	800852a <__any_on>
 800776c:	4682      	mov	sl, r0
 800776e:	b1a8      	cbz	r0, 800779c <__gethex+0x1f8>
 8007770:	1e7b      	subs	r3, r7, #1
 8007772:	1159      	asrs	r1, r3, #5
 8007774:	f003 021f 	and.w	r2, r3, #31
 8007778:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800777c:	f04f 0a01 	mov.w	sl, #1
 8007780:	fa0a f202 	lsl.w	r2, sl, r2
 8007784:	420a      	tst	r2, r1
 8007786:	d009      	beq.n	800779c <__gethex+0x1f8>
 8007788:	4553      	cmp	r3, sl
 800778a:	dd05      	ble.n	8007798 <__gethex+0x1f4>
 800778c:	1eb9      	subs	r1, r7, #2
 800778e:	4620      	mov	r0, r4
 8007790:	f000 fecb 	bl	800852a <__any_on>
 8007794:	2800      	cmp	r0, #0
 8007796:	d145      	bne.n	8007824 <__gethex+0x280>
 8007798:	f04f 0a02 	mov.w	sl, #2
 800779c:	4639      	mov	r1, r7
 800779e:	4620      	mov	r0, r4
 80077a0:	f7ff fe98 	bl	80074d4 <rshift>
 80077a4:	443d      	add	r5, r7
 80077a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077aa:	42ab      	cmp	r3, r5
 80077ac:	da4c      	bge.n	8007848 <__gethex+0x2a4>
 80077ae:	ee18 0a10 	vmov	r0, s16
 80077b2:	4621      	mov	r1, r4
 80077b4:	f000 fa5e 	bl	8007c74 <_Bfree>
 80077b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077ba:	2300      	movs	r3, #0
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	27a3      	movs	r7, #163	; 0xa3
 80077c0:	e785      	b.n	80076ce <__gethex+0x12a>
 80077c2:	1e73      	subs	r3, r6, #1
 80077c4:	9a05      	ldr	r2, [sp, #20]
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d019      	beq.n	8007804 <__gethex+0x260>
 80077d0:	f1bb 0f20 	cmp.w	fp, #32
 80077d4:	d107      	bne.n	80077e6 <__gethex+0x242>
 80077d6:	9b02      	ldr	r3, [sp, #8]
 80077d8:	9a00      	ldr	r2, [sp, #0]
 80077da:	f843 2b04 	str.w	r2, [r3], #4
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	2300      	movs	r3, #0
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	469b      	mov	fp, r3
 80077e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80077ea:	f7ff fec5 	bl	8007578 <__hexdig_fun>
 80077ee:	9b00      	ldr	r3, [sp, #0]
 80077f0:	f000 000f 	and.w	r0, r0, #15
 80077f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80077f8:	4303      	orrs	r3, r0
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	f10b 0b04 	add.w	fp, fp, #4
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	e00d      	b.n	8007820 <__gethex+0x27c>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	9a06      	ldr	r2, [sp, #24]
 8007808:	4413      	add	r3, r2
 800780a:	42bb      	cmp	r3, r7
 800780c:	d3e0      	bcc.n	80077d0 <__gethex+0x22c>
 800780e:	4618      	mov	r0, r3
 8007810:	9901      	ldr	r1, [sp, #4]
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	4652      	mov	r2, sl
 8007816:	f000 ff2b 	bl	8008670 <strncmp>
 800781a:	9b07      	ldr	r3, [sp, #28]
 800781c:	2800      	cmp	r0, #0
 800781e:	d1d7      	bne.n	80077d0 <__gethex+0x22c>
 8007820:	461e      	mov	r6, r3
 8007822:	e78b      	b.n	800773c <__gethex+0x198>
 8007824:	f04f 0a03 	mov.w	sl, #3
 8007828:	e7b8      	b.n	800779c <__gethex+0x1f8>
 800782a:	da0a      	bge.n	8007842 <__gethex+0x29e>
 800782c:	1a37      	subs	r7, r6, r0
 800782e:	4621      	mov	r1, r4
 8007830:	ee18 0a10 	vmov	r0, s16
 8007834:	463a      	mov	r2, r7
 8007836:	f000 fc39 	bl	80080ac <__lshift>
 800783a:	1bed      	subs	r5, r5, r7
 800783c:	4604      	mov	r4, r0
 800783e:	f100 0914 	add.w	r9, r0, #20
 8007842:	f04f 0a00 	mov.w	sl, #0
 8007846:	e7ae      	b.n	80077a6 <__gethex+0x202>
 8007848:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800784c:	42a8      	cmp	r0, r5
 800784e:	dd72      	ble.n	8007936 <__gethex+0x392>
 8007850:	1b45      	subs	r5, r0, r5
 8007852:	42ae      	cmp	r6, r5
 8007854:	dc36      	bgt.n	80078c4 <__gethex+0x320>
 8007856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d02a      	beq.n	80078b4 <__gethex+0x310>
 800785e:	2b03      	cmp	r3, #3
 8007860:	d02c      	beq.n	80078bc <__gethex+0x318>
 8007862:	2b01      	cmp	r3, #1
 8007864:	d115      	bne.n	8007892 <__gethex+0x2ee>
 8007866:	42ae      	cmp	r6, r5
 8007868:	d113      	bne.n	8007892 <__gethex+0x2ee>
 800786a:	2e01      	cmp	r6, #1
 800786c:	d10b      	bne.n	8007886 <__gethex+0x2e2>
 800786e:	9a04      	ldr	r2, [sp, #16]
 8007870:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	2301      	movs	r3, #1
 8007878:	6123      	str	r3, [r4, #16]
 800787a:	f8c9 3000 	str.w	r3, [r9]
 800787e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007880:	2762      	movs	r7, #98	; 0x62
 8007882:	601c      	str	r4, [r3, #0]
 8007884:	e723      	b.n	80076ce <__gethex+0x12a>
 8007886:	1e71      	subs	r1, r6, #1
 8007888:	4620      	mov	r0, r4
 800788a:	f000 fe4e 	bl	800852a <__any_on>
 800788e:	2800      	cmp	r0, #0
 8007890:	d1ed      	bne.n	800786e <__gethex+0x2ca>
 8007892:	ee18 0a10 	vmov	r0, s16
 8007896:	4621      	mov	r1, r4
 8007898:	f000 f9ec 	bl	8007c74 <_Bfree>
 800789c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800789e:	2300      	movs	r3, #0
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	2750      	movs	r7, #80	; 0x50
 80078a4:	e713      	b.n	80076ce <__gethex+0x12a>
 80078a6:	bf00      	nop
 80078a8:	0800969c 	.word	0x0800969c
 80078ac:	08009620 	.word	0x08009620
 80078b0:	08009631 	.word	0x08009631
 80078b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1eb      	bne.n	8007892 <__gethex+0x2ee>
 80078ba:	e7d8      	b.n	800786e <__gethex+0x2ca>
 80078bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1d5      	bne.n	800786e <__gethex+0x2ca>
 80078c2:	e7e6      	b.n	8007892 <__gethex+0x2ee>
 80078c4:	1e6f      	subs	r7, r5, #1
 80078c6:	f1ba 0f00 	cmp.w	sl, #0
 80078ca:	d131      	bne.n	8007930 <__gethex+0x38c>
 80078cc:	b127      	cbz	r7, 80078d8 <__gethex+0x334>
 80078ce:	4639      	mov	r1, r7
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 fe2a 	bl	800852a <__any_on>
 80078d6:	4682      	mov	sl, r0
 80078d8:	117b      	asrs	r3, r7, #5
 80078da:	2101      	movs	r1, #1
 80078dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80078e0:	f007 071f 	and.w	r7, r7, #31
 80078e4:	fa01 f707 	lsl.w	r7, r1, r7
 80078e8:	421f      	tst	r7, r3
 80078ea:	4629      	mov	r1, r5
 80078ec:	4620      	mov	r0, r4
 80078ee:	bf18      	it	ne
 80078f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80078f4:	1b76      	subs	r6, r6, r5
 80078f6:	f7ff fded 	bl	80074d4 <rshift>
 80078fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80078fe:	2702      	movs	r7, #2
 8007900:	f1ba 0f00 	cmp.w	sl, #0
 8007904:	d048      	beq.n	8007998 <__gethex+0x3f4>
 8007906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800790a:	2b02      	cmp	r3, #2
 800790c:	d015      	beq.n	800793a <__gethex+0x396>
 800790e:	2b03      	cmp	r3, #3
 8007910:	d017      	beq.n	8007942 <__gethex+0x39e>
 8007912:	2b01      	cmp	r3, #1
 8007914:	d109      	bne.n	800792a <__gethex+0x386>
 8007916:	f01a 0f02 	tst.w	sl, #2
 800791a:	d006      	beq.n	800792a <__gethex+0x386>
 800791c:	f8d9 0000 	ldr.w	r0, [r9]
 8007920:	ea4a 0a00 	orr.w	sl, sl, r0
 8007924:	f01a 0f01 	tst.w	sl, #1
 8007928:	d10e      	bne.n	8007948 <__gethex+0x3a4>
 800792a:	f047 0710 	orr.w	r7, r7, #16
 800792e:	e033      	b.n	8007998 <__gethex+0x3f4>
 8007930:	f04f 0a01 	mov.w	sl, #1
 8007934:	e7d0      	b.n	80078d8 <__gethex+0x334>
 8007936:	2701      	movs	r7, #1
 8007938:	e7e2      	b.n	8007900 <__gethex+0x35c>
 800793a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800793c:	f1c3 0301 	rsb	r3, r3, #1
 8007940:	9315      	str	r3, [sp, #84]	; 0x54
 8007942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <__gethex+0x386>
 8007948:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800794c:	f104 0314 	add.w	r3, r4, #20
 8007950:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007954:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007958:	f04f 0c00 	mov.w	ip, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007962:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007966:	d01c      	beq.n	80079a2 <__gethex+0x3fe>
 8007968:	3201      	adds	r2, #1
 800796a:	6002      	str	r2, [r0, #0]
 800796c:	2f02      	cmp	r7, #2
 800796e:	f104 0314 	add.w	r3, r4, #20
 8007972:	d13f      	bne.n	80079f4 <__gethex+0x450>
 8007974:	f8d8 2000 	ldr.w	r2, [r8]
 8007978:	3a01      	subs	r2, #1
 800797a:	42b2      	cmp	r2, r6
 800797c:	d10a      	bne.n	8007994 <__gethex+0x3f0>
 800797e:	1171      	asrs	r1, r6, #5
 8007980:	2201      	movs	r2, #1
 8007982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007986:	f006 061f 	and.w	r6, r6, #31
 800798a:	fa02 f606 	lsl.w	r6, r2, r6
 800798e:	421e      	tst	r6, r3
 8007990:	bf18      	it	ne
 8007992:	4617      	movne	r7, r2
 8007994:	f047 0720 	orr.w	r7, r7, #32
 8007998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800799a:	601c      	str	r4, [r3, #0]
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	601d      	str	r5, [r3, #0]
 80079a0:	e695      	b.n	80076ce <__gethex+0x12a>
 80079a2:	4299      	cmp	r1, r3
 80079a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80079a8:	d8d8      	bhi.n	800795c <__gethex+0x3b8>
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	459b      	cmp	fp, r3
 80079ae:	db19      	blt.n	80079e4 <__gethex+0x440>
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	ee18 0a10 	vmov	r0, s16
 80079b6:	3101      	adds	r1, #1
 80079b8:	f000 f91c 	bl	8007bf4 <_Balloc>
 80079bc:	4681      	mov	r9, r0
 80079be:	b918      	cbnz	r0, 80079c8 <__gethex+0x424>
 80079c0:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <__gethex+0x488>)
 80079c2:	4602      	mov	r2, r0
 80079c4:	2184      	movs	r1, #132	; 0x84
 80079c6:	e6a8      	b.n	800771a <__gethex+0x176>
 80079c8:	6922      	ldr	r2, [r4, #16]
 80079ca:	3202      	adds	r2, #2
 80079cc:	f104 010c 	add.w	r1, r4, #12
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	300c      	adds	r0, #12
 80079d4:	f000 f900 	bl	8007bd8 <memcpy>
 80079d8:	4621      	mov	r1, r4
 80079da:	ee18 0a10 	vmov	r0, s16
 80079de:	f000 f949 	bl	8007c74 <_Bfree>
 80079e2:	464c      	mov	r4, r9
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079ec:	6122      	str	r2, [r4, #16]
 80079ee:	2201      	movs	r2, #1
 80079f0:	615a      	str	r2, [r3, #20]
 80079f2:	e7bb      	b.n	800796c <__gethex+0x3c8>
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	455a      	cmp	r2, fp
 80079f8:	dd0b      	ble.n	8007a12 <__gethex+0x46e>
 80079fa:	2101      	movs	r1, #1
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7ff fd69 	bl	80074d4 <rshift>
 8007a02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a06:	3501      	adds	r5, #1
 8007a08:	42ab      	cmp	r3, r5
 8007a0a:	f6ff aed0 	blt.w	80077ae <__gethex+0x20a>
 8007a0e:	2701      	movs	r7, #1
 8007a10:	e7c0      	b.n	8007994 <__gethex+0x3f0>
 8007a12:	f016 061f 	ands.w	r6, r6, #31
 8007a16:	d0fa      	beq.n	8007a0e <__gethex+0x46a>
 8007a18:	449a      	add	sl, r3
 8007a1a:	f1c6 0620 	rsb	r6, r6, #32
 8007a1e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007a22:	f000 f9dd 	bl	8007de0 <__hi0bits>
 8007a26:	42b0      	cmp	r0, r6
 8007a28:	dbe7      	blt.n	80079fa <__gethex+0x456>
 8007a2a:	e7f0      	b.n	8007a0e <__gethex+0x46a>
 8007a2c:	08009620 	.word	0x08009620

08007a30 <L_shift>:
 8007a30:	f1c2 0208 	rsb	r2, r2, #8
 8007a34:	0092      	lsls	r2, r2, #2
 8007a36:	b570      	push	{r4, r5, r6, lr}
 8007a38:	f1c2 0620 	rsb	r6, r2, #32
 8007a3c:	6843      	ldr	r3, [r0, #4]
 8007a3e:	6804      	ldr	r4, [r0, #0]
 8007a40:	fa03 f506 	lsl.w	r5, r3, r6
 8007a44:	432c      	orrs	r4, r5
 8007a46:	40d3      	lsrs	r3, r2
 8007a48:	6004      	str	r4, [r0, #0]
 8007a4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a4e:	4288      	cmp	r0, r1
 8007a50:	d3f4      	bcc.n	8007a3c <L_shift+0xc>
 8007a52:	bd70      	pop	{r4, r5, r6, pc}

08007a54 <__match>:
 8007a54:	b530      	push	{r4, r5, lr}
 8007a56:	6803      	ldr	r3, [r0, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a5e:	b914      	cbnz	r4, 8007a66 <__match+0x12>
 8007a60:	6003      	str	r3, [r0, #0]
 8007a62:	2001      	movs	r0, #1
 8007a64:	bd30      	pop	{r4, r5, pc}
 8007a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a6e:	2d19      	cmp	r5, #25
 8007a70:	bf98      	it	ls
 8007a72:	3220      	addls	r2, #32
 8007a74:	42a2      	cmp	r2, r4
 8007a76:	d0f0      	beq.n	8007a5a <__match+0x6>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e7f3      	b.n	8007a64 <__match+0x10>

08007a7c <__hexnan>:
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	680b      	ldr	r3, [r1, #0]
 8007a82:	6801      	ldr	r1, [r0, #0]
 8007a84:	115e      	asrs	r6, r3, #5
 8007a86:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a8a:	f013 031f 	ands.w	r3, r3, #31
 8007a8e:	b087      	sub	sp, #28
 8007a90:	bf18      	it	ne
 8007a92:	3604      	addne	r6, #4
 8007a94:	2500      	movs	r5, #0
 8007a96:	1f37      	subs	r7, r6, #4
 8007a98:	4682      	mov	sl, r0
 8007a9a:	4690      	mov	r8, r2
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007aa2:	46b9      	mov	r9, r7
 8007aa4:	463c      	mov	r4, r7
 8007aa6:	9502      	str	r5, [sp, #8]
 8007aa8:	46ab      	mov	fp, r5
 8007aaa:	784a      	ldrb	r2, [r1, #1]
 8007aac:	1c4b      	adds	r3, r1, #1
 8007aae:	9303      	str	r3, [sp, #12]
 8007ab0:	b342      	cbz	r2, 8007b04 <__hexnan+0x88>
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	9105      	str	r1, [sp, #20]
 8007ab6:	9204      	str	r2, [sp, #16]
 8007ab8:	f7ff fd5e 	bl	8007578 <__hexdig_fun>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d14f      	bne.n	8007b60 <__hexnan+0xe4>
 8007ac0:	9a04      	ldr	r2, [sp, #16]
 8007ac2:	9905      	ldr	r1, [sp, #20]
 8007ac4:	2a20      	cmp	r2, #32
 8007ac6:	d818      	bhi.n	8007afa <__hexnan+0x7e>
 8007ac8:	9b02      	ldr	r3, [sp, #8]
 8007aca:	459b      	cmp	fp, r3
 8007acc:	dd13      	ble.n	8007af6 <__hexnan+0x7a>
 8007ace:	454c      	cmp	r4, r9
 8007ad0:	d206      	bcs.n	8007ae0 <__hexnan+0x64>
 8007ad2:	2d07      	cmp	r5, #7
 8007ad4:	dc04      	bgt.n	8007ae0 <__hexnan+0x64>
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4649      	mov	r1, r9
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7ff ffa8 	bl	8007a30 <L_shift>
 8007ae0:	4544      	cmp	r4, r8
 8007ae2:	d950      	bls.n	8007b86 <__hexnan+0x10a>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f1a4 0904 	sub.w	r9, r4, #4
 8007aea:	f844 3c04 	str.w	r3, [r4, #-4]
 8007aee:	f8cd b008 	str.w	fp, [sp, #8]
 8007af2:	464c      	mov	r4, r9
 8007af4:	461d      	mov	r5, r3
 8007af6:	9903      	ldr	r1, [sp, #12]
 8007af8:	e7d7      	b.n	8007aaa <__hexnan+0x2e>
 8007afa:	2a29      	cmp	r2, #41	; 0x29
 8007afc:	d156      	bne.n	8007bac <__hexnan+0x130>
 8007afe:	3102      	adds	r1, #2
 8007b00:	f8ca 1000 	str.w	r1, [sl]
 8007b04:	f1bb 0f00 	cmp.w	fp, #0
 8007b08:	d050      	beq.n	8007bac <__hexnan+0x130>
 8007b0a:	454c      	cmp	r4, r9
 8007b0c:	d206      	bcs.n	8007b1c <__hexnan+0xa0>
 8007b0e:	2d07      	cmp	r5, #7
 8007b10:	dc04      	bgt.n	8007b1c <__hexnan+0xa0>
 8007b12:	462a      	mov	r2, r5
 8007b14:	4649      	mov	r1, r9
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7ff ff8a 	bl	8007a30 <L_shift>
 8007b1c:	4544      	cmp	r4, r8
 8007b1e:	d934      	bls.n	8007b8a <__hexnan+0x10e>
 8007b20:	f1a8 0204 	sub.w	r2, r8, #4
 8007b24:	4623      	mov	r3, r4
 8007b26:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b2a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b2e:	429f      	cmp	r7, r3
 8007b30:	d2f9      	bcs.n	8007b26 <__hexnan+0xaa>
 8007b32:	1b3b      	subs	r3, r7, r4
 8007b34:	f023 0303 	bic.w	r3, r3, #3
 8007b38:	3304      	adds	r3, #4
 8007b3a:	3401      	adds	r4, #1
 8007b3c:	3e03      	subs	r6, #3
 8007b3e:	42b4      	cmp	r4, r6
 8007b40:	bf88      	it	hi
 8007b42:	2304      	movhi	r3, #4
 8007b44:	4443      	add	r3, r8
 8007b46:	2200      	movs	r2, #0
 8007b48:	f843 2b04 	str.w	r2, [r3], #4
 8007b4c:	429f      	cmp	r7, r3
 8007b4e:	d2fb      	bcs.n	8007b48 <__hexnan+0xcc>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	b91b      	cbnz	r3, 8007b5c <__hexnan+0xe0>
 8007b54:	4547      	cmp	r7, r8
 8007b56:	d127      	bne.n	8007ba8 <__hexnan+0x12c>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	2005      	movs	r0, #5
 8007b5e:	e026      	b.n	8007bae <__hexnan+0x132>
 8007b60:	3501      	adds	r5, #1
 8007b62:	2d08      	cmp	r5, #8
 8007b64:	f10b 0b01 	add.w	fp, fp, #1
 8007b68:	dd06      	ble.n	8007b78 <__hexnan+0xfc>
 8007b6a:	4544      	cmp	r4, r8
 8007b6c:	d9c3      	bls.n	8007af6 <__hexnan+0x7a>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b74:	2501      	movs	r5, #1
 8007b76:	3c04      	subs	r4, #4
 8007b78:	6822      	ldr	r2, [r4, #0]
 8007b7a:	f000 000f 	and.w	r0, r0, #15
 8007b7e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	e7b7      	b.n	8007af6 <__hexnan+0x7a>
 8007b86:	2508      	movs	r5, #8
 8007b88:	e7b5      	b.n	8007af6 <__hexnan+0x7a>
 8007b8a:	9b01      	ldr	r3, [sp, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0df      	beq.n	8007b50 <__hexnan+0xd4>
 8007b90:	f04f 32ff 	mov.w	r2, #4294967295
 8007b94:	f1c3 0320 	rsb	r3, r3, #32
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ba0:	401a      	ands	r2, r3
 8007ba2:	f846 2c04 	str.w	r2, [r6, #-4]
 8007ba6:	e7d3      	b.n	8007b50 <__hexnan+0xd4>
 8007ba8:	3f04      	subs	r7, #4
 8007baa:	e7d1      	b.n	8007b50 <__hexnan+0xd4>
 8007bac:	2004      	movs	r0, #4
 8007bae:	b007      	add	sp, #28
 8007bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bb4 <__ascii_mbtowc>:
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	b901      	cbnz	r1, 8007bba <__ascii_mbtowc+0x6>
 8007bb8:	a901      	add	r1, sp, #4
 8007bba:	b142      	cbz	r2, 8007bce <__ascii_mbtowc+0x1a>
 8007bbc:	b14b      	cbz	r3, 8007bd2 <__ascii_mbtowc+0x1e>
 8007bbe:	7813      	ldrb	r3, [r2, #0]
 8007bc0:	600b      	str	r3, [r1, #0]
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	1e10      	subs	r0, r2, #0
 8007bc6:	bf18      	it	ne
 8007bc8:	2001      	movne	r0, #1
 8007bca:	b002      	add	sp, #8
 8007bcc:	4770      	bx	lr
 8007bce:	4610      	mov	r0, r2
 8007bd0:	e7fb      	b.n	8007bca <__ascii_mbtowc+0x16>
 8007bd2:	f06f 0001 	mvn.w	r0, #1
 8007bd6:	e7f8      	b.n	8007bca <__ascii_mbtowc+0x16>

08007bd8 <memcpy>:
 8007bd8:	440a      	add	r2, r1
 8007bda:	4291      	cmp	r1, r2
 8007bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007be0:	d100      	bne.n	8007be4 <memcpy+0xc>
 8007be2:	4770      	bx	lr
 8007be4:	b510      	push	{r4, lr}
 8007be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bee:	4291      	cmp	r1, r2
 8007bf0:	d1f9      	bne.n	8007be6 <memcpy+0xe>
 8007bf2:	bd10      	pop	{r4, pc}

08007bf4 <_Balloc>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	b976      	cbnz	r6, 8007c1c <_Balloc+0x28>
 8007bfe:	2010      	movs	r0, #16
 8007c00:	f000 fd86 	bl	8008710 <malloc>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6260      	str	r0, [r4, #36]	; 0x24
 8007c08:	b920      	cbnz	r0, 8007c14 <_Balloc+0x20>
 8007c0a:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <_Balloc+0x78>)
 8007c0c:	4818      	ldr	r0, [pc, #96]	; (8007c70 <_Balloc+0x7c>)
 8007c0e:	2166      	movs	r1, #102	; 0x66
 8007c10:	f000 fd4e 	bl	80086b0 <__assert_func>
 8007c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c18:	6006      	str	r6, [r0, #0]
 8007c1a:	60c6      	str	r6, [r0, #12]
 8007c1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c1e:	68f3      	ldr	r3, [r6, #12]
 8007c20:	b183      	cbz	r3, 8007c44 <_Balloc+0x50>
 8007c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c2a:	b9b8      	cbnz	r0, 8007c5c <_Balloc+0x68>
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c32:	1d72      	adds	r2, r6, #5
 8007c34:	0092      	lsls	r2, r2, #2
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fc98 	bl	800856c <_calloc_r>
 8007c3c:	b160      	cbz	r0, 8007c58 <_Balloc+0x64>
 8007c3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c42:	e00e      	b.n	8007c62 <_Balloc+0x6e>
 8007c44:	2221      	movs	r2, #33	; 0x21
 8007c46:	2104      	movs	r1, #4
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fc8f 	bl	800856c <_calloc_r>
 8007c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c50:	60f0      	str	r0, [r6, #12]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e4      	bne.n	8007c22 <_Balloc+0x2e>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	6802      	ldr	r2, [r0, #0]
 8007c5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c62:	2300      	movs	r3, #0
 8007c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c68:	e7f7      	b.n	8007c5a <_Balloc+0x66>
 8007c6a:	bf00      	nop
 8007c6c:	080096b0 	.word	0x080096b0
 8007c70:	080096c7 	.word	0x080096c7

08007c74 <_Bfree>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c78:	4605      	mov	r5, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	b976      	cbnz	r6, 8007c9c <_Bfree+0x28>
 8007c7e:	2010      	movs	r0, #16
 8007c80:	f000 fd46 	bl	8008710 <malloc>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6268      	str	r0, [r5, #36]	; 0x24
 8007c88:	b920      	cbnz	r0, 8007c94 <_Bfree+0x20>
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <_Bfree+0x3c>)
 8007c8c:	4809      	ldr	r0, [pc, #36]	; (8007cb4 <_Bfree+0x40>)
 8007c8e:	218a      	movs	r1, #138	; 0x8a
 8007c90:	f000 fd0e 	bl	80086b0 <__assert_func>
 8007c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c98:	6006      	str	r6, [r0, #0]
 8007c9a:	60c6      	str	r6, [r0, #12]
 8007c9c:	b13c      	cbz	r4, 8007cae <_Bfree+0x3a>
 8007c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ca0:	6862      	ldr	r2, [r4, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ca8:	6021      	str	r1, [r4, #0]
 8007caa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	080096b0 	.word	0x080096b0
 8007cb4:	080096c7 	.word	0x080096c7

08007cb8 <__multadd>:
 8007cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	690e      	ldr	r6, [r1, #16]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4698      	mov	r8, r3
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	f101 0014 	add.w	r0, r1, #20
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6805      	ldr	r5, [r0, #0]
 8007ccc:	b2a9      	uxth	r1, r5
 8007cce:	fb02 8101 	mla	r1, r2, r1, r8
 8007cd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007cd6:	0c2d      	lsrs	r5, r5, #16
 8007cd8:	fb02 c505 	mla	r5, r2, r5, ip
 8007cdc:	b289      	uxth	r1, r1
 8007cde:	3301      	adds	r3, #1
 8007ce0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007ce4:	429e      	cmp	r6, r3
 8007ce6:	f840 1b04 	str.w	r1, [r0], #4
 8007cea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007cee:	dcec      	bgt.n	8007cca <__multadd+0x12>
 8007cf0:	f1b8 0f00 	cmp.w	r8, #0
 8007cf4:	d022      	beq.n	8007d3c <__multadd+0x84>
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	42b3      	cmp	r3, r6
 8007cfa:	dc19      	bgt.n	8007d30 <__multadd+0x78>
 8007cfc:	6861      	ldr	r1, [r4, #4]
 8007cfe:	4638      	mov	r0, r7
 8007d00:	3101      	adds	r1, #1
 8007d02:	f7ff ff77 	bl	8007bf4 <_Balloc>
 8007d06:	4605      	mov	r5, r0
 8007d08:	b928      	cbnz	r0, 8007d16 <__multadd+0x5e>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <__multadd+0x8c>)
 8007d0e:	480e      	ldr	r0, [pc, #56]	; (8007d48 <__multadd+0x90>)
 8007d10:	21b5      	movs	r1, #181	; 0xb5
 8007d12:	f000 fccd 	bl	80086b0 <__assert_func>
 8007d16:	6922      	ldr	r2, [r4, #16]
 8007d18:	3202      	adds	r2, #2
 8007d1a:	f104 010c 	add.w	r1, r4, #12
 8007d1e:	0092      	lsls	r2, r2, #2
 8007d20:	300c      	adds	r0, #12
 8007d22:	f7ff ff59 	bl	8007bd8 <memcpy>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f7ff ffa3 	bl	8007c74 <_Bfree>
 8007d2e:	462c      	mov	r4, r5
 8007d30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007d34:	3601      	adds	r6, #1
 8007d36:	f8c3 8014 	str.w	r8, [r3, #20]
 8007d3a:	6126      	str	r6, [r4, #16]
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d42:	bf00      	nop
 8007d44:	08009620 	.word	0x08009620
 8007d48:	080096c7 	.word	0x080096c7

08007d4c <__s2b>:
 8007d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d50:	460c      	mov	r4, r1
 8007d52:	4615      	mov	r5, r2
 8007d54:	461f      	mov	r7, r3
 8007d56:	2209      	movs	r2, #9
 8007d58:	3308      	adds	r3, #8
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d60:	2100      	movs	r1, #0
 8007d62:	2201      	movs	r2, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	db09      	blt.n	8007d7c <__s2b+0x30>
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7ff ff43 	bl	8007bf4 <_Balloc>
 8007d6e:	b940      	cbnz	r0, 8007d82 <__s2b+0x36>
 8007d70:	4602      	mov	r2, r0
 8007d72:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <__s2b+0x8c>)
 8007d74:	4819      	ldr	r0, [pc, #100]	; (8007ddc <__s2b+0x90>)
 8007d76:	21ce      	movs	r1, #206	; 0xce
 8007d78:	f000 fc9a 	bl	80086b0 <__assert_func>
 8007d7c:	0052      	lsls	r2, r2, #1
 8007d7e:	3101      	adds	r1, #1
 8007d80:	e7f0      	b.n	8007d64 <__s2b+0x18>
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	6143      	str	r3, [r0, #20]
 8007d86:	2d09      	cmp	r5, #9
 8007d88:	f04f 0301 	mov.w	r3, #1
 8007d8c:	6103      	str	r3, [r0, #16]
 8007d8e:	dd16      	ble.n	8007dbe <__s2b+0x72>
 8007d90:	f104 0909 	add.w	r9, r4, #9
 8007d94:	46c8      	mov	r8, r9
 8007d96:	442c      	add	r4, r5
 8007d98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d9c:	4601      	mov	r1, r0
 8007d9e:	3b30      	subs	r3, #48	; 0x30
 8007da0:	220a      	movs	r2, #10
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff ff88 	bl	8007cb8 <__multadd>
 8007da8:	45a0      	cmp	r8, r4
 8007daa:	d1f5      	bne.n	8007d98 <__s2b+0x4c>
 8007dac:	f1a5 0408 	sub.w	r4, r5, #8
 8007db0:	444c      	add	r4, r9
 8007db2:	1b2d      	subs	r5, r5, r4
 8007db4:	1963      	adds	r3, r4, r5
 8007db6:	42bb      	cmp	r3, r7
 8007db8:	db04      	blt.n	8007dc4 <__s2b+0x78>
 8007dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dbe:	340a      	adds	r4, #10
 8007dc0:	2509      	movs	r5, #9
 8007dc2:	e7f6      	b.n	8007db2 <__s2b+0x66>
 8007dc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007dc8:	4601      	mov	r1, r0
 8007dca:	3b30      	subs	r3, #48	; 0x30
 8007dcc:	220a      	movs	r2, #10
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7ff ff72 	bl	8007cb8 <__multadd>
 8007dd4:	e7ee      	b.n	8007db4 <__s2b+0x68>
 8007dd6:	bf00      	nop
 8007dd8:	08009620 	.word	0x08009620
 8007ddc:	080096c7 	.word	0x080096c7

08007de0 <__hi0bits>:
 8007de0:	0c03      	lsrs	r3, r0, #16
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	b9d3      	cbnz	r3, 8007e1c <__hi0bits+0x3c>
 8007de6:	0400      	lsls	r0, r0, #16
 8007de8:	2310      	movs	r3, #16
 8007dea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007dee:	bf04      	itt	eq
 8007df0:	0200      	lsleq	r0, r0, #8
 8007df2:	3308      	addeq	r3, #8
 8007df4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007df8:	bf04      	itt	eq
 8007dfa:	0100      	lsleq	r0, r0, #4
 8007dfc:	3304      	addeq	r3, #4
 8007dfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e02:	bf04      	itt	eq
 8007e04:	0080      	lsleq	r0, r0, #2
 8007e06:	3302      	addeq	r3, #2
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	db05      	blt.n	8007e18 <__hi0bits+0x38>
 8007e0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e10:	f103 0301 	add.w	r3, r3, #1
 8007e14:	bf08      	it	eq
 8007e16:	2320      	moveq	r3, #32
 8007e18:	4618      	mov	r0, r3
 8007e1a:	4770      	bx	lr
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e7e4      	b.n	8007dea <__hi0bits+0xa>

08007e20 <__lo0bits>:
 8007e20:	6803      	ldr	r3, [r0, #0]
 8007e22:	f013 0207 	ands.w	r2, r3, #7
 8007e26:	4601      	mov	r1, r0
 8007e28:	d00b      	beq.n	8007e42 <__lo0bits+0x22>
 8007e2a:	07da      	lsls	r2, r3, #31
 8007e2c:	d424      	bmi.n	8007e78 <__lo0bits+0x58>
 8007e2e:	0798      	lsls	r0, r3, #30
 8007e30:	bf49      	itett	mi
 8007e32:	085b      	lsrmi	r3, r3, #1
 8007e34:	089b      	lsrpl	r3, r3, #2
 8007e36:	2001      	movmi	r0, #1
 8007e38:	600b      	strmi	r3, [r1, #0]
 8007e3a:	bf5c      	itt	pl
 8007e3c:	600b      	strpl	r3, [r1, #0]
 8007e3e:	2002      	movpl	r0, #2
 8007e40:	4770      	bx	lr
 8007e42:	b298      	uxth	r0, r3
 8007e44:	b9b0      	cbnz	r0, 8007e74 <__lo0bits+0x54>
 8007e46:	0c1b      	lsrs	r3, r3, #16
 8007e48:	2010      	movs	r0, #16
 8007e4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e4e:	bf04      	itt	eq
 8007e50:	0a1b      	lsreq	r3, r3, #8
 8007e52:	3008      	addeq	r0, #8
 8007e54:	071a      	lsls	r2, r3, #28
 8007e56:	bf04      	itt	eq
 8007e58:	091b      	lsreq	r3, r3, #4
 8007e5a:	3004      	addeq	r0, #4
 8007e5c:	079a      	lsls	r2, r3, #30
 8007e5e:	bf04      	itt	eq
 8007e60:	089b      	lsreq	r3, r3, #2
 8007e62:	3002      	addeq	r0, #2
 8007e64:	07da      	lsls	r2, r3, #31
 8007e66:	d403      	bmi.n	8007e70 <__lo0bits+0x50>
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	f100 0001 	add.w	r0, r0, #1
 8007e6e:	d005      	beq.n	8007e7c <__lo0bits+0x5c>
 8007e70:	600b      	str	r3, [r1, #0]
 8007e72:	4770      	bx	lr
 8007e74:	4610      	mov	r0, r2
 8007e76:	e7e8      	b.n	8007e4a <__lo0bits+0x2a>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	4770      	bx	lr
 8007e7c:	2020      	movs	r0, #32
 8007e7e:	4770      	bx	lr

08007e80 <__i2b>:
 8007e80:	b510      	push	{r4, lr}
 8007e82:	460c      	mov	r4, r1
 8007e84:	2101      	movs	r1, #1
 8007e86:	f7ff feb5 	bl	8007bf4 <_Balloc>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	b928      	cbnz	r0, 8007e9a <__i2b+0x1a>
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <__i2b+0x24>)
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <__i2b+0x28>)
 8007e92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e96:	f000 fc0b 	bl	80086b0 <__assert_func>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	6144      	str	r4, [r0, #20]
 8007e9e:	6103      	str	r3, [r0, #16]
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	bf00      	nop
 8007ea4:	08009620 	.word	0x08009620
 8007ea8:	080096c7 	.word	0x080096c7

08007eac <__multiply>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	690a      	ldr	r2, [r1, #16]
 8007eb4:	6923      	ldr	r3, [r4, #16]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	bfb8      	it	lt
 8007eba:	460b      	movlt	r3, r1
 8007ebc:	460d      	mov	r5, r1
 8007ebe:	bfbc      	itt	lt
 8007ec0:	4625      	movlt	r5, r4
 8007ec2:	461c      	movlt	r4, r3
 8007ec4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007ec8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ecc:	68ab      	ldr	r3, [r5, #8]
 8007ece:	6869      	ldr	r1, [r5, #4]
 8007ed0:	eb0a 0709 	add.w	r7, sl, r9
 8007ed4:	42bb      	cmp	r3, r7
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	bfb8      	it	lt
 8007eda:	3101      	addlt	r1, #1
 8007edc:	f7ff fe8a 	bl	8007bf4 <_Balloc>
 8007ee0:	b930      	cbnz	r0, 8007ef0 <__multiply+0x44>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4b42      	ldr	r3, [pc, #264]	; (8007ff0 <__multiply+0x144>)
 8007ee6:	4843      	ldr	r0, [pc, #268]	; (8007ff4 <__multiply+0x148>)
 8007ee8:	f240 115d 	movw	r1, #349	; 0x15d
 8007eec:	f000 fbe0 	bl	80086b0 <__assert_func>
 8007ef0:	f100 0614 	add.w	r6, r0, #20
 8007ef4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ef8:	4633      	mov	r3, r6
 8007efa:	2200      	movs	r2, #0
 8007efc:	4543      	cmp	r3, r8
 8007efe:	d31e      	bcc.n	8007f3e <__multiply+0x92>
 8007f00:	f105 0c14 	add.w	ip, r5, #20
 8007f04:	f104 0314 	add.w	r3, r4, #20
 8007f08:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007f0c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007f10:	9202      	str	r2, [sp, #8]
 8007f12:	ebac 0205 	sub.w	r2, ip, r5
 8007f16:	3a15      	subs	r2, #21
 8007f18:	f022 0203 	bic.w	r2, r2, #3
 8007f1c:	3204      	adds	r2, #4
 8007f1e:	f105 0115 	add.w	r1, r5, #21
 8007f22:	458c      	cmp	ip, r1
 8007f24:	bf38      	it	cc
 8007f26:	2204      	movcc	r2, #4
 8007f28:	9201      	str	r2, [sp, #4]
 8007f2a:	9a02      	ldr	r2, [sp, #8]
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d808      	bhi.n	8007f44 <__multiply+0x98>
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	dc55      	bgt.n	8007fe2 <__multiply+0x136>
 8007f36:	6107      	str	r7, [r0, #16]
 8007f38:	b005      	add	sp, #20
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	f843 2b04 	str.w	r2, [r3], #4
 8007f42:	e7db      	b.n	8007efc <__multiply+0x50>
 8007f44:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f48:	f1ba 0f00 	cmp.w	sl, #0
 8007f4c:	d020      	beq.n	8007f90 <__multiply+0xe4>
 8007f4e:	f105 0e14 	add.w	lr, r5, #20
 8007f52:	46b1      	mov	r9, r6
 8007f54:	2200      	movs	r2, #0
 8007f56:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007f5a:	f8d9 b000 	ldr.w	fp, [r9]
 8007f5e:	b2a1      	uxth	r1, r4
 8007f60:	fa1f fb8b 	uxth.w	fp, fp
 8007f64:	fb0a b101 	mla	r1, sl, r1, fp
 8007f68:	4411      	add	r1, r2
 8007f6a:	f8d9 2000 	ldr.w	r2, [r9]
 8007f6e:	0c24      	lsrs	r4, r4, #16
 8007f70:	0c12      	lsrs	r2, r2, #16
 8007f72:	fb0a 2404 	mla	r4, sl, r4, r2
 8007f76:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007f7a:	b289      	uxth	r1, r1
 8007f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f80:	45f4      	cmp	ip, lr
 8007f82:	f849 1b04 	str.w	r1, [r9], #4
 8007f86:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007f8a:	d8e4      	bhi.n	8007f56 <__multiply+0xaa>
 8007f8c:	9901      	ldr	r1, [sp, #4]
 8007f8e:	5072      	str	r2, [r6, r1]
 8007f90:	9a03      	ldr	r2, [sp, #12]
 8007f92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f96:	3304      	adds	r3, #4
 8007f98:	f1b9 0f00 	cmp.w	r9, #0
 8007f9c:	d01f      	beq.n	8007fde <__multiply+0x132>
 8007f9e:	6834      	ldr	r4, [r6, #0]
 8007fa0:	f105 0114 	add.w	r1, r5, #20
 8007fa4:	46b6      	mov	lr, r6
 8007fa6:	f04f 0a00 	mov.w	sl, #0
 8007faa:	880a      	ldrh	r2, [r1, #0]
 8007fac:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007fb0:	fb09 b202 	mla	r2, r9, r2, fp
 8007fb4:	4492      	add	sl, r2
 8007fb6:	b2a4      	uxth	r4, r4
 8007fb8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007fbc:	f84e 4b04 	str.w	r4, [lr], #4
 8007fc0:	f851 4b04 	ldr.w	r4, [r1], #4
 8007fc4:	f8be 2000 	ldrh.w	r2, [lr]
 8007fc8:	0c24      	lsrs	r4, r4, #16
 8007fca:	fb09 2404 	mla	r4, r9, r4, r2
 8007fce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007fd2:	458c      	cmp	ip, r1
 8007fd4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007fd8:	d8e7      	bhi.n	8007faa <__multiply+0xfe>
 8007fda:	9a01      	ldr	r2, [sp, #4]
 8007fdc:	50b4      	str	r4, [r6, r2]
 8007fde:	3604      	adds	r6, #4
 8007fe0:	e7a3      	b.n	8007f2a <__multiply+0x7e>
 8007fe2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1a5      	bne.n	8007f36 <__multiply+0x8a>
 8007fea:	3f01      	subs	r7, #1
 8007fec:	e7a1      	b.n	8007f32 <__multiply+0x86>
 8007fee:	bf00      	nop
 8007ff0:	08009620 	.word	0x08009620
 8007ff4:	080096c7 	.word	0x080096c7

08007ff8 <__pow5mult>:
 8007ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ffc:	4615      	mov	r5, r2
 8007ffe:	f012 0203 	ands.w	r2, r2, #3
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	d007      	beq.n	8008018 <__pow5mult+0x20>
 8008008:	4c25      	ldr	r4, [pc, #148]	; (80080a0 <__pow5mult+0xa8>)
 800800a:	3a01      	subs	r2, #1
 800800c:	2300      	movs	r3, #0
 800800e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008012:	f7ff fe51 	bl	8007cb8 <__multadd>
 8008016:	4607      	mov	r7, r0
 8008018:	10ad      	asrs	r5, r5, #2
 800801a:	d03d      	beq.n	8008098 <__pow5mult+0xa0>
 800801c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800801e:	b97c      	cbnz	r4, 8008040 <__pow5mult+0x48>
 8008020:	2010      	movs	r0, #16
 8008022:	f000 fb75 	bl	8008710 <malloc>
 8008026:	4602      	mov	r2, r0
 8008028:	6270      	str	r0, [r6, #36]	; 0x24
 800802a:	b928      	cbnz	r0, 8008038 <__pow5mult+0x40>
 800802c:	4b1d      	ldr	r3, [pc, #116]	; (80080a4 <__pow5mult+0xac>)
 800802e:	481e      	ldr	r0, [pc, #120]	; (80080a8 <__pow5mult+0xb0>)
 8008030:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008034:	f000 fb3c 	bl	80086b0 <__assert_func>
 8008038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800803c:	6004      	str	r4, [r0, #0]
 800803e:	60c4      	str	r4, [r0, #12]
 8008040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008048:	b94c      	cbnz	r4, 800805e <__pow5mult+0x66>
 800804a:	f240 2171 	movw	r1, #625	; 0x271
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ff16 	bl	8007e80 <__i2b>
 8008054:	2300      	movs	r3, #0
 8008056:	f8c8 0008 	str.w	r0, [r8, #8]
 800805a:	4604      	mov	r4, r0
 800805c:	6003      	str	r3, [r0, #0]
 800805e:	f04f 0900 	mov.w	r9, #0
 8008062:	07eb      	lsls	r3, r5, #31
 8008064:	d50a      	bpl.n	800807c <__pow5mult+0x84>
 8008066:	4639      	mov	r1, r7
 8008068:	4622      	mov	r2, r4
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff ff1e 	bl	8007eac <__multiply>
 8008070:	4639      	mov	r1, r7
 8008072:	4680      	mov	r8, r0
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff fdfd 	bl	8007c74 <_Bfree>
 800807a:	4647      	mov	r7, r8
 800807c:	106d      	asrs	r5, r5, #1
 800807e:	d00b      	beq.n	8008098 <__pow5mult+0xa0>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	b938      	cbnz	r0, 8008094 <__pow5mult+0x9c>
 8008084:	4622      	mov	r2, r4
 8008086:	4621      	mov	r1, r4
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff ff0f 	bl	8007eac <__multiply>
 800808e:	6020      	str	r0, [r4, #0]
 8008090:	f8c0 9000 	str.w	r9, [r0]
 8008094:	4604      	mov	r4, r0
 8008096:	e7e4      	b.n	8008062 <__pow5mult+0x6a>
 8008098:	4638      	mov	r0, r7
 800809a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800809e:	bf00      	nop
 80080a0:	08009818 	.word	0x08009818
 80080a4:	080096b0 	.word	0x080096b0
 80080a8:	080096c7 	.word	0x080096c7

080080ac <__lshift>:
 80080ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	460c      	mov	r4, r1
 80080b2:	6849      	ldr	r1, [r1, #4]
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080ba:	68a3      	ldr	r3, [r4, #8]
 80080bc:	4607      	mov	r7, r0
 80080be:	4691      	mov	r9, r2
 80080c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080c4:	f108 0601 	add.w	r6, r8, #1
 80080c8:	42b3      	cmp	r3, r6
 80080ca:	db0b      	blt.n	80080e4 <__lshift+0x38>
 80080cc:	4638      	mov	r0, r7
 80080ce:	f7ff fd91 	bl	8007bf4 <_Balloc>
 80080d2:	4605      	mov	r5, r0
 80080d4:	b948      	cbnz	r0, 80080ea <__lshift+0x3e>
 80080d6:	4602      	mov	r2, r0
 80080d8:	4b28      	ldr	r3, [pc, #160]	; (800817c <__lshift+0xd0>)
 80080da:	4829      	ldr	r0, [pc, #164]	; (8008180 <__lshift+0xd4>)
 80080dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080e0:	f000 fae6 	bl	80086b0 <__assert_func>
 80080e4:	3101      	adds	r1, #1
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	e7ee      	b.n	80080c8 <__lshift+0x1c>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f100 0114 	add.w	r1, r0, #20
 80080f0:	f100 0210 	add.w	r2, r0, #16
 80080f4:	4618      	mov	r0, r3
 80080f6:	4553      	cmp	r3, sl
 80080f8:	db33      	blt.n	8008162 <__lshift+0xb6>
 80080fa:	6920      	ldr	r0, [r4, #16]
 80080fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008100:	f104 0314 	add.w	r3, r4, #20
 8008104:	f019 091f 	ands.w	r9, r9, #31
 8008108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800810c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008110:	d02b      	beq.n	800816a <__lshift+0xbe>
 8008112:	f1c9 0e20 	rsb	lr, r9, #32
 8008116:	468a      	mov	sl, r1
 8008118:	2200      	movs	r2, #0
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	fa00 f009 	lsl.w	r0, r0, r9
 8008120:	4302      	orrs	r2, r0
 8008122:	f84a 2b04 	str.w	r2, [sl], #4
 8008126:	f853 2b04 	ldr.w	r2, [r3], #4
 800812a:	459c      	cmp	ip, r3
 800812c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008130:	d8f3      	bhi.n	800811a <__lshift+0x6e>
 8008132:	ebac 0304 	sub.w	r3, ip, r4
 8008136:	3b15      	subs	r3, #21
 8008138:	f023 0303 	bic.w	r3, r3, #3
 800813c:	3304      	adds	r3, #4
 800813e:	f104 0015 	add.w	r0, r4, #21
 8008142:	4584      	cmp	ip, r0
 8008144:	bf38      	it	cc
 8008146:	2304      	movcc	r3, #4
 8008148:	50ca      	str	r2, [r1, r3]
 800814a:	b10a      	cbz	r2, 8008150 <__lshift+0xa4>
 800814c:	f108 0602 	add.w	r6, r8, #2
 8008150:	3e01      	subs	r6, #1
 8008152:	4638      	mov	r0, r7
 8008154:	612e      	str	r6, [r5, #16]
 8008156:	4621      	mov	r1, r4
 8008158:	f7ff fd8c 	bl	8007c74 <_Bfree>
 800815c:	4628      	mov	r0, r5
 800815e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008162:	f842 0f04 	str.w	r0, [r2, #4]!
 8008166:	3301      	adds	r3, #1
 8008168:	e7c5      	b.n	80080f6 <__lshift+0x4a>
 800816a:	3904      	subs	r1, #4
 800816c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008170:	f841 2f04 	str.w	r2, [r1, #4]!
 8008174:	459c      	cmp	ip, r3
 8008176:	d8f9      	bhi.n	800816c <__lshift+0xc0>
 8008178:	e7ea      	b.n	8008150 <__lshift+0xa4>
 800817a:	bf00      	nop
 800817c:	08009620 	.word	0x08009620
 8008180:	080096c7 	.word	0x080096c7

08008184 <__mcmp>:
 8008184:	b530      	push	{r4, r5, lr}
 8008186:	6902      	ldr	r2, [r0, #16]
 8008188:	690c      	ldr	r4, [r1, #16]
 800818a:	1b12      	subs	r2, r2, r4
 800818c:	d10e      	bne.n	80081ac <__mcmp+0x28>
 800818e:	f100 0314 	add.w	r3, r0, #20
 8008192:	3114      	adds	r1, #20
 8008194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800819c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081a4:	42a5      	cmp	r5, r4
 80081a6:	d003      	beq.n	80081b0 <__mcmp+0x2c>
 80081a8:	d305      	bcc.n	80081b6 <__mcmp+0x32>
 80081aa:	2201      	movs	r2, #1
 80081ac:	4610      	mov	r0, r2
 80081ae:	bd30      	pop	{r4, r5, pc}
 80081b0:	4283      	cmp	r3, r0
 80081b2:	d3f3      	bcc.n	800819c <__mcmp+0x18>
 80081b4:	e7fa      	b.n	80081ac <__mcmp+0x28>
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	e7f7      	b.n	80081ac <__mcmp+0x28>

080081bc <__mdiff>:
 80081bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	460c      	mov	r4, r1
 80081c2:	4606      	mov	r6, r0
 80081c4:	4611      	mov	r1, r2
 80081c6:	4620      	mov	r0, r4
 80081c8:	4617      	mov	r7, r2
 80081ca:	f7ff ffdb 	bl	8008184 <__mcmp>
 80081ce:	1e05      	subs	r5, r0, #0
 80081d0:	d110      	bne.n	80081f4 <__mdiff+0x38>
 80081d2:	4629      	mov	r1, r5
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff fd0d 	bl	8007bf4 <_Balloc>
 80081da:	b930      	cbnz	r0, 80081ea <__mdiff+0x2e>
 80081dc:	4b39      	ldr	r3, [pc, #228]	; (80082c4 <__mdiff+0x108>)
 80081de:	4602      	mov	r2, r0
 80081e0:	f240 2132 	movw	r1, #562	; 0x232
 80081e4:	4838      	ldr	r0, [pc, #224]	; (80082c8 <__mdiff+0x10c>)
 80081e6:	f000 fa63 	bl	80086b0 <__assert_func>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f4:	bfa4      	itt	ge
 80081f6:	463b      	movge	r3, r7
 80081f8:	4627      	movge	r7, r4
 80081fa:	4630      	mov	r0, r6
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	bfa6      	itte	ge
 8008200:	461c      	movge	r4, r3
 8008202:	2500      	movge	r5, #0
 8008204:	2501      	movlt	r5, #1
 8008206:	f7ff fcf5 	bl	8007bf4 <_Balloc>
 800820a:	b920      	cbnz	r0, 8008216 <__mdiff+0x5a>
 800820c:	4b2d      	ldr	r3, [pc, #180]	; (80082c4 <__mdiff+0x108>)
 800820e:	4602      	mov	r2, r0
 8008210:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008214:	e7e6      	b.n	80081e4 <__mdiff+0x28>
 8008216:	693e      	ldr	r6, [r7, #16]
 8008218:	60c5      	str	r5, [r0, #12]
 800821a:	6925      	ldr	r5, [r4, #16]
 800821c:	f107 0114 	add.w	r1, r7, #20
 8008220:	f104 0914 	add.w	r9, r4, #20
 8008224:	f100 0e14 	add.w	lr, r0, #20
 8008228:	f107 0210 	add.w	r2, r7, #16
 800822c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008230:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008234:	46f2      	mov	sl, lr
 8008236:	2700      	movs	r7, #0
 8008238:	f859 3b04 	ldr.w	r3, [r9], #4
 800823c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008240:	fa1f f883 	uxth.w	r8, r3
 8008244:	fa17 f78b 	uxtah	r7, r7, fp
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	eba7 0808 	sub.w	r8, r7, r8
 800824e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008256:	fa1f f888 	uxth.w	r8, r8
 800825a:	141f      	asrs	r7, r3, #16
 800825c:	454d      	cmp	r5, r9
 800825e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008262:	f84a 3b04 	str.w	r3, [sl], #4
 8008266:	d8e7      	bhi.n	8008238 <__mdiff+0x7c>
 8008268:	1b2b      	subs	r3, r5, r4
 800826a:	3b15      	subs	r3, #21
 800826c:	f023 0303 	bic.w	r3, r3, #3
 8008270:	3304      	adds	r3, #4
 8008272:	3415      	adds	r4, #21
 8008274:	42a5      	cmp	r5, r4
 8008276:	bf38      	it	cc
 8008278:	2304      	movcc	r3, #4
 800827a:	4419      	add	r1, r3
 800827c:	4473      	add	r3, lr
 800827e:	469e      	mov	lr, r3
 8008280:	460d      	mov	r5, r1
 8008282:	4565      	cmp	r5, ip
 8008284:	d30e      	bcc.n	80082a4 <__mdiff+0xe8>
 8008286:	f10c 0203 	add.w	r2, ip, #3
 800828a:	1a52      	subs	r2, r2, r1
 800828c:	f022 0203 	bic.w	r2, r2, #3
 8008290:	3903      	subs	r1, #3
 8008292:	458c      	cmp	ip, r1
 8008294:	bf38      	it	cc
 8008296:	2200      	movcc	r2, #0
 8008298:	441a      	add	r2, r3
 800829a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800829e:	b17b      	cbz	r3, 80082c0 <__mdiff+0x104>
 80082a0:	6106      	str	r6, [r0, #16]
 80082a2:	e7a5      	b.n	80081f0 <__mdiff+0x34>
 80082a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80082a8:	fa17 f488 	uxtah	r4, r7, r8
 80082ac:	1422      	asrs	r2, r4, #16
 80082ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80082b2:	b2a4      	uxth	r4, r4
 80082b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80082b8:	f84e 4b04 	str.w	r4, [lr], #4
 80082bc:	1417      	asrs	r7, r2, #16
 80082be:	e7e0      	b.n	8008282 <__mdiff+0xc6>
 80082c0:	3e01      	subs	r6, #1
 80082c2:	e7ea      	b.n	800829a <__mdiff+0xde>
 80082c4:	08009620 	.word	0x08009620
 80082c8:	080096c7 	.word	0x080096c7

080082cc <__ulp>:
 80082cc:	b082      	sub	sp, #8
 80082ce:	ed8d 0b00 	vstr	d0, [sp]
 80082d2:	9b01      	ldr	r3, [sp, #4]
 80082d4:	4912      	ldr	r1, [pc, #72]	; (8008320 <__ulp+0x54>)
 80082d6:	4019      	ands	r1, r3
 80082d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80082dc:	2900      	cmp	r1, #0
 80082de:	dd05      	ble.n	80082ec <__ulp+0x20>
 80082e0:	2200      	movs	r2, #0
 80082e2:	460b      	mov	r3, r1
 80082e4:	ec43 2b10 	vmov	d0, r2, r3
 80082e8:	b002      	add	sp, #8
 80082ea:	4770      	bx	lr
 80082ec:	4249      	negs	r1, r1
 80082ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80082f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	f04f 0300 	mov.w	r3, #0
 80082fe:	da04      	bge.n	800830a <__ulp+0x3e>
 8008300:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008304:	fa41 f300 	asr.w	r3, r1, r0
 8008308:	e7ec      	b.n	80082e4 <__ulp+0x18>
 800830a:	f1a0 0114 	sub.w	r1, r0, #20
 800830e:	291e      	cmp	r1, #30
 8008310:	bfda      	itte	le
 8008312:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008316:	fa20 f101 	lsrle.w	r1, r0, r1
 800831a:	2101      	movgt	r1, #1
 800831c:	460a      	mov	r2, r1
 800831e:	e7e1      	b.n	80082e4 <__ulp+0x18>
 8008320:	7ff00000 	.word	0x7ff00000

08008324 <__b2d>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	6905      	ldr	r5, [r0, #16]
 8008328:	f100 0714 	add.w	r7, r0, #20
 800832c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008330:	1f2e      	subs	r6, r5, #4
 8008332:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff fd52 	bl	8007de0 <__hi0bits>
 800833c:	f1c0 0320 	rsb	r3, r0, #32
 8008340:	280a      	cmp	r0, #10
 8008342:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80083c0 <__b2d+0x9c>
 8008346:	600b      	str	r3, [r1, #0]
 8008348:	dc14      	bgt.n	8008374 <__b2d+0x50>
 800834a:	f1c0 0e0b 	rsb	lr, r0, #11
 800834e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008352:	42b7      	cmp	r7, r6
 8008354:	ea41 030c 	orr.w	r3, r1, ip
 8008358:	bf34      	ite	cc
 800835a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800835e:	2100      	movcs	r1, #0
 8008360:	3015      	adds	r0, #21
 8008362:	fa04 f000 	lsl.w	r0, r4, r0
 8008366:	fa21 f10e 	lsr.w	r1, r1, lr
 800836a:	ea40 0201 	orr.w	r2, r0, r1
 800836e:	ec43 2b10 	vmov	d0, r2, r3
 8008372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008374:	42b7      	cmp	r7, r6
 8008376:	bf3a      	itte	cc
 8008378:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800837c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008380:	2100      	movcs	r1, #0
 8008382:	380b      	subs	r0, #11
 8008384:	d017      	beq.n	80083b6 <__b2d+0x92>
 8008386:	f1c0 0c20 	rsb	ip, r0, #32
 800838a:	fa04 f500 	lsl.w	r5, r4, r0
 800838e:	42be      	cmp	r6, r7
 8008390:	fa21 f40c 	lsr.w	r4, r1, ip
 8008394:	ea45 0504 	orr.w	r5, r5, r4
 8008398:	bf8c      	ite	hi
 800839a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800839e:	2400      	movls	r4, #0
 80083a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083a4:	fa01 f000 	lsl.w	r0, r1, r0
 80083a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80083ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083b0:	ea40 0204 	orr.w	r2, r0, r4
 80083b4:	e7db      	b.n	800836e <__b2d+0x4a>
 80083b6:	ea44 030c 	orr.w	r3, r4, ip
 80083ba:	460a      	mov	r2, r1
 80083bc:	e7d7      	b.n	800836e <__b2d+0x4a>
 80083be:	bf00      	nop
 80083c0:	3ff00000 	.word	0x3ff00000

080083c4 <__d2b>:
 80083c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	4689      	mov	r9, r1
 80083ca:	2101      	movs	r1, #1
 80083cc:	ec57 6b10 	vmov	r6, r7, d0
 80083d0:	4690      	mov	r8, r2
 80083d2:	f7ff fc0f 	bl	8007bf4 <_Balloc>
 80083d6:	4604      	mov	r4, r0
 80083d8:	b930      	cbnz	r0, 80083e8 <__d2b+0x24>
 80083da:	4602      	mov	r2, r0
 80083dc:	4b25      	ldr	r3, [pc, #148]	; (8008474 <__d2b+0xb0>)
 80083de:	4826      	ldr	r0, [pc, #152]	; (8008478 <__d2b+0xb4>)
 80083e0:	f240 310a 	movw	r1, #778	; 0x30a
 80083e4:	f000 f964 	bl	80086b0 <__assert_func>
 80083e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083f0:	bb35      	cbnz	r5, 8008440 <__d2b+0x7c>
 80083f2:	2e00      	cmp	r6, #0
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	d028      	beq.n	800844a <__d2b+0x86>
 80083f8:	4668      	mov	r0, sp
 80083fa:	9600      	str	r6, [sp, #0]
 80083fc:	f7ff fd10 	bl	8007e20 <__lo0bits>
 8008400:	9900      	ldr	r1, [sp, #0]
 8008402:	b300      	cbz	r0, 8008446 <__d2b+0x82>
 8008404:	9a01      	ldr	r2, [sp, #4]
 8008406:	f1c0 0320 	rsb	r3, r0, #32
 800840a:	fa02 f303 	lsl.w	r3, r2, r3
 800840e:	430b      	orrs	r3, r1
 8008410:	40c2      	lsrs	r2, r0
 8008412:	6163      	str	r3, [r4, #20]
 8008414:	9201      	str	r2, [sp, #4]
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	61a3      	str	r3, [r4, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	bf14      	ite	ne
 800841e:	2202      	movne	r2, #2
 8008420:	2201      	moveq	r2, #1
 8008422:	6122      	str	r2, [r4, #16]
 8008424:	b1d5      	cbz	r5, 800845c <__d2b+0x98>
 8008426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800842a:	4405      	add	r5, r0
 800842c:	f8c9 5000 	str.w	r5, [r9]
 8008430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008434:	f8c8 0000 	str.w	r0, [r8]
 8008438:	4620      	mov	r0, r4
 800843a:	b003      	add	sp, #12
 800843c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008444:	e7d5      	b.n	80083f2 <__d2b+0x2e>
 8008446:	6161      	str	r1, [r4, #20]
 8008448:	e7e5      	b.n	8008416 <__d2b+0x52>
 800844a:	a801      	add	r0, sp, #4
 800844c:	f7ff fce8 	bl	8007e20 <__lo0bits>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	6163      	str	r3, [r4, #20]
 8008454:	2201      	movs	r2, #1
 8008456:	6122      	str	r2, [r4, #16]
 8008458:	3020      	adds	r0, #32
 800845a:	e7e3      	b.n	8008424 <__d2b+0x60>
 800845c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008464:	f8c9 0000 	str.w	r0, [r9]
 8008468:	6918      	ldr	r0, [r3, #16]
 800846a:	f7ff fcb9 	bl	8007de0 <__hi0bits>
 800846e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008472:	e7df      	b.n	8008434 <__d2b+0x70>
 8008474:	08009620 	.word	0x08009620
 8008478:	080096c7 	.word	0x080096c7

0800847c <__ratio>:
 800847c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	468a      	mov	sl, r1
 8008482:	4669      	mov	r1, sp
 8008484:	4683      	mov	fp, r0
 8008486:	f7ff ff4d 	bl	8008324 <__b2d>
 800848a:	a901      	add	r1, sp, #4
 800848c:	4650      	mov	r0, sl
 800848e:	ec59 8b10 	vmov	r8, r9, d0
 8008492:	ee10 6a10 	vmov	r6, s0
 8008496:	f7ff ff45 	bl	8008324 <__b2d>
 800849a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800849e:	f8da 2010 	ldr.w	r2, [sl, #16]
 80084a2:	eba3 0c02 	sub.w	ip, r3, r2
 80084a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084aa:	1a9b      	subs	r3, r3, r2
 80084ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084b0:	ec55 4b10 	vmov	r4, r5, d0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	ee10 0a10 	vmov	r0, s0
 80084ba:	bfce      	itee	gt
 80084bc:	464a      	movgt	r2, r9
 80084be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084c2:	462a      	movle	r2, r5
 80084c4:	464f      	mov	r7, r9
 80084c6:	4629      	mov	r1, r5
 80084c8:	bfcc      	ite	gt
 80084ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084ce:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80084d2:	ec47 6b17 	vmov	d7, r6, r7
 80084d6:	ec41 0b16 	vmov	d6, r0, r1
 80084da:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80084de:	b003      	add	sp, #12
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084e4 <__copybits>:
 80084e4:	3901      	subs	r1, #1
 80084e6:	b570      	push	{r4, r5, r6, lr}
 80084e8:	1149      	asrs	r1, r1, #5
 80084ea:	6914      	ldr	r4, [r2, #16]
 80084ec:	3101      	adds	r1, #1
 80084ee:	f102 0314 	add.w	r3, r2, #20
 80084f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084fa:	1f05      	subs	r5, r0, #4
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d30c      	bcc.n	800851a <__copybits+0x36>
 8008500:	1aa3      	subs	r3, r4, r2
 8008502:	3b11      	subs	r3, #17
 8008504:	f023 0303 	bic.w	r3, r3, #3
 8008508:	3211      	adds	r2, #17
 800850a:	42a2      	cmp	r2, r4
 800850c:	bf88      	it	hi
 800850e:	2300      	movhi	r3, #0
 8008510:	4418      	add	r0, r3
 8008512:	2300      	movs	r3, #0
 8008514:	4288      	cmp	r0, r1
 8008516:	d305      	bcc.n	8008524 <__copybits+0x40>
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	f853 6b04 	ldr.w	r6, [r3], #4
 800851e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008522:	e7eb      	b.n	80084fc <__copybits+0x18>
 8008524:	f840 3b04 	str.w	r3, [r0], #4
 8008528:	e7f4      	b.n	8008514 <__copybits+0x30>

0800852a <__any_on>:
 800852a:	f100 0214 	add.w	r2, r0, #20
 800852e:	6900      	ldr	r0, [r0, #16]
 8008530:	114b      	asrs	r3, r1, #5
 8008532:	4298      	cmp	r0, r3
 8008534:	b510      	push	{r4, lr}
 8008536:	db11      	blt.n	800855c <__any_on+0x32>
 8008538:	dd0a      	ble.n	8008550 <__any_on+0x26>
 800853a:	f011 011f 	ands.w	r1, r1, #31
 800853e:	d007      	beq.n	8008550 <__any_on+0x26>
 8008540:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008544:	fa24 f001 	lsr.w	r0, r4, r1
 8008548:	fa00 f101 	lsl.w	r1, r0, r1
 800854c:	428c      	cmp	r4, r1
 800854e:	d10b      	bne.n	8008568 <__any_on+0x3e>
 8008550:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008554:	4293      	cmp	r3, r2
 8008556:	d803      	bhi.n	8008560 <__any_on+0x36>
 8008558:	2000      	movs	r0, #0
 800855a:	bd10      	pop	{r4, pc}
 800855c:	4603      	mov	r3, r0
 800855e:	e7f7      	b.n	8008550 <__any_on+0x26>
 8008560:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008564:	2900      	cmp	r1, #0
 8008566:	d0f5      	beq.n	8008554 <__any_on+0x2a>
 8008568:	2001      	movs	r0, #1
 800856a:	e7f6      	b.n	800855a <__any_on+0x30>

0800856c <_calloc_r>:
 800856c:	b513      	push	{r0, r1, r4, lr}
 800856e:	434a      	muls	r2, r1
 8008570:	4611      	mov	r1, r2
 8008572:	9201      	str	r2, [sp, #4]
 8008574:	f000 f80a 	bl	800858c <_malloc_r>
 8008578:	4604      	mov	r4, r0
 800857a:	b118      	cbz	r0, 8008584 <_calloc_r+0x18>
 800857c:	9a01      	ldr	r2, [sp, #4]
 800857e:	2100      	movs	r1, #0
 8008580:	f7fe f9a2 	bl	80068c8 <memset>
 8008584:	4620      	mov	r0, r4
 8008586:	b002      	add	sp, #8
 8008588:	bd10      	pop	{r4, pc}
	...

0800858c <_malloc_r>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	1ccd      	adds	r5, r1, #3
 8008590:	f025 0503 	bic.w	r5, r5, #3
 8008594:	3508      	adds	r5, #8
 8008596:	2d0c      	cmp	r5, #12
 8008598:	bf38      	it	cc
 800859a:	250c      	movcc	r5, #12
 800859c:	2d00      	cmp	r5, #0
 800859e:	4606      	mov	r6, r0
 80085a0:	db01      	blt.n	80085a6 <_malloc_r+0x1a>
 80085a2:	42a9      	cmp	r1, r5
 80085a4:	d903      	bls.n	80085ae <_malloc_r+0x22>
 80085a6:	230c      	movs	r3, #12
 80085a8:	6033      	str	r3, [r6, #0]
 80085aa:	2000      	movs	r0, #0
 80085ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ae:	f000 f8b7 	bl	8008720 <__malloc_lock>
 80085b2:	4921      	ldr	r1, [pc, #132]	; (8008638 <_malloc_r+0xac>)
 80085b4:	680a      	ldr	r2, [r1, #0]
 80085b6:	4614      	mov	r4, r2
 80085b8:	b99c      	cbnz	r4, 80085e2 <_malloc_r+0x56>
 80085ba:	4f20      	ldr	r7, [pc, #128]	; (800863c <_malloc_r+0xb0>)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	b923      	cbnz	r3, 80085ca <_malloc_r+0x3e>
 80085c0:	4621      	mov	r1, r4
 80085c2:	4630      	mov	r0, r6
 80085c4:	f000 f844 	bl	8008650 <_sbrk_r>
 80085c8:	6038      	str	r0, [r7, #0]
 80085ca:	4629      	mov	r1, r5
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 f83f 	bl	8008650 <_sbrk_r>
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	d123      	bne.n	800861e <_malloc_r+0x92>
 80085d6:	230c      	movs	r3, #12
 80085d8:	6033      	str	r3, [r6, #0]
 80085da:	4630      	mov	r0, r6
 80085dc:	f000 f8a6 	bl	800872c <__malloc_unlock>
 80085e0:	e7e3      	b.n	80085aa <_malloc_r+0x1e>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	1b5b      	subs	r3, r3, r5
 80085e6:	d417      	bmi.n	8008618 <_malloc_r+0x8c>
 80085e8:	2b0b      	cmp	r3, #11
 80085ea:	d903      	bls.n	80085f4 <_malloc_r+0x68>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	441c      	add	r4, r3
 80085f0:	6025      	str	r5, [r4, #0]
 80085f2:	e004      	b.n	80085fe <_malloc_r+0x72>
 80085f4:	6863      	ldr	r3, [r4, #4]
 80085f6:	42a2      	cmp	r2, r4
 80085f8:	bf0c      	ite	eq
 80085fa:	600b      	streq	r3, [r1, #0]
 80085fc:	6053      	strne	r3, [r2, #4]
 80085fe:	4630      	mov	r0, r6
 8008600:	f000 f894 	bl	800872c <__malloc_unlock>
 8008604:	f104 000b 	add.w	r0, r4, #11
 8008608:	1d23      	adds	r3, r4, #4
 800860a:	f020 0007 	bic.w	r0, r0, #7
 800860e:	1ac2      	subs	r2, r0, r3
 8008610:	d0cc      	beq.n	80085ac <_malloc_r+0x20>
 8008612:	1a1b      	subs	r3, r3, r0
 8008614:	50a3      	str	r3, [r4, r2]
 8008616:	e7c9      	b.n	80085ac <_malloc_r+0x20>
 8008618:	4622      	mov	r2, r4
 800861a:	6864      	ldr	r4, [r4, #4]
 800861c:	e7cc      	b.n	80085b8 <_malloc_r+0x2c>
 800861e:	1cc4      	adds	r4, r0, #3
 8008620:	f024 0403 	bic.w	r4, r4, #3
 8008624:	42a0      	cmp	r0, r4
 8008626:	d0e3      	beq.n	80085f0 <_malloc_r+0x64>
 8008628:	1a21      	subs	r1, r4, r0
 800862a:	4630      	mov	r0, r6
 800862c:	f000 f810 	bl	8008650 <_sbrk_r>
 8008630:	3001      	adds	r0, #1
 8008632:	d1dd      	bne.n	80085f0 <_malloc_r+0x64>
 8008634:	e7cf      	b.n	80085d6 <_malloc_r+0x4a>
 8008636:	bf00      	nop
 8008638:	20000224 	.word	0x20000224
 800863c:	20000228 	.word	0x20000228

08008640 <nan>:
 8008640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008648 <nan+0x8>
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	00000000 	.word	0x00000000
 800864c:	7ff80000 	.word	0x7ff80000

08008650 <_sbrk_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d06      	ldr	r5, [pc, #24]	; (800866c <_sbrk_r+0x1c>)
 8008654:	2300      	movs	r3, #0
 8008656:	4604      	mov	r4, r0
 8008658:	4608      	mov	r0, r1
 800865a:	602b      	str	r3, [r5, #0]
 800865c:	f7f8 fe22 	bl	80012a4 <_sbrk>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_sbrk_r+0x1a>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_sbrk_r+0x1a>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	200007c4 	.word	0x200007c4

08008670 <strncmp>:
 8008670:	b510      	push	{r4, lr}
 8008672:	b16a      	cbz	r2, 8008690 <strncmp+0x20>
 8008674:	3901      	subs	r1, #1
 8008676:	1884      	adds	r4, r0, r2
 8008678:	f810 3b01 	ldrb.w	r3, [r0], #1
 800867c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008680:	4293      	cmp	r3, r2
 8008682:	d103      	bne.n	800868c <strncmp+0x1c>
 8008684:	42a0      	cmp	r0, r4
 8008686:	d001      	beq.n	800868c <strncmp+0x1c>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1f5      	bne.n	8008678 <strncmp+0x8>
 800868c:	1a98      	subs	r0, r3, r2
 800868e:	bd10      	pop	{r4, pc}
 8008690:	4610      	mov	r0, r2
 8008692:	e7fc      	b.n	800868e <strncmp+0x1e>

08008694 <__ascii_wctomb>:
 8008694:	b149      	cbz	r1, 80086aa <__ascii_wctomb+0x16>
 8008696:	2aff      	cmp	r2, #255	; 0xff
 8008698:	bf85      	ittet	hi
 800869a:	238a      	movhi	r3, #138	; 0x8a
 800869c:	6003      	strhi	r3, [r0, #0]
 800869e:	700a      	strbls	r2, [r1, #0]
 80086a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80086a4:	bf98      	it	ls
 80086a6:	2001      	movls	r0, #1
 80086a8:	4770      	bx	lr
 80086aa:	4608      	mov	r0, r1
 80086ac:	4770      	bx	lr
	...

080086b0 <__assert_func>:
 80086b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086b2:	4614      	mov	r4, r2
 80086b4:	461a      	mov	r2, r3
 80086b6:	4b09      	ldr	r3, [pc, #36]	; (80086dc <__assert_func+0x2c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4605      	mov	r5, r0
 80086bc:	68d8      	ldr	r0, [r3, #12]
 80086be:	b14c      	cbz	r4, 80086d4 <__assert_func+0x24>
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <__assert_func+0x30>)
 80086c2:	9100      	str	r1, [sp, #0]
 80086c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086c8:	4906      	ldr	r1, [pc, #24]	; (80086e4 <__assert_func+0x34>)
 80086ca:	462b      	mov	r3, r5
 80086cc:	f000 f80e 	bl	80086ec <fiprintf>
 80086d0:	f000 fc30 	bl	8008f34 <abort>
 80086d4:	4b04      	ldr	r3, [pc, #16]	; (80086e8 <__assert_func+0x38>)
 80086d6:	461c      	mov	r4, r3
 80086d8:	e7f3      	b.n	80086c2 <__assert_func+0x12>
 80086da:	bf00      	nop
 80086dc:	2000000c 	.word	0x2000000c
 80086e0:	08009824 	.word	0x08009824
 80086e4:	08009831 	.word	0x08009831
 80086e8:	0800985f 	.word	0x0800985f

080086ec <fiprintf>:
 80086ec:	b40e      	push	{r1, r2, r3}
 80086ee:	b503      	push	{r0, r1, lr}
 80086f0:	4601      	mov	r1, r0
 80086f2:	ab03      	add	r3, sp, #12
 80086f4:	4805      	ldr	r0, [pc, #20]	; (800870c <fiprintf+0x20>)
 80086f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fa:	6800      	ldr	r0, [r0, #0]
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	f000 f895 	bl	800882c <_vfiprintf_r>
 8008702:	b002      	add	sp, #8
 8008704:	f85d eb04 	ldr.w	lr, [sp], #4
 8008708:	b003      	add	sp, #12
 800870a:	4770      	bx	lr
 800870c:	2000000c 	.word	0x2000000c

08008710 <malloc>:
 8008710:	4b02      	ldr	r3, [pc, #8]	; (800871c <malloc+0xc>)
 8008712:	4601      	mov	r1, r0
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	f7ff bf39 	b.w	800858c <_malloc_r>
 800871a:	bf00      	nop
 800871c:	2000000c 	.word	0x2000000c

08008720 <__malloc_lock>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__malloc_lock+0x8>)
 8008722:	f000 bdc7 	b.w	80092b4 <__retarget_lock_acquire_recursive>
 8008726:	bf00      	nop
 8008728:	200007cc 	.word	0x200007cc

0800872c <__malloc_unlock>:
 800872c:	4801      	ldr	r0, [pc, #4]	; (8008734 <__malloc_unlock+0x8>)
 800872e:	f000 bdc2 	b.w	80092b6 <__retarget_lock_release_recursive>
 8008732:	bf00      	nop
 8008734:	200007cc 	.word	0x200007cc

08008738 <_free_r>:
 8008738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800873a:	2900      	cmp	r1, #0
 800873c:	d048      	beq.n	80087d0 <_free_r+0x98>
 800873e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008742:	9001      	str	r0, [sp, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f1a1 0404 	sub.w	r4, r1, #4
 800874a:	bfb8      	it	lt
 800874c:	18e4      	addlt	r4, r4, r3
 800874e:	f7ff ffe7 	bl	8008720 <__malloc_lock>
 8008752:	4a20      	ldr	r2, [pc, #128]	; (80087d4 <_free_r+0x9c>)
 8008754:	9801      	ldr	r0, [sp, #4]
 8008756:	6813      	ldr	r3, [r2, #0]
 8008758:	4615      	mov	r5, r2
 800875a:	b933      	cbnz	r3, 800876a <_free_r+0x32>
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	6014      	str	r4, [r2, #0]
 8008760:	b003      	add	sp, #12
 8008762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008766:	f7ff bfe1 	b.w	800872c <__malloc_unlock>
 800876a:	42a3      	cmp	r3, r4
 800876c:	d90b      	bls.n	8008786 <_free_r+0x4e>
 800876e:	6821      	ldr	r1, [r4, #0]
 8008770:	1862      	adds	r2, r4, r1
 8008772:	4293      	cmp	r3, r2
 8008774:	bf04      	itt	eq
 8008776:	681a      	ldreq	r2, [r3, #0]
 8008778:	685b      	ldreq	r3, [r3, #4]
 800877a:	6063      	str	r3, [r4, #4]
 800877c:	bf04      	itt	eq
 800877e:	1852      	addeq	r2, r2, r1
 8008780:	6022      	streq	r2, [r4, #0]
 8008782:	602c      	str	r4, [r5, #0]
 8008784:	e7ec      	b.n	8008760 <_free_r+0x28>
 8008786:	461a      	mov	r2, r3
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	b10b      	cbz	r3, 8008790 <_free_r+0x58>
 800878c:	42a3      	cmp	r3, r4
 800878e:	d9fa      	bls.n	8008786 <_free_r+0x4e>
 8008790:	6811      	ldr	r1, [r2, #0]
 8008792:	1855      	adds	r5, r2, r1
 8008794:	42a5      	cmp	r5, r4
 8008796:	d10b      	bne.n	80087b0 <_free_r+0x78>
 8008798:	6824      	ldr	r4, [r4, #0]
 800879a:	4421      	add	r1, r4
 800879c:	1854      	adds	r4, r2, r1
 800879e:	42a3      	cmp	r3, r4
 80087a0:	6011      	str	r1, [r2, #0]
 80087a2:	d1dd      	bne.n	8008760 <_free_r+0x28>
 80087a4:	681c      	ldr	r4, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	6053      	str	r3, [r2, #4]
 80087aa:	4421      	add	r1, r4
 80087ac:	6011      	str	r1, [r2, #0]
 80087ae:	e7d7      	b.n	8008760 <_free_r+0x28>
 80087b0:	d902      	bls.n	80087b8 <_free_r+0x80>
 80087b2:	230c      	movs	r3, #12
 80087b4:	6003      	str	r3, [r0, #0]
 80087b6:	e7d3      	b.n	8008760 <_free_r+0x28>
 80087b8:	6825      	ldr	r5, [r4, #0]
 80087ba:	1961      	adds	r1, r4, r5
 80087bc:	428b      	cmp	r3, r1
 80087be:	bf04      	itt	eq
 80087c0:	6819      	ldreq	r1, [r3, #0]
 80087c2:	685b      	ldreq	r3, [r3, #4]
 80087c4:	6063      	str	r3, [r4, #4]
 80087c6:	bf04      	itt	eq
 80087c8:	1949      	addeq	r1, r1, r5
 80087ca:	6021      	streq	r1, [r4, #0]
 80087cc:	6054      	str	r4, [r2, #4]
 80087ce:	e7c7      	b.n	8008760 <_free_r+0x28>
 80087d0:	b003      	add	sp, #12
 80087d2:	bd30      	pop	{r4, r5, pc}
 80087d4:	20000224 	.word	0x20000224

080087d8 <__sfputc_r>:
 80087d8:	6893      	ldr	r3, [r2, #8]
 80087da:	3b01      	subs	r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	b410      	push	{r4}
 80087e0:	6093      	str	r3, [r2, #8]
 80087e2:	da08      	bge.n	80087f6 <__sfputc_r+0x1e>
 80087e4:	6994      	ldr	r4, [r2, #24]
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	db01      	blt.n	80087ee <__sfputc_r+0x16>
 80087ea:	290a      	cmp	r1, #10
 80087ec:	d103      	bne.n	80087f6 <__sfputc_r+0x1e>
 80087ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087f2:	f000 badf 	b.w	8008db4 <__swbuf_r>
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	1c58      	adds	r0, r3, #1
 80087fa:	6010      	str	r0, [r2, #0]
 80087fc:	7019      	strb	r1, [r3, #0]
 80087fe:	4608      	mov	r0, r1
 8008800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008804:	4770      	bx	lr

08008806 <__sfputs_r>:
 8008806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008808:	4606      	mov	r6, r0
 800880a:	460f      	mov	r7, r1
 800880c:	4614      	mov	r4, r2
 800880e:	18d5      	adds	r5, r2, r3
 8008810:	42ac      	cmp	r4, r5
 8008812:	d101      	bne.n	8008818 <__sfputs_r+0x12>
 8008814:	2000      	movs	r0, #0
 8008816:	e007      	b.n	8008828 <__sfputs_r+0x22>
 8008818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881c:	463a      	mov	r2, r7
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff ffda 	bl	80087d8 <__sfputc_r>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d1f3      	bne.n	8008810 <__sfputs_r+0xa>
 8008828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800882c <_vfiprintf_r>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	460d      	mov	r5, r1
 8008832:	b09d      	sub	sp, #116	; 0x74
 8008834:	4614      	mov	r4, r2
 8008836:	4698      	mov	r8, r3
 8008838:	4606      	mov	r6, r0
 800883a:	b118      	cbz	r0, 8008844 <_vfiprintf_r+0x18>
 800883c:	6983      	ldr	r3, [r0, #24]
 800883e:	b90b      	cbnz	r3, 8008844 <_vfiprintf_r+0x18>
 8008840:	f000 fc9a 	bl	8009178 <__sinit>
 8008844:	4b89      	ldr	r3, [pc, #548]	; (8008a6c <_vfiprintf_r+0x240>)
 8008846:	429d      	cmp	r5, r3
 8008848:	d11b      	bne.n	8008882 <_vfiprintf_r+0x56>
 800884a:	6875      	ldr	r5, [r6, #4]
 800884c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800884e:	07d9      	lsls	r1, r3, #31
 8008850:	d405      	bmi.n	800885e <_vfiprintf_r+0x32>
 8008852:	89ab      	ldrh	r3, [r5, #12]
 8008854:	059a      	lsls	r2, r3, #22
 8008856:	d402      	bmi.n	800885e <_vfiprintf_r+0x32>
 8008858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800885a:	f000 fd2b 	bl	80092b4 <__retarget_lock_acquire_recursive>
 800885e:	89ab      	ldrh	r3, [r5, #12]
 8008860:	071b      	lsls	r3, r3, #28
 8008862:	d501      	bpl.n	8008868 <_vfiprintf_r+0x3c>
 8008864:	692b      	ldr	r3, [r5, #16]
 8008866:	b9eb      	cbnz	r3, 80088a4 <_vfiprintf_r+0x78>
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f000 faf4 	bl	8008e58 <__swsetup_r>
 8008870:	b1c0      	cbz	r0, 80088a4 <_vfiprintf_r+0x78>
 8008872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008874:	07dc      	lsls	r4, r3, #31
 8008876:	d50e      	bpl.n	8008896 <_vfiprintf_r+0x6a>
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	b01d      	add	sp, #116	; 0x74
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	4b7b      	ldr	r3, [pc, #492]	; (8008a70 <_vfiprintf_r+0x244>)
 8008884:	429d      	cmp	r5, r3
 8008886:	d101      	bne.n	800888c <_vfiprintf_r+0x60>
 8008888:	68b5      	ldr	r5, [r6, #8]
 800888a:	e7df      	b.n	800884c <_vfiprintf_r+0x20>
 800888c:	4b79      	ldr	r3, [pc, #484]	; (8008a74 <_vfiprintf_r+0x248>)
 800888e:	429d      	cmp	r5, r3
 8008890:	bf08      	it	eq
 8008892:	68f5      	ldreq	r5, [r6, #12]
 8008894:	e7da      	b.n	800884c <_vfiprintf_r+0x20>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	0598      	lsls	r0, r3, #22
 800889a:	d4ed      	bmi.n	8008878 <_vfiprintf_r+0x4c>
 800889c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800889e:	f000 fd0a 	bl	80092b6 <__retarget_lock_release_recursive>
 80088a2:	e7e9      	b.n	8008878 <_vfiprintf_r+0x4c>
 80088a4:	2300      	movs	r3, #0
 80088a6:	9309      	str	r3, [sp, #36]	; 0x24
 80088a8:	2320      	movs	r3, #32
 80088aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80088b2:	2330      	movs	r3, #48	; 0x30
 80088b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a78 <_vfiprintf_r+0x24c>
 80088b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088bc:	f04f 0901 	mov.w	r9, #1
 80088c0:	4623      	mov	r3, r4
 80088c2:	469a      	mov	sl, r3
 80088c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c8:	b10a      	cbz	r2, 80088ce <_vfiprintf_r+0xa2>
 80088ca:	2a25      	cmp	r2, #37	; 0x25
 80088cc:	d1f9      	bne.n	80088c2 <_vfiprintf_r+0x96>
 80088ce:	ebba 0b04 	subs.w	fp, sl, r4
 80088d2:	d00b      	beq.n	80088ec <_vfiprintf_r+0xc0>
 80088d4:	465b      	mov	r3, fp
 80088d6:	4622      	mov	r2, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff ff93 	bl	8008806 <__sfputs_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	f000 80aa 	beq.w	8008a3a <_vfiprintf_r+0x20e>
 80088e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e8:	445a      	add	r2, fp
 80088ea:	9209      	str	r2, [sp, #36]	; 0x24
 80088ec:	f89a 3000 	ldrb.w	r3, [sl]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80a2 	beq.w	8008a3a <_vfiprintf_r+0x20e>
 80088f6:	2300      	movs	r3, #0
 80088f8:	f04f 32ff 	mov.w	r2, #4294967295
 80088fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008900:	f10a 0a01 	add.w	sl, sl, #1
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800890c:	931a      	str	r3, [sp, #104]	; 0x68
 800890e:	4654      	mov	r4, sl
 8008910:	2205      	movs	r2, #5
 8008912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008916:	4858      	ldr	r0, [pc, #352]	; (8008a78 <_vfiprintf_r+0x24c>)
 8008918:	f7f7 fc9a 	bl	8000250 <memchr>
 800891c:	9a04      	ldr	r2, [sp, #16]
 800891e:	b9d8      	cbnz	r0, 8008958 <_vfiprintf_r+0x12c>
 8008920:	06d1      	lsls	r1, r2, #27
 8008922:	bf44      	itt	mi
 8008924:	2320      	movmi	r3, #32
 8008926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892a:	0713      	lsls	r3, r2, #28
 800892c:	bf44      	itt	mi
 800892e:	232b      	movmi	r3, #43	; 0x2b
 8008930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008934:	f89a 3000 	ldrb.w	r3, [sl]
 8008938:	2b2a      	cmp	r3, #42	; 0x2a
 800893a:	d015      	beq.n	8008968 <_vfiprintf_r+0x13c>
 800893c:	9a07      	ldr	r2, [sp, #28]
 800893e:	4654      	mov	r4, sl
 8008940:	2000      	movs	r0, #0
 8008942:	f04f 0c0a 	mov.w	ip, #10
 8008946:	4621      	mov	r1, r4
 8008948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800894c:	3b30      	subs	r3, #48	; 0x30
 800894e:	2b09      	cmp	r3, #9
 8008950:	d94e      	bls.n	80089f0 <_vfiprintf_r+0x1c4>
 8008952:	b1b0      	cbz	r0, 8008982 <_vfiprintf_r+0x156>
 8008954:	9207      	str	r2, [sp, #28]
 8008956:	e014      	b.n	8008982 <_vfiprintf_r+0x156>
 8008958:	eba0 0308 	sub.w	r3, r0, r8
 800895c:	fa09 f303 	lsl.w	r3, r9, r3
 8008960:	4313      	orrs	r3, r2
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	46a2      	mov	sl, r4
 8008966:	e7d2      	b.n	800890e <_vfiprintf_r+0xe2>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	1d19      	adds	r1, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	9103      	str	r1, [sp, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	bfbb      	ittet	lt
 8008974:	425b      	neglt	r3, r3
 8008976:	f042 0202 	orrlt.w	r2, r2, #2
 800897a:	9307      	strge	r3, [sp, #28]
 800897c:	9307      	strlt	r3, [sp, #28]
 800897e:	bfb8      	it	lt
 8008980:	9204      	strlt	r2, [sp, #16]
 8008982:	7823      	ldrb	r3, [r4, #0]
 8008984:	2b2e      	cmp	r3, #46	; 0x2e
 8008986:	d10c      	bne.n	80089a2 <_vfiprintf_r+0x176>
 8008988:	7863      	ldrb	r3, [r4, #1]
 800898a:	2b2a      	cmp	r3, #42	; 0x2a
 800898c:	d135      	bne.n	80089fa <_vfiprintf_r+0x1ce>
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	1d1a      	adds	r2, r3, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	9203      	str	r2, [sp, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfb8      	it	lt
 800899a:	f04f 33ff 	movlt.w	r3, #4294967295
 800899e:	3402      	adds	r4, #2
 80089a0:	9305      	str	r3, [sp, #20]
 80089a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a88 <_vfiprintf_r+0x25c>
 80089a6:	7821      	ldrb	r1, [r4, #0]
 80089a8:	2203      	movs	r2, #3
 80089aa:	4650      	mov	r0, sl
 80089ac:	f7f7 fc50 	bl	8000250 <memchr>
 80089b0:	b140      	cbz	r0, 80089c4 <_vfiprintf_r+0x198>
 80089b2:	2340      	movs	r3, #64	; 0x40
 80089b4:	eba0 000a 	sub.w	r0, r0, sl
 80089b8:	fa03 f000 	lsl.w	r0, r3, r0
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	4303      	orrs	r3, r0
 80089c0:	3401      	adds	r4, #1
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c8:	482c      	ldr	r0, [pc, #176]	; (8008a7c <_vfiprintf_r+0x250>)
 80089ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ce:	2206      	movs	r2, #6
 80089d0:	f7f7 fc3e 	bl	8000250 <memchr>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d03f      	beq.n	8008a58 <_vfiprintf_r+0x22c>
 80089d8:	4b29      	ldr	r3, [pc, #164]	; (8008a80 <_vfiprintf_r+0x254>)
 80089da:	bb1b      	cbnz	r3, 8008a24 <_vfiprintf_r+0x1f8>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	3307      	adds	r3, #7
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	3308      	adds	r3, #8
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	443b      	add	r3, r7
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	e767      	b.n	80088c0 <_vfiprintf_r+0x94>
 80089f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089f4:	460c      	mov	r4, r1
 80089f6:	2001      	movs	r0, #1
 80089f8:	e7a5      	b.n	8008946 <_vfiprintf_r+0x11a>
 80089fa:	2300      	movs	r3, #0
 80089fc:	3401      	adds	r4, #1
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4620      	mov	r0, r4
 8008a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a0c:	3a30      	subs	r2, #48	; 0x30
 8008a0e:	2a09      	cmp	r2, #9
 8008a10:	d903      	bls.n	8008a1a <_vfiprintf_r+0x1ee>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0c5      	beq.n	80089a2 <_vfiprintf_r+0x176>
 8008a16:	9105      	str	r1, [sp, #20]
 8008a18:	e7c3      	b.n	80089a2 <_vfiprintf_r+0x176>
 8008a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a1e:	4604      	mov	r4, r0
 8008a20:	2301      	movs	r3, #1
 8008a22:	e7f0      	b.n	8008a06 <_vfiprintf_r+0x1da>
 8008a24:	ab03      	add	r3, sp, #12
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	462a      	mov	r2, r5
 8008a2a:	4b16      	ldr	r3, [pc, #88]	; (8008a84 <_vfiprintf_r+0x258>)
 8008a2c:	a904      	add	r1, sp, #16
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f3af 8000 	nop.w
 8008a34:	4607      	mov	r7, r0
 8008a36:	1c78      	adds	r0, r7, #1
 8008a38:	d1d6      	bne.n	80089e8 <_vfiprintf_r+0x1bc>
 8008a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3c:	07d9      	lsls	r1, r3, #31
 8008a3e:	d405      	bmi.n	8008a4c <_vfiprintf_r+0x220>
 8008a40:	89ab      	ldrh	r3, [r5, #12]
 8008a42:	059a      	lsls	r2, r3, #22
 8008a44:	d402      	bmi.n	8008a4c <_vfiprintf_r+0x220>
 8008a46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a48:	f000 fc35 	bl	80092b6 <__retarget_lock_release_recursive>
 8008a4c:	89ab      	ldrh	r3, [r5, #12]
 8008a4e:	065b      	lsls	r3, r3, #25
 8008a50:	f53f af12 	bmi.w	8008878 <_vfiprintf_r+0x4c>
 8008a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a56:	e711      	b.n	800887c <_vfiprintf_r+0x50>
 8008a58:	ab03      	add	r3, sp, #12
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	462a      	mov	r2, r5
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <_vfiprintf_r+0x258>)
 8008a60:	a904      	add	r1, sp, #16
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f880 	bl	8008b68 <_printf_i>
 8008a68:	e7e4      	b.n	8008a34 <_vfiprintf_r+0x208>
 8008a6a:	bf00      	nop
 8008a6c:	080099b4 	.word	0x080099b4
 8008a70:	080099d4 	.word	0x080099d4
 8008a74:	08009994 	.word	0x08009994
 8008a78:	08009961 	.word	0x08009961
 8008a7c:	0800996b 	.word	0x0800996b
 8008a80:	00000000 	.word	0x00000000
 8008a84:	08008807 	.word	0x08008807
 8008a88:	08009967 	.word	0x08009967

08008a8c <_printf_common>:
 8008a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	4616      	mov	r6, r2
 8008a92:	4699      	mov	r9, r3
 8008a94:	688a      	ldr	r2, [r1, #8]
 8008a96:	690b      	ldr	r3, [r1, #16]
 8008a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bfb8      	it	lt
 8008aa0:	4613      	movlt	r3, r2
 8008aa2:	6033      	str	r3, [r6, #0]
 8008aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	b10a      	cbz	r2, 8008ab2 <_printf_common+0x26>
 8008aae:	3301      	adds	r3, #1
 8008ab0:	6033      	str	r3, [r6, #0]
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	0699      	lsls	r1, r3, #26
 8008ab6:	bf42      	ittt	mi
 8008ab8:	6833      	ldrmi	r3, [r6, #0]
 8008aba:	3302      	addmi	r3, #2
 8008abc:	6033      	strmi	r3, [r6, #0]
 8008abe:	6825      	ldr	r5, [r4, #0]
 8008ac0:	f015 0506 	ands.w	r5, r5, #6
 8008ac4:	d106      	bne.n	8008ad4 <_printf_common+0x48>
 8008ac6:	f104 0a19 	add.w	sl, r4, #25
 8008aca:	68e3      	ldr	r3, [r4, #12]
 8008acc:	6832      	ldr	r2, [r6, #0]
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	42ab      	cmp	r3, r5
 8008ad2:	dc26      	bgt.n	8008b22 <_printf_common+0x96>
 8008ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ad8:	1e13      	subs	r3, r2, #0
 8008ada:	6822      	ldr	r2, [r4, #0]
 8008adc:	bf18      	it	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	0692      	lsls	r2, r2, #26
 8008ae2:	d42b      	bmi.n	8008b3c <_printf_common+0xb0>
 8008ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ae8:	4649      	mov	r1, r9
 8008aea:	4638      	mov	r0, r7
 8008aec:	47c0      	blx	r8
 8008aee:	3001      	adds	r0, #1
 8008af0:	d01e      	beq.n	8008b30 <_printf_common+0xa4>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	68e5      	ldr	r5, [r4, #12]
 8008af6:	6832      	ldr	r2, [r6, #0]
 8008af8:	f003 0306 	and.w	r3, r3, #6
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	bf08      	it	eq
 8008b00:	1aad      	subeq	r5, r5, r2
 8008b02:	68a3      	ldr	r3, [r4, #8]
 8008b04:	6922      	ldr	r2, [r4, #16]
 8008b06:	bf0c      	ite	eq
 8008b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b0c:	2500      	movne	r5, #0
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bfc4      	itt	gt
 8008b12:	1a9b      	subgt	r3, r3, r2
 8008b14:	18ed      	addgt	r5, r5, r3
 8008b16:	2600      	movs	r6, #0
 8008b18:	341a      	adds	r4, #26
 8008b1a:	42b5      	cmp	r5, r6
 8008b1c:	d11a      	bne.n	8008b54 <_printf_common+0xc8>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e008      	b.n	8008b34 <_printf_common+0xa8>
 8008b22:	2301      	movs	r3, #1
 8008b24:	4652      	mov	r2, sl
 8008b26:	4649      	mov	r1, r9
 8008b28:	4638      	mov	r0, r7
 8008b2a:	47c0      	blx	r8
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d103      	bne.n	8008b38 <_printf_common+0xac>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	3501      	adds	r5, #1
 8008b3a:	e7c6      	b.n	8008aca <_printf_common+0x3e>
 8008b3c:	18e1      	adds	r1, r4, r3
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	2030      	movs	r0, #48	; 0x30
 8008b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b46:	4422      	add	r2, r4
 8008b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b50:	3302      	adds	r3, #2
 8008b52:	e7c7      	b.n	8008ae4 <_printf_common+0x58>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4622      	mov	r2, r4
 8008b58:	4649      	mov	r1, r9
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c0      	blx	r8
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d0e6      	beq.n	8008b30 <_printf_common+0xa4>
 8008b62:	3601      	adds	r6, #1
 8008b64:	e7d9      	b.n	8008b1a <_printf_common+0x8e>
	...

08008b68 <_printf_i>:
 8008b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	4691      	mov	r9, r2
 8008b70:	7e27      	ldrb	r7, [r4, #24]
 8008b72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b74:	2f78      	cmp	r7, #120	; 0x78
 8008b76:	4680      	mov	r8, r0
 8008b78:	469a      	mov	sl, r3
 8008b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b7e:	d807      	bhi.n	8008b90 <_printf_i+0x28>
 8008b80:	2f62      	cmp	r7, #98	; 0x62
 8008b82:	d80a      	bhi.n	8008b9a <_printf_i+0x32>
 8008b84:	2f00      	cmp	r7, #0
 8008b86:	f000 80d8 	beq.w	8008d3a <_printf_i+0x1d2>
 8008b8a:	2f58      	cmp	r7, #88	; 0x58
 8008b8c:	f000 80a3 	beq.w	8008cd6 <_printf_i+0x16e>
 8008b90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b98:	e03a      	b.n	8008c10 <_printf_i+0xa8>
 8008b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b9e:	2b15      	cmp	r3, #21
 8008ba0:	d8f6      	bhi.n	8008b90 <_printf_i+0x28>
 8008ba2:	a001      	add	r0, pc, #4	; (adr r0, 8008ba8 <_printf_i+0x40>)
 8008ba4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ba8:	08008c01 	.word	0x08008c01
 8008bac:	08008c15 	.word	0x08008c15
 8008bb0:	08008b91 	.word	0x08008b91
 8008bb4:	08008b91 	.word	0x08008b91
 8008bb8:	08008b91 	.word	0x08008b91
 8008bbc:	08008b91 	.word	0x08008b91
 8008bc0:	08008c15 	.word	0x08008c15
 8008bc4:	08008b91 	.word	0x08008b91
 8008bc8:	08008b91 	.word	0x08008b91
 8008bcc:	08008b91 	.word	0x08008b91
 8008bd0:	08008b91 	.word	0x08008b91
 8008bd4:	08008d21 	.word	0x08008d21
 8008bd8:	08008c45 	.word	0x08008c45
 8008bdc:	08008d03 	.word	0x08008d03
 8008be0:	08008b91 	.word	0x08008b91
 8008be4:	08008b91 	.word	0x08008b91
 8008be8:	08008d43 	.word	0x08008d43
 8008bec:	08008b91 	.word	0x08008b91
 8008bf0:	08008c45 	.word	0x08008c45
 8008bf4:	08008b91 	.word	0x08008b91
 8008bf8:	08008b91 	.word	0x08008b91
 8008bfc:	08008d0b 	.word	0x08008d0b
 8008c00:	680b      	ldr	r3, [r1, #0]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	600a      	str	r2, [r1, #0]
 8008c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c10:	2301      	movs	r3, #1
 8008c12:	e0a3      	b.n	8008d5c <_printf_i+0x1f4>
 8008c14:	6825      	ldr	r5, [r4, #0]
 8008c16:	6808      	ldr	r0, [r1, #0]
 8008c18:	062e      	lsls	r6, r5, #24
 8008c1a:	f100 0304 	add.w	r3, r0, #4
 8008c1e:	d50a      	bpl.n	8008c36 <_printf_i+0xce>
 8008c20:	6805      	ldr	r5, [r0, #0]
 8008c22:	600b      	str	r3, [r1, #0]
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	da03      	bge.n	8008c30 <_printf_i+0xc8>
 8008c28:	232d      	movs	r3, #45	; 0x2d
 8008c2a:	426d      	negs	r5, r5
 8008c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c30:	485e      	ldr	r0, [pc, #376]	; (8008dac <_printf_i+0x244>)
 8008c32:	230a      	movs	r3, #10
 8008c34:	e019      	b.n	8008c6a <_printf_i+0x102>
 8008c36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c3a:	6805      	ldr	r5, [r0, #0]
 8008c3c:	600b      	str	r3, [r1, #0]
 8008c3e:	bf18      	it	ne
 8008c40:	b22d      	sxthne	r5, r5
 8008c42:	e7ef      	b.n	8008c24 <_printf_i+0xbc>
 8008c44:	680b      	ldr	r3, [r1, #0]
 8008c46:	6825      	ldr	r5, [r4, #0]
 8008c48:	1d18      	adds	r0, r3, #4
 8008c4a:	6008      	str	r0, [r1, #0]
 8008c4c:	0628      	lsls	r0, r5, #24
 8008c4e:	d501      	bpl.n	8008c54 <_printf_i+0xec>
 8008c50:	681d      	ldr	r5, [r3, #0]
 8008c52:	e002      	b.n	8008c5a <_printf_i+0xf2>
 8008c54:	0669      	lsls	r1, r5, #25
 8008c56:	d5fb      	bpl.n	8008c50 <_printf_i+0xe8>
 8008c58:	881d      	ldrh	r5, [r3, #0]
 8008c5a:	4854      	ldr	r0, [pc, #336]	; (8008dac <_printf_i+0x244>)
 8008c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c5e:	bf0c      	ite	eq
 8008c60:	2308      	moveq	r3, #8
 8008c62:	230a      	movne	r3, #10
 8008c64:	2100      	movs	r1, #0
 8008c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c6a:	6866      	ldr	r6, [r4, #4]
 8008c6c:	60a6      	str	r6, [r4, #8]
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	bfa2      	ittt	ge
 8008c72:	6821      	ldrge	r1, [r4, #0]
 8008c74:	f021 0104 	bicge.w	r1, r1, #4
 8008c78:	6021      	strge	r1, [r4, #0]
 8008c7a:	b90d      	cbnz	r5, 8008c80 <_printf_i+0x118>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	d04d      	beq.n	8008d1c <_printf_i+0x1b4>
 8008c80:	4616      	mov	r6, r2
 8008c82:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c86:	fb03 5711 	mls	r7, r3, r1, r5
 8008c8a:	5dc7      	ldrb	r7, [r0, r7]
 8008c8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c90:	462f      	mov	r7, r5
 8008c92:	42bb      	cmp	r3, r7
 8008c94:	460d      	mov	r5, r1
 8008c96:	d9f4      	bls.n	8008c82 <_printf_i+0x11a>
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d10b      	bne.n	8008cb4 <_printf_i+0x14c>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	07df      	lsls	r7, r3, #31
 8008ca0:	d508      	bpl.n	8008cb4 <_printf_i+0x14c>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	bfde      	ittt	le
 8008caa:	2330      	movle	r3, #48	; 0x30
 8008cac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cb4:	1b92      	subs	r2, r2, r6
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	f8cd a000 	str.w	sl, [sp]
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	aa03      	add	r2, sp, #12
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f7ff fee2 	bl	8008a8c <_printf_common>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d14c      	bne.n	8008d66 <_printf_i+0x1fe>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	b004      	add	sp, #16
 8008cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd6:	4835      	ldr	r0, [pc, #212]	; (8008dac <_printf_i+0x244>)
 8008cd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	680e      	ldr	r6, [r1, #0]
 8008ce0:	061f      	lsls	r7, r3, #24
 8008ce2:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ce6:	600e      	str	r6, [r1, #0]
 8008ce8:	d514      	bpl.n	8008d14 <_printf_i+0x1ac>
 8008cea:	07d9      	lsls	r1, r3, #31
 8008cec:	bf44      	itt	mi
 8008cee:	f043 0320 	orrmi.w	r3, r3, #32
 8008cf2:	6023      	strmi	r3, [r4, #0]
 8008cf4:	b91d      	cbnz	r5, 8008cfe <_printf_i+0x196>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f023 0320 	bic.w	r3, r3, #32
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	2310      	movs	r3, #16
 8008d00:	e7b0      	b.n	8008c64 <_printf_i+0xfc>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f043 0320 	orr.w	r3, r3, #32
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	2378      	movs	r3, #120	; 0x78
 8008d0c:	4828      	ldr	r0, [pc, #160]	; (8008db0 <_printf_i+0x248>)
 8008d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d12:	e7e3      	b.n	8008cdc <_printf_i+0x174>
 8008d14:	065e      	lsls	r6, r3, #25
 8008d16:	bf48      	it	mi
 8008d18:	b2ad      	uxthmi	r5, r5
 8008d1a:	e7e6      	b.n	8008cea <_printf_i+0x182>
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	e7bb      	b.n	8008c98 <_printf_i+0x130>
 8008d20:	680b      	ldr	r3, [r1, #0]
 8008d22:	6826      	ldr	r6, [r4, #0]
 8008d24:	6960      	ldr	r0, [r4, #20]
 8008d26:	1d1d      	adds	r5, r3, #4
 8008d28:	600d      	str	r5, [r1, #0]
 8008d2a:	0635      	lsls	r5, r6, #24
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	d501      	bpl.n	8008d34 <_printf_i+0x1cc>
 8008d30:	6018      	str	r0, [r3, #0]
 8008d32:	e002      	b.n	8008d3a <_printf_i+0x1d2>
 8008d34:	0671      	lsls	r1, r6, #25
 8008d36:	d5fb      	bpl.n	8008d30 <_printf_i+0x1c8>
 8008d38:	8018      	strh	r0, [r3, #0]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6123      	str	r3, [r4, #16]
 8008d3e:	4616      	mov	r6, r2
 8008d40:	e7ba      	b.n	8008cb8 <_printf_i+0x150>
 8008d42:	680b      	ldr	r3, [r1, #0]
 8008d44:	1d1a      	adds	r2, r3, #4
 8008d46:	600a      	str	r2, [r1, #0]
 8008d48:	681e      	ldr	r6, [r3, #0]
 8008d4a:	6862      	ldr	r2, [r4, #4]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7f7 fa7e 	bl	8000250 <memchr>
 8008d54:	b108      	cbz	r0, 8008d5a <_printf_i+0x1f2>
 8008d56:	1b80      	subs	r0, r0, r6
 8008d58:	6060      	str	r0, [r4, #4]
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d64:	e7a8      	b.n	8008cb8 <_printf_i+0x150>
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	4632      	mov	r2, r6
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	47d0      	blx	sl
 8008d70:	3001      	adds	r0, #1
 8008d72:	d0ab      	beq.n	8008ccc <_printf_i+0x164>
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	079b      	lsls	r3, r3, #30
 8008d78:	d413      	bmi.n	8008da2 <_printf_i+0x23a>
 8008d7a:	68e0      	ldr	r0, [r4, #12]
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	4298      	cmp	r0, r3
 8008d80:	bfb8      	it	lt
 8008d82:	4618      	movlt	r0, r3
 8008d84:	e7a4      	b.n	8008cd0 <_printf_i+0x168>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4632      	mov	r2, r6
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	47d0      	blx	sl
 8008d90:	3001      	adds	r0, #1
 8008d92:	d09b      	beq.n	8008ccc <_printf_i+0x164>
 8008d94:	3501      	adds	r5, #1
 8008d96:	68e3      	ldr	r3, [r4, #12]
 8008d98:	9903      	ldr	r1, [sp, #12]
 8008d9a:	1a5b      	subs	r3, r3, r1
 8008d9c:	42ab      	cmp	r3, r5
 8008d9e:	dcf2      	bgt.n	8008d86 <_printf_i+0x21e>
 8008da0:	e7eb      	b.n	8008d7a <_printf_i+0x212>
 8008da2:	2500      	movs	r5, #0
 8008da4:	f104 0619 	add.w	r6, r4, #25
 8008da8:	e7f5      	b.n	8008d96 <_printf_i+0x22e>
 8008daa:	bf00      	nop
 8008dac:	08009972 	.word	0x08009972
 8008db0:	08009983 	.word	0x08009983

08008db4 <__swbuf_r>:
 8008db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db6:	460e      	mov	r6, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	4605      	mov	r5, r0
 8008dbc:	b118      	cbz	r0, 8008dc6 <__swbuf_r+0x12>
 8008dbe:	6983      	ldr	r3, [r0, #24]
 8008dc0:	b90b      	cbnz	r3, 8008dc6 <__swbuf_r+0x12>
 8008dc2:	f000 f9d9 	bl	8009178 <__sinit>
 8008dc6:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <__swbuf_r+0x98>)
 8008dc8:	429c      	cmp	r4, r3
 8008dca:	d12b      	bne.n	8008e24 <__swbuf_r+0x70>
 8008dcc:	686c      	ldr	r4, [r5, #4]
 8008dce:	69a3      	ldr	r3, [r4, #24]
 8008dd0:	60a3      	str	r3, [r4, #8]
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	071a      	lsls	r2, r3, #28
 8008dd6:	d52f      	bpl.n	8008e38 <__swbuf_r+0x84>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	b36b      	cbz	r3, 8008e38 <__swbuf_r+0x84>
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	1ac0      	subs	r0, r0, r3
 8008de2:	6963      	ldr	r3, [r4, #20]
 8008de4:	b2f6      	uxtb	r6, r6
 8008de6:	4283      	cmp	r3, r0
 8008de8:	4637      	mov	r7, r6
 8008dea:	dc04      	bgt.n	8008df6 <__swbuf_r+0x42>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 f92e 	bl	8009050 <_fflush_r>
 8008df4:	bb30      	cbnz	r0, 8008e44 <__swbuf_r+0x90>
 8008df6:	68a3      	ldr	r3, [r4, #8]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	60a3      	str	r3, [r4, #8]
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	6022      	str	r2, [r4, #0]
 8008e02:	701e      	strb	r6, [r3, #0]
 8008e04:	6963      	ldr	r3, [r4, #20]
 8008e06:	3001      	adds	r0, #1
 8008e08:	4283      	cmp	r3, r0
 8008e0a:	d004      	beq.n	8008e16 <__swbuf_r+0x62>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	07db      	lsls	r3, r3, #31
 8008e10:	d506      	bpl.n	8008e20 <__swbuf_r+0x6c>
 8008e12:	2e0a      	cmp	r6, #10
 8008e14:	d104      	bne.n	8008e20 <__swbuf_r+0x6c>
 8008e16:	4621      	mov	r1, r4
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f000 f919 	bl	8009050 <_fflush_r>
 8008e1e:	b988      	cbnz	r0, 8008e44 <__swbuf_r+0x90>
 8008e20:	4638      	mov	r0, r7
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <__swbuf_r+0x9c>)
 8008e26:	429c      	cmp	r4, r3
 8008e28:	d101      	bne.n	8008e2e <__swbuf_r+0x7a>
 8008e2a:	68ac      	ldr	r4, [r5, #8]
 8008e2c:	e7cf      	b.n	8008dce <__swbuf_r+0x1a>
 8008e2e:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <__swbuf_r+0xa0>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	bf08      	it	eq
 8008e34:	68ec      	ldreq	r4, [r5, #12]
 8008e36:	e7ca      	b.n	8008dce <__swbuf_r+0x1a>
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f80c 	bl	8008e58 <__swsetup_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0cb      	beq.n	8008ddc <__swbuf_r+0x28>
 8008e44:	f04f 37ff 	mov.w	r7, #4294967295
 8008e48:	e7ea      	b.n	8008e20 <__swbuf_r+0x6c>
 8008e4a:	bf00      	nop
 8008e4c:	080099b4 	.word	0x080099b4
 8008e50:	080099d4 	.word	0x080099d4
 8008e54:	08009994 	.word	0x08009994

08008e58 <__swsetup_r>:
 8008e58:	4b32      	ldr	r3, [pc, #200]	; (8008f24 <__swsetup_r+0xcc>)
 8008e5a:	b570      	push	{r4, r5, r6, lr}
 8008e5c:	681d      	ldr	r5, [r3, #0]
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	b125      	cbz	r5, 8008e6e <__swsetup_r+0x16>
 8008e64:	69ab      	ldr	r3, [r5, #24]
 8008e66:	b913      	cbnz	r3, 8008e6e <__swsetup_r+0x16>
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f985 	bl	8009178 <__sinit>
 8008e6e:	4b2e      	ldr	r3, [pc, #184]	; (8008f28 <__swsetup_r+0xd0>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	d10f      	bne.n	8008e94 <__swsetup_r+0x3c>
 8008e74:	686c      	ldr	r4, [r5, #4]
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e7c:	0719      	lsls	r1, r3, #28
 8008e7e:	d42c      	bmi.n	8008eda <__swsetup_r+0x82>
 8008e80:	06dd      	lsls	r5, r3, #27
 8008e82:	d411      	bmi.n	8008ea8 <__swsetup_r+0x50>
 8008e84:	2309      	movs	r3, #9
 8008e86:	6033      	str	r3, [r6, #0]
 8008e88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	e03e      	b.n	8008f12 <__swsetup_r+0xba>
 8008e94:	4b25      	ldr	r3, [pc, #148]	; (8008f2c <__swsetup_r+0xd4>)
 8008e96:	429c      	cmp	r4, r3
 8008e98:	d101      	bne.n	8008e9e <__swsetup_r+0x46>
 8008e9a:	68ac      	ldr	r4, [r5, #8]
 8008e9c:	e7eb      	b.n	8008e76 <__swsetup_r+0x1e>
 8008e9e:	4b24      	ldr	r3, [pc, #144]	; (8008f30 <__swsetup_r+0xd8>)
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	bf08      	it	eq
 8008ea4:	68ec      	ldreq	r4, [r5, #12]
 8008ea6:	e7e6      	b.n	8008e76 <__swsetup_r+0x1e>
 8008ea8:	0758      	lsls	r0, r3, #29
 8008eaa:	d512      	bpl.n	8008ed2 <__swsetup_r+0x7a>
 8008eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eae:	b141      	cbz	r1, 8008ec2 <__swsetup_r+0x6a>
 8008eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eb4:	4299      	cmp	r1, r3
 8008eb6:	d002      	beq.n	8008ebe <__swsetup_r+0x66>
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff fc3d 	bl	8008738 <_free_r>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ec8:	81a3      	strh	r3, [r4, #12]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6063      	str	r3, [r4, #4]
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f043 0308 	orr.w	r3, r3, #8
 8008ed8:	81a3      	strh	r3, [r4, #12]
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	b94b      	cbnz	r3, 8008ef2 <__swsetup_r+0x9a>
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee8:	d003      	beq.n	8008ef2 <__swsetup_r+0x9a>
 8008eea:	4621      	mov	r1, r4
 8008eec:	4630      	mov	r0, r6
 8008eee:	f000 fa07 	bl	8009300 <__smakebuf_r>
 8008ef2:	89a0      	ldrh	r0, [r4, #12]
 8008ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef8:	f010 0301 	ands.w	r3, r0, #1
 8008efc:	d00a      	beq.n	8008f14 <__swsetup_r+0xbc>
 8008efe:	2300      	movs	r3, #0
 8008f00:	60a3      	str	r3, [r4, #8]
 8008f02:	6963      	ldr	r3, [r4, #20]
 8008f04:	425b      	negs	r3, r3
 8008f06:	61a3      	str	r3, [r4, #24]
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	b943      	cbnz	r3, 8008f1e <__swsetup_r+0xc6>
 8008f0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f10:	d1ba      	bne.n	8008e88 <__swsetup_r+0x30>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	0781      	lsls	r1, r0, #30
 8008f16:	bf58      	it	pl
 8008f18:	6963      	ldrpl	r3, [r4, #20]
 8008f1a:	60a3      	str	r3, [r4, #8]
 8008f1c:	e7f4      	b.n	8008f08 <__swsetup_r+0xb0>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e7f7      	b.n	8008f12 <__swsetup_r+0xba>
 8008f22:	bf00      	nop
 8008f24:	2000000c 	.word	0x2000000c
 8008f28:	080099b4 	.word	0x080099b4
 8008f2c:	080099d4 	.word	0x080099d4
 8008f30:	08009994 	.word	0x08009994

08008f34 <abort>:
 8008f34:	b508      	push	{r3, lr}
 8008f36:	2006      	movs	r0, #6
 8008f38:	f000 fa4a 	bl	80093d0 <raise>
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	f7f8 f939 	bl	80011b4 <_exit>
	...

08008f44 <__sflush_r>:
 8008f44:	898a      	ldrh	r2, [r1, #12]
 8008f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	0710      	lsls	r0, r2, #28
 8008f4e:	460c      	mov	r4, r1
 8008f50:	d458      	bmi.n	8009004 <__sflush_r+0xc0>
 8008f52:	684b      	ldr	r3, [r1, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	dc05      	bgt.n	8008f64 <__sflush_r+0x20>
 8008f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dc02      	bgt.n	8008f64 <__sflush_r+0x20>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f66:	2e00      	cmp	r6, #0
 8008f68:	d0f9      	beq.n	8008f5e <__sflush_r+0x1a>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f70:	682f      	ldr	r7, [r5, #0]
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	d032      	beq.n	8008fdc <__sflush_r+0x98>
 8008f76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	075a      	lsls	r2, r3, #29
 8008f7c:	d505      	bpl.n	8008f8a <__sflush_r+0x46>
 8008f7e:	6863      	ldr	r3, [r4, #4]
 8008f80:	1ac0      	subs	r0, r0, r3
 8008f82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f84:	b10b      	cbz	r3, 8008f8a <__sflush_r+0x46>
 8008f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f88:	1ac0      	subs	r0, r0, r3
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f90:	6a21      	ldr	r1, [r4, #32]
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b0      	blx	r6
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	d106      	bne.n	8008faa <__sflush_r+0x66>
 8008f9c:	6829      	ldr	r1, [r5, #0]
 8008f9e:	291d      	cmp	r1, #29
 8008fa0:	d82c      	bhi.n	8008ffc <__sflush_r+0xb8>
 8008fa2:	4a2a      	ldr	r2, [pc, #168]	; (800904c <__sflush_r+0x108>)
 8008fa4:	40ca      	lsrs	r2, r1
 8008fa6:	07d6      	lsls	r6, r2, #31
 8008fa8:	d528      	bpl.n	8008ffc <__sflush_r+0xb8>
 8008faa:	2200      	movs	r2, #0
 8008fac:	6062      	str	r2, [r4, #4]
 8008fae:	04d9      	lsls	r1, r3, #19
 8008fb0:	6922      	ldr	r2, [r4, #16]
 8008fb2:	6022      	str	r2, [r4, #0]
 8008fb4:	d504      	bpl.n	8008fc0 <__sflush_r+0x7c>
 8008fb6:	1c42      	adds	r2, r0, #1
 8008fb8:	d101      	bne.n	8008fbe <__sflush_r+0x7a>
 8008fba:	682b      	ldr	r3, [r5, #0]
 8008fbc:	b903      	cbnz	r3, 8008fc0 <__sflush_r+0x7c>
 8008fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8008fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc2:	602f      	str	r7, [r5, #0]
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	d0ca      	beq.n	8008f5e <__sflush_r+0x1a>
 8008fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	d002      	beq.n	8008fd6 <__sflush_r+0x92>
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7ff fbb1 	bl	8008738 <_free_r>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8008fda:	e7c1      	b.n	8008f60 <__sflush_r+0x1c>
 8008fdc:	6a21      	ldr	r1, [r4, #32]
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b0      	blx	r6
 8008fe4:	1c41      	adds	r1, r0, #1
 8008fe6:	d1c7      	bne.n	8008f78 <__sflush_r+0x34>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0c4      	beq.n	8008f78 <__sflush_r+0x34>
 8008fee:	2b1d      	cmp	r3, #29
 8008ff0:	d001      	beq.n	8008ff6 <__sflush_r+0xb2>
 8008ff2:	2b16      	cmp	r3, #22
 8008ff4:	d101      	bne.n	8008ffa <__sflush_r+0xb6>
 8008ff6:	602f      	str	r7, [r5, #0]
 8008ff8:	e7b1      	b.n	8008f5e <__sflush_r+0x1a>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	e7ad      	b.n	8008f60 <__sflush_r+0x1c>
 8009004:	690f      	ldr	r7, [r1, #16]
 8009006:	2f00      	cmp	r7, #0
 8009008:	d0a9      	beq.n	8008f5e <__sflush_r+0x1a>
 800900a:	0793      	lsls	r3, r2, #30
 800900c:	680e      	ldr	r6, [r1, #0]
 800900e:	bf08      	it	eq
 8009010:	694b      	ldreq	r3, [r1, #20]
 8009012:	600f      	str	r7, [r1, #0]
 8009014:	bf18      	it	ne
 8009016:	2300      	movne	r3, #0
 8009018:	eba6 0807 	sub.w	r8, r6, r7
 800901c:	608b      	str	r3, [r1, #8]
 800901e:	f1b8 0f00 	cmp.w	r8, #0
 8009022:	dd9c      	ble.n	8008f5e <__sflush_r+0x1a>
 8009024:	6a21      	ldr	r1, [r4, #32]
 8009026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009028:	4643      	mov	r3, r8
 800902a:	463a      	mov	r2, r7
 800902c:	4628      	mov	r0, r5
 800902e:	47b0      	blx	r6
 8009030:	2800      	cmp	r0, #0
 8009032:	dc06      	bgt.n	8009042 <__sflush_r+0xfe>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	e78e      	b.n	8008f60 <__sflush_r+0x1c>
 8009042:	4407      	add	r7, r0
 8009044:	eba8 0800 	sub.w	r8, r8, r0
 8009048:	e7e9      	b.n	800901e <__sflush_r+0xda>
 800904a:	bf00      	nop
 800904c:	20400001 	.word	0x20400001

08009050 <_fflush_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	4605      	mov	r5, r0
 8009056:	460c      	mov	r4, r1
 8009058:	b913      	cbnz	r3, 8009060 <_fflush_r+0x10>
 800905a:	2500      	movs	r5, #0
 800905c:	4628      	mov	r0, r5
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	b118      	cbz	r0, 800906a <_fflush_r+0x1a>
 8009062:	6983      	ldr	r3, [r0, #24]
 8009064:	b90b      	cbnz	r3, 800906a <_fflush_r+0x1a>
 8009066:	f000 f887 	bl	8009178 <__sinit>
 800906a:	4b14      	ldr	r3, [pc, #80]	; (80090bc <_fflush_r+0x6c>)
 800906c:	429c      	cmp	r4, r3
 800906e:	d11b      	bne.n	80090a8 <_fflush_r+0x58>
 8009070:	686c      	ldr	r4, [r5, #4]
 8009072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0ef      	beq.n	800905a <_fflush_r+0xa>
 800907a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800907c:	07d0      	lsls	r0, r2, #31
 800907e:	d404      	bmi.n	800908a <_fflush_r+0x3a>
 8009080:	0599      	lsls	r1, r3, #22
 8009082:	d402      	bmi.n	800908a <_fflush_r+0x3a>
 8009084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009086:	f000 f915 	bl	80092b4 <__retarget_lock_acquire_recursive>
 800908a:	4628      	mov	r0, r5
 800908c:	4621      	mov	r1, r4
 800908e:	f7ff ff59 	bl	8008f44 <__sflush_r>
 8009092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009094:	07da      	lsls	r2, r3, #31
 8009096:	4605      	mov	r5, r0
 8009098:	d4e0      	bmi.n	800905c <_fflush_r+0xc>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	059b      	lsls	r3, r3, #22
 800909e:	d4dd      	bmi.n	800905c <_fflush_r+0xc>
 80090a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090a2:	f000 f908 	bl	80092b6 <__retarget_lock_release_recursive>
 80090a6:	e7d9      	b.n	800905c <_fflush_r+0xc>
 80090a8:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <_fflush_r+0x70>)
 80090aa:	429c      	cmp	r4, r3
 80090ac:	d101      	bne.n	80090b2 <_fflush_r+0x62>
 80090ae:	68ac      	ldr	r4, [r5, #8]
 80090b0:	e7df      	b.n	8009072 <_fflush_r+0x22>
 80090b2:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <_fflush_r+0x74>)
 80090b4:	429c      	cmp	r4, r3
 80090b6:	bf08      	it	eq
 80090b8:	68ec      	ldreq	r4, [r5, #12]
 80090ba:	e7da      	b.n	8009072 <_fflush_r+0x22>
 80090bc:	080099b4 	.word	0x080099b4
 80090c0:	080099d4 	.word	0x080099d4
 80090c4:	08009994 	.word	0x08009994

080090c8 <std>:
 80090c8:	2300      	movs	r3, #0
 80090ca:	b510      	push	{r4, lr}
 80090cc:	4604      	mov	r4, r0
 80090ce:	e9c0 3300 	strd	r3, r3, [r0]
 80090d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d6:	6083      	str	r3, [r0, #8]
 80090d8:	8181      	strh	r1, [r0, #12]
 80090da:	6643      	str	r3, [r0, #100]	; 0x64
 80090dc:	81c2      	strh	r2, [r0, #14]
 80090de:	6183      	str	r3, [r0, #24]
 80090e0:	4619      	mov	r1, r3
 80090e2:	2208      	movs	r2, #8
 80090e4:	305c      	adds	r0, #92	; 0x5c
 80090e6:	f7fd fbef 	bl	80068c8 <memset>
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std+0x38>)
 80090ec:	6263      	str	r3, [r4, #36]	; 0x24
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <std+0x3c>)
 80090f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <std+0x40>)
 80090f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f6:	4b05      	ldr	r3, [pc, #20]	; (800910c <std+0x44>)
 80090f8:	6224      	str	r4, [r4, #32]
 80090fa:	6323      	str	r3, [r4, #48]	; 0x30
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	bf00      	nop
 8009100:	08009409 	.word	0x08009409
 8009104:	0800942b 	.word	0x0800942b
 8009108:	08009463 	.word	0x08009463
 800910c:	08009487 	.word	0x08009487

08009110 <_cleanup_r>:
 8009110:	4901      	ldr	r1, [pc, #4]	; (8009118 <_cleanup_r+0x8>)
 8009112:	f000 b8af 	b.w	8009274 <_fwalk_reent>
 8009116:	bf00      	nop
 8009118:	08009051 	.word	0x08009051

0800911c <__sfmoreglue>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	1e4a      	subs	r2, r1, #1
 8009120:	2568      	movs	r5, #104	; 0x68
 8009122:	4355      	muls	r5, r2
 8009124:	460e      	mov	r6, r1
 8009126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800912a:	f7ff fa2f 	bl	800858c <_malloc_r>
 800912e:	4604      	mov	r4, r0
 8009130:	b140      	cbz	r0, 8009144 <__sfmoreglue+0x28>
 8009132:	2100      	movs	r1, #0
 8009134:	e9c0 1600 	strd	r1, r6, [r0]
 8009138:	300c      	adds	r0, #12
 800913a:	60a0      	str	r0, [r4, #8]
 800913c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009140:	f7fd fbc2 	bl	80068c8 <memset>
 8009144:	4620      	mov	r0, r4
 8009146:	bd70      	pop	{r4, r5, r6, pc}

08009148 <__sfp_lock_acquire>:
 8009148:	4801      	ldr	r0, [pc, #4]	; (8009150 <__sfp_lock_acquire+0x8>)
 800914a:	f000 b8b3 	b.w	80092b4 <__retarget_lock_acquire_recursive>
 800914e:	bf00      	nop
 8009150:	200007d0 	.word	0x200007d0

08009154 <__sfp_lock_release>:
 8009154:	4801      	ldr	r0, [pc, #4]	; (800915c <__sfp_lock_release+0x8>)
 8009156:	f000 b8ae 	b.w	80092b6 <__retarget_lock_release_recursive>
 800915a:	bf00      	nop
 800915c:	200007d0 	.word	0x200007d0

08009160 <__sinit_lock_acquire>:
 8009160:	4801      	ldr	r0, [pc, #4]	; (8009168 <__sinit_lock_acquire+0x8>)
 8009162:	f000 b8a7 	b.w	80092b4 <__retarget_lock_acquire_recursive>
 8009166:	bf00      	nop
 8009168:	200007cb 	.word	0x200007cb

0800916c <__sinit_lock_release>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__sinit_lock_release+0x8>)
 800916e:	f000 b8a2 	b.w	80092b6 <__retarget_lock_release_recursive>
 8009172:	bf00      	nop
 8009174:	200007cb 	.word	0x200007cb

08009178 <__sinit>:
 8009178:	b510      	push	{r4, lr}
 800917a:	4604      	mov	r4, r0
 800917c:	f7ff fff0 	bl	8009160 <__sinit_lock_acquire>
 8009180:	69a3      	ldr	r3, [r4, #24]
 8009182:	b11b      	cbz	r3, 800918c <__sinit+0x14>
 8009184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009188:	f7ff bff0 	b.w	800916c <__sinit_lock_release>
 800918c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009190:	6523      	str	r3, [r4, #80]	; 0x50
 8009192:	4b13      	ldr	r3, [pc, #76]	; (80091e0 <__sinit+0x68>)
 8009194:	4a13      	ldr	r2, [pc, #76]	; (80091e4 <__sinit+0x6c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	62a2      	str	r2, [r4, #40]	; 0x28
 800919a:	42a3      	cmp	r3, r4
 800919c:	bf04      	itt	eq
 800919e:	2301      	moveq	r3, #1
 80091a0:	61a3      	streq	r3, [r4, #24]
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 f820 	bl	80091e8 <__sfp>
 80091a8:	6060      	str	r0, [r4, #4]
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 f81c 	bl	80091e8 <__sfp>
 80091b0:	60a0      	str	r0, [r4, #8]
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 f818 	bl	80091e8 <__sfp>
 80091b8:	2200      	movs	r2, #0
 80091ba:	60e0      	str	r0, [r4, #12]
 80091bc:	2104      	movs	r1, #4
 80091be:	6860      	ldr	r0, [r4, #4]
 80091c0:	f7ff ff82 	bl	80090c8 <std>
 80091c4:	68a0      	ldr	r0, [r4, #8]
 80091c6:	2201      	movs	r2, #1
 80091c8:	2109      	movs	r1, #9
 80091ca:	f7ff ff7d 	bl	80090c8 <std>
 80091ce:	68e0      	ldr	r0, [r4, #12]
 80091d0:	2202      	movs	r2, #2
 80091d2:	2112      	movs	r1, #18
 80091d4:	f7ff ff78 	bl	80090c8 <std>
 80091d8:	2301      	movs	r3, #1
 80091da:	61a3      	str	r3, [r4, #24]
 80091dc:	e7d2      	b.n	8009184 <__sinit+0xc>
 80091de:	bf00      	nop
 80091e0:	080095c0 	.word	0x080095c0
 80091e4:	08009111 	.word	0x08009111

080091e8 <__sfp>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	4607      	mov	r7, r0
 80091ec:	f7ff ffac 	bl	8009148 <__sfp_lock_acquire>
 80091f0:	4b1e      	ldr	r3, [pc, #120]	; (800926c <__sfp+0x84>)
 80091f2:	681e      	ldr	r6, [r3, #0]
 80091f4:	69b3      	ldr	r3, [r6, #24]
 80091f6:	b913      	cbnz	r3, 80091fe <__sfp+0x16>
 80091f8:	4630      	mov	r0, r6
 80091fa:	f7ff ffbd 	bl	8009178 <__sinit>
 80091fe:	3648      	adds	r6, #72	; 0x48
 8009200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009204:	3b01      	subs	r3, #1
 8009206:	d503      	bpl.n	8009210 <__sfp+0x28>
 8009208:	6833      	ldr	r3, [r6, #0]
 800920a:	b30b      	cbz	r3, 8009250 <__sfp+0x68>
 800920c:	6836      	ldr	r6, [r6, #0]
 800920e:	e7f7      	b.n	8009200 <__sfp+0x18>
 8009210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009214:	b9d5      	cbnz	r5, 800924c <__sfp+0x64>
 8009216:	4b16      	ldr	r3, [pc, #88]	; (8009270 <__sfp+0x88>)
 8009218:	60e3      	str	r3, [r4, #12]
 800921a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800921e:	6665      	str	r5, [r4, #100]	; 0x64
 8009220:	f000 f847 	bl	80092b2 <__retarget_lock_init_recursive>
 8009224:	f7ff ff96 	bl	8009154 <__sfp_lock_release>
 8009228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800922c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009230:	6025      	str	r5, [r4, #0]
 8009232:	61a5      	str	r5, [r4, #24]
 8009234:	2208      	movs	r2, #8
 8009236:	4629      	mov	r1, r5
 8009238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800923c:	f7fd fb44 	bl	80068c8 <memset>
 8009240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009248:	4620      	mov	r0, r4
 800924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800924c:	3468      	adds	r4, #104	; 0x68
 800924e:	e7d9      	b.n	8009204 <__sfp+0x1c>
 8009250:	2104      	movs	r1, #4
 8009252:	4638      	mov	r0, r7
 8009254:	f7ff ff62 	bl	800911c <__sfmoreglue>
 8009258:	4604      	mov	r4, r0
 800925a:	6030      	str	r0, [r6, #0]
 800925c:	2800      	cmp	r0, #0
 800925e:	d1d5      	bne.n	800920c <__sfp+0x24>
 8009260:	f7ff ff78 	bl	8009154 <__sfp_lock_release>
 8009264:	230c      	movs	r3, #12
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	e7ee      	b.n	8009248 <__sfp+0x60>
 800926a:	bf00      	nop
 800926c:	080095c0 	.word	0x080095c0
 8009270:	ffff0001 	.word	0xffff0001

08009274 <_fwalk_reent>:
 8009274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009278:	4606      	mov	r6, r0
 800927a:	4688      	mov	r8, r1
 800927c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009280:	2700      	movs	r7, #0
 8009282:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009286:	f1b9 0901 	subs.w	r9, r9, #1
 800928a:	d505      	bpl.n	8009298 <_fwalk_reent+0x24>
 800928c:	6824      	ldr	r4, [r4, #0]
 800928e:	2c00      	cmp	r4, #0
 8009290:	d1f7      	bne.n	8009282 <_fwalk_reent+0xe>
 8009292:	4638      	mov	r0, r7
 8009294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009298:	89ab      	ldrh	r3, [r5, #12]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d907      	bls.n	80092ae <_fwalk_reent+0x3a>
 800929e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092a2:	3301      	adds	r3, #1
 80092a4:	d003      	beq.n	80092ae <_fwalk_reent+0x3a>
 80092a6:	4629      	mov	r1, r5
 80092a8:	4630      	mov	r0, r6
 80092aa:	47c0      	blx	r8
 80092ac:	4307      	orrs	r7, r0
 80092ae:	3568      	adds	r5, #104	; 0x68
 80092b0:	e7e9      	b.n	8009286 <_fwalk_reent+0x12>

080092b2 <__retarget_lock_init_recursive>:
 80092b2:	4770      	bx	lr

080092b4 <__retarget_lock_acquire_recursive>:
 80092b4:	4770      	bx	lr

080092b6 <__retarget_lock_release_recursive>:
 80092b6:	4770      	bx	lr

080092b8 <__swhatbuf_r>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	460e      	mov	r6, r1
 80092bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c0:	2900      	cmp	r1, #0
 80092c2:	b096      	sub	sp, #88	; 0x58
 80092c4:	4614      	mov	r4, r2
 80092c6:	461d      	mov	r5, r3
 80092c8:	da07      	bge.n	80092da <__swhatbuf_r+0x22>
 80092ca:	2300      	movs	r3, #0
 80092cc:	602b      	str	r3, [r5, #0]
 80092ce:	89b3      	ldrh	r3, [r6, #12]
 80092d0:	061a      	lsls	r2, r3, #24
 80092d2:	d410      	bmi.n	80092f6 <__swhatbuf_r+0x3e>
 80092d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092d8:	e00e      	b.n	80092f8 <__swhatbuf_r+0x40>
 80092da:	466a      	mov	r2, sp
 80092dc:	f000 f8fa 	bl	80094d4 <_fstat_r>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	dbf2      	blt.n	80092ca <__swhatbuf_r+0x12>
 80092e4:	9a01      	ldr	r2, [sp, #4]
 80092e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ee:	425a      	negs	r2, r3
 80092f0:	415a      	adcs	r2, r3
 80092f2:	602a      	str	r2, [r5, #0]
 80092f4:	e7ee      	b.n	80092d4 <__swhatbuf_r+0x1c>
 80092f6:	2340      	movs	r3, #64	; 0x40
 80092f8:	2000      	movs	r0, #0
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	b016      	add	sp, #88	; 0x58
 80092fe:	bd70      	pop	{r4, r5, r6, pc}

08009300 <__smakebuf_r>:
 8009300:	898b      	ldrh	r3, [r1, #12]
 8009302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009304:	079d      	lsls	r5, r3, #30
 8009306:	4606      	mov	r6, r0
 8009308:	460c      	mov	r4, r1
 800930a:	d507      	bpl.n	800931c <__smakebuf_r+0x1c>
 800930c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	2301      	movs	r3, #1
 8009316:	6163      	str	r3, [r4, #20]
 8009318:	b002      	add	sp, #8
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	ab01      	add	r3, sp, #4
 800931e:	466a      	mov	r2, sp
 8009320:	f7ff ffca 	bl	80092b8 <__swhatbuf_r>
 8009324:	9900      	ldr	r1, [sp, #0]
 8009326:	4605      	mov	r5, r0
 8009328:	4630      	mov	r0, r6
 800932a:	f7ff f92f 	bl	800858c <_malloc_r>
 800932e:	b948      	cbnz	r0, 8009344 <__smakebuf_r+0x44>
 8009330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009334:	059a      	lsls	r2, r3, #22
 8009336:	d4ef      	bmi.n	8009318 <__smakebuf_r+0x18>
 8009338:	f023 0303 	bic.w	r3, r3, #3
 800933c:	f043 0302 	orr.w	r3, r3, #2
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	e7e3      	b.n	800930c <__smakebuf_r+0xc>
 8009344:	4b0d      	ldr	r3, [pc, #52]	; (800937c <__smakebuf_r+0x7c>)
 8009346:	62b3      	str	r3, [r6, #40]	; 0x28
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	6020      	str	r0, [r4, #0]
 800934c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009350:	81a3      	strh	r3, [r4, #12]
 8009352:	9b00      	ldr	r3, [sp, #0]
 8009354:	6163      	str	r3, [r4, #20]
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	6120      	str	r0, [r4, #16]
 800935a:	b15b      	cbz	r3, 8009374 <__smakebuf_r+0x74>
 800935c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009360:	4630      	mov	r0, r6
 8009362:	f000 f8c9 	bl	80094f8 <_isatty_r>
 8009366:	b128      	cbz	r0, 8009374 <__smakebuf_r+0x74>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f023 0303 	bic.w	r3, r3, #3
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	81a3      	strh	r3, [r4, #12]
 8009374:	89a0      	ldrh	r0, [r4, #12]
 8009376:	4305      	orrs	r5, r0
 8009378:	81a5      	strh	r5, [r4, #12]
 800937a:	e7cd      	b.n	8009318 <__smakebuf_r+0x18>
 800937c:	08009111 	.word	0x08009111

08009380 <_raise_r>:
 8009380:	291f      	cmp	r1, #31
 8009382:	b538      	push	{r3, r4, r5, lr}
 8009384:	4604      	mov	r4, r0
 8009386:	460d      	mov	r5, r1
 8009388:	d904      	bls.n	8009394 <_raise_r+0x14>
 800938a:	2316      	movs	r3, #22
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	f04f 30ff 	mov.w	r0, #4294967295
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009396:	b112      	cbz	r2, 800939e <_raise_r+0x1e>
 8009398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800939c:	b94b      	cbnz	r3, 80093b2 <_raise_r+0x32>
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 f830 	bl	8009404 <_getpid_r>
 80093a4:	462a      	mov	r2, r5
 80093a6:	4601      	mov	r1, r0
 80093a8:	4620      	mov	r0, r4
 80093aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ae:	f000 b817 	b.w	80093e0 <_kill_r>
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d00a      	beq.n	80093cc <_raise_r+0x4c>
 80093b6:	1c59      	adds	r1, r3, #1
 80093b8:	d103      	bne.n	80093c2 <_raise_r+0x42>
 80093ba:	2316      	movs	r3, #22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	2001      	movs	r0, #1
 80093c0:	e7e7      	b.n	8009392 <_raise_r+0x12>
 80093c2:	2400      	movs	r4, #0
 80093c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093c8:	4628      	mov	r0, r5
 80093ca:	4798      	blx	r3
 80093cc:	2000      	movs	r0, #0
 80093ce:	e7e0      	b.n	8009392 <_raise_r+0x12>

080093d0 <raise>:
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <raise+0xc>)
 80093d2:	4601      	mov	r1, r0
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	f7ff bfd3 	b.w	8009380 <_raise_r>
 80093da:	bf00      	nop
 80093dc:	2000000c 	.word	0x2000000c

080093e0 <_kill_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	; (8009400 <_kill_r+0x20>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	4611      	mov	r1, r2
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	f7f7 fed1 	bl	8001194 <_kill>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d102      	bne.n	80093fc <_kill_r+0x1c>
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	b103      	cbz	r3, 80093fc <_kill_r+0x1c>
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	200007c4 	.word	0x200007c4

08009404 <_getpid_r>:
 8009404:	f7f7 bebe 	b.w	8001184 <_getpid>

08009408 <__sread>:
 8009408:	b510      	push	{r4, lr}
 800940a:	460c      	mov	r4, r1
 800940c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009410:	f000 f894 	bl	800953c <_read_r>
 8009414:	2800      	cmp	r0, #0
 8009416:	bfab      	itete	ge
 8009418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800941a:	89a3      	ldrhlt	r3, [r4, #12]
 800941c:	181b      	addge	r3, r3, r0
 800941e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009422:	bfac      	ite	ge
 8009424:	6563      	strge	r3, [r4, #84]	; 0x54
 8009426:	81a3      	strhlt	r3, [r4, #12]
 8009428:	bd10      	pop	{r4, pc}

0800942a <__swrite>:
 800942a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942e:	461f      	mov	r7, r3
 8009430:	898b      	ldrh	r3, [r1, #12]
 8009432:	05db      	lsls	r3, r3, #23
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4616      	mov	r6, r2
 800943a:	d505      	bpl.n	8009448 <__swrite+0x1e>
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	2302      	movs	r3, #2
 8009442:	2200      	movs	r2, #0
 8009444:	f000 f868 	bl	8009518 <_lseek_r>
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800944e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	4632      	mov	r2, r6
 8009456:	463b      	mov	r3, r7
 8009458:	4628      	mov	r0, r5
 800945a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	f000 b817 	b.w	8009490 <_write_r>

08009462 <__sseek>:
 8009462:	b510      	push	{r4, lr}
 8009464:	460c      	mov	r4, r1
 8009466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800946a:	f000 f855 	bl	8009518 <_lseek_r>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	bf15      	itete	ne
 8009474:	6560      	strne	r0, [r4, #84]	; 0x54
 8009476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800947a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800947e:	81a3      	strheq	r3, [r4, #12]
 8009480:	bf18      	it	ne
 8009482:	81a3      	strhne	r3, [r4, #12]
 8009484:	bd10      	pop	{r4, pc}

08009486 <__sclose>:
 8009486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948a:	f000 b813 	b.w	80094b4 <_close_r>
	...

08009490 <_write_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	; (80094b0 <_write_r+0x20>)
 8009494:	4604      	mov	r4, r0
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	2200      	movs	r2, #0
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f7f7 feaf 	bl	8001202 <_write>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_write_r+0x1e>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_write_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	200007c4 	.word	0x200007c4

080094b4 <_close_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4d06      	ldr	r5, [pc, #24]	; (80094d0 <_close_r+0x1c>)
 80094b8:	2300      	movs	r3, #0
 80094ba:	4604      	mov	r4, r0
 80094bc:	4608      	mov	r0, r1
 80094be:	602b      	str	r3, [r5, #0]
 80094c0:	f7f7 febb 	bl	800123a <_close>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_close_r+0x1a>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_close_r+0x1a>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	200007c4 	.word	0x200007c4

080094d4 <_fstat_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d07      	ldr	r5, [pc, #28]	; (80094f4 <_fstat_r+0x20>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	4611      	mov	r1, r2
 80094e0:	602b      	str	r3, [r5, #0]
 80094e2:	f7f7 feb6 	bl	8001252 <_fstat>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	d102      	bne.n	80094f0 <_fstat_r+0x1c>
 80094ea:	682b      	ldr	r3, [r5, #0]
 80094ec:	b103      	cbz	r3, 80094f0 <_fstat_r+0x1c>
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	bd38      	pop	{r3, r4, r5, pc}
 80094f2:	bf00      	nop
 80094f4:	200007c4 	.word	0x200007c4

080094f8 <_isatty_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	4d06      	ldr	r5, [pc, #24]	; (8009514 <_isatty_r+0x1c>)
 80094fc:	2300      	movs	r3, #0
 80094fe:	4604      	mov	r4, r0
 8009500:	4608      	mov	r0, r1
 8009502:	602b      	str	r3, [r5, #0]
 8009504:	f7f7 feb5 	bl	8001272 <_isatty>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d102      	bne.n	8009512 <_isatty_r+0x1a>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	b103      	cbz	r3, 8009512 <_isatty_r+0x1a>
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	200007c4 	.word	0x200007c4

08009518 <_lseek_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d07      	ldr	r5, [pc, #28]	; (8009538 <_lseek_r+0x20>)
 800951c:	4604      	mov	r4, r0
 800951e:	4608      	mov	r0, r1
 8009520:	4611      	mov	r1, r2
 8009522:	2200      	movs	r2, #0
 8009524:	602a      	str	r2, [r5, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	f7f7 feae 	bl	8001288 <_lseek>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_lseek_r+0x1e>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_lseek_r+0x1e>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	200007c4 	.word	0x200007c4

0800953c <_read_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d07      	ldr	r5, [pc, #28]	; (800955c <_read_r+0x20>)
 8009540:	4604      	mov	r4, r0
 8009542:	4608      	mov	r0, r1
 8009544:	4611      	mov	r1, r2
 8009546:	2200      	movs	r2, #0
 8009548:	602a      	str	r2, [r5, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f7f7 fe3c 	bl	80011c8 <_read>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_read_r+0x1e>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	b103      	cbz	r3, 800955a <_read_r+0x1e>
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	200007c4 	.word	0x200007c4

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr
