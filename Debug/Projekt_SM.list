
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080095b8  080095b8  000195b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a34  08009a34  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a3c  08009a3c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001e0  08009c24  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08009c24  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cb2  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e9  00000000  00000000  00039ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003e660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab3e  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018397  00000000  00000000  0006a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101610  00000000  00000000  0008267d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00183c8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  00183d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080095a0 	.word	0x080095a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080095a0 	.word	0x080095a0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b6e      	ldr	r3, [pc, #440]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a6d      	ldr	r2, [pc, #436]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b6b      	ldr	r3, [pc, #428]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	61bb      	str	r3, [r7, #24]
 80009fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a67      	ldr	r2, [pc, #412]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b62      	ldr	r3, [pc, #392]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a61      	ldr	r2, [pc, #388]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a5b      	ldr	r2, [pc, #364]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b59      	ldr	r3, [pc, #356]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a55      	ldr	r2, [pc, #340]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a4f      	ldr	r2, [pc, #316]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a76:	4b4a      	ldr	r3, [pc, #296]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a49      	ldr	r2, [pc, #292]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <MX_GPIO_Init+0x1d0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a94:	4843      	ldr	r0, [pc, #268]	; (8000ba4 <MX_GPIO_Init+0x1d4>)
 8000a96:	f001 fb5d 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4842      	ldr	r0, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000aa0:	f001 fb58 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	483c      	ldr	r0, [pc, #240]	; (8000bac <MX_GPIO_Init+0x1dc>)
 8000abc:	f001 f99e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac0:	2332      	movs	r3, #50	; 0x32
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4834      	ldr	r0, [pc, #208]	; (8000bac <MX_GPIO_Init+0x1dc>)
 8000adc:	f001 f98e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae0:	2386      	movs	r3, #134	; 0x86
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	482d      	ldr	r0, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0x1e0>)
 8000afc:	f001 f97e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b00:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4822      	ldr	r0, [pc, #136]	; (8000ba4 <MX_GPIO_Init+0x1d4>)
 8000b1a:	f001 f96f 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <MX_GPIO_Init+0x1d4>)
 8000b3c:	f001 f95e 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000b58:	f001 f950 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000b70:	f001 f944 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_GPIO_Init+0x1d8>)
 8000b92:	f001 f933 	bl	8001dfc <HAL_GPIO_Init>

}
 8000b96:	bf00      	nop
 8000b98:	3730      	adds	r7, #48	; 0x30
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40021800 	.word	0x40021800
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <SpeedCalculation>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SpeedCalculation(int16_t count){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	speed = (float)((count * TIMER_FREQENCY * MINUTE_IN_SECOND)/
 8000bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bd6:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000bf8 <SpeedCalculation+0x40>
 8000bda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <SpeedCalculation+0x48>)
 8000be4:	edc3 7a00 	vstr	s15, [r3]
			(ENCODER_RESOLUTION*TIMER_CONF_BOTH_EDGE_T1T2));
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	cccccccd 	.word	0xcccccccd
 8000bfc:	408c0ccc 	.word	0x408c0ccc
 8000c00:	20000210 	.word	0x20000210

08000c04 <SetDutyPID>:

void SetDutyPID(arm_pid_instance_f32* pid, float32_t y_ref, float32_t y){
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c10:	edc7 0a01 	vstr	s1, [r7, #4]

	PID_Error = y_ref - y; //Error calc
 8000c14:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c20:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <SetDutyPID+0x14c>)
 8000c22:	edc3 7a00 	vstr	s15, [r3]
	PID_Output = arm_pid_f32(pid, PID_Error); // Output PID signal
 8000c26:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <SetDutyPID+0x14c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	61fa      	str	r2, [r7, #28]
 8000c2e:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	ed93 7a00 	vldr	s14, [r3]
 8000c36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	edd3 6a01 	vldr	s13, [r3, #4]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	edd3 6a02 	vldr	s13, [r3, #8]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c70:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	4a32      	ldr	r2, [pc, #200]	; (8000d54 <SetDutyPID+0x150>)
 8000c8c:	6013      	str	r3, [r2, #0]

	if(PID_Output > 0){
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <SetDutyPID+0x150>)
 8000c90:	edd3 7a00 	vldr	s15, [r3]
 8000c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9c:	dd29      	ble.n	8000cf2 <SetDutyPID+0xee>
		// SATURATION
		if (PID_Output > 1000){
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <SetDutyPID+0x150>)
 8000ca0:	edd3 7a00 	vldr	s15, [r3]
 8000ca4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000d58 <SetDutyPID+0x154>
 8000ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb0:	dd02      	ble.n	8000cb8 <SetDutyPID+0xb4>
			PID_Output = 1000;
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <SetDutyPID+0x150>)
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <SetDutyPID+0x158>)
 8000cb6:	601a      	str	r2, [r3, #0]
		}

		duty_A = (uint16_t)(abs(PID_Output));
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <SetDutyPID+0x150>)
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc2:	ee17 3a90 	vmov	r3, s15
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <SetDutyPID+0x15c>)
 8000cd0:	801a      	strh	r2, [r3, #0]
		duty_B = 0;
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <SetDutyPID+0x160>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000cd8:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <SetDutyPID+0x15c>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <SetDutyPID+0x164>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <SetDutyPID+0x160>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <SetDutyPID+0x164>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
	}


}
 8000cf0:	e028      	b.n	8000d44 <SetDutyPID+0x140>
		if (PID_Output < -1000){
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <SetDutyPID+0x150>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000d6c <SetDutyPID+0x168>
 8000cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d04:	d502      	bpl.n	8000d0c <SetDutyPID+0x108>
			PID_Output = -1000;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <SetDutyPID+0x150>)
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <SetDutyPID+0x16c>)
 8000d0a:	601a      	str	r2, [r3, #0]
		duty_A = 0;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <SetDutyPID+0x15c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	801a      	strh	r2, [r3, #0]
		duty_B = (uint16_t)(abs(PID_Output));;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <SetDutyPID+0x150>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d1c:	ee17 3a90 	vmov	r3, s15
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bfb8      	it	lt
 8000d24:	425b      	neglt	r3, r3
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <SetDutyPID+0x160>)
 8000d2a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SetDutyPID+0x15c>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <SetDutyPID+0x164>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <SetDutyPID+0x160>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SetDutyPID+0x164>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d44:	bf00      	nop
 8000d46:	3724      	adds	r7, #36	; 0x24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	2000021c 	.word	0x2000021c
 8000d54:	20000218 	.word	0x20000218
 8000d58:	447a0000 	.word	0x447a0000
 8000d5c:	447a0000 	.word	0x447a0000
 8000d60:	200001fc 	.word	0x200001fc
 8000d64:	200001fe 	.word	0x200001fe
 8000d68:	20000254 	.word	0x20000254
 8000d6c:	c47a0000 	.word	0xc47a0000
 8000d70:	c47a0000 	.word	0xc47a0000

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PID.Kp = PID_KP;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <main+0x84>)
 8000d7a:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <main+0x88>)
 8000d7c:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_KI;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <main+0x84>)
 8000d80:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <main+0x8c>)
 8000d82:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_KD;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <main+0x84>)
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]

	arm_pid_init_f32(&PID, 1);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	481a      	ldr	r0, [pc, #104]	; (8000df8 <main+0x84>)
 8000d90:	f005 fd6e 	bl	8006870 <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fe0d 	bl	80019b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f842 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f7ff fe18 	bl	80009d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000da0:	f000 fcd8 	bl	8001754 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000da4:	f000 fd52 	bl	800184c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000da8:	f000 fb3e 	bl	8001428 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dac:	f000 fae2 	bl	8001374 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000db0:	f000 fbbc 	bl	800152c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // PWM CONFIG // CounterPeriod = 100
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000db4:	2100      	movs	r1, #0
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <main+0x90>)
 8000db8:	f002 fd98 	bl	80038ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <main+0x90>)
 8000dc0:	f002 fd94 	bl	80038ec <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <main+0x94>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <main+0x90>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <main+0x98>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <main+0x90>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	639a      	str	r2, [r3, #56]	; 0x38

  // UART CONFIG
  HAL_UART_Receive_IT(&huart3, &user_val, 4);
 8000ddc:	2204      	movs	r2, #4
 8000dde:	490c      	ldr	r1, [pc, #48]	; (8000e10 <main+0x9c>)
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <main+0xa0>)
 8000de2:	f004 f822 	bl	8004e2a <HAL_UART_Receive_IT>

  // ENCODER CONFIG
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000de6:	213c      	movs	r1, #60	; 0x3c
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <main+0xa4>)
 8000dea:	f002 ff1f 	bl	8003c2c <HAL_TIM_Encoder_Start>

  // MAIN TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim6);
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <main+0xa8>)
 8000df0:	f002 fca2 	bl	8003738 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x80>
 8000df6:	bf00      	nop
 8000df8:	2000022c 	.word	0x2000022c
 8000dfc:	3e4ccccd 	.word	0x3e4ccccd
 8000e00:	3f19999a 	.word	0x3f19999a
 8000e04:	20000254 	.word	0x20000254
 8000e08:	200001fc 	.word	0x200001fc
 8000e0c:	200001fe 	.word	0x200001fe
 8000e10:	20000250 	.word	0x20000250
 8000e14:	20000338 	.word	0x20000338
 8000e18:	200002ec 	.word	0x200002ec
 8000e1c:	200002a0 	.word	0x200002a0

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0b8      	sub	sp, #224	; 0xe0
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e2a:	2234      	movs	r2, #52	; 0x34
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f005 fd6a 	bl	8006908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	2290      	movs	r2, #144	; 0x90
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 fd5b 	bl	8006908 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e52:	f001 fae1 	bl	8002418 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <SystemClock_Config+0x128>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a3b      	ldr	r2, [pc, #236]	; (8000f48 <SystemClock_Config+0x128>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <SystemClock_Config+0x128>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e6e:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <SystemClock_Config+0x12c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e76:	4a35      	ldr	r2, [pc, #212]	; (8000f4c <SystemClock_Config+0x12c>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <SystemClock_Config+0x12c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fb05 	bl	80024d8 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ed4:	f000 f904 	bl	80010e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed8:	f001 faae 	bl	8002438 <HAL_PWREx_EnableOverDrive>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ee2:	f000 f8fd 	bl	80010e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fd91 	bl	8002a34 <HAL_RCC_ClockConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000f18:	f000 f8e2 	bl	80010e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <SystemClock_Config+0x130>)
 8000f1e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 ff82 	bl	8002e38 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000f3a:	f000 f8d1 	bl	80010e0 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	37e0      	adds	r7, #224	; 0xe0
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40007000 	.word	0x40007000
 8000f50:	00200100 	.word	0x00200100

08000f54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// UART CONFIG // Przerobic na predkosc // TODO
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a38      	ldr	r2, [pc, #224]	; (8001040 <HAL_UART_RxCpltCallback+0xec>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d15d      	bne.n	8001020 <HAL_UART_RxCpltCallback+0xcc>
		user_speed = (float32_t)(atof(user_val));
 8000f64:	4837      	ldr	r0, [pc, #220]	; (8001044 <HAL_UART_RxCpltCallback+0xf0>)
 8000f66:	f005 fca1 	bl	80068ac <atof>
 8000f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <HAL_UART_RxCpltCallback+0xf4>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
		if(user_speed >= 30 && user_speed <= 270){
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <HAL_UART_RxCpltCallback+0xf4>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	db3f      	blt.n	800100c <HAL_UART_RxCpltCallback+0xb8>
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_UART_RxCpltCallback+0xf4>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800104c <HAL_UART_RxCpltCallback+0xf8>
 8000f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d835      	bhi.n	800100c <HAL_UART_RxCpltCallback+0xb8>
			flag = 1;
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_UART_RxCpltCallback+0xfc>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]

			if(user_val[3] == 'R' && flag == 1){
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_UART_RxCpltCallback+0xf0>)
 8000fa8:	78db      	ldrb	r3, [r3, #3]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b52      	cmp	r3, #82	; 0x52
 8000fae:	d10c      	bne.n	8000fca <HAL_UART_RxCpltCallback+0x76>
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_UART_RxCpltCallback+0xfc>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d107      	bne.n	8000fca <HAL_UART_RxCpltCallback+0x76>
				dir = 1;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <HAL_UART_RxCpltCallback+0x100>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
				reference_speed = user_speed;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_UART_RxCpltCallback+0xf4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a24      	ldr	r2, [pc, #144]	; (8001058 <HAL_UART_RxCpltCallback+0x104>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e01f      	b.n	800100a <HAL_UART_RxCpltCallback+0xb6>
			}
			else if(user_val[3] == 'L' && flag == 1){
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_UART_RxCpltCallback+0xf0>)
 8000fcc:	78db      	ldrb	r3, [r3, #3]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b4c      	cmp	r3, #76	; 0x4c
 8000fd2:	d110      	bne.n	8000ff6 <HAL_UART_RxCpltCallback+0xa2>
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_UART_RxCpltCallback+0xfc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_UART_RxCpltCallback+0xa2>
				dir = 2;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_UART_RxCpltCallback+0x100>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	701a      	strb	r2, [r3, #0]
				reference_speed = -(user_speed);
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_UART_RxCpltCallback+0xf4>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	eef1 7a67 	vneg.f32	s15, s15
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_UART_RxCpltCallback+0x104>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
 8000ff4:	e009      	b.n	800100a <HAL_UART_RxCpltCallback+0xb6>
			}
			else{
				flag = 0;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_UART_RxCpltCallback+0xfc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, &error_1, strlen(error_1), 100);
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	220c      	movs	r2, #12
 8001000:	4916      	ldr	r1, [pc, #88]	; (800105c <HAL_UART_RxCpltCallback+0x108>)
 8001002:	480f      	ldr	r0, [pc, #60]	; (8001040 <HAL_UART_RxCpltCallback+0xec>)
 8001004:	f003 fe7e 	bl	8004d04 <HAL_UART_Transmit>
			if(user_val[3] == 'R' && flag == 1){
 8001008:	e010      	b.n	800102c <HAL_UART_RxCpltCallback+0xd8>
 800100a:	e00f      	b.n	800102c <HAL_UART_RxCpltCallback+0xd8>
			}
		}

		else{
			flag = 0;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_UART_RxCpltCallback+0xfc>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &error_2, strlen(error_2), 100);
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	220e      	movs	r2, #14
 8001016:	4912      	ldr	r1, [pc, #72]	; (8001060 <HAL_UART_RxCpltCallback+0x10c>)
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <HAL_UART_RxCpltCallback+0xec>)
 800101a:	f003 fe73 	bl	8004d04 <HAL_UART_Transmit>
 800101e:	e005      	b.n	800102c <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	else{
		HAL_UART_Transmit(&huart3, &error_3, strlen(error_3), 100);
 8001020:	2364      	movs	r3, #100	; 0x64
 8001022:	220c      	movs	r2, #12
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <HAL_UART_RxCpltCallback+0x110>)
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_UART_RxCpltCallback+0xec>)
 8001028:	f003 fe6c 	bl	8004d04 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(&huart3, &user_val, 4);
 800102c:	2204      	movs	r2, #4
 800102e:	4905      	ldr	r1, [pc, #20]	; (8001044 <HAL_UART_RxCpltCallback+0xf0>)
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <HAL_UART_RxCpltCallback+0xec>)
 8001032:	f003 fefa 	bl	8004e2a <HAL_UART_Receive_IT>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000338 	.word	0x20000338
 8001044:	20000250 	.word	0x20000250
 8001048:	20000200 	.word	0x20000200
 800104c:	43870000 	.word	0x43870000
 8001050:	20000204 	.word	0x20000204
 8001054:	20000205 	.word	0x20000205
 8001058:	20000214 	.word	0x20000214
 800105c:	080095b8 	.word	0x080095b8
 8001060:	080095c8 	.word	0x080095c8
 8001064:	080095d8 	.word	0x080095d8

08001068 <HAL_TIM_PeriodElapsedCallback>:

// MAIN TIMER CONFIG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d120      	bne.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		// SPEED CALCULATION
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001082:	6013      	str	r3, [r2, #0]
		count = (int16_t)counter;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800108c:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
		SpeedCalculation(count);
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <SpeedCalculation>

		// SPEED REGULATION
		SetDutyPID(&PID, reference_speed, speed);
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	eef0 0a47 	vmov.f32	s1, s14
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010b8:	f7ff fda4 	bl	8000c04 <SetDutyPID>
	}
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40001000 	.word	0x40001000
 80010c8:	200002ec 	.word	0x200002ec
 80010cc:	20000208 	.word	0x20000208
 80010d0:	2000020c 	.word	0x2000020c
 80010d4:	20000214 	.word	0x20000214
 80010d8:	20000210 	.word	0x20000210
 80010dc:	2000022c 	.word	0x2000022c

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x44>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x44>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x44>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x44>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x44>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 fc54 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM3_IRQHandler+0x10>)
 800118e:	f002 fddb 	bl	8003d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000254 	.word	0x20000254

0800119c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <USART3_IRQHandler+0x10>)
 80011a2:	f003 fe91 	bl	8004ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000338 	.word	0x20000338

080011b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM6_DAC_IRQHandler+0x10>)
 80011b6:	f002 fdc7 	bl	8003d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002a0 	.word	0x200002a0

080011c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return 1;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <_kill>:

int _kill(int pid, int sig)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011de:	f005 fb69 	bl	80068b4 <__errno>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2216      	movs	r2, #22
 80011e6:	601a      	str	r2, [r3, #0]
	return -1;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_exit>:

void _exit (int status)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ffe7 	bl	80011d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001206:	e7fe      	b.n	8001206 <_exit+0x12>

08001208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e00a      	b.n	8001230 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800121a:	f3af 8000 	nop.w
 800121e:	4601      	mov	r1, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	60ba      	str	r2, [r7, #8]
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf0      	blt.n	800121a <_read+0x12>
	}

return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e009      	b.n	8001268 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf1      	blt.n	8001254 <_write+0x12>
	}
	return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a2:	605a      	str	r2, [r3, #4]
	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_isatty>:

int _isatty(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f005 face 	bl	80068b4 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20080000 	.word	0x20080000
 8001344:	00000400 	.word	0x00000400
 8001348:	20000220 	.word	0x20000220
 800134c:	200007d8 	.word	0x200007d8

08001350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f005 fac0 	bl	8006908 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <MX_TIM1_Init+0xac>)
 8001394:	4a23      	ldr	r2, [pc, #140]	; (8001424 <MX_TIM1_Init+0xb0>)
 8001396:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_TIM1_Init+0xac>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_TIM1_Init+0xac>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_TIM1_Init+0xac>)
 80013a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_TIM1_Init+0xac>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_TIM1_Init+0xac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_TIM1_Init+0xac>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013be:	2303      	movs	r3, #3
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80013ce:	230f      	movs	r3, #15
 80013d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d6:	2301      	movs	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80013de:	230f      	movs	r3, #15
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_TIM1_Init+0xac>)
 80013ea:	f002 fb79 	bl	8003ae0 <HAL_TIM_Encoder_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80013f4:	f7ff fe74 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_TIM1_Init+0xac>)
 800140a:	f003 fb81 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001414:	f7ff fe64 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200002ec 	.word	0x200002ec
 8001424:	40010000 	.word	0x40010000

08001428 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <MX_TIM3_Init+0xfc>)
 800145c:	4a32      	ldr	r2, [pc, #200]	; (8001528 <MX_TIM3_Init+0x100>)
 800145e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_TIM3_Init+0xfc>)
 8001462:	2203      	movs	r2, #3
 8001464:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_TIM3_Init+0xfc>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_TIM3_Init+0xfc>)
 800146e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_TIM3_Init+0xfc>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <MX_TIM3_Init+0xfc>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001480:	4828      	ldr	r0, [pc, #160]	; (8001524 <MX_TIM3_Init+0xfc>)
 8001482:	f002 f901 	bl	8003688 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800148c:	f7ff fe28 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149a:	4619      	mov	r1, r3
 800149c:	4821      	ldr	r0, [pc, #132]	; (8001524 <MX_TIM3_Init+0xfc>)
 800149e:	f002 fe87 	bl	80041b0 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014a8:	f7ff fe1a 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <MX_TIM3_Init+0xfc>)
 80014ae:	f002 f9bb 	bl	8003828 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014b8:	f7ff fe12 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4816      	ldr	r0, [pc, #88]	; (8001524 <MX_TIM3_Init+0xfc>)
 80014cc:	f003 fb20 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014d6:	f7ff fe03 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MX_TIM3_Init+0xfc>)
 80014f2:	f002 fd49 	bl	8003f88 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014fc:	f7ff fdf0 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	2204      	movs	r2, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM3_Init+0xfc>)
 8001508:	f002 fd3e 	bl	8003f88 <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001512:	f7ff fde5 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM3_Init+0xfc>)
 8001518:	f000 f8c6 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000254 	.word	0x20000254
 8001528:	40000400 	.word	0x40000400

0800152c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_TIM6_Init+0x68>)
 800153e:	4a16      	ldr	r2, [pc, #88]	; (8001598 <MX_TIM6_Init+0x6c>)
 8001540:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_TIM6_Init+0x68>)
 8001544:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001548:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_TIM6_Init+0x68>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_TIM6_Init+0x68>)
 8001552:	f242 720f 	movw	r2, #9999	; 0x270f
 8001556:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_TIM6_Init+0x68>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <MX_TIM6_Init+0x68>)
 8001560:	f002 f892 	bl	8003688 <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800156a:	f7ff fdb9 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_TIM6_Init+0x68>)
 800157c:	f003 fac8 	bl	8004b10 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001586:	f7ff fdab 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002a0 	.word	0x200002a0
 8001598:	40001000 	.word	0x40001000

0800159c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <HAL_TIM_Encoder_MspInit+0x7c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d128      	bne.n	8001610 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_TIM_Encoder_MspInit+0x80>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <HAL_TIM_Encoder_MspInit+0x80>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_TIM_Encoder_MspInit+0x80>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_TIM_Encoder_MspInit+0x80>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_TIM_Encoder_MspInit+0x80>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_TIM_Encoder_MspInit+0x80>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80015ee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001600:	2301      	movs	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_TIM_Encoder_MspInit+0x84>)
 800160c:	f000 fbf6 	bl	8001dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40010000 	.word	0x40010000
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1a      	ldr	r2, [pc, #104]	; (800169c <HAL_TIM_Base_MspInit+0x78>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d114      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_TIM_Base_MspInit+0x7c>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	201d      	movs	r0, #29
 8001654:	f000 fb09 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001658:	201d      	movs	r0, #29
 800165a:	f000 fb22 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800165e:	e018      	b.n	8001692 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_TIM_Base_MspInit+0x80>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d113      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_TIM_Base_MspInit+0x7c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2036      	movs	r0, #54	; 0x36
 8001688:	f000 faef 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800168c:	2036      	movs	r0, #54	; 0x36
 800168e:	f000 fb08 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40000400 	.word	0x40000400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40001000 	.word	0x40001000

080016a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_TIM_MspPostInit+0x9c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d137      	bne.n	800173a <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_TIM_MspPostInit+0xa0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_TIM_MspPostInit+0xa0>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_TIM_MspPostInit+0xa0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_TIM_MspPostInit+0xa0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_TIM_MspPostInit+0xa0>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_TIM_MspPostInit+0xa0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800170a:	2302      	movs	r3, #2
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <HAL_TIM_MspPostInit+0xa4>)
 8001716:	f000 fb71 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800172a:	2302      	movs	r3, #2
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4806      	ldr	r0, [pc, #24]	; (8001750 <HAL_TIM_MspPostInit+0xa8>)
 8001736:	f000 fb61 	bl	8001dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40000400 	.word	0x40000400
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020800 	.word	0x40020800

08001754 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART3_UART_Init+0x58>)
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <MX_USART3_UART_Init+0x5c>)
 800175c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_USART3_UART_Init+0x58>)
 8001760:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART3_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_USART3_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART3_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART3_UART_Init+0x58>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART3_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART3_UART_Init+0x58>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART3_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART3_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART3_UART_Init+0x58>)
 8001798:	f003 fa66 	bl	8004c68 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017a2:	f7ff fc9d 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000338 	.word	0x20000338
 80017b0:	40004800 	.word	0x40004800

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <HAL_UART_MspInit+0x8c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d130      	bne.n	8001838 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_UART_MspInit+0x90>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_UART_MspInit+0x90>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_UART_MspInit+0x90>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0x90>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x90>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_UART_MspInit+0x90>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_UART_MspInit+0x94>)
 8001824:	f000 faea 	bl	8001dfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	2027      	movs	r0, #39	; 0x27
 800182e:	f000 fa1c 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001832:	2027      	movs	r0, #39	; 0x27
 8001834:	f000 fa35 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004800 	.word	0x40004800
 8001844:	40023800 	.word	0x40023800
 8001848:	40020c00 	.word	0x40020c00

0800184c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001852:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001856:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185a:	2206      	movs	r2, #6
 800185c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001860:	2202      	movs	r2, #2
 8001862:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800186c:	2202      	movs	r2, #2
 800186e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001872:	2201      	movs	r2, #1
 8001874:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001884:	2201      	movs	r2, #1
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001890:	f000 fc79 	bl	8002186 <HAL_PCD_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800189a:	f7ff fc21 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200003bc 	.word	0x200003bc

080018a8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018c8:	d141      	bne.n	800194e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018e2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018f4:	230a      	movs	r3, #10
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4817      	ldr	r0, [pc, #92]	; (800195c <HAL_PCD_MspInit+0xb4>)
 8001900:	f000 fa7c 	bl	8001dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <HAL_PCD_MspInit+0xb4>)
 800191a:	f000 fa6f 	bl	8001dfc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001928:	6353      	str	r3, [r2, #52]	; 0x34
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_PCD_MspInit+0xb0>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000

08001960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001966:	490e      	ldr	r1, [pc, #56]	; (80019a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001968:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800197c:	4c0b      	ldr	r4, [pc, #44]	; (80019ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198a:	f7ff fce1 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198e:	f004 ff97 	bl	80068c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001992:	f7ff f9ef 	bl	8000d74 <main>
  bx  lr    
 8001996:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001998:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019a4:	08009a44 	.word	0x08009a44
  ldr r2, =_sbss
 80019a8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019ac:	200007d4 	.word	0x200007d4

080019b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC_IRQHandler>

080019b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b6:	2003      	movs	r0, #3
 80019b8:	f000 f94c 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f805 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c2:	f7ff fb93 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f967 	bl	8001cbe <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 f92f 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	200007c0 	.word	0x200007c0

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200007c0 	.word	0x200007c0

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00
 8001af8:	05fa0000 	.word	0x05fa0000

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff29 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff3e 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff feb6 	bl	8001a54 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d008      	beq.n	8001d08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e052      	b.n	8001dae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0216 	bic.w	r2, r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <HAL_DMA_Abort+0x62>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0208 	bic.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d58:	e013      	b.n	8001d82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5a:	f7ff fe7b 	bl	8001a54 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d90c      	bls.n	8001d82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e015      	b.n	8001dae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e4      	bne.n	8001d5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	223f      	movs	r2, #63	; 0x3f
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e00c      	b.n	8001dee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2205      	movs	r2, #5
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e175      	b.n	8002108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8164 	bne.w	8002102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d005      	beq.n	8001e52 <HAL_GPIO_Init+0x56>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d130      	bne.n	8001eb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0201 	and.w	r2, r3, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d017      	beq.n	8001ef0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80be 	beq.w	8002102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	4b66      	ldr	r3, [pc, #408]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_GPIO_Init+0x324>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_GPIO_Init+0x328>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_GPIO_Init+0x32c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d037      	beq.n	800203a <HAL_GPIO_Init+0x23e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a57      	ldr	r2, [pc, #348]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_GPIO_Init+0x23a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x334>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x236>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a55      	ldr	r2, [pc, #340]	; (8002134 <HAL_GPIO_Init+0x338>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x232>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a54      	ldr	r2, [pc, #336]	; (8002138 <HAL_GPIO_Init+0x33c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x22e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a53      	ldr	r2, [pc, #332]	; (800213c <HAL_GPIO_Init+0x340>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x22a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x344>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x226>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x348>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x222>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x34c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x21e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x350>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x21a>
 8002012:	2309      	movs	r3, #9
 8002014:	e012      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002016:	230a      	movs	r3, #10
 8002018:	e010      	b.n	800203c <HAL_GPIO_Init+0x240>
 800201a:	2308      	movs	r3, #8
 800201c:	e00e      	b.n	800203c <HAL_GPIO_Init+0x240>
 800201e:	2307      	movs	r3, #7
 8002020:	e00c      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002022:	2306      	movs	r3, #6
 8002024:	e00a      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002026:	2305      	movs	r3, #5
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x240>
 800202a:	2304      	movs	r3, #4
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x240>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x240>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x240>
 800203a:	2300      	movs	r3, #0
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800204c:	4935      	ldr	r1, [pc, #212]	; (8002124 <HAL_GPIO_Init+0x328>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_GPIO_Init+0x354>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a34      	ldr	r2, [pc, #208]	; (8002150 <HAL_GPIO_Init+0x354>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_GPIO_Init+0x354>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d2:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_GPIO_Init+0x354>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f67f ae86 	bls.w	8001e1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40021400 	.word	0x40021400
 8002140:	40021800 	.word	0x40021800
 8002144:	40021c00 	.word	0x40021c00
 8002148:	40022000 	.word	0x40022000
 800214c:	40022400 	.word	0x40022400
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002188:	b08f      	sub	sp, #60	; 0x3c
 800218a:	af0a      	add	r7, sp, #40	; 0x28
 800218c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e116      	b.n	80023c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fb78 	bl	80018a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f8b4 	bl	8006344 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	687e      	ldr	r6, [r7, #4]
 80021e4:	466d      	mov	r5, sp
 80021e6:	f106 0410 	add.w	r4, r6, #16
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fa:	1d33      	adds	r3, r6, #4
 80021fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f004 f848 	bl	8006294 <USB_CoreInit>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0d7      	b.n	80023c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f004 f8a2 	bl	8006366 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e04a      	b.n	80022be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	333d      	adds	r3, #61	; 0x3d
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	333c      	adds	r3, #60	; 0x3c
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	b298      	uxth	r0, r3
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3342      	adds	r3, #66	; 0x42
 8002264:	4602      	mov	r2, r0
 8002266:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	333f      	adds	r3, #63	; 0x3f
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3344      	adds	r3, #68	; 0x44
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3348      	adds	r3, #72	; 0x48
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3350      	adds	r3, #80	; 0x50
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	3301      	adds	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3af      	bcc.n	8002228 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e044      	b.n	8002358 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	3301      	adds	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d3b5      	bcc.n	80022ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	687e      	ldr	r6, [r7, #4]
 800236a:	466d      	mov	r5, sp
 800236c:	f106 0410 	add.w	r4, r6, #16
 8002370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002378:	e894 0003 	ldmia.w	r4, {r0, r1}
 800237c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002380:	1d33      	adds	r3, r6, #4
 8002382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f004 f83b 	bl	8006400 <USB_DevInit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e014      	b.n	80023c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d102      	bne.n	80023ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f80b 	bl	80023d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f9f5 	bl	80067ae <USB_DevDisconnect>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_PCDEx_ActivateLPM+0x44>)
 8002400:	4313      	orrs	r3, r2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	10000003 	.word	0x10000003

08002418 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002466:	f7ff faf5 	bl	8001a54 <HAL_GetTick>
 800246a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800246c:	e009      	b.n	8002482 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800246e:	f7ff faf1 	bl	8001a54 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247c:	d901      	bls.n	8002482 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e022      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248e:	d1ee      	bne.n	800246e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800249c:	f7ff fada 	bl	8001a54 <HAL_GetTick>
 80024a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024a2:	e009      	b.n	80024b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024a4:	f7ff fad6 	bl	8001a54 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b2:	d901      	bls.n	80024b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e007      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c4:	d1ee      	bne.n	80024a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e29b      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fc:	4b96      	ldr	r3, [pc, #600]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002508:	4b93      	ldr	r3, [pc, #588]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d112      	bne.n	800253a <HAL_RCC_OscConfig+0x62>
 8002514:	4b90      	ldr	r3, [pc, #576]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b8d      	ldr	r3, [pc, #564]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x130>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e275      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x7a>
 8002544:	4b84      	ldr	r3, [pc, #528]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a83      	ldr	r2, [pc, #524]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x9c>
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7e      	ldr	r2, [pc, #504]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7b      	ldr	r2, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xc0>
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a75      	ldr	r2, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd8>
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6b      	ldr	r2, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff fa4c 	bl	8001a54 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fa48 	bl	8001a54 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e229      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b61      	ldr	r3, [pc, #388]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe8>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff fa38 	bl	8001a54 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fa34 	bl	8001a54 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e215      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b57      	ldr	r3, [pc, #348]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x110>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d069      	beq.n	80026ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x190>
 800262e:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x17a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1e9      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	493d      	ldr	r1, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e040      	b.n	80026ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a38      	ldr	r2, [pc, #224]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff f9ea 	bl	8001a54 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002684:	f7ff f9e6 	bl	8001a54 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1c7      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4929      	ldr	r1, [pc, #164]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a26      	ldr	r2, [pc, #152]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff f9c6 	bl	8001a54 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7ff f9c2 	bl	8001a54 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1a3      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d038      	beq.n	8002768 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7ff f9a3 	bl	8001a54 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002712:	f7ff f99f 	bl	8001a54 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e180      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x23a>
 8002730:	e01a      	b.n	8002768 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x280>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff f989 	bl	8001a54 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff f985 	bl	8001a54 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d903      	bls.n	800275c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e166      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
 8002758:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	4b92      	ldr	r3, [pc, #584]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ee      	bne.n	8002746 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a4 	beq.w	80028be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a88      	ldr	r2, [pc, #544]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b86      	ldr	r3, [pc, #536]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	4b83      	ldr	r3, [pc, #524]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027aa:	4b80      	ldr	r3, [pc, #512]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7f      	ldr	r2, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7ff f94d 	bl	8001a54 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7ff f949 	bl	8001a54 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e12a      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	4b76      	ldr	r3, [pc, #472]	; (80029ac <HAL_RCC_OscConfig+0x4d4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x31a>
 80027e4:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a6f      	ldr	r2, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	e02d      	b.n	800284e <HAL_RCC_OscConfig+0x376>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x33c>
 80027fa:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a67      	ldr	r2, [pc, #412]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	e01c      	b.n	800284e <HAL_RCC_OscConfig+0x376>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x35e>
 800281c:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a61      	ldr	r2, [pc, #388]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a5e      	ldr	r2, [pc, #376]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x376>
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a5b      	ldr	r2, [pc, #364]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7ff f8fd 	bl	8001a54 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff f8f9 	bl	8001a54 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0d8      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCC_OscConfig+0x386>
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7ff f8e7 	bl	8001a54 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7ff f8e3 	bl	8001a54 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0c2      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a3c      	ldr	r2, [pc, #240]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80ae 	beq.w	8002a24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d06d      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d14b      	bne.n	8002974 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff f8b4 	bl	8001a54 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7ff f8b0 	bl	8001a54 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e091      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	071b      	lsls	r3, r3, #28
 800293a:	491b      	ldr	r1, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7ff f882 	bl	8001a54 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7ff f87e 	bl	8001a54 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e05f      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x47c>
 8002972:	e057      	b.n	8002a24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800297a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff f868 	bl	8001a54 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7ff f864 	bl	8001a54 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e045      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_RCC_OscConfig+0x4d0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x4b0>
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x54c>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <HAL_RCC_OscConfig+0x558>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d030      	beq.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d129      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d122      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d119      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d10f      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0d0      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d910      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 020f 	bic.w	r2, r3, #15
 8002a62:	4965      	ldr	r1, [pc, #404]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b8      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a94:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	494d      	ldr	r1, [pc, #308]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d040      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d115      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e073      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06b      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b16:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 0203 	bic.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4936      	ldr	r1, [pc, #216]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b28:	f7fe ff94 	bl	8001a54 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7fe ff90 	bl	8001a54 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e053      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 020c 	and.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1eb      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b58:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d210      	bcs.n	8002b88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 020f 	bic.w	r2, r3, #15
 8002b6e:	4922      	ldr	r1, [pc, #136]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e032      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	490e      	ldr	r1, [pc, #56]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bc6:	f000 f821 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	490a      	ldr	r1, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x1cc>)
 8002bd8:	5ccb      	ldrb	r3, [r1, r3]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x1d0>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1d4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fef0 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	080095e8 	.word	0x080095e8
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c24:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x40>
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	f200 80bd 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3e:	e0b7      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c42:	60bb      	str	r3, [r7, #8]
      break;
 8002c44:	e0b7      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c46:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c48:	60bb      	str	r3, [r7, #8]
      break;
 8002c4a:	e0b4      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c4c:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c56:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d04d      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	ea02 0800 	and.w	r8, r2, r0
 8002c7a:	ea03 0901 	and.w	r9, r3, r1
 8002c7e:	4640      	mov	r0, r8
 8002c80:	4649      	mov	r1, r9
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	014b      	lsls	r3, r1, #5
 8002c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c90:	0142      	lsls	r2, r0, #5
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	ebb0 0008 	subs.w	r0, r0, r8
 8002c9a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	018b      	lsls	r3, r1, #6
 8002ca8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cac:	0182      	lsls	r2, r0, #6
 8002cae:	1a12      	subs	r2, r2, r0
 8002cb0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb4:	f04f 0000 	mov.w	r0, #0
 8002cb8:	f04f 0100 	mov.w	r1, #0
 8002cbc:	00d9      	lsls	r1, r3, #3
 8002cbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cc2:	00d0      	lsls	r0, r2, #3
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	eb12 0208 	adds.w	r2, r2, r8
 8002ccc:	eb43 0309 	adc.w	r3, r3, r9
 8002cd0:	f04f 0000 	mov.w	r0, #0
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	0259      	lsls	r1, r3, #9
 8002cda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cde:	0250      	lsls	r0, r2, #9
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	f7fd fcba 	bl	8000668 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e04a      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	461a      	mov	r2, r3
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	ea02 0400 	and.w	r4, r2, r0
 8002d16:	ea03 0501 	and.w	r5, r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	014b      	lsls	r3, r1, #5
 8002d28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d2c:	0142      	lsls	r2, r0, #5
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	1b00      	subs	r0, r0, r4
 8002d34:	eb61 0105 	sbc.w	r1, r1, r5
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	018b      	lsls	r3, r1, #6
 8002d42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d46:	0182      	lsls	r2, r0, #6
 8002d48:	1a12      	subs	r2, r2, r0
 8002d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	00d9      	lsls	r1, r3, #3
 8002d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d5c:	00d0      	lsls	r0, r2, #3
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	1912      	adds	r2, r2, r4
 8002d64:	eb45 0303 	adc.w	r3, r5, r3
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	0299      	lsls	r1, r3, #10
 8002d72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d76:	0290      	lsls	r0, r2, #10
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	f7fd fc6e 	bl	8000668 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	60bb      	str	r3, [r7, #8]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002db2:	60bb      	str	r3, [r7, #8]
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	68bb      	ldr	r3, [r7, #8]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	080095f8 	.word	0x080095f8

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffdc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0b5b      	lsrs	r3, r3, #13
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	080095f8 	.word	0x080095f8

08002e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d012      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e60:	4b69      	ldr	r3, [pc, #420]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a68      	ldr	r2, [pc, #416]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e6a:	6093      	str	r3, [r2, #8]
 8002e6c:	4b66      	ldr	r3, [pc, #408]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	4964      	ldr	r1, [pc, #400]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e92:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	4959      	ldr	r1, [pc, #356]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d017      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ece:	4b4e      	ldr	r3, [pc, #312]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	494a      	ldr	r1, [pc, #296]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 808b 	beq.w	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b3a      	ldr	r3, [pc, #232]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a39      	ldr	r2, [pc, #228]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
 8002f28:	4b37      	ldr	r3, [pc, #220]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f34:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe fd88 	bl	8001a54 <HAL_GetTick>
 8002f44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fe fd84 	bl	8001a54 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e38f      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f5a:	4b2c      	ldr	r3, [pc, #176]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f66:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d035      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d02e      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d114      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fd4c 	bl	8001a54 <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fd48 	bl	8001a54 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e351      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ee      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fee:	d111      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ffe:	400b      	ands	r3, r1
 8003000:	4901      	ldr	r1, [pc, #4]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
 8003006:	e00b      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003008:	40023800 	.word	0x40023800
 800300c:	40007000 	.word	0x40007000
 8003010:	0ffffcff 	.word	0x0ffffcff
 8003014:	4bb3      	ldr	r3, [pc, #716]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4ab2      	ldr	r2, [pc, #712]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800301a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800301e:	6093      	str	r3, [r2, #8]
 8003020:	4bb0      	ldr	r3, [pc, #704]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	49ad      	ldr	r1, [pc, #692]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302e:	4313      	orrs	r3, r2
 8003030:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800303e:	4ba9      	ldr	r3, [pc, #676]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	4aa7      	ldr	r2, [pc, #668]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800304e:	4ba5      	ldr	r3, [pc, #660]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003050:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	49a2      	ldr	r1, [pc, #648]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800306c:	4b9d      	ldr	r3, [pc, #628]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307a:	499a      	ldr	r1, [pc, #616]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800308e:	4b95      	ldr	r3, [pc, #596]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309c:	4991      	ldr	r1, [pc, #580]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030b0:	4b8c      	ldr	r3, [pc, #560]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030be:	4989      	ldr	r1, [pc, #548]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030d2:	4b84      	ldr	r3, [pc, #528]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4980      	ldr	r1, [pc, #512]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f4:	4b7b      	ldr	r3, [pc, #492]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4978      	ldr	r1, [pc, #480]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003116:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f023 020c 	bic.w	r2, r3, #12
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	496f      	ldr	r1, [pc, #444]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003146:	4967      	ldr	r1, [pc, #412]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003168:	495e      	ldr	r1, [pc, #376]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	4956      	ldr	r1, [pc, #344]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	494d      	ldr	r1, [pc, #308]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	4945      	ldr	r1, [pc, #276]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031e2:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f0:	493c      	ldr	r1, [pc, #240]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003204:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003212:	4934      	ldr	r1, [pc, #208]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d011      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003226:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003234:	492b      	ldr	r1, [pc, #172]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003244:	d101      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003274:	491b      	ldr	r1, [pc, #108]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003298:	4912      	ldr	r1, [pc, #72]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032bc:	4909      	ldr	r1, [pc, #36]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00f      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	4986      	ldr	r1, [pc, #536]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032fc:	4b81      	ldr	r3, [pc, #516]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003302:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330c:	497d      	ldr	r1, [pc, #500]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d006      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80d6 	beq.w	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003328:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800332e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fe fb8e 	bl	8001a54 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800333c:	f7fe fb8a 	bl	8001a54 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e195      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800334e:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d021      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11d      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800336e:	4b65      	ldr	r3, [pc, #404]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800337c:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003382:	0e1b      	lsrs	r3, r3, #24
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	019a      	lsls	r2, r3, #6
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	071b      	lsls	r3, r3, #28
 80033a2:	4958      	ldr	r1, [pc, #352]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02e      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d4:	d129      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033d6:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033e4:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ea:	0f1b      	lsrs	r3, r3, #28
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	019a      	lsls	r2, r3, #6
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	041b      	lsls	r3, r3, #16
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	061b      	lsls	r3, r3, #24
 8003404:	431a      	orrs	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	493e      	ldr	r1, [pc, #248]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003418:	f023 021f 	bic.w	r2, r3, #31
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	3b01      	subs	r3, #1
 8003422:	4938      	ldr	r1, [pc, #224]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01d      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343c:	0e1b      	lsrs	r3, r3, #24
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	0f1b      	lsrs	r3, r3, #28
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	019a      	lsls	r2, r3, #6
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	431a      	orrs	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	071b      	lsls	r3, r3, #28
 800346a:	4926      	ldr	r1, [pc, #152]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d011      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	019a      	lsls	r2, r3, #6
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	071b      	lsls	r3, r3, #28
 800349a:	491a      	ldr	r1, [pc, #104]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034a2:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ae:	f7fe fad1 	bl	8001a54 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034b6:	f7fe facd 	bl	8001a54 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	; 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0d8      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	f040 80ce 	bne.w	8003678 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fe fab4 	bl	8001a54 <HAL_GetTick>
 80034ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034ee:	e00b      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034f0:	f7fe fab0 	bl	8001a54 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d904      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0bb      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003508:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003514:	d0ec      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02e      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d12a      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800354c:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	0f1b      	lsrs	r3, r3, #28
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	019a      	lsls	r2, r3, #6
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	041b      	lsls	r3, r3, #16
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	071b      	lsls	r3, r3, #28
 8003572:	4944      	ldr	r1, [pc, #272]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800357a:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003580:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	493d      	ldr	r1, [pc, #244]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d022      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a8:	d11d      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	0e1b      	lsrs	r3, r3, #24
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	0f1b      	lsrs	r3, r3, #28
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	019a      	lsls	r2, r3, #6
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	431a      	orrs	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	071b      	lsls	r3, r3, #28
 80035de:	4929      	ldr	r1, [pc, #164]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d028      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	0e1b      	lsrs	r3, r3, #24
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	0c1b      	lsrs	r3, r3, #16
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	019a      	lsls	r2, r3, #6
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	431a      	orrs	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	4917      	ldr	r1, [pc, #92]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4911      	ldr	r1, [pc, #68]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fe fa00 	bl	8001a54 <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003658:	f7fe f9fc 	bl	8001a54 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e007      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003676:	d1ef      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e049      	b.n	800372e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd ffb8 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 fe64 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e054      	b.n	80037fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_TIM_Base_Start_IT+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377a:	d01d      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	; (800380c <HAL_TIM_Base_Start_IT+0xd4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a21      	ldr	r2, [pc, #132]	; (8003810 <HAL_TIM_Base_Start_IT+0xd8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <HAL_TIM_Base_Start_IT+0xdc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_TIM_Base_Start_IT+0xe0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <HAL_TIM_Base_Start_IT+0xe4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x80>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_TIM_Base_Start_IT+0xe8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d115      	bne.n	80037e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_TIM_Base_Start_IT+0xec>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d015      	beq.n	80037f6 <HAL_TIM_Base_Start_IT+0xbe>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d011      	beq.n	80037f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e2:	e008      	b.n	80037f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e000      	b.n	80037f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800
 8003824:	00010007 	.word	0x00010007

08003828 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e049      	b.n	80038ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f841 	bl	80038d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f000 fd94 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_TIM_PWM_Start+0x24>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e03c      	b.n	800398a <HAL_TIM_PWM_Start+0x9e>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b04      	cmp	r3, #4
 8003914:	d109      	bne.n	800392a <HAL_TIM_PWM_Start+0x3e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	e02f      	b.n	800398a <HAL_TIM_PWM_Start+0x9e>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d109      	bne.n	8003944 <HAL_TIM_PWM_Start+0x58>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e022      	b.n	800398a <HAL_TIM_PWM_Start+0x9e>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d109      	bne.n	800395e <HAL_TIM_PWM_Start+0x72>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e015      	b.n	800398a <HAL_TIM_PWM_Start+0x9e>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b10      	cmp	r3, #16
 8003962:	d109      	bne.n	8003978 <HAL_TIM_PWM_Start+0x8c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e008      	b.n	800398a <HAL_TIM_PWM_Start+0x9e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e092      	b.n	8003ab8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0xb6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	e023      	b.n	80039ea <HAL_TIM_PWM_Start+0xfe>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start+0xc6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	e01b      	b.n	80039ea <HAL_TIM_PWM_Start+0xfe>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0xd6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	e013      	b.n	80039ea <HAL_TIM_PWM_Start+0xfe>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Start+0xe6>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039d0:	e00b      	b.n	80039ea <HAL_TIM_PWM_Start+0xfe>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_PWM_Start+0xf6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	e003      	b.n	80039ea <HAL_TIM_PWM_Start+0xfe>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f866 	bl	8004ac4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_TIM_PWM_Start+0x1d4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <HAL_TIM_PWM_Start+0x120>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <HAL_TIM_PWM_Start+0x1d8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x124>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_TIM_PWM_Start+0x126>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <HAL_TIM_PWM_Start+0x1d4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x18a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a38:	d01d      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x18a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <HAL_TIM_PWM_Start+0x1dc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d018      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x18a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a20      	ldr	r2, [pc, #128]	; (8003acc <HAL_TIM_PWM_Start+0x1e0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x18a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_TIM_PWM_Start+0x1e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x18a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_TIM_PWM_Start+0x1d8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x18a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <HAL_TIM_PWM_Start+0x1e8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x18a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <HAL_TIM_PWM_Start+0x1ec>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d115      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_TIM_PWM_Start+0x1f0>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d015      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x1c8>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d011      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	e008      	b.n	8003ab4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800
 8003adc:	00010007 	.word	0x00010007

08003ae0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e08f      	b.n	8003c14 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fd fd47 	bl	800159c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <HAL_TIM_Encoder_Init+0x13c>)
 8003b22:	400b      	ands	r3, r1
 8003b24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 fc2f 	bl	8004394 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_TIM_Encoder_Init+0x140>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_TIM_Encoder_Init+0x144>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <HAL_TIM_Encoder_Init+0x148>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	011a      	lsls	r2, r3, #4
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	031b      	lsls	r3, r3, #12
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	fffebff8 	.word	0xfffebff8
 8003c20:	fffffcfc 	.word	0xfffffcfc
 8003c24:	fffff3f3 	.word	0xfffff3f3
 8003c28:	ffff0f0f 	.word	0xffff0f0f

08003c2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d110      	bne.n	8003c7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c62:	7b7b      	ldrb	r3, [r7, #13]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d001      	beq.n	8003c6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e069      	b.n	8003d40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	e031      	b.n	8003ce2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d110      	bne.n	8003ca6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c84:	7bbb      	ldrb	r3, [r7, #14]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c8a:	7b3b      	ldrb	r3, [r7, #12]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e055      	b.n	8003d40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca4:	e01d      	b.n	8003ce2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d108      	bne.n	8003cbe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d105      	bne.n	8003cbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cb2:	7b7b      	ldrb	r3, [r7, #13]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cb8:	7b3b      	ldrb	r3, [r7, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e03e      	b.n	8003d40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_TIM_Encoder_Start+0xc4>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d008      	beq.n	8003d00 <HAL_TIM_Encoder_Start+0xd4>
 8003cee:	e00f      	b.n	8003d10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fee3 	bl	8004ac4 <TIM_CCxChannelCmd>
      break;
 8003cfe:	e016      	b.n	8003d2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2201      	movs	r2, #1
 8003d06:	2104      	movs	r1, #4
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fedb 	bl	8004ac4 <TIM_CCxChannelCmd>
      break;
 8003d0e:	e00e      	b.n	8003d2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2201      	movs	r2, #1
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fed3 	bl	8004ac4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2201      	movs	r2, #1
 8003d24:	2104      	movs	r1, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fecc 	bl	8004ac4 <TIM_CCxChannelCmd>
      break;
 8003d2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0202 	mvn.w	r2, #2
 8003d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fae4 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fad6 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fae7 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0204 	mvn.w	r2, #4
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 faba 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 faac 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fabd 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0208 	mvn.w	r2, #8
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa90 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa82 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fa93 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d122      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0210 	mvn.w	r2, #16
 8003e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2208      	movs	r2, #8
 8003e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa66 	bl	8004358 <HAL_TIM_IC_CaptureCallback>
 8003e8c:	e005      	b.n	8003e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa58 	bl	8004344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fa69 	bl	800436c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd f8ce 	bl	8001068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b80      	cmp	r3, #128	; 0x80
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fea4 	bl	8004c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d10e      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d107      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fe97 	bl	8004c54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d10e      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fa17 	bl	8004380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d10e      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f06f 0220 	mvn.w	r2, #32
 8003f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fe57 	bl	8004c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e0ff      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b14      	cmp	r3, #20
 8003fb2:	f200 80f0 	bhi.w	8004196 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08004197 	.word	0x08004197
 8003fc4:	08004197 	.word	0x08004197
 8003fc8:	08004197 	.word	0x08004197
 8003fcc:	08004051 	.word	0x08004051
 8003fd0:	08004197 	.word	0x08004197
 8003fd4:	08004197 	.word	0x08004197
 8003fd8:	08004197 	.word	0x08004197
 8003fdc:	08004093 	.word	0x08004093
 8003fe0:	08004197 	.word	0x08004197
 8003fe4:	08004197 	.word	0x08004197
 8003fe8:	08004197 	.word	0x08004197
 8003fec:	080040d3 	.word	0x080040d3
 8003ff0:	08004197 	.word	0x08004197
 8003ff4:	08004197 	.word	0x08004197
 8003ff8:	08004197 	.word	0x08004197
 8003ffc:	08004115 	.word	0x08004115
 8004000:	08004197 	.word	0x08004197
 8004004:	08004197 	.word	0x08004197
 8004008:	08004197 	.word	0x08004197
 800400c:	08004155 	.word	0x08004155
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa5c 	bl	80044d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0208 	orr.w	r2, r2, #8
 800402a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6999      	ldr	r1, [r3, #24]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	619a      	str	r2, [r3, #24]
      break;
 800404e:	e0a5      	b.n	800419c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 faae 	bl	80045b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6999      	ldr	r1, [r3, #24]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	619a      	str	r2, [r3, #24]
      break;
 8004090:	e084      	b.n	800419c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fb05 	bl	80046a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0208 	orr.w	r2, r2, #8
 80040ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0204 	bic.w	r2, r2, #4
 80040bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	61da      	str	r2, [r3, #28]
      break;
 80040d0:	e064      	b.n	800419c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fb5b 	bl	8004794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69d9      	ldr	r1, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	021a      	lsls	r2, r3, #8
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	61da      	str	r2, [r3, #28]
      break;
 8004112:	e043      	b.n	800419c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fb92 	bl	8004844 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004152:	e023      	b.n	800419c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fbc4 	bl	80048e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004194:	e002      	b.n	800419c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
      break;
 800419a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop

080041b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIM_ConfigClockSource+0x1c>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e0b4      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x186>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_TIM_ConfigClockSource+0x190>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004204:	d03e      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0xd4>
 8004206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420a:	f200 8087 	bhi.w	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004212:	f000 8086 	beq.w	8004322 <HAL_TIM_ConfigClockSource+0x172>
 8004216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421a:	d87f      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b70      	cmp	r3, #112	; 0x70
 800421e:	d01a      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0xa6>
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d87b      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b60      	cmp	r3, #96	; 0x60
 8004226:	d050      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x11a>
 8004228:	2b60      	cmp	r3, #96	; 0x60
 800422a:	d877      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b50      	cmp	r3, #80	; 0x50
 800422e:	d03c      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0xfa>
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d873      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d058      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x13a>
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d86f      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d064      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004240:	2b30      	cmp	r3, #48	; 0x30
 8004242:	d86b      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d060      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d867      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05c      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004250:	2b10      	cmp	r3, #16
 8004252:	d05a      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	e062      	b.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6899      	ldr	r1, [r3, #8]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f000 fc0d 	bl	8004a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	609a      	str	r2, [r3, #8]
      break;
 8004282:	e04f      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6899      	ldr	r1, [r3, #8]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f000 fbf6 	bl	8004a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a6:	609a      	str	r2, [r3, #8]
      break;
 80042a8:	e03c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 fb6a 	bl	8004990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2150      	movs	r1, #80	; 0x50
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fbc3 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 80042c8:	e02c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 fb89 	bl	80049ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2160      	movs	r1, #96	; 0x60
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fbb3 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 80042e8:	e01c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 fb4a 	bl	8004990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fba3 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004308:	e00c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f000 fb9a 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 800431a:	e003      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	e000      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	fffeff88 	.word	0xfffeff88

08004344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a40      	ldr	r2, [pc, #256]	; (80044a8 <TIM_Base_SetConfig+0x114>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d00f      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3d      	ldr	r2, [pc, #244]	; (80044ac <TIM_Base_SetConfig+0x118>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3c      	ldr	r2, [pc, #240]	; (80044b0 <TIM_Base_SetConfig+0x11c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3b      	ldr	r2, [pc, #236]	; (80044b4 <TIM_Base_SetConfig+0x120>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a3a      	ldr	r2, [pc, #232]	; (80044b8 <TIM_Base_SetConfig+0x124>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <TIM_Base_SetConfig+0x114>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d027      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <TIM_Base_SetConfig+0x118>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d023      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2b      	ldr	r2, [pc, #172]	; (80044b0 <TIM_Base_SetConfig+0x11c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01f      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <TIM_Base_SetConfig+0x120>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <TIM_Base_SetConfig+0x124>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d017      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a28      	ldr	r2, [pc, #160]	; (80044bc <TIM_Base_SetConfig+0x128>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <TIM_Base_SetConfig+0x12c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00f      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <TIM_Base_SetConfig+0x130>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <TIM_Base_SetConfig+0x134>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a24      	ldr	r2, [pc, #144]	; (80044cc <TIM_Base_SetConfig+0x138>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <TIM_Base_SetConfig+0x13c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <TIM_Base_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0xf8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <TIM_Base_SetConfig+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d103      	bne.n	8004494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	615a      	str	r2, [r3, #20]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40014800 	.word	0x40014800
 80044c8:	40001800 	.word	0x40001800
 80044cc:	40001c00 	.word	0x40001c00
 80044d0:	40002000 	.word	0x40002000

080044d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <TIM_OC1_SetConfig+0xd8>)
 8004500:	4013      	ands	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0303 	bic.w	r3, r3, #3
 800450a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 0302 	bic.w	r3, r3, #2
 800451c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <TIM_OC1_SetConfig+0xdc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC1_SetConfig+0x64>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <TIM_OC1_SetConfig+0xe0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10c      	bne.n	8004552 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0308 	bic.w	r3, r3, #8
 800453e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <TIM_OC1_SetConfig+0xdc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_OC1_SetConfig+0x8e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <TIM_OC1_SetConfig+0xe0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d111      	bne.n	8004586 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	fffeff8f 	.word	0xfffeff8f
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40010400 	.word	0x40010400

080045b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0210 	bic.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4b2e      	ldr	r3, [pc, #184]	; (800469c <TIM_OC2_SetConfig+0xe4>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0320 	bic.w	r3, r3, #32
 8004602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a23      	ldr	r2, [pc, #140]	; (80046a0 <TIM_OC2_SetConfig+0xe8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_OC2_SetConfig+0x68>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <TIM_OC2_SetConfig+0xec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10d      	bne.n	800463c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <TIM_OC2_SetConfig+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_OC2_SetConfig+0x94>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <TIM_OC2_SetConfig+0xec>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d113      	bne.n	8004674 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800465a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	feff8fff 	.word	0xfeff8fff
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40010400 	.word	0x40010400

080046a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <TIM_OC3_SetConfig+0xe0>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a22      	ldr	r2, [pc, #136]	; (800478c <TIM_OC3_SetConfig+0xe4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_OC3_SetConfig+0x66>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a21      	ldr	r2, [pc, #132]	; (8004790 <TIM_OC3_SetConfig+0xe8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10d      	bne.n	800472a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <TIM_OC3_SetConfig+0xe4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_OC3_SetConfig+0x92>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a16      	ldr	r2, [pc, #88]	; (8004790 <TIM_OC3_SetConfig+0xe8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d113      	bne.n	8004762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	621a      	str	r2, [r3, #32]
}
 800477c:	bf00      	nop
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	fffeff8f 	.word	0xfffeff8f
 800478c:	40010000 	.word	0x40010000
 8004790:	40010400 	.word	0x40010400

08004794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <TIM_OC4_SetConfig+0xa4>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	031b      	lsls	r3, r3, #12
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a13      	ldr	r2, [pc, #76]	; (800483c <TIM_OC4_SetConfig+0xa8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_OC4_SetConfig+0x68>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <TIM_OC4_SetConfig+0xac>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d109      	bne.n	8004810 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	feff8fff 	.word	0xfeff8fff
 800483c:	40010000 	.word	0x40010000
 8004840:	40010400 	.word	0x40010400

08004844 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <TIM_OC5_SetConfig+0x98>)
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004884:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	041b      	lsls	r3, r3, #16
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <TIM_OC5_SetConfig+0x9c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_OC5_SetConfig+0x5e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <TIM_OC5_SetConfig+0xa0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d109      	bne.n	80048b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	fffeff8f 	.word	0xfffeff8f
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40010400 	.word	0x40010400

080048e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <TIM_OC6_SetConfig+0x9c>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800492a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	051b      	lsls	r3, r3, #20
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <TIM_OC6_SetConfig+0xa0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC6_SetConfig+0x60>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <TIM_OC6_SetConfig+0xa4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d109      	bne.n	800495c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	feff8fff 	.word	0xfeff8fff
 8004988:	40010000 	.word	0x40010000
 800498c:	40010400 	.word	0x40010400

08004990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f023 030a 	bic.w	r3, r3, #10
 80049cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f043 0307 	orr.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1a      	ldr	r2, [r3, #32]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1a      	ldr	r2, [r3, #32]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e06d      	b.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a30      	ldr	r2, [pc, #192]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d108      	bne.n	8004b6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a16      	ldr	r2, [pc, #88]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40014000 	.word	0x40014000
 8004c28:	40001800 	.word	0x40001800

08004c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e040      	b.n	8004cfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc fd92 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2224      	movs	r2, #36	; 0x24
 8004c94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fc18 	bl	80054dc <UART_SetConfig>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e022      	b.n	8004cfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fe6e 	bl	80059a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fef5 	bl	8005ae4 <UART_CheckIdleState>
 8004cfa:	4603      	mov	r3, r0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f040 8081 	bne.w	8004e20 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_Transmit+0x26>
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e079      	b.n	8004e22 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Transmit+0x38>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e072      	b.n	8004e22 <HAL_UART_Transmit+0x11e>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2221      	movs	r2, #33	; 0x21
 8004d50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d52:	f7fc fe7f 	bl	8001a54 <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d108      	bne.n	8004d84 <HAL_UART_Transmit+0x80>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e003      	b.n	8004d8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d94:	e02c      	b.n	8004df0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fee8 	bl	8005b76 <UART_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e038      	b.n	8004e22 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	3302      	adds	r3, #2
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e007      	b.n	8004dde <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1cc      	bne.n	8004d96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2140      	movs	r1, #64	; 0x40
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 feb5 	bl	8005b76 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e005      	b.n	8004e22 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b08a      	sub	sp, #40	; 0x28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	4613      	mov	r3, r2
 8004e36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d13d      	bne.n	8004ebc <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_UART_Receive_IT+0x22>
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e036      	b.n	8004ebe <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Receive_IT+0x34>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e02f      	b.n	8004ebe <HAL_UART_Receive_IT+0x94>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d018      	beq.n	8004eac <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	613b      	str	r3, [r7, #16]
   return(result);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e6      	bne.n	8004e7a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 ff24 	bl	8005d00 <UART_Start_Receive_IT>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	e000      	b.n	8004ebe <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3728      	adds	r7, #40	; 0x28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b0ba      	sub	sp, #232	; 0xe8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004eee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ef2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d115      	bne.n	8004f30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00f      	beq.n	8004f30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 82a4 	beq.w	800546e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
      }
      return;
 8004f2e:	e29e      	b.n	800546e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8117 	beq.w	8005168 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f4a:	4b85      	ldr	r3, [pc, #532]	; (8005160 <HAL_UART_IRQHandler+0x298>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 810a 	beq.w	8005168 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d011      	beq.n	8004f84 <HAL_UART_IRQHandler+0xbc>
 8004f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2201      	movs	r2, #1
 8004f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d011      	beq.n	8004fb4 <HAL_UART_IRQHandler+0xec>
 8004f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004faa:	f043 0204 	orr.w	r2, r3, #4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d011      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x11c>
 8004fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00b      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fda:	f043 0202 	orr.w	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d017      	beq.n	8005020 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d105      	bne.n	8005008 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005000:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2208      	movs	r2, #8
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005016:	f043 0208 	orr.w	r2, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005028:	2b00      	cmp	r3, #0
 800502a:	d012      	beq.n	8005052 <HAL_UART_IRQHandler+0x18a>
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00c      	beq.n	8005052 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 820a 	beq.w	8005472 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800506a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d005      	beq.n	80050aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800509e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d04f      	beq.n	800514a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fef2 	bl	8005e94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d141      	bne.n	8005142 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1d9      	bne.n	80050be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	2b00      	cmp	r3, #0
 8005110:	d013      	beq.n	800513a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a13      	ldr	r2, [pc, #76]	; (8005164 <HAL_UART_IRQHandler+0x29c>)
 8005118:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	4618      	mov	r0, r3
 8005120:	f7fc fe49 	bl	8001db6 <HAL_DMA_Abort_IT>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005134:	4610      	mov	r0, r2
 8005136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	e00f      	b.n	800515a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9ae 	bl	800549c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005140:	e00b      	b.n	800515a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9aa 	bl	800549c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	e007      	b.n	800515a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f9a6 	bl	800549c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005158:	e18b      	b.n	8005472 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515a:	bf00      	nop
    return;
 800515c:	e189      	b.n	8005472 <HAL_UART_IRQHandler+0x5aa>
 800515e:	bf00      	nop
 8005160:	04000120 	.word	0x04000120
 8005164:	08005f5b 	.word	0x08005f5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 8144 	bne.w	80053fa <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 813d 	beq.w	80053fa <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8136 	beq.w	80053fa <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2210      	movs	r2, #16
 8005194:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	f040 80b2 	bne.w	800530a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 815d 	beq.w	8005476 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051c6:	429a      	cmp	r2, r3
 80051c8:	f080 8155 	bcs.w	8005476 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e0:	f000 8085 	beq.w	80052ee <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800520e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005212:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800521a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1da      	bne.n	80051e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800523e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005252:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005256:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800525a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e1      	bne.n	800522e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800527a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800528e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005290:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005294:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800529c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e3      	bne.n	800526a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052be:	f023 0310 	bic.w	r3, r3, #16
 80052c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80052d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e4      	bne.n	80052ae <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fc fcf4 	bl	8001cd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8d4 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005308:	e0b5      	b.n	8005476 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005316:	b29b      	uxth	r3, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80a7 	beq.w	800547a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800532c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80a2 	beq.w	800547a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800534a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
 800535a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800535e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e4      	bne.n	8005336 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3308      	adds	r3, #8
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	623b      	str	r3, [r7, #32]
   return(result);
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	f023 0301 	bic.w	r3, r3, #1
 8005382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005390:	633a      	str	r2, [r7, #48]	; 0x30
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e3      	bne.n	800536c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	617b      	str	r3, [r7, #20]
   return(result);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e4      	bne.n	80053b6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f85c 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053f8:	e03f      	b.n	800547a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <HAL_UART_IRQHandler+0x55c>
 8005406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800541a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f853 	bl	80054c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005422:	e02d      	b.n	8005480 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01c      	beq.n	800547e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
    }
    return;
 800544c:	e017      	b.n	800547e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d012      	beq.n	8005480 <HAL_UART_IRQHandler+0x5b8>
 800545a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fd8d 	bl	8005f86 <UART_EndTransmit_IT>
    return;
 800546c:	e008      	b.n	8005480 <HAL_UART_IRQHandler+0x5b8>
      return;
 800546e:	bf00      	nop
 8005470:	e006      	b.n	8005480 <HAL_UART_IRQHandler+0x5b8>
    return;
 8005472:	bf00      	nop
 8005474:	e004      	b.n	8005480 <HAL_UART_IRQHandler+0x5b8>
      return;
 8005476:	bf00      	nop
 8005478:	e002      	b.n	8005480 <HAL_UART_IRQHandler+0x5b8>
      return;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <HAL_UART_IRQHandler+0x5b8>
    return;
 800547e:	bf00      	nop
  }

}
 8005480:	37e8      	adds	r7, #232	; 0xe8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop

08005488 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4ba7      	ldr	r3, [pc, #668]	; (80057a4 <UART_SetConfig+0x2c8>)
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	6979      	ldr	r1, [r7, #20]
 8005510:	430b      	orrs	r3, r1
 8005512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	430a      	orrs	r2, r1
 800554c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a95      	ldr	r2, [pc, #596]	; (80057a8 <UART_SetConfig+0x2cc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d120      	bne.n	800559a <UART_SetConfig+0xbe>
 8005558:	4b94      	ldr	r3, [pc, #592]	; (80057ac <UART_SetConfig+0x2d0>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b03      	cmp	r3, #3
 8005564:	d816      	bhi.n	8005594 <UART_SetConfig+0xb8>
 8005566:	a201      	add	r2, pc, #4	; (adr r2, 800556c <UART_SetConfig+0x90>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	0800557d 	.word	0x0800557d
 8005570:	08005589 	.word	0x08005589
 8005574:	08005583 	.word	0x08005583
 8005578:	0800558f 	.word	0x0800558f
 800557c:	2301      	movs	r3, #1
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e14f      	b.n	8005822 <UART_SetConfig+0x346>
 8005582:	2302      	movs	r3, #2
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e14c      	b.n	8005822 <UART_SetConfig+0x346>
 8005588:	2304      	movs	r3, #4
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e149      	b.n	8005822 <UART_SetConfig+0x346>
 800558e:	2308      	movs	r3, #8
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e146      	b.n	8005822 <UART_SetConfig+0x346>
 8005594:	2310      	movs	r3, #16
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e143      	b.n	8005822 <UART_SetConfig+0x346>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a84      	ldr	r2, [pc, #528]	; (80057b0 <UART_SetConfig+0x2d4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d132      	bne.n	800560a <UART_SetConfig+0x12e>
 80055a4:	4b81      	ldr	r3, [pc, #516]	; (80057ac <UART_SetConfig+0x2d0>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	d828      	bhi.n	8005604 <UART_SetConfig+0x128>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0xdc>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055ed 	.word	0x080055ed
 80055bc:	08005605 	.word	0x08005605
 80055c0:	08005605 	.word	0x08005605
 80055c4:	08005605 	.word	0x08005605
 80055c8:	080055f9 	.word	0x080055f9
 80055cc:	08005605 	.word	0x08005605
 80055d0:	08005605 	.word	0x08005605
 80055d4:	08005605 	.word	0x08005605
 80055d8:	080055f3 	.word	0x080055f3
 80055dc:	08005605 	.word	0x08005605
 80055e0:	08005605 	.word	0x08005605
 80055e4:	08005605 	.word	0x08005605
 80055e8:	080055ff 	.word	0x080055ff
 80055ec:	2300      	movs	r3, #0
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e117      	b.n	8005822 <UART_SetConfig+0x346>
 80055f2:	2302      	movs	r3, #2
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e114      	b.n	8005822 <UART_SetConfig+0x346>
 80055f8:	2304      	movs	r3, #4
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e111      	b.n	8005822 <UART_SetConfig+0x346>
 80055fe:	2308      	movs	r3, #8
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e10e      	b.n	8005822 <UART_SetConfig+0x346>
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e10b      	b.n	8005822 <UART_SetConfig+0x346>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a69      	ldr	r2, [pc, #420]	; (80057b4 <UART_SetConfig+0x2d8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d120      	bne.n	8005656 <UART_SetConfig+0x17a>
 8005614:	4b65      	ldr	r3, [pc, #404]	; (80057ac <UART_SetConfig+0x2d0>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800561e:	2b30      	cmp	r3, #48	; 0x30
 8005620:	d013      	beq.n	800564a <UART_SetConfig+0x16e>
 8005622:	2b30      	cmp	r3, #48	; 0x30
 8005624:	d814      	bhi.n	8005650 <UART_SetConfig+0x174>
 8005626:	2b20      	cmp	r3, #32
 8005628:	d009      	beq.n	800563e <UART_SetConfig+0x162>
 800562a:	2b20      	cmp	r3, #32
 800562c:	d810      	bhi.n	8005650 <UART_SetConfig+0x174>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <UART_SetConfig+0x15c>
 8005632:	2b10      	cmp	r3, #16
 8005634:	d006      	beq.n	8005644 <UART_SetConfig+0x168>
 8005636:	e00b      	b.n	8005650 <UART_SetConfig+0x174>
 8005638:	2300      	movs	r3, #0
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e0f1      	b.n	8005822 <UART_SetConfig+0x346>
 800563e:	2302      	movs	r3, #2
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e0ee      	b.n	8005822 <UART_SetConfig+0x346>
 8005644:	2304      	movs	r3, #4
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e0eb      	b.n	8005822 <UART_SetConfig+0x346>
 800564a:	2308      	movs	r3, #8
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e0e8      	b.n	8005822 <UART_SetConfig+0x346>
 8005650:	2310      	movs	r3, #16
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e0e5      	b.n	8005822 <UART_SetConfig+0x346>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a57      	ldr	r2, [pc, #348]	; (80057b8 <UART_SetConfig+0x2dc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d120      	bne.n	80056a2 <UART_SetConfig+0x1c6>
 8005660:	4b52      	ldr	r3, [pc, #328]	; (80057ac <UART_SetConfig+0x2d0>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800566a:	2bc0      	cmp	r3, #192	; 0xc0
 800566c:	d013      	beq.n	8005696 <UART_SetConfig+0x1ba>
 800566e:	2bc0      	cmp	r3, #192	; 0xc0
 8005670:	d814      	bhi.n	800569c <UART_SetConfig+0x1c0>
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d009      	beq.n	800568a <UART_SetConfig+0x1ae>
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d810      	bhi.n	800569c <UART_SetConfig+0x1c0>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <UART_SetConfig+0x1a8>
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	d006      	beq.n	8005690 <UART_SetConfig+0x1b4>
 8005682:	e00b      	b.n	800569c <UART_SetConfig+0x1c0>
 8005684:	2300      	movs	r3, #0
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e0cb      	b.n	8005822 <UART_SetConfig+0x346>
 800568a:	2302      	movs	r3, #2
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e0c8      	b.n	8005822 <UART_SetConfig+0x346>
 8005690:	2304      	movs	r3, #4
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e0c5      	b.n	8005822 <UART_SetConfig+0x346>
 8005696:	2308      	movs	r3, #8
 8005698:	77fb      	strb	r3, [r7, #31]
 800569a:	e0c2      	b.n	8005822 <UART_SetConfig+0x346>
 800569c:	2310      	movs	r3, #16
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e0bf      	b.n	8005822 <UART_SetConfig+0x346>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a45      	ldr	r2, [pc, #276]	; (80057bc <UART_SetConfig+0x2e0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d125      	bne.n	80056f8 <UART_SetConfig+0x21c>
 80056ac:	4b3f      	ldr	r3, [pc, #252]	; (80057ac <UART_SetConfig+0x2d0>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ba:	d017      	beq.n	80056ec <UART_SetConfig+0x210>
 80056bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c0:	d817      	bhi.n	80056f2 <UART_SetConfig+0x216>
 80056c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c6:	d00b      	beq.n	80056e0 <UART_SetConfig+0x204>
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056cc:	d811      	bhi.n	80056f2 <UART_SetConfig+0x216>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <UART_SetConfig+0x1fe>
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	d006      	beq.n	80056e6 <UART_SetConfig+0x20a>
 80056d8:	e00b      	b.n	80056f2 <UART_SetConfig+0x216>
 80056da:	2300      	movs	r3, #0
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e0a0      	b.n	8005822 <UART_SetConfig+0x346>
 80056e0:	2302      	movs	r3, #2
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e09d      	b.n	8005822 <UART_SetConfig+0x346>
 80056e6:	2304      	movs	r3, #4
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e09a      	b.n	8005822 <UART_SetConfig+0x346>
 80056ec:	2308      	movs	r3, #8
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e097      	b.n	8005822 <UART_SetConfig+0x346>
 80056f2:	2310      	movs	r3, #16
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e094      	b.n	8005822 <UART_SetConfig+0x346>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a30      	ldr	r2, [pc, #192]	; (80057c0 <UART_SetConfig+0x2e4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d125      	bne.n	800574e <UART_SetConfig+0x272>
 8005702:	4b2a      	ldr	r3, [pc, #168]	; (80057ac <UART_SetConfig+0x2d0>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005708:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800570c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005710:	d017      	beq.n	8005742 <UART_SetConfig+0x266>
 8005712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005716:	d817      	bhi.n	8005748 <UART_SetConfig+0x26c>
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571c:	d00b      	beq.n	8005736 <UART_SetConfig+0x25a>
 800571e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005722:	d811      	bhi.n	8005748 <UART_SetConfig+0x26c>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <UART_SetConfig+0x254>
 8005728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572c:	d006      	beq.n	800573c <UART_SetConfig+0x260>
 800572e:	e00b      	b.n	8005748 <UART_SetConfig+0x26c>
 8005730:	2301      	movs	r3, #1
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e075      	b.n	8005822 <UART_SetConfig+0x346>
 8005736:	2302      	movs	r3, #2
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e072      	b.n	8005822 <UART_SetConfig+0x346>
 800573c:	2304      	movs	r3, #4
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e06f      	b.n	8005822 <UART_SetConfig+0x346>
 8005742:	2308      	movs	r3, #8
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e06c      	b.n	8005822 <UART_SetConfig+0x346>
 8005748:	2310      	movs	r3, #16
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e069      	b.n	8005822 <UART_SetConfig+0x346>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <UART_SetConfig+0x2e8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d137      	bne.n	80057c8 <UART_SetConfig+0x2ec>
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <UART_SetConfig+0x2d0>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005762:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005766:	d017      	beq.n	8005798 <UART_SetConfig+0x2bc>
 8005768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800576c:	d817      	bhi.n	800579e <UART_SetConfig+0x2c2>
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	d00b      	beq.n	800578c <UART_SetConfig+0x2b0>
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d811      	bhi.n	800579e <UART_SetConfig+0x2c2>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <UART_SetConfig+0x2aa>
 800577e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005782:	d006      	beq.n	8005792 <UART_SetConfig+0x2b6>
 8005784:	e00b      	b.n	800579e <UART_SetConfig+0x2c2>
 8005786:	2300      	movs	r3, #0
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e04a      	b.n	8005822 <UART_SetConfig+0x346>
 800578c:	2302      	movs	r3, #2
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e047      	b.n	8005822 <UART_SetConfig+0x346>
 8005792:	2304      	movs	r3, #4
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e044      	b.n	8005822 <UART_SetConfig+0x346>
 8005798:	2308      	movs	r3, #8
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e041      	b.n	8005822 <UART_SetConfig+0x346>
 800579e:	2310      	movs	r3, #16
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	e03e      	b.n	8005822 <UART_SetConfig+0x346>
 80057a4:	efff69f3 	.word	0xefff69f3
 80057a8:	40011000 	.word	0x40011000
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40004400 	.word	0x40004400
 80057b4:	40004800 	.word	0x40004800
 80057b8:	40004c00 	.word	0x40004c00
 80057bc:	40005000 	.word	0x40005000
 80057c0:	40011400 	.word	0x40011400
 80057c4:	40007800 	.word	0x40007800
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a71      	ldr	r2, [pc, #452]	; (8005994 <UART_SetConfig+0x4b8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d125      	bne.n	800581e <UART_SetConfig+0x342>
 80057d2:	4b71      	ldr	r3, [pc, #452]	; (8005998 <UART_SetConfig+0x4bc>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057e0:	d017      	beq.n	8005812 <UART_SetConfig+0x336>
 80057e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057e6:	d817      	bhi.n	8005818 <UART_SetConfig+0x33c>
 80057e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ec:	d00b      	beq.n	8005806 <UART_SetConfig+0x32a>
 80057ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f2:	d811      	bhi.n	8005818 <UART_SetConfig+0x33c>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <UART_SetConfig+0x324>
 80057f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057fc:	d006      	beq.n	800580c <UART_SetConfig+0x330>
 80057fe:	e00b      	b.n	8005818 <UART_SetConfig+0x33c>
 8005800:	2300      	movs	r3, #0
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e00d      	b.n	8005822 <UART_SetConfig+0x346>
 8005806:	2302      	movs	r3, #2
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e00a      	b.n	8005822 <UART_SetConfig+0x346>
 800580c:	2304      	movs	r3, #4
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e007      	b.n	8005822 <UART_SetConfig+0x346>
 8005812:	2308      	movs	r3, #8
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e004      	b.n	8005822 <UART_SetConfig+0x346>
 8005818:	2310      	movs	r3, #16
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e001      	b.n	8005822 <UART_SetConfig+0x346>
 800581e:	2310      	movs	r3, #16
 8005820:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d15a      	bne.n	80058e2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800582c:	7ffb      	ldrb	r3, [r7, #31]
 800582e:	2b08      	cmp	r3, #8
 8005830:	d827      	bhi.n	8005882 <UART_SetConfig+0x3a6>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0x35c>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	0800585d 	.word	0x0800585d
 800583c:	08005865 	.word	0x08005865
 8005840:	0800586d 	.word	0x0800586d
 8005844:	08005883 	.word	0x08005883
 8005848:	08005873 	.word	0x08005873
 800584c:	08005883 	.word	0x08005883
 8005850:	08005883 	.word	0x08005883
 8005854:	08005883 	.word	0x08005883
 8005858:	0800587b 	.word	0x0800587b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800585c:	f7fd fac4 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8005860:	61b8      	str	r0, [r7, #24]
        break;
 8005862:	e013      	b.n	800588c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005864:	f7fd fad4 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8005868:	61b8      	str	r0, [r7, #24]
        break;
 800586a:	e00f      	b.n	800588c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800586c:	4b4b      	ldr	r3, [pc, #300]	; (800599c <UART_SetConfig+0x4c0>)
 800586e:	61bb      	str	r3, [r7, #24]
        break;
 8005870:	e00c      	b.n	800588c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005872:	f7fd f9cb 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8005876:	61b8      	str	r0, [r7, #24]
        break;
 8005878:	e008      	b.n	800588c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800587a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587e:	61bb      	str	r3, [r7, #24]
        break;
 8005880:	e004      	b.n	800588c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	77bb      	strb	r3, [r7, #30]
        break;
 800588a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d074      	beq.n	800597c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	005a      	lsls	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	441a      	add	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b0f      	cmp	r3, #15
 80058ac:	d916      	bls.n	80058dc <UART_SetConfig+0x400>
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d212      	bcs.n	80058dc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f023 030f 	bic.w	r3, r3, #15
 80058be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	89fb      	ldrh	r3, [r7, #14]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	89fa      	ldrh	r2, [r7, #14]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	e04f      	b.n	800597c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	77bb      	strb	r3, [r7, #30]
 80058e0:	e04c      	b.n	800597c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e2:	7ffb      	ldrb	r3, [r7, #31]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d828      	bhi.n	800593a <UART_SetConfig+0x45e>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x414>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fd fa68 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8005918:	61b8      	str	r0, [r7, #24]
        break;
 800591a:	e013      	b.n	8005944 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fd fa78 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8005920:	61b8      	str	r0, [r7, #24]
        break;
 8005922:	e00f      	b.n	8005944 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b1d      	ldr	r3, [pc, #116]	; (800599c <UART_SetConfig+0x4c0>)
 8005926:	61bb      	str	r3, [r7, #24]
        break;
 8005928:	e00c      	b.n	8005944 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fd f96f 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 800592e:	61b8      	str	r0, [r7, #24]
        break;
 8005930:	e008      	b.n	8005944 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	61bb      	str	r3, [r7, #24]
        break;
 8005938:	e004      	b.n	8005944 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	77bb      	strb	r3, [r7, #30]
        break;
 8005942:	bf00      	nop
    }

    if (pclk != 0U)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	085a      	lsrs	r2, r3, #1
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b0f      	cmp	r3, #15
 8005962:	d909      	bls.n	8005978 <UART_SetConfig+0x49c>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596a:	d205      	bcs.n	8005978 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	e001      	b.n	800597c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005988:	7fbb      	ldrb	r3, [r7, #30]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40007c00 	.word	0x40007c00
 8005998:	40023800 	.word	0x40023800
 800599c:	00f42400 	.word	0x00f42400

080059a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01a      	beq.n	8005ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a9e:	d10a      	bne.n	8005ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]
  }
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af4:	f7fb ffae 	bl	8001a54 <HAL_GetTick>
 8005af8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d10e      	bne.n	8005b26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f82d 	bl	8005b76 <UART_WaitOnFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e023      	b.n	8005b6e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d10e      	bne.n	8005b52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f817 	bl	8005b76 <UART_WaitOnFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e00d      	b.n	8005b6e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b09c      	sub	sp, #112	; 0x70
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	4613      	mov	r3, r2
 8005b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b86:	e0a5      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	f000 80a1 	beq.w	8005cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fb ff5f 	bl	8001a54 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d302      	bcc.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d13e      	bne.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e5      	bne.n	8005bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e067      	b.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d04f      	beq.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c42:	d147      	bne.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e6      	bne.n	8005c4e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ca0:	623a      	str	r2, [r7, #32]
 8005ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	69f9      	ldr	r1, [r7, #28]
 8005ca6:	6a3a      	ldr	r2, [r7, #32]
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e5      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e010      	b.n	8005cf6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	f43f af4a 	beq.w	8005b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3770      	adds	r7, #112	; 0x70
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b097      	sub	sp, #92	; 0x5c
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d32:	d10e      	bne.n	8005d52 <UART_Start_Receive_IT+0x52>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <UART_Start_Receive_IT+0x48>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d46:	e02d      	b.n	8005da4 <UART_Start_Receive_IT+0xa4>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	22ff      	movs	r2, #255	; 0xff
 8005d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d50:	e028      	b.n	8005da4 <UART_Start_Receive_IT+0xa4>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10d      	bne.n	8005d76 <UART_Start_Receive_IT+0x76>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <UART_Start_Receive_IT+0x6c>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	22ff      	movs	r2, #255	; 0xff
 8005d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d6a:	e01b      	b.n	8005da4 <UART_Start_Receive_IT+0xa4>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	227f      	movs	r2, #127	; 0x7f
 8005d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d74:	e016      	b.n	8005da4 <UART_Start_Receive_IT+0xa4>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7e:	d10d      	bne.n	8005d9c <UART_Start_Receive_IT+0x9c>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <UART_Start_Receive_IT+0x92>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	227f      	movs	r2, #127	; 0x7f
 8005d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d90:	e008      	b.n	8005da4 <UART_Start_Receive_IT+0xa4>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	223f      	movs	r2, #63	; 0x3f
 8005d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d9a:	e003      	b.n	8005da4 <UART_Start_Receive_IT+0xa4>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2222      	movs	r2, #34	; 0x22
 8005db0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3308      	adds	r3, #8
 8005db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	657b      	str	r3, [r7, #84]	; 0x54
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005dd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005dd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e5      	bne.n	8005db2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dee:	d107      	bne.n	8005e00 <UART_Start_Receive_IT+0x100>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <UART_Start_Receive_IT+0x18c>)
 8005dfc:	665a      	str	r2, [r3, #100]	; 0x64
 8005dfe:	e002      	b.n	8005e06 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a23      	ldr	r2, [pc, #140]	; (8005e90 <UART_Start_Receive_IT+0x190>)
 8005e04:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d019      	beq.n	8005e4a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
 8005e36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e6      	bne.n	8005e16 <UART_Start_Receive_IT+0x116>
 8005e48:	e018      	b.n	8005e7c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	613b      	str	r3, [r7, #16]
   return(result);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f043 0320 	orr.w	r3, r3, #32
 8005e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e68:	623b      	str	r3, [r7, #32]
 8005e6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	6a3a      	ldr	r2, [r7, #32]
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e6      	bne.n	8005e4a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	375c      	adds	r7, #92	; 0x5c
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	08006137 	.word	0x08006137
 8005e90:	08005fdb 	.word	0x08005fdb

08005e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b095      	sub	sp, #84	; 0x54
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
 8005ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e6      	bne.n	8005e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d118      	bne.n	8005f3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f023 0310 	bic.w	r3, r3, #16
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	613b      	str	r3, [r7, #16]
   return(result);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f4e:	bf00      	nop
 8005f50:	3754      	adds	r7, #84	; 0x54
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff fa8f 	bl	800549c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b088      	sub	sp, #32
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e6      	bne.n	8005f8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fa5b 	bl	8005488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd2:	bf00      	nop
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b096      	sub	sp, #88	; 0x58
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fe8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff0:	2b22      	cmp	r3, #34	; 0x22
 8005ff2:	f040 8094 	bne.w	800611e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006000:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006004:	b2d9      	uxtb	r1, r3
 8006006:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800600a:	b2da      	uxtb	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	400a      	ands	r2, r1
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d177      	bne.n	800612e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006052:	653b      	str	r3, [r7, #80]	; 0x50
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605c:	647b      	str	r3, [r7, #68]	; 0x44
 800605e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	623b      	str	r3, [r7, #32]
   return(result);
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006090:	633a      	str	r2, [r7, #48]	; 0x30
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d12e      	bne.n	8006116 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0310 	bic.w	r3, r3, #16
 80060d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	69b9      	ldr	r1, [r7, #24]
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	617b      	str	r3, [r7, #20]
   return(result);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e6      	bne.n	80060be <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d103      	bne.n	8006106 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2210      	movs	r2, #16
 8006104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff f9ce 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006114:	e00b      	b.n	800612e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fa ff1c 	bl	8000f54 <HAL_UART_RxCpltCallback>
}
 800611c:	e007      	b.n	800612e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699a      	ldr	r2, [r3, #24]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0208 	orr.w	r2, r2, #8
 800612c:	619a      	str	r2, [r3, #24]
}
 800612e:	bf00      	nop
 8006130:	3758      	adds	r7, #88	; 0x58
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b096      	sub	sp, #88	; 0x58
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006144:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800614c:	2b22      	cmp	r3, #34	; 0x22
 800614e:	f040 8094 	bne.w	800627a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006162:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800616a:	4013      	ands	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006170:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	1c9a      	adds	r2, r3, #2
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d177      	bne.n	800628a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b8:	643b      	str	r3, [r7, #64]	; 0x40
 80061ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e6      	bne.n	800619a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	61fb      	str	r3, [r7, #28]
   return(result);
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3308      	adds	r3, #8
 80061ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006210:	2b01      	cmp	r3, #1
 8006212:	d12e      	bne.n	8006272 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60bb      	str	r3, [r7, #8]
   return(result);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	647b      	str	r3, [r7, #68]	; 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	613b      	str	r3, [r7, #16]
   return(result);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e6      	bne.n	800621a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b10      	cmp	r3, #16
 8006258:	d103      	bne.n	8006262 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2210      	movs	r2, #16
 8006260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff f920 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006270:	e00b      	b.n	800628a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fa fe6e 	bl	8000f54 <HAL_UART_RxCpltCallback>
}
 8006278:	e007      	b.n	800628a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699a      	ldr	r2, [r3, #24]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0208 	orr.w	r2, r2, #8
 8006288:	619a      	str	r2, [r3, #24]
}
 800628a:	bf00      	nop
 800628c:	3758      	adds	r7, #88	; 0x58
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006294:	b084      	sub	sp, #16
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	f107 001c 	add.w	r0, r7, #28
 80062a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d120      	bne.n	80062ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	4b20      	ldr	r3, [pc, #128]	; (8006340 <USB_CoreInit+0xac>)
 80062be:	4013      	ands	r3, r2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d105      	bne.n	80062e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa92 	bl	800680c <USB_CoreReset>
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	e010      	b.n	8006310 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa86 	bl	800680c <USB_CoreReset>
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10b      	bne.n	800632e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f043 0206 	orr.w	r2, r3, #6
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f043 0220 	orr.w	r2, r3, #32
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800633a:	b004      	add	sp, #16
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	ffbdffbf 	.word	0xffbdffbf

08006344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f023 0201 	bic.w	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d115      	bne.n	80063b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006394:	2001      	movs	r0, #1
 8006396:	f7fb fb69 	bl	8001a6c <HAL_Delay>
      ms++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa25 	bl	80067f0 <USB_GetMode>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d01e      	beq.n	80063ea <USB_SetCurrentMode+0x84>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b31      	cmp	r3, #49	; 0x31
 80063b0:	d9f0      	bls.n	8006394 <USB_SetCurrentMode+0x2e>
 80063b2:	e01a      	b.n	80063ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d115      	bne.n	80063e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063c6:	2001      	movs	r0, #1
 80063c8:	f7fb fb50 	bl	8001a6c <HAL_Delay>
      ms++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa0c 	bl	80067f0 <USB_GetMode>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <USB_SetCurrentMode+0x84>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b31      	cmp	r3, #49	; 0x31
 80063e2:	d9f0      	bls.n	80063c6 <USB_SetCurrentMode+0x60>
 80063e4:	e001      	b.n	80063ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e005      	b.n	80063f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b32      	cmp	r3, #50	; 0x32
 80063ee:	d101      	bne.n	80063f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006400:	b084      	sub	sp, #16
 8006402:	b580      	push	{r7, lr}
 8006404:	b086      	sub	sp, #24
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800640e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	e009      	b.n	8006434 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	3340      	adds	r3, #64	; 0x40
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3301      	adds	r3, #1
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b0e      	cmp	r3, #14
 8006438:	d9f2      	bls.n	8006420 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800643a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d11c      	bne.n	800647a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800644e:	f043 0302 	orr.w	r3, r3, #2
 8006452:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	e005      	b.n	8006486 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006498:	4619      	mov	r1, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a0:	461a      	mov	r2, r3
 80064a2:	680b      	ldr	r3, [r1, #0]
 80064a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10c      	bne.n	80064c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f961 	bl	800677c <USB_SetDevSpeed>
 80064ba:	e008      	b.n	80064ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064bc:	2101      	movs	r1, #1
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f95c 	bl	800677c <USB_SetDevSpeed>
 80064c4:	e003      	b.n	80064ce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064c6:	2103      	movs	r1, #3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f957 	bl	800677c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ce:	2110      	movs	r1, #16
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f8f3 	bl	80066bc <USB_FlushTxFifo>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f91d 	bl	8006720 <USB_FlushRxFifo>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	461a      	mov	r2, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	461a      	mov	r2, r3
 8006504:	2300      	movs	r3, #0
 8006506:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	e043      	b.n	80065a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800652c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006530:	d118      	bne.n	8006564 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	461a      	mov	r2, r3
 8006546:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	e013      	b.n	8006576 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655a:	461a      	mov	r2, r3
 800655c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e008      	b.n	8006576 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	461a      	mov	r2, r3
 8006572:	2300      	movs	r3, #0
 8006574:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006582:	461a      	mov	r2, r3
 8006584:	2300      	movs	r3, #0
 8006586:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800659a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	3301      	adds	r3, #1
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d3b7      	bcc.n	800651a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	e043      	b.n	8006638 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c6:	d118      	bne.n	80065fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	461a      	mov	r2, r3
 80065dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	e013      	b.n	800660c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	461a      	mov	r2, r3
 80065f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	e008      	b.n	800660c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	461a      	mov	r2, r3
 8006608:	2300      	movs	r3, #0
 800660a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	461a      	mov	r2, r3
 800662c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006630:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	3301      	adds	r3, #1
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	429a      	cmp	r2, r3
 800663e:	d3b7      	bcc.n	80065b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800664e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006652:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006660:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f043 0210 	orr.w	r2, r3, #16
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	4b0e      	ldr	r3, [pc, #56]	; (80066b4 <USB_DevInit+0x2b4>)
 800667a:	4313      	orrs	r3, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	f043 0208 	orr.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d105      	bne.n	80066a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699a      	ldr	r2, [r3, #24]
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <USB_DevInit+0x2b8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066b0:	b004      	add	sp, #16
 80066b2:	4770      	bx	lr
 80066b4:	803c3800 	.word	0x803c3800
 80066b8:	40000004 	.word	0x40000004

080066bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	4a12      	ldr	r2, [pc, #72]	; (800671c <USB_FlushTxFifo+0x60>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e01a      	b.n	8006710 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	daf3      	bge.n	80066ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	4a08      	ldr	r2, [pc, #32]	; (800671c <USB_FlushTxFifo+0x60>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e006      	b.n	8006710 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b20      	cmp	r3, #32
 800670c:	d0f1      	beq.n	80066f2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	00030d40 	.word	0x00030d40

08006720 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	4a11      	ldr	r2, [pc, #68]	; (8006778 <USB_FlushRxFifo+0x58>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e017      	b.n	800676c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	daf3      	bge.n	800672c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2210      	movs	r2, #16
 800674c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	4a08      	ldr	r2, [pc, #32]	; (8006778 <USB_FlushRxFifo+0x58>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d901      	bls.n	800675e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b10      	cmp	r3, #16
 8006768:	d0f1      	beq.n	800674e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	00030d40 	.word	0x00030d40

0800677c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067dc:	f043 0302 	orr.w	r3, r3, #2
 80067e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0301 	and.w	r3, r3, #1
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	4a13      	ldr	r2, [pc, #76]	; (800686c <USB_CoreReset+0x60>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e01a      	b.n	800685e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	daf3      	bge.n	8006818 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f043 0201 	orr.w	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <USB_CoreReset+0x60>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e006      	b.n	800685e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d0f1      	beq.n	8006840 <USB_CoreReset+0x34>

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	00030d40 	.word	0x00030d40

08006870 <arm_pid_init_f32>:
 8006870:	ed90 7a08 	vldr	s14, [r0, #32]
 8006874:	edd0 7a06 	vldr	s15, [r0, #24]
 8006878:	ed90 6a07 	vldr	s12, [r0, #28]
 800687c:	eef1 6a67 	vneg.f32	s13, s15
 8006880:	ed80 7a02 	vstr	s14, [r0, #8]
 8006884:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006888:	ee37 6a07 	vadd.f32	s12, s14, s14
 800688c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006890:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8006894:	edc0 7a00 	vstr	s15, [r0]
 8006898:	ed80 7a01 	vstr	s14, [r0, #4]
 800689c:	b901      	cbnz	r1, 80068a0 <arm_pid_init_f32+0x30>
 800689e:	4770      	bx	lr
 80068a0:	2300      	movs	r3, #0
 80068a2:	60c3      	str	r3, [r0, #12]
 80068a4:	6103      	str	r3, [r0, #16]
 80068a6:	6143      	str	r3, [r0, #20]
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop

080068ac <atof>:
 80068ac:	2100      	movs	r1, #0
 80068ae:	f000 be25 	b.w	80074fc <strtod>
	...

080068b4 <__errno>:
 80068b4:	4b01      	ldr	r3, [pc, #4]	; (80068bc <__errno+0x8>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <__libc_init_array>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	4d0d      	ldr	r5, [pc, #52]	; (80068f8 <__libc_init_array+0x38>)
 80068c4:	4c0d      	ldr	r4, [pc, #52]	; (80068fc <__libc_init_array+0x3c>)
 80068c6:	1b64      	subs	r4, r4, r5
 80068c8:	10a4      	asrs	r4, r4, #2
 80068ca:	2600      	movs	r6, #0
 80068cc:	42a6      	cmp	r6, r4
 80068ce:	d109      	bne.n	80068e4 <__libc_init_array+0x24>
 80068d0:	4d0b      	ldr	r5, [pc, #44]	; (8006900 <__libc_init_array+0x40>)
 80068d2:	4c0c      	ldr	r4, [pc, #48]	; (8006904 <__libc_init_array+0x44>)
 80068d4:	f002 fe64 	bl	80095a0 <_init>
 80068d8:	1b64      	subs	r4, r4, r5
 80068da:	10a4      	asrs	r4, r4, #2
 80068dc:	2600      	movs	r6, #0
 80068de:	42a6      	cmp	r6, r4
 80068e0:	d105      	bne.n	80068ee <__libc_init_array+0x2e>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e8:	4798      	blx	r3
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7ee      	b.n	80068cc <__libc_init_array+0xc>
 80068ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f2:	4798      	blx	r3
 80068f4:	3601      	adds	r6, #1
 80068f6:	e7f2      	b.n	80068de <__libc_init_array+0x1e>
 80068f8:	08009a3c 	.word	0x08009a3c
 80068fc:	08009a3c 	.word	0x08009a3c
 8006900:	08009a3c 	.word	0x08009a3c
 8006904:	08009a40 	.word	0x08009a40

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <sulp>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	4604      	mov	r4, r0
 800691c:	460d      	mov	r5, r1
 800691e:	4616      	mov	r6, r2
 8006920:	ec45 4b10 	vmov	d0, r4, r5
 8006924:	f001 fcf2 	bl	800830c <__ulp>
 8006928:	b17e      	cbz	r6, 800694a <sulp+0x32>
 800692a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800692e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006932:	2b00      	cmp	r3, #0
 8006934:	dd09      	ble.n	800694a <sulp+0x32>
 8006936:	051b      	lsls	r3, r3, #20
 8006938:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800693c:	2000      	movs	r0, #0
 800693e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006942:	ec41 0b17 	vmov	d7, r0, r1
 8006946:	ee20 0b07 	vmul.f64	d0, d0, d7
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	0000      	movs	r0, r0
	...

08006950 <_strtod_l>:
 8006950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006954:	ed2d 8b0c 	vpush	{d8-d13}
 8006958:	b09d      	sub	sp, #116	; 0x74
 800695a:	461f      	mov	r7, r3
 800695c:	2300      	movs	r3, #0
 800695e:	9318      	str	r3, [sp, #96]	; 0x60
 8006960:	4ba6      	ldr	r3, [pc, #664]	; (8006bfc <_strtod_l+0x2ac>)
 8006962:	9213      	str	r2, [sp, #76]	; 0x4c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	9308      	str	r3, [sp, #32]
 8006968:	4604      	mov	r4, r0
 800696a:	4618      	mov	r0, r3
 800696c:	468a      	mov	sl, r1
 800696e:	f7f9 fc67 	bl	8000240 <strlen>
 8006972:	f04f 0800 	mov.w	r8, #0
 8006976:	4605      	mov	r5, r0
 8006978:	f04f 0900 	mov.w	r9, #0
 800697c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	2a2b      	cmp	r2, #43	; 0x2b
 8006986:	d04d      	beq.n	8006a24 <_strtod_l+0xd4>
 8006988:	d83a      	bhi.n	8006a00 <_strtod_l+0xb0>
 800698a:	2a0d      	cmp	r2, #13
 800698c:	d833      	bhi.n	80069f6 <_strtod_l+0xa6>
 800698e:	2a08      	cmp	r2, #8
 8006990:	d833      	bhi.n	80069fa <_strtod_l+0xaa>
 8006992:	2a00      	cmp	r2, #0
 8006994:	d03d      	beq.n	8006a12 <_strtod_l+0xc2>
 8006996:	2300      	movs	r3, #0
 8006998:	930b      	str	r3, [sp, #44]	; 0x2c
 800699a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800699c:	7833      	ldrb	r3, [r6, #0]
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	f040 80b6 	bne.w	8006b10 <_strtod_l+0x1c0>
 80069a4:	7873      	ldrb	r3, [r6, #1]
 80069a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069aa:	2b58      	cmp	r3, #88	; 0x58
 80069ac:	d16d      	bne.n	8006a8a <_strtod_l+0x13a>
 80069ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	ab18      	add	r3, sp, #96	; 0x60
 80069b4:	9702      	str	r7, [sp, #8]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	4a91      	ldr	r2, [pc, #580]	; (8006c00 <_strtod_l+0x2b0>)
 80069ba:	ab19      	add	r3, sp, #100	; 0x64
 80069bc:	a917      	add	r1, sp, #92	; 0x5c
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 fe10 	bl	80075e4 <__gethex>
 80069c4:	f010 0507 	ands.w	r5, r0, #7
 80069c8:	4607      	mov	r7, r0
 80069ca:	d005      	beq.n	80069d8 <_strtod_l+0x88>
 80069cc:	2d06      	cmp	r5, #6
 80069ce:	d12b      	bne.n	8006a28 <_strtod_l+0xd8>
 80069d0:	3601      	adds	r6, #1
 80069d2:	2300      	movs	r3, #0
 80069d4:	9617      	str	r6, [sp, #92]	; 0x5c
 80069d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 856e 	bne.w	80074bc <_strtod_l+0xb6c>
 80069e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e2:	b1e3      	cbz	r3, 8006a1e <_strtod_l+0xce>
 80069e4:	ec49 8b17 	vmov	d7, r8, r9
 80069e8:	eeb1 0b47 	vneg.f64	d0, d7
 80069ec:	b01d      	add	sp, #116	; 0x74
 80069ee:	ecbd 8b0c 	vpop	{d8-d13}
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	2a20      	cmp	r2, #32
 80069f8:	d1cd      	bne.n	8006996 <_strtod_l+0x46>
 80069fa:	3301      	adds	r3, #1
 80069fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80069fe:	e7bf      	b.n	8006980 <_strtod_l+0x30>
 8006a00:	2a2d      	cmp	r2, #45	; 0x2d
 8006a02:	d1c8      	bne.n	8006996 <_strtod_l+0x46>
 8006a04:	2201      	movs	r2, #1
 8006a06:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1c3      	bne.n	800699a <_strtod_l+0x4a>
 8006a12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a14:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f040 854d 	bne.w	80074b8 <_strtod_l+0xb68>
 8006a1e:	ec49 8b10 	vmov	d0, r8, r9
 8006a22:	e7e3      	b.n	80069ec <_strtod_l+0x9c>
 8006a24:	2200      	movs	r2, #0
 8006a26:	e7ee      	b.n	8006a06 <_strtod_l+0xb6>
 8006a28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a2a:	b13a      	cbz	r2, 8006a3c <_strtod_l+0xec>
 8006a2c:	2135      	movs	r1, #53	; 0x35
 8006a2e:	a81a      	add	r0, sp, #104	; 0x68
 8006a30:	f001 fd78 	bl	8008524 <__copybits>
 8006a34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a36:	4620      	mov	r0, r4
 8006a38:	f001 f93c 	bl	8007cb4 <_Bfree>
 8006a3c:	3d01      	subs	r5, #1
 8006a3e:	2d05      	cmp	r5, #5
 8006a40:	d807      	bhi.n	8006a52 <_strtod_l+0x102>
 8006a42:	e8df f005 	tbb	[pc, r5]
 8006a46:	0b0e      	.short	0x0b0e
 8006a48:	030e1d18 	.word	0x030e1d18
 8006a4c:	f04f 0900 	mov.w	r9, #0
 8006a50:	46c8      	mov	r8, r9
 8006a52:	073b      	lsls	r3, r7, #28
 8006a54:	d5c0      	bpl.n	80069d8 <_strtod_l+0x88>
 8006a56:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006a5a:	e7bd      	b.n	80069d8 <_strtod_l+0x88>
 8006a5c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8006a60:	e7f7      	b.n	8006a52 <_strtod_l+0x102>
 8006a62:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8006a66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006a74:	e7ed      	b.n	8006a52 <_strtod_l+0x102>
 8006a76:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8006c04 <_strtod_l+0x2b4>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	e7e8      	b.n	8006a52 <_strtod_l+0x102>
 8006a80:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006a84:	f04f 38ff 	mov.w	r8, #4294967295
 8006a88:	e7e3      	b.n	8006a52 <_strtod_l+0x102>
 8006a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b30      	cmp	r3, #48	; 0x30
 8006a94:	d0f9      	beq.n	8006a8a <_strtod_l+0x13a>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d09e      	beq.n	80069d8 <_strtod_l+0x88>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	9306      	str	r3, [sp, #24]
 8006a9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa8:	461e      	mov	r6, r3
 8006aaa:	220a      	movs	r2, #10
 8006aac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006aae:	f890 b000 	ldrb.w	fp, [r0]
 8006ab2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8006ab6:	b2d9      	uxtb	r1, r3
 8006ab8:	2909      	cmp	r1, #9
 8006aba:	d92b      	bls.n	8006b14 <_strtod_l+0x1c4>
 8006abc:	9908      	ldr	r1, [sp, #32]
 8006abe:	462a      	mov	r2, r5
 8006ac0:	f001 fdf6 	bl	80086b0 <strncmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d035      	beq.n	8006b34 <_strtod_l+0x1e4>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	465a      	mov	r2, fp
 8006acc:	4633      	mov	r3, r6
 8006ace:	4683      	mov	fp, r0
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	2a65      	cmp	r2, #101	; 0x65
 8006ad4:	d001      	beq.n	8006ada <_strtod_l+0x18a>
 8006ad6:	2a45      	cmp	r2, #69	; 0x45
 8006ad8:	d118      	bne.n	8006b0c <_strtod_l+0x1bc>
 8006ada:	b91b      	cbnz	r3, 8006ae4 <_strtod_l+0x194>
 8006adc:	9b06      	ldr	r3, [sp, #24]
 8006ade:	4303      	orrs	r3, r0
 8006ae0:	d097      	beq.n	8006a12 <_strtod_l+0xc2>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8006ae8:	f10a 0201 	add.w	r2, sl, #1
 8006aec:	9217      	str	r2, [sp, #92]	; 0x5c
 8006aee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006af2:	2a2b      	cmp	r2, #43	; 0x2b
 8006af4:	d077      	beq.n	8006be6 <_strtod_l+0x296>
 8006af6:	2a2d      	cmp	r2, #45	; 0x2d
 8006af8:	d07d      	beq.n	8006bf6 <_strtod_l+0x2a6>
 8006afa:	f04f 0e00 	mov.w	lr, #0
 8006afe:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006b02:	2d09      	cmp	r5, #9
 8006b04:	f240 8084 	bls.w	8006c10 <_strtod_l+0x2c0>
 8006b08:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006b0c:	2500      	movs	r5, #0
 8006b0e:	e09f      	b.n	8006c50 <_strtod_l+0x300>
 8006b10:	2300      	movs	r3, #0
 8006b12:	e7c3      	b.n	8006a9c <_strtod_l+0x14c>
 8006b14:	2e08      	cmp	r6, #8
 8006b16:	bfd5      	itete	le
 8006b18:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006b1a:	9904      	ldrgt	r1, [sp, #16]
 8006b1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b20:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006b24:	f100 0001 	add.w	r0, r0, #1
 8006b28:	bfd4      	ite	le
 8006b2a:	930a      	strle	r3, [sp, #40]	; 0x28
 8006b2c:	9304      	strgt	r3, [sp, #16]
 8006b2e:	3601      	adds	r6, #1
 8006b30:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b32:	e7bb      	b.n	8006aac <_strtod_l+0x15c>
 8006b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b36:	195a      	adds	r2, r3, r5
 8006b38:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b3a:	5d5a      	ldrb	r2, [r3, r5]
 8006b3c:	b3ae      	cbz	r6, 8006baa <_strtod_l+0x25a>
 8006b3e:	4683      	mov	fp, r0
 8006b40:	4633      	mov	r3, r6
 8006b42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006b46:	2909      	cmp	r1, #9
 8006b48:	d912      	bls.n	8006b70 <_strtod_l+0x220>
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	e7c1      	b.n	8006ad2 <_strtod_l+0x182>
 8006b4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b54:	785a      	ldrb	r2, [r3, #1]
 8006b56:	3001      	adds	r0, #1
 8006b58:	2a30      	cmp	r2, #48	; 0x30
 8006b5a:	d0f8      	beq.n	8006b4e <_strtod_l+0x1fe>
 8006b5c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	f200 84b0 	bhi.w	80074c6 <_strtod_l+0xb76>
 8006b66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b68:	930c      	str	r3, [sp, #48]	; 0x30
 8006b6a:	4683      	mov	fp, r0
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	3a30      	subs	r2, #48	; 0x30
 8006b72:	f100 0101 	add.w	r1, r0, #1
 8006b76:	d012      	beq.n	8006b9e <_strtod_l+0x24e>
 8006b78:	448b      	add	fp, r1
 8006b7a:	eb00 0c03 	add.w	ip, r0, r3
 8006b7e:	4619      	mov	r1, r3
 8006b80:	250a      	movs	r5, #10
 8006b82:	4561      	cmp	r1, ip
 8006b84:	d113      	bne.n	8006bae <_strtod_l+0x25e>
 8006b86:	1819      	adds	r1, r3, r0
 8006b88:	2908      	cmp	r1, #8
 8006b8a:	f103 0301 	add.w	r3, r3, #1
 8006b8e:	4403      	add	r3, r0
 8006b90:	dc1d      	bgt.n	8006bce <_strtod_l+0x27e>
 8006b92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b94:	210a      	movs	r1, #10
 8006b96:	fb01 2200 	mla	r2, r1, r0, r2
 8006b9a:	920a      	str	r2, [sp, #40]	; 0x28
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ba0:	1c50      	adds	r0, r2, #1
 8006ba2:	9017      	str	r0, [sp, #92]	; 0x5c
 8006ba4:	7852      	ldrb	r2, [r2, #1]
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	e7cb      	b.n	8006b42 <_strtod_l+0x1f2>
 8006baa:	4630      	mov	r0, r6
 8006bac:	e7d4      	b.n	8006b58 <_strtod_l+0x208>
 8006bae:	2908      	cmp	r1, #8
 8006bb0:	dc04      	bgt.n	8006bbc <_strtod_l+0x26c>
 8006bb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006bb4:	436f      	muls	r7, r5
 8006bb6:	970a      	str	r7, [sp, #40]	; 0x28
 8006bb8:	3101      	adds	r1, #1
 8006bba:	e7e2      	b.n	8006b82 <_strtod_l+0x232>
 8006bbc:	f101 0e01 	add.w	lr, r1, #1
 8006bc0:	f1be 0f10 	cmp.w	lr, #16
 8006bc4:	bfde      	ittt	le
 8006bc6:	9f04      	ldrle	r7, [sp, #16]
 8006bc8:	436f      	mulle	r7, r5
 8006bca:	9704      	strle	r7, [sp, #16]
 8006bcc:	e7f4      	b.n	8006bb8 <_strtod_l+0x268>
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	bfdf      	itttt	le
 8006bd2:	9804      	ldrle	r0, [sp, #16]
 8006bd4:	210a      	movle	r1, #10
 8006bd6:	fb01 2200 	mlale	r2, r1, r0, r2
 8006bda:	9204      	strle	r2, [sp, #16]
 8006bdc:	e7de      	b.n	8006b9c <_strtod_l+0x24c>
 8006bde:	f04f 0b00 	mov.w	fp, #0
 8006be2:	2101      	movs	r1, #1
 8006be4:	e77a      	b.n	8006adc <_strtod_l+0x18c>
 8006be6:	f04f 0e00 	mov.w	lr, #0
 8006bea:	f10a 0202 	add.w	r2, sl, #2
 8006bee:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bf0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006bf4:	e783      	b.n	8006afe <_strtod_l+0x1ae>
 8006bf6:	f04f 0e01 	mov.w	lr, #1
 8006bfa:	e7f6      	b.n	8006bea <_strtod_l+0x29a>
 8006bfc:	080096dc 	.word	0x080096dc
 8006c00:	08009610 	.word	0x08009610
 8006c04:	7ff00000 	.word	0x7ff00000
 8006c08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c0a:	1c55      	adds	r5, r2, #1
 8006c0c:	9517      	str	r5, [sp, #92]	; 0x5c
 8006c0e:	7852      	ldrb	r2, [r2, #1]
 8006c10:	2a30      	cmp	r2, #48	; 0x30
 8006c12:	d0f9      	beq.n	8006c08 <_strtod_l+0x2b8>
 8006c14:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006c18:	2d08      	cmp	r5, #8
 8006c1a:	f63f af77 	bhi.w	8006b0c <_strtod_l+0x1bc>
 8006c1e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006c22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c24:	9208      	str	r2, [sp, #32]
 8006c26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c28:	1c55      	adds	r5, r2, #1
 8006c2a:	9517      	str	r5, [sp, #92]	; 0x5c
 8006c2c:	7852      	ldrb	r2, [r2, #1]
 8006c2e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006c32:	2f09      	cmp	r7, #9
 8006c34:	d937      	bls.n	8006ca6 <_strtod_l+0x356>
 8006c36:	9f08      	ldr	r7, [sp, #32]
 8006c38:	1bed      	subs	r5, r5, r7
 8006c3a:	2d08      	cmp	r5, #8
 8006c3c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006c40:	dc02      	bgt.n	8006c48 <_strtod_l+0x2f8>
 8006c42:	4565      	cmp	r5, ip
 8006c44:	bfa8      	it	ge
 8006c46:	4665      	movge	r5, ip
 8006c48:	f1be 0f00 	cmp.w	lr, #0
 8006c4c:	d000      	beq.n	8006c50 <_strtod_l+0x300>
 8006c4e:	426d      	negs	r5, r5
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d14f      	bne.n	8006cf4 <_strtod_l+0x3a4>
 8006c54:	9b06      	ldr	r3, [sp, #24]
 8006c56:	4303      	orrs	r3, r0
 8006c58:	f47f aebe 	bne.w	80069d8 <_strtod_l+0x88>
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	f47f aed8 	bne.w	8006a12 <_strtod_l+0xc2>
 8006c62:	2a69      	cmp	r2, #105	; 0x69
 8006c64:	d027      	beq.n	8006cb6 <_strtod_l+0x366>
 8006c66:	dc24      	bgt.n	8006cb2 <_strtod_l+0x362>
 8006c68:	2a49      	cmp	r2, #73	; 0x49
 8006c6a:	d024      	beq.n	8006cb6 <_strtod_l+0x366>
 8006c6c:	2a4e      	cmp	r2, #78	; 0x4e
 8006c6e:	f47f aed0 	bne.w	8006a12 <_strtod_l+0xc2>
 8006c72:	499b      	ldr	r1, [pc, #620]	; (8006ee0 <_strtod_l+0x590>)
 8006c74:	a817      	add	r0, sp, #92	; 0x5c
 8006c76:	f000 ff0d 	bl	8007a94 <__match>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f43f aec9 	beq.w	8006a12 <_strtod_l+0xc2>
 8006c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b28      	cmp	r3, #40	; 0x28
 8006c86:	d12d      	bne.n	8006ce4 <_strtod_l+0x394>
 8006c88:	4996      	ldr	r1, [pc, #600]	; (8006ee4 <_strtod_l+0x594>)
 8006c8a:	aa1a      	add	r2, sp, #104	; 0x68
 8006c8c:	a817      	add	r0, sp, #92	; 0x5c
 8006c8e:	f000 ff15 	bl	8007abc <__hexnan>
 8006c92:	2805      	cmp	r0, #5
 8006c94:	d126      	bne.n	8006ce4 <_strtod_l+0x394>
 8006c96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006ca0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006ca4:	e698      	b.n	80069d8 <_strtod_l+0x88>
 8006ca6:	250a      	movs	r5, #10
 8006ca8:	fb05 250c 	mla	r5, r5, ip, r2
 8006cac:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006cb0:	e7b9      	b.n	8006c26 <_strtod_l+0x2d6>
 8006cb2:	2a6e      	cmp	r2, #110	; 0x6e
 8006cb4:	e7db      	b.n	8006c6e <_strtod_l+0x31e>
 8006cb6:	498c      	ldr	r1, [pc, #560]	; (8006ee8 <_strtod_l+0x598>)
 8006cb8:	a817      	add	r0, sp, #92	; 0x5c
 8006cba:	f000 feeb 	bl	8007a94 <__match>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f43f aea7 	beq.w	8006a12 <_strtod_l+0xc2>
 8006cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cc6:	4989      	ldr	r1, [pc, #548]	; (8006eec <_strtod_l+0x59c>)
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	a817      	add	r0, sp, #92	; 0x5c
 8006ccc:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cce:	f000 fee1 	bl	8007a94 <__match>
 8006cd2:	b910      	cbnz	r0, 8006cda <_strtod_l+0x38a>
 8006cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cda:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8006f00 <_strtod_l+0x5b0>
 8006cde:	f04f 0800 	mov.w	r8, #0
 8006ce2:	e679      	b.n	80069d8 <_strtod_l+0x88>
 8006ce4:	4882      	ldr	r0, [pc, #520]	; (8006ef0 <_strtod_l+0x5a0>)
 8006ce6:	f001 fccb 	bl	8008680 <nan>
 8006cea:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006cee:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006cf2:	e671      	b.n	80069d8 <_strtod_l+0x88>
 8006cf4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8006cf8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006cfc:	eba5 020b 	sub.w	r2, r5, fp
 8006d00:	2e00      	cmp	r6, #0
 8006d02:	bf08      	it	eq
 8006d04:	461e      	moveq	r6, r3
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006d0c:	9206      	str	r2, [sp, #24]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	bfa8      	it	ge
 8006d12:	2210      	movge	r2, #16
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006d1a:	dd0e      	ble.n	8006d3a <_strtod_l+0x3ea>
 8006d1c:	4975      	ldr	r1, [pc, #468]	; (8006ef4 <_strtod_l+0x5a4>)
 8006d1e:	eddd 7a04 	vldr	s15, [sp, #16]
 8006d22:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006d26:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8006d2a:	ed9d 5b08 	vldr	d5, [sp, #32]
 8006d2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006d32:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006d36:	ec59 8b17 	vmov	r8, r9, d7
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	dc37      	bgt.n	8006dae <_strtod_l+0x45e>
 8006d3e:	9906      	ldr	r1, [sp, #24]
 8006d40:	2900      	cmp	r1, #0
 8006d42:	f43f ae49 	beq.w	80069d8 <_strtod_l+0x88>
 8006d46:	dd23      	ble.n	8006d90 <_strtod_l+0x440>
 8006d48:	2916      	cmp	r1, #22
 8006d4a:	dc0b      	bgt.n	8006d64 <_strtod_l+0x414>
 8006d4c:	4b69      	ldr	r3, [pc, #420]	; (8006ef4 <_strtod_l+0x5a4>)
 8006d4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006d52:	ed93 7b00 	vldr	d7, [r3]
 8006d56:	ec49 8b16 	vmov	d6, r8, r9
 8006d5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d5e:	ec59 8b17 	vmov	r8, r9, d7
 8006d62:	e639      	b.n	80069d8 <_strtod_l+0x88>
 8006d64:	9806      	ldr	r0, [sp, #24]
 8006d66:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006d6a:	4281      	cmp	r1, r0
 8006d6c:	db1f      	blt.n	8006dae <_strtod_l+0x45e>
 8006d6e:	4a61      	ldr	r2, [pc, #388]	; (8006ef4 <_strtod_l+0x5a4>)
 8006d70:	f1c3 030f 	rsb	r3, r3, #15
 8006d74:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006d78:	ed91 7b00 	vldr	d7, [r1]
 8006d7c:	ec49 8b16 	vmov	d6, r8, r9
 8006d80:	1ac3      	subs	r3, r0, r3
 8006d82:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006d86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d8a:	ed92 6b00 	vldr	d6, [r2]
 8006d8e:	e7e4      	b.n	8006d5a <_strtod_l+0x40a>
 8006d90:	9906      	ldr	r1, [sp, #24]
 8006d92:	3116      	adds	r1, #22
 8006d94:	db0b      	blt.n	8006dae <_strtod_l+0x45e>
 8006d96:	4b57      	ldr	r3, [pc, #348]	; (8006ef4 <_strtod_l+0x5a4>)
 8006d98:	ebab 0505 	sub.w	r5, fp, r5
 8006d9c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006da0:	ed95 7b00 	vldr	d7, [r5]
 8006da4:	ec49 8b16 	vmov	d6, r8, r9
 8006da8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006dac:	e7d7      	b.n	8006d5e <_strtod_l+0x40e>
 8006dae:	9906      	ldr	r1, [sp, #24]
 8006db0:	1a9a      	subs	r2, r3, r2
 8006db2:	440a      	add	r2, r1
 8006db4:	2a00      	cmp	r2, #0
 8006db6:	dd74      	ble.n	8006ea2 <_strtod_l+0x552>
 8006db8:	f012 000f 	ands.w	r0, r2, #15
 8006dbc:	d00a      	beq.n	8006dd4 <_strtod_l+0x484>
 8006dbe:	494d      	ldr	r1, [pc, #308]	; (8006ef4 <_strtod_l+0x5a4>)
 8006dc0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006dc4:	ed91 7b00 	vldr	d7, [r1]
 8006dc8:	ec49 8b16 	vmov	d6, r8, r9
 8006dcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006dd0:	ec59 8b17 	vmov	r8, r9, d7
 8006dd4:	f032 020f 	bics.w	r2, r2, #15
 8006dd8:	d04f      	beq.n	8006e7a <_strtod_l+0x52a>
 8006dda:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006dde:	dd22      	ble.n	8006e26 <_strtod_l+0x4d6>
 8006de0:	2500      	movs	r5, #0
 8006de2:	462e      	mov	r6, r5
 8006de4:	950a      	str	r5, [sp, #40]	; 0x28
 8006de6:	462f      	mov	r7, r5
 8006de8:	2322      	movs	r3, #34	; 0x22
 8006dea:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8006f00 <_strtod_l+0x5b0>
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	f04f 0800 	mov.w	r8, #0
 8006df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f43f adee 	beq.w	80069d8 <_strtod_l+0x88>
 8006dfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 ff58 	bl	8007cb4 <_Bfree>
 8006e04:	4639      	mov	r1, r7
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 ff54 	bl	8007cb4 <_Bfree>
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 ff50 	bl	8007cb4 <_Bfree>
 8006e14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 ff4c 	bl	8007cb4 <_Bfree>
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 ff48 	bl	8007cb4 <_Bfree>
 8006e24:	e5d8      	b.n	80069d8 <_strtod_l+0x88>
 8006e26:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	4f32      	ldr	r7, [pc, #200]	; (8006ef8 <_strtod_l+0x5a8>)
 8006e2e:	1112      	asrs	r2, r2, #4
 8006e30:	4601      	mov	r1, r0
 8006e32:	2a01      	cmp	r2, #1
 8006e34:	dc24      	bgt.n	8006e80 <_strtod_l+0x530>
 8006e36:	b108      	cbz	r0, 8006e3c <_strtod_l+0x4ec>
 8006e38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e3c:	4a2e      	ldr	r2, [pc, #184]	; (8006ef8 <_strtod_l+0x5a8>)
 8006e3e:	482f      	ldr	r0, [pc, #188]	; (8006efc <_strtod_l+0x5ac>)
 8006e40:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8006e44:	ed91 7b00 	vldr	d7, [r1]
 8006e48:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006e4c:	ec49 8b16 	vmov	d6, r8, r9
 8006e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e58:	9905      	ldr	r1, [sp, #20]
 8006e5a:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <_strtod_l+0x5b0>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	4282      	cmp	r2, r0
 8006e60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e64:	d8bc      	bhi.n	8006de0 <_strtod_l+0x490>
 8006e66:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006e6a:	4282      	cmp	r2, r0
 8006e6c:	bf86      	itte	hi
 8006e6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006f04 <_strtod_l+0x5b4>
 8006e72:	f04f 38ff 	movhi.w	r8, #4294967295
 8006e76:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	9204      	str	r2, [sp, #16]
 8006e7e:	e07f      	b.n	8006f80 <_strtod_l+0x630>
 8006e80:	f012 0f01 	tst.w	r2, #1
 8006e84:	d00a      	beq.n	8006e9c <_strtod_l+0x54c>
 8006e86:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8006e8a:	ed90 7b00 	vldr	d7, [r0]
 8006e8e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8006e92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006e96:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	3101      	adds	r1, #1
 8006e9e:	1052      	asrs	r2, r2, #1
 8006ea0:	e7c7      	b.n	8006e32 <_strtod_l+0x4e2>
 8006ea2:	d0ea      	beq.n	8006e7a <_strtod_l+0x52a>
 8006ea4:	4252      	negs	r2, r2
 8006ea6:	f012 000f 	ands.w	r0, r2, #15
 8006eaa:	d00a      	beq.n	8006ec2 <_strtod_l+0x572>
 8006eac:	4911      	ldr	r1, [pc, #68]	; (8006ef4 <_strtod_l+0x5a4>)
 8006eae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006eb2:	ed91 7b00 	vldr	d7, [r1]
 8006eb6:	ec49 8b16 	vmov	d6, r8, r9
 8006eba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006ebe:	ec59 8b17 	vmov	r8, r9, d7
 8006ec2:	1112      	asrs	r2, r2, #4
 8006ec4:	d0d9      	beq.n	8006e7a <_strtod_l+0x52a>
 8006ec6:	2a1f      	cmp	r2, #31
 8006ec8:	dd1e      	ble.n	8006f08 <_strtod_l+0x5b8>
 8006eca:	2500      	movs	r5, #0
 8006ecc:	462e      	mov	r6, r5
 8006ece:	950a      	str	r5, [sp, #40]	; 0x28
 8006ed0:	462f      	mov	r7, r5
 8006ed2:	2322      	movs	r3, #34	; 0x22
 8006ed4:	f04f 0800 	mov.w	r8, #0
 8006ed8:	f04f 0900 	mov.w	r9, #0
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	e789      	b.n	8006df4 <_strtod_l+0x4a4>
 8006ee0:	0800960d 	.word	0x0800960d
 8006ee4:	08009624 	.word	0x08009624
 8006ee8:	08009604 	.word	0x08009604
 8006eec:	08009607 	.word	0x08009607
 8006ef0:	0800989f 	.word	0x0800989f
 8006ef4:	08009790 	.word	0x08009790
 8006ef8:	08009768 	.word	0x08009768
 8006efc:	7ca00000 	.word	0x7ca00000
 8006f00:	7ff00000 	.word	0x7ff00000
 8006f04:	7fefffff 	.word	0x7fefffff
 8006f08:	f012 0110 	ands.w	r1, r2, #16
 8006f0c:	bf18      	it	ne
 8006f0e:	216a      	movne	r1, #106	; 0x6a
 8006f10:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8006f14:	9104      	str	r1, [sp, #16]
 8006f16:	49c0      	ldr	r1, [pc, #768]	; (8007218 <_strtod_l+0x8c8>)
 8006f18:	2000      	movs	r0, #0
 8006f1a:	07d7      	lsls	r7, r2, #31
 8006f1c:	d508      	bpl.n	8006f30 <_strtod_l+0x5e0>
 8006f1e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8006f22:	ed91 7b00 	vldr	d7, [r1]
 8006f26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006f2a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f2e:	2001      	movs	r0, #1
 8006f30:	1052      	asrs	r2, r2, #1
 8006f32:	f101 0108 	add.w	r1, r1, #8
 8006f36:	d1f0      	bne.n	8006f1a <_strtod_l+0x5ca>
 8006f38:	b108      	cbz	r0, 8006f3e <_strtod_l+0x5ee>
 8006f3a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006f3e:	9a04      	ldr	r2, [sp, #16]
 8006f40:	b1ba      	cbz	r2, 8006f72 <_strtod_l+0x622>
 8006f42:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006f46:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	dd10      	ble.n	8006f72 <_strtod_l+0x622>
 8006f50:	2a1f      	cmp	r2, #31
 8006f52:	f340 8132 	ble.w	80071ba <_strtod_l+0x86a>
 8006f56:	2a34      	cmp	r2, #52	; 0x34
 8006f58:	bfde      	ittt	le
 8006f5a:	3a20      	suble	r2, #32
 8006f5c:	f04f 30ff 	movle.w	r0, #4294967295
 8006f60:	fa00 f202 	lslle.w	r2, r0, r2
 8006f64:	f04f 0800 	mov.w	r8, #0
 8006f68:	bfcc      	ite	gt
 8006f6a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006f6e:	ea02 0901 	andle.w	r9, r2, r1
 8006f72:	ec49 8b17 	vmov	d7, r8, r9
 8006f76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7e:	d0a4      	beq.n	8006eca <_strtod_l+0x57a>
 8006f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f82:	9200      	str	r2, [sp, #0]
 8006f84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f86:	4632      	mov	r2, r6
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 feff 	bl	8007d8c <__s2b>
 8006f8e:	900a      	str	r0, [sp, #40]	; 0x28
 8006f90:	2800      	cmp	r0, #0
 8006f92:	f43f af25 	beq.w	8006de0 <_strtod_l+0x490>
 8006f96:	9b06      	ldr	r3, [sp, #24]
 8006f98:	ebab 0505 	sub.w	r5, fp, r5
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfb4      	ite	lt
 8006fa0:	462b      	movlt	r3, r5
 8006fa2:	2300      	movge	r3, #0
 8006fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8006fa6:	9b06      	ldr	r3, [sp, #24]
 8006fa8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007200 <_strtod_l+0x8b0>
 8006fac:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007208 <_strtod_l+0x8b8>
 8006fb0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007210 <_strtod_l+0x8c0>
 8006fb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006fb8:	2500      	movs	r5, #0
 8006fba:	9312      	str	r3, [sp, #72]	; 0x48
 8006fbc:	462e      	mov	r6, r5
 8006fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	6859      	ldr	r1, [r3, #4]
 8006fc4:	f000 fe36 	bl	8007c34 <_Balloc>
 8006fc8:	4607      	mov	r7, r0
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f43f af0c 	beq.w	8006de8 <_strtod_l+0x498>
 8006fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	3202      	adds	r2, #2
 8006fd6:	f103 010c 	add.w	r1, r3, #12
 8006fda:	0092      	lsls	r2, r2, #2
 8006fdc:	300c      	adds	r0, #12
 8006fde:	f000 fe1b 	bl	8007c18 <memcpy>
 8006fe2:	ec49 8b10 	vmov	d0, r8, r9
 8006fe6:	aa1a      	add	r2, sp, #104	; 0x68
 8006fe8:	a919      	add	r1, sp, #100	; 0x64
 8006fea:	4620      	mov	r0, r4
 8006fec:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8006ff0:	f001 fa08 	bl	8008404 <__d2b>
 8006ff4:	9018      	str	r0, [sp, #96]	; 0x60
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f43f aef6 	beq.w	8006de8 <_strtod_l+0x498>
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 ff5e 	bl	8007ec0 <__i2b>
 8007004:	4606      	mov	r6, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f aeee 	beq.w	8006de8 <_strtod_l+0x498>
 800700c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800700e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfab      	itete	ge
 8007014:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007016:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007018:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800701c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007020:	bfac      	ite	ge
 8007022:	eb03 0b02 	addge.w	fp, r3, r2
 8007026:	eba2 0a03 	sublt.w	sl, r2, r3
 800702a:	9a04      	ldr	r2, [sp, #16]
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	440b      	add	r3, r1
 8007030:	4a7a      	ldr	r2, [pc, #488]	; (800721c <_strtod_l+0x8cc>)
 8007032:	3b01      	subs	r3, #1
 8007034:	4293      	cmp	r3, r2
 8007036:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800703a:	f280 80d1 	bge.w	80071e0 <_strtod_l+0x890>
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	2a1f      	cmp	r2, #31
 8007042:	eba1 0102 	sub.w	r1, r1, r2
 8007046:	f04f 0001 	mov.w	r0, #1
 800704a:	f300 80bd 	bgt.w	80071c8 <_strtod_l+0x878>
 800704e:	fa00 f302 	lsl.w	r3, r0, r2
 8007052:	930e      	str	r3, [sp, #56]	; 0x38
 8007054:	2300      	movs	r3, #0
 8007056:	930d      	str	r3, [sp, #52]	; 0x34
 8007058:	eb0b 0301 	add.w	r3, fp, r1
 800705c:	9a04      	ldr	r2, [sp, #16]
 800705e:	459b      	cmp	fp, r3
 8007060:	448a      	add	sl, r1
 8007062:	4492      	add	sl, r2
 8007064:	465a      	mov	r2, fp
 8007066:	bfa8      	it	ge
 8007068:	461a      	movge	r2, r3
 800706a:	4552      	cmp	r2, sl
 800706c:	bfa8      	it	ge
 800706e:	4652      	movge	r2, sl
 8007070:	2a00      	cmp	r2, #0
 8007072:	bfc2      	ittt	gt
 8007074:	1a9b      	subgt	r3, r3, r2
 8007076:	ebaa 0a02 	subgt.w	sl, sl, r2
 800707a:	ebab 0b02 	subgt.w	fp, fp, r2
 800707e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007080:	2a00      	cmp	r2, #0
 8007082:	dd18      	ble.n	80070b6 <_strtod_l+0x766>
 8007084:	4631      	mov	r1, r6
 8007086:	4620      	mov	r0, r4
 8007088:	9315      	str	r3, [sp, #84]	; 0x54
 800708a:	f000 ffd5 	bl	8008038 <__pow5mult>
 800708e:	4606      	mov	r6, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	f43f aea9 	beq.w	8006de8 <_strtod_l+0x498>
 8007096:	4601      	mov	r1, r0
 8007098:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800709a:	4620      	mov	r0, r4
 800709c:	f000 ff26 	bl	8007eec <__multiply>
 80070a0:	9014      	str	r0, [sp, #80]	; 0x50
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f43f aea0 	beq.w	8006de8 <_strtod_l+0x498>
 80070a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fe02 	bl	8007cb4 <_Bfree>
 80070b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070b4:	9218      	str	r2, [sp, #96]	; 0x60
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f300 8097 	bgt.w	80071ea <_strtod_l+0x89a>
 80070bc:	9b06      	ldr	r3, [sp, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd08      	ble.n	80070d4 <_strtod_l+0x784>
 80070c2:	4639      	mov	r1, r7
 80070c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 ffb6 	bl	8008038 <__pow5mult>
 80070cc:	4607      	mov	r7, r0
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f43f ae8a 	beq.w	8006de8 <_strtod_l+0x498>
 80070d4:	f1ba 0f00 	cmp.w	sl, #0
 80070d8:	dd08      	ble.n	80070ec <_strtod_l+0x79c>
 80070da:	4639      	mov	r1, r7
 80070dc:	4652      	mov	r2, sl
 80070de:	4620      	mov	r0, r4
 80070e0:	f001 f804 	bl	80080ec <__lshift>
 80070e4:	4607      	mov	r7, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	f43f ae7e 	beq.w	8006de8 <_strtod_l+0x498>
 80070ec:	f1bb 0f00 	cmp.w	fp, #0
 80070f0:	dd08      	ble.n	8007104 <_strtod_l+0x7b4>
 80070f2:	4631      	mov	r1, r6
 80070f4:	465a      	mov	r2, fp
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 fff8 	bl	80080ec <__lshift>
 80070fc:	4606      	mov	r6, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f ae72 	beq.w	8006de8 <_strtod_l+0x498>
 8007104:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007106:	463a      	mov	r2, r7
 8007108:	4620      	mov	r0, r4
 800710a:	f001 f877 	bl	80081fc <__mdiff>
 800710e:	4605      	mov	r5, r0
 8007110:	2800      	cmp	r0, #0
 8007112:	f43f ae69 	beq.w	8006de8 <_strtod_l+0x498>
 8007116:	2300      	movs	r3, #0
 8007118:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800711c:	60c3      	str	r3, [r0, #12]
 800711e:	4631      	mov	r1, r6
 8007120:	f001 f850 	bl	80081c4 <__mcmp>
 8007124:	2800      	cmp	r0, #0
 8007126:	da7f      	bge.n	8007228 <_strtod_l+0x8d8>
 8007128:	ea5a 0308 	orrs.w	r3, sl, r8
 800712c:	f040 80a5 	bne.w	800727a <_strtod_l+0x92a>
 8007130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 80a0 	bne.w	800727a <_strtod_l+0x92a>
 800713a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800713e:	0d1b      	lsrs	r3, r3, #20
 8007140:	051b      	lsls	r3, r3, #20
 8007142:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007146:	f240 8098 	bls.w	800727a <_strtod_l+0x92a>
 800714a:	696b      	ldr	r3, [r5, #20]
 800714c:	b91b      	cbnz	r3, 8007156 <_strtod_l+0x806>
 800714e:	692b      	ldr	r3, [r5, #16]
 8007150:	2b01      	cmp	r3, #1
 8007152:	f340 8092 	ble.w	800727a <_strtod_l+0x92a>
 8007156:	4629      	mov	r1, r5
 8007158:	2201      	movs	r2, #1
 800715a:	4620      	mov	r0, r4
 800715c:	f000 ffc6 	bl	80080ec <__lshift>
 8007160:	4631      	mov	r1, r6
 8007162:	4605      	mov	r5, r0
 8007164:	f001 f82e 	bl	80081c4 <__mcmp>
 8007168:	2800      	cmp	r0, #0
 800716a:	f340 8086 	ble.w	800727a <_strtod_l+0x92a>
 800716e:	9904      	ldr	r1, [sp, #16]
 8007170:	4a2b      	ldr	r2, [pc, #172]	; (8007220 <_strtod_l+0x8d0>)
 8007172:	464b      	mov	r3, r9
 8007174:	2900      	cmp	r1, #0
 8007176:	f000 80a1 	beq.w	80072bc <_strtod_l+0x96c>
 800717a:	ea02 0109 	and.w	r1, r2, r9
 800717e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007182:	f300 809b 	bgt.w	80072bc <_strtod_l+0x96c>
 8007186:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800718a:	f77f aea2 	ble.w	8006ed2 <_strtod_l+0x582>
 800718e:	4a25      	ldr	r2, [pc, #148]	; (8007224 <_strtod_l+0x8d4>)
 8007190:	2300      	movs	r3, #0
 8007192:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007196:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800719a:	ec49 8b17 	vmov	d7, r8, r9
 800719e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	bf08      	it	eq
 80071ae:	2322      	moveq	r3, #34	; 0x22
 80071b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071b4:	bf08      	it	eq
 80071b6:	6023      	streq	r3, [r4, #0]
 80071b8:	e620      	b.n	8006dfc <_strtod_l+0x4ac>
 80071ba:	f04f 31ff 	mov.w	r1, #4294967295
 80071be:	fa01 f202 	lsl.w	r2, r1, r2
 80071c2:	ea02 0808 	and.w	r8, r2, r8
 80071c6:	e6d4      	b.n	8006f72 <_strtod_l+0x622>
 80071c8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80071cc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80071d0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80071d4:	33e2      	adds	r3, #226	; 0xe2
 80071d6:	fa00 f303 	lsl.w	r3, r0, r3
 80071da:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80071de:	e73b      	b.n	8007058 <_strtod_l+0x708>
 80071e0:	2000      	movs	r0, #0
 80071e2:	2301      	movs	r3, #1
 80071e4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80071e8:	e736      	b.n	8007058 <_strtod_l+0x708>
 80071ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071ec:	461a      	mov	r2, r3
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 ff7c 	bl	80080ec <__lshift>
 80071f4:	9018      	str	r0, [sp, #96]	; 0x60
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f47f af60 	bne.w	80070bc <_strtod_l+0x76c>
 80071fc:	e5f4      	b.n	8006de8 <_strtod_l+0x498>
 80071fe:	bf00      	nop
 8007200:	94a03595 	.word	0x94a03595
 8007204:	3fcfffff 	.word	0x3fcfffff
 8007208:	94a03595 	.word	0x94a03595
 800720c:	3fdfffff 	.word	0x3fdfffff
 8007210:	35afe535 	.word	0x35afe535
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	08009638 	.word	0x08009638
 800721c:	fffffc02 	.word	0xfffffc02
 8007220:	7ff00000 	.word	0x7ff00000
 8007224:	39500000 	.word	0x39500000
 8007228:	46cb      	mov	fp, r9
 800722a:	d165      	bne.n	80072f8 <_strtod_l+0x9a8>
 800722c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007230:	f1ba 0f00 	cmp.w	sl, #0
 8007234:	d02a      	beq.n	800728c <_strtod_l+0x93c>
 8007236:	4aaa      	ldr	r2, [pc, #680]	; (80074e0 <_strtod_l+0xb90>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d12b      	bne.n	8007294 <_strtod_l+0x944>
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	4641      	mov	r1, r8
 8007240:	b1fb      	cbz	r3, 8007282 <_strtod_l+0x932>
 8007242:	4aa8      	ldr	r2, [pc, #672]	; (80074e4 <_strtod_l+0xb94>)
 8007244:	ea09 0202 	and.w	r2, r9, r2
 8007248:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	d81a      	bhi.n	8007288 <_strtod_l+0x938>
 8007252:	0d12      	lsrs	r2, r2, #20
 8007254:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007258:	fa00 f303 	lsl.w	r3, r0, r3
 800725c:	4299      	cmp	r1, r3
 800725e:	d119      	bne.n	8007294 <_strtod_l+0x944>
 8007260:	4ba1      	ldr	r3, [pc, #644]	; (80074e8 <_strtod_l+0xb98>)
 8007262:	459b      	cmp	fp, r3
 8007264:	d102      	bne.n	800726c <_strtod_l+0x91c>
 8007266:	3101      	adds	r1, #1
 8007268:	f43f adbe 	beq.w	8006de8 <_strtod_l+0x498>
 800726c:	4b9d      	ldr	r3, [pc, #628]	; (80074e4 <_strtod_l+0xb94>)
 800726e:	ea0b 0303 	and.w	r3, fp, r3
 8007272:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007276:	f04f 0800 	mov.w	r8, #0
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d186      	bne.n	800718e <_strtod_l+0x83e>
 8007280:	e5bc      	b.n	8006dfc <_strtod_l+0x4ac>
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	e7e9      	b.n	800725c <_strtod_l+0x90c>
 8007288:	4603      	mov	r3, r0
 800728a:	e7e7      	b.n	800725c <_strtod_l+0x90c>
 800728c:	ea53 0308 	orrs.w	r3, r3, r8
 8007290:	f43f af6d 	beq.w	800716e <_strtod_l+0x81e>
 8007294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007296:	b1db      	cbz	r3, 80072d0 <_strtod_l+0x980>
 8007298:	ea13 0f0b 	tst.w	r3, fp
 800729c:	d0ed      	beq.n	800727a <_strtod_l+0x92a>
 800729e:	9a04      	ldr	r2, [sp, #16]
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	f1ba 0f00 	cmp.w	sl, #0
 80072a8:	d016      	beq.n	80072d8 <_strtod_l+0x988>
 80072aa:	f7ff fb35 	bl	8006918 <sulp>
 80072ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 80072b2:	ee37 7b00 	vadd.f64	d7, d7, d0
 80072b6:	ec59 8b17 	vmov	r8, r9, d7
 80072ba:	e7de      	b.n	800727a <_strtod_l+0x92a>
 80072bc:	4013      	ands	r3, r2
 80072be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80072c2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80072c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80072ca:	f04f 38ff 	mov.w	r8, #4294967295
 80072ce:	e7d4      	b.n	800727a <_strtod_l+0x92a>
 80072d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d2:	ea13 0f08 	tst.w	r3, r8
 80072d6:	e7e1      	b.n	800729c <_strtod_l+0x94c>
 80072d8:	f7ff fb1e 	bl	8006918 <sulp>
 80072dc:	ed9d 7b08 	vldr	d7, [sp, #32]
 80072e0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80072e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80072f4:	d1c1      	bne.n	800727a <_strtod_l+0x92a>
 80072f6:	e5ec      	b.n	8006ed2 <_strtod_l+0x582>
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	f001 f8de 	bl	80084bc <__ratio>
 8007300:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007304:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730c:	d867      	bhi.n	80073de <_strtod_l+0xa8e>
 800730e:	f1ba 0f00 	cmp.w	sl, #0
 8007312:	d044      	beq.n	800739e <_strtod_l+0xa4e>
 8007314:	4b75      	ldr	r3, [pc, #468]	; (80074ec <_strtod_l+0xb9c>)
 8007316:	2200      	movs	r2, #0
 8007318:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800731c:	4971      	ldr	r1, [pc, #452]	; (80074e4 <_strtod_l+0xb94>)
 800731e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80074f8 <_strtod_l+0xba8>
 8007322:	ea0b 0001 	and.w	r0, fp, r1
 8007326:	4560      	cmp	r0, ip
 8007328:	900d      	str	r0, [sp, #52]	; 0x34
 800732a:	f040 808b 	bne.w	8007444 <_strtod_l+0xaf4>
 800732e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007332:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007336:	ec49 8b10 	vmov	d0, r8, r9
 800733a:	ec43 2b1c 	vmov	d12, r2, r3
 800733e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007342:	f000 ffe3 	bl	800830c <__ulp>
 8007346:	ec49 8b1d 	vmov	d13, r8, r9
 800734a:	eeac db00 	vfma.f64	d13, d12, d0
 800734e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007354:	4963      	ldr	r1, [pc, #396]	; (80074e4 <_strtod_l+0xb94>)
 8007356:	4a66      	ldr	r2, [pc, #408]	; (80074f0 <_strtod_l+0xba0>)
 8007358:	4019      	ands	r1, r3
 800735a:	4291      	cmp	r1, r2
 800735c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007360:	d947      	bls.n	80073f2 <_strtod_l+0xaa2>
 8007362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007364:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007368:	4293      	cmp	r3, r2
 800736a:	d103      	bne.n	8007374 <_strtod_l+0xa24>
 800736c:	9b08      	ldr	r3, [sp, #32]
 800736e:	3301      	adds	r3, #1
 8007370:	f43f ad3a 	beq.w	8006de8 <_strtod_l+0x498>
 8007374:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80074e8 <_strtod_l+0xb98>
 8007378:	f04f 38ff 	mov.w	r8, #4294967295
 800737c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fc98 	bl	8007cb4 <_Bfree>
 8007384:	4639      	mov	r1, r7
 8007386:	4620      	mov	r0, r4
 8007388:	f000 fc94 	bl	8007cb4 <_Bfree>
 800738c:	4631      	mov	r1, r6
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fc90 	bl	8007cb4 <_Bfree>
 8007394:	4629      	mov	r1, r5
 8007396:	4620      	mov	r0, r4
 8007398:	f000 fc8c 	bl	8007cb4 <_Bfree>
 800739c:	e60f      	b.n	8006fbe <_strtod_l+0x66e>
 800739e:	f1b8 0f00 	cmp.w	r8, #0
 80073a2:	d112      	bne.n	80073ca <_strtod_l+0xa7a>
 80073a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073a8:	b9b3      	cbnz	r3, 80073d8 <_strtod_l+0xa88>
 80073aa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80073ae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80073b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80073ba:	d401      	bmi.n	80073c0 <_strtod_l+0xa70>
 80073bc:	ee20 8b08 	vmul.f64	d8, d0, d8
 80073c0:	eeb1 7b48 	vneg.f64	d7, d8
 80073c4:	ec53 2b17 	vmov	r2, r3, d7
 80073c8:	e7a8      	b.n	800731c <_strtod_l+0x9cc>
 80073ca:	f1b8 0f01 	cmp.w	r8, #1
 80073ce:	d103      	bne.n	80073d8 <_strtod_l+0xa88>
 80073d0:	f1b9 0f00 	cmp.w	r9, #0
 80073d4:	f43f ad7d 	beq.w	8006ed2 <_strtod_l+0x582>
 80073d8:	4b46      	ldr	r3, [pc, #280]	; (80074f4 <_strtod_l+0xba4>)
 80073da:	2200      	movs	r2, #0
 80073dc:	e79c      	b.n	8007318 <_strtod_l+0x9c8>
 80073de:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80073e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80073e6:	f1ba 0f00 	cmp.w	sl, #0
 80073ea:	d0e9      	beq.n	80073c0 <_strtod_l+0xa70>
 80073ec:	ec53 2b18 	vmov	r2, r3, d8
 80073f0:	e794      	b.n	800731c <_strtod_l+0x9cc>
 80073f2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1bf      	bne.n	800737c <_strtod_l+0xa2c>
 80073fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007402:	0d1b      	lsrs	r3, r3, #20
 8007404:	051b      	lsls	r3, r3, #20
 8007406:	429a      	cmp	r2, r3
 8007408:	d1b8      	bne.n	800737c <_strtod_l+0xa2c>
 800740a:	ec51 0b18 	vmov	r0, r1, d8
 800740e:	f7f9 f943 	bl	8000698 <__aeabi_d2lz>
 8007412:	f7f9 f8fb 	bl	800060c <__aeabi_l2d>
 8007416:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800741a:	ec41 0b17 	vmov	d7, r0, r1
 800741e:	ea43 0308 	orr.w	r3, r3, r8
 8007422:	ea53 030a 	orrs.w	r3, r3, sl
 8007426:	ee38 8b47 	vsub.f64	d8, d8, d7
 800742a:	d03e      	beq.n	80074aa <_strtod_l+0xb5a>
 800742c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	f53f ace2 	bmi.w	8006dfc <_strtod_l+0x4ac>
 8007438:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800743c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007440:	dd9c      	ble.n	800737c <_strtod_l+0xa2c>
 8007442:	e4db      	b.n	8006dfc <_strtod_l+0x4ac>
 8007444:	9904      	ldr	r1, [sp, #16]
 8007446:	b301      	cbz	r1, 800748a <_strtod_l+0xb3a>
 8007448:	990d      	ldr	r1, [sp, #52]	; 0x34
 800744a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800744e:	d81c      	bhi.n	800748a <_strtod_l+0xb3a>
 8007450:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80074d8 <_strtod_l+0xb88>
 8007454:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745c:	d811      	bhi.n	8007482 <_strtod_l+0xb32>
 800745e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007462:	ee18 3a10 	vmov	r3, s16
 8007466:	2b01      	cmp	r3, #1
 8007468:	bf38      	it	cc
 800746a:	2301      	movcc	r3, #1
 800746c:	ee08 3a10 	vmov	s16, r3
 8007470:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007474:	f1ba 0f00 	cmp.w	sl, #0
 8007478:	d114      	bne.n	80074a4 <_strtod_l+0xb54>
 800747a:	eeb1 7b48 	vneg.f64	d7, d8
 800747e:	ec53 2b17 	vmov	r2, r3, d7
 8007482:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007484:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007488:	1a0b      	subs	r3, r1, r0
 800748a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800748e:	ec43 2b1c 	vmov	d12, r2, r3
 8007492:	f000 ff3b 	bl	800830c <__ulp>
 8007496:	ed9d 7b08 	vldr	d7, [sp, #32]
 800749a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800749e:	ec59 8b17 	vmov	r8, r9, d7
 80074a2:	e7a8      	b.n	80073f6 <_strtod_l+0xaa6>
 80074a4:	ec53 2b18 	vmov	r2, r3, d8
 80074a8:	e7eb      	b.n	8007482 <_strtod_l+0xb32>
 80074aa:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	f57f af63 	bpl.w	800737c <_strtod_l+0xa2c>
 80074b6:	e4a1      	b.n	8006dfc <_strtod_l+0x4ac>
 80074b8:	2300      	movs	r3, #0
 80074ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80074bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	f7ff ba8d 	b.w	80069e0 <_strtod_l+0x90>
 80074c6:	2a65      	cmp	r2, #101	; 0x65
 80074c8:	f43f ab89 	beq.w	8006bde <_strtod_l+0x28e>
 80074cc:	2a45      	cmp	r2, #69	; 0x45
 80074ce:	f43f ab86 	beq.w	8006bde <_strtod_l+0x28e>
 80074d2:	2101      	movs	r1, #1
 80074d4:	f7ff bbbe 	b.w	8006c54 <_strtod_l+0x304>
 80074d8:	ffc00000 	.word	0xffc00000
 80074dc:	41dfffff 	.word	0x41dfffff
 80074e0:	000fffff 	.word	0x000fffff
 80074e4:	7ff00000 	.word	0x7ff00000
 80074e8:	7fefffff 	.word	0x7fefffff
 80074ec:	3ff00000 	.word	0x3ff00000
 80074f0:	7c9fffff 	.word	0x7c9fffff
 80074f4:	bff00000 	.word	0xbff00000
 80074f8:	7fe00000 	.word	0x7fe00000

080074fc <strtod>:
 80074fc:	460a      	mov	r2, r1
 80074fe:	4601      	mov	r1, r0
 8007500:	4802      	ldr	r0, [pc, #8]	; (800750c <strtod+0x10>)
 8007502:	4b03      	ldr	r3, [pc, #12]	; (8007510 <strtod+0x14>)
 8007504:	6800      	ldr	r0, [r0, #0]
 8007506:	f7ff ba23 	b.w	8006950 <_strtod_l>
 800750a:	bf00      	nop
 800750c:	2000000c 	.word	0x2000000c
 8007510:	20000074 	.word	0x20000074

08007514 <rshift>:
 8007514:	6903      	ldr	r3, [r0, #16]
 8007516:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800751a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800751e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007522:	f100 0414 	add.w	r4, r0, #20
 8007526:	dd45      	ble.n	80075b4 <rshift+0xa0>
 8007528:	f011 011f 	ands.w	r1, r1, #31
 800752c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007530:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007534:	d10c      	bne.n	8007550 <rshift+0x3c>
 8007536:	f100 0710 	add.w	r7, r0, #16
 800753a:	4629      	mov	r1, r5
 800753c:	42b1      	cmp	r1, r6
 800753e:	d334      	bcc.n	80075aa <rshift+0x96>
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	1eea      	subs	r2, r5, #3
 8007546:	4296      	cmp	r6, r2
 8007548:	bf38      	it	cc
 800754a:	2300      	movcc	r3, #0
 800754c:	4423      	add	r3, r4
 800754e:	e015      	b.n	800757c <rshift+0x68>
 8007550:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007554:	f1c1 0820 	rsb	r8, r1, #32
 8007558:	40cf      	lsrs	r7, r1
 800755a:	f105 0e04 	add.w	lr, r5, #4
 800755e:	46a1      	mov	r9, r4
 8007560:	4576      	cmp	r6, lr
 8007562:	46f4      	mov	ip, lr
 8007564:	d815      	bhi.n	8007592 <rshift+0x7e>
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	009a      	lsls	r2, r3, #2
 800756a:	3a04      	subs	r2, #4
 800756c:	3501      	adds	r5, #1
 800756e:	42ae      	cmp	r6, r5
 8007570:	bf38      	it	cc
 8007572:	2200      	movcc	r2, #0
 8007574:	18a3      	adds	r3, r4, r2
 8007576:	50a7      	str	r7, [r4, r2]
 8007578:	b107      	cbz	r7, 800757c <rshift+0x68>
 800757a:	3304      	adds	r3, #4
 800757c:	1b1a      	subs	r2, r3, r4
 800757e:	42a3      	cmp	r3, r4
 8007580:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007584:	bf08      	it	eq
 8007586:	2300      	moveq	r3, #0
 8007588:	6102      	str	r2, [r0, #16]
 800758a:	bf08      	it	eq
 800758c:	6143      	streq	r3, [r0, #20]
 800758e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007592:	f8dc c000 	ldr.w	ip, [ip]
 8007596:	fa0c fc08 	lsl.w	ip, ip, r8
 800759a:	ea4c 0707 	orr.w	r7, ip, r7
 800759e:	f849 7b04 	str.w	r7, [r9], #4
 80075a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075a6:	40cf      	lsrs	r7, r1
 80075a8:	e7da      	b.n	8007560 <rshift+0x4c>
 80075aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80075ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80075b2:	e7c3      	b.n	800753c <rshift+0x28>
 80075b4:	4623      	mov	r3, r4
 80075b6:	e7e1      	b.n	800757c <rshift+0x68>

080075b8 <__hexdig_fun>:
 80075b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075bc:	2b09      	cmp	r3, #9
 80075be:	d802      	bhi.n	80075c6 <__hexdig_fun+0xe>
 80075c0:	3820      	subs	r0, #32
 80075c2:	b2c0      	uxtb	r0, r0
 80075c4:	4770      	bx	lr
 80075c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d801      	bhi.n	80075d2 <__hexdig_fun+0x1a>
 80075ce:	3847      	subs	r0, #71	; 0x47
 80075d0:	e7f7      	b.n	80075c2 <__hexdig_fun+0xa>
 80075d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d801      	bhi.n	80075de <__hexdig_fun+0x26>
 80075da:	3827      	subs	r0, #39	; 0x27
 80075dc:	e7f1      	b.n	80075c2 <__hexdig_fun+0xa>
 80075de:	2000      	movs	r0, #0
 80075e0:	4770      	bx	lr
	...

080075e4 <__gethex>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	ed2d 8b02 	vpush	{d8}
 80075ec:	b089      	sub	sp, #36	; 0x24
 80075ee:	ee08 0a10 	vmov	s16, r0
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	4bbc      	ldr	r3, [pc, #752]	; (80078e8 <__gethex+0x304>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	4618      	mov	r0, r3
 80075fc:	468b      	mov	fp, r1
 80075fe:	4690      	mov	r8, r2
 8007600:	f7f8 fe1e 	bl	8000240 <strlen>
 8007604:	9b01      	ldr	r3, [sp, #4]
 8007606:	f8db 2000 	ldr.w	r2, [fp]
 800760a:	4403      	add	r3, r0
 800760c:	4682      	mov	sl, r0
 800760e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	1c93      	adds	r3, r2, #2
 8007616:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800761a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800761e:	32fe      	adds	r2, #254	; 0xfe
 8007620:	18d1      	adds	r1, r2, r3
 8007622:	461f      	mov	r7, r3
 8007624:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007628:	9100      	str	r1, [sp, #0]
 800762a:	2830      	cmp	r0, #48	; 0x30
 800762c:	d0f8      	beq.n	8007620 <__gethex+0x3c>
 800762e:	f7ff ffc3 	bl	80075b8 <__hexdig_fun>
 8007632:	4604      	mov	r4, r0
 8007634:	2800      	cmp	r0, #0
 8007636:	d13a      	bne.n	80076ae <__gethex+0xca>
 8007638:	9901      	ldr	r1, [sp, #4]
 800763a:	4652      	mov	r2, sl
 800763c:	4638      	mov	r0, r7
 800763e:	f001 f837 	bl	80086b0 <strncmp>
 8007642:	4605      	mov	r5, r0
 8007644:	2800      	cmp	r0, #0
 8007646:	d168      	bne.n	800771a <__gethex+0x136>
 8007648:	f817 000a 	ldrb.w	r0, [r7, sl]
 800764c:	eb07 060a 	add.w	r6, r7, sl
 8007650:	f7ff ffb2 	bl	80075b8 <__hexdig_fun>
 8007654:	2800      	cmp	r0, #0
 8007656:	d062      	beq.n	800771e <__gethex+0x13a>
 8007658:	4633      	mov	r3, r6
 800765a:	7818      	ldrb	r0, [r3, #0]
 800765c:	2830      	cmp	r0, #48	; 0x30
 800765e:	461f      	mov	r7, r3
 8007660:	f103 0301 	add.w	r3, r3, #1
 8007664:	d0f9      	beq.n	800765a <__gethex+0x76>
 8007666:	f7ff ffa7 	bl	80075b8 <__hexdig_fun>
 800766a:	2301      	movs	r3, #1
 800766c:	fab0 f480 	clz	r4, r0
 8007670:	0964      	lsrs	r4, r4, #5
 8007672:	4635      	mov	r5, r6
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	463a      	mov	r2, r7
 8007678:	4616      	mov	r6, r2
 800767a:	3201      	adds	r2, #1
 800767c:	7830      	ldrb	r0, [r6, #0]
 800767e:	f7ff ff9b 	bl	80075b8 <__hexdig_fun>
 8007682:	2800      	cmp	r0, #0
 8007684:	d1f8      	bne.n	8007678 <__gethex+0x94>
 8007686:	9901      	ldr	r1, [sp, #4]
 8007688:	4652      	mov	r2, sl
 800768a:	4630      	mov	r0, r6
 800768c:	f001 f810 	bl	80086b0 <strncmp>
 8007690:	b980      	cbnz	r0, 80076b4 <__gethex+0xd0>
 8007692:	b94d      	cbnz	r5, 80076a8 <__gethex+0xc4>
 8007694:	eb06 050a 	add.w	r5, r6, sl
 8007698:	462a      	mov	r2, r5
 800769a:	4616      	mov	r6, r2
 800769c:	3201      	adds	r2, #1
 800769e:	7830      	ldrb	r0, [r6, #0]
 80076a0:	f7ff ff8a 	bl	80075b8 <__hexdig_fun>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d1f8      	bne.n	800769a <__gethex+0xb6>
 80076a8:	1bad      	subs	r5, r5, r6
 80076aa:	00ad      	lsls	r5, r5, #2
 80076ac:	e004      	b.n	80076b8 <__gethex+0xd4>
 80076ae:	2400      	movs	r4, #0
 80076b0:	4625      	mov	r5, r4
 80076b2:	e7e0      	b.n	8007676 <__gethex+0x92>
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	d1f7      	bne.n	80076a8 <__gethex+0xc4>
 80076b8:	7833      	ldrb	r3, [r6, #0]
 80076ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076be:	2b50      	cmp	r3, #80	; 0x50
 80076c0:	d13b      	bne.n	800773a <__gethex+0x156>
 80076c2:	7873      	ldrb	r3, [r6, #1]
 80076c4:	2b2b      	cmp	r3, #43	; 0x2b
 80076c6:	d02c      	beq.n	8007722 <__gethex+0x13e>
 80076c8:	2b2d      	cmp	r3, #45	; 0x2d
 80076ca:	d02e      	beq.n	800772a <__gethex+0x146>
 80076cc:	1c71      	adds	r1, r6, #1
 80076ce:	f04f 0900 	mov.w	r9, #0
 80076d2:	7808      	ldrb	r0, [r1, #0]
 80076d4:	f7ff ff70 	bl	80075b8 <__hexdig_fun>
 80076d8:	1e43      	subs	r3, r0, #1
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b18      	cmp	r3, #24
 80076de:	d82c      	bhi.n	800773a <__gethex+0x156>
 80076e0:	f1a0 0210 	sub.w	r2, r0, #16
 80076e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076e8:	f7ff ff66 	bl	80075b8 <__hexdig_fun>
 80076ec:	1e43      	subs	r3, r0, #1
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b18      	cmp	r3, #24
 80076f2:	d91d      	bls.n	8007730 <__gethex+0x14c>
 80076f4:	f1b9 0f00 	cmp.w	r9, #0
 80076f8:	d000      	beq.n	80076fc <__gethex+0x118>
 80076fa:	4252      	negs	r2, r2
 80076fc:	4415      	add	r5, r2
 80076fe:	f8cb 1000 	str.w	r1, [fp]
 8007702:	b1e4      	cbz	r4, 800773e <__gethex+0x15a>
 8007704:	9b00      	ldr	r3, [sp, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	bf14      	ite	ne
 800770a:	2700      	movne	r7, #0
 800770c:	2706      	moveq	r7, #6
 800770e:	4638      	mov	r0, r7
 8007710:	b009      	add	sp, #36	; 0x24
 8007712:	ecbd 8b02 	vpop	{d8}
 8007716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771a:	463e      	mov	r6, r7
 800771c:	4625      	mov	r5, r4
 800771e:	2401      	movs	r4, #1
 8007720:	e7ca      	b.n	80076b8 <__gethex+0xd4>
 8007722:	f04f 0900 	mov.w	r9, #0
 8007726:	1cb1      	adds	r1, r6, #2
 8007728:	e7d3      	b.n	80076d2 <__gethex+0xee>
 800772a:	f04f 0901 	mov.w	r9, #1
 800772e:	e7fa      	b.n	8007726 <__gethex+0x142>
 8007730:	230a      	movs	r3, #10
 8007732:	fb03 0202 	mla	r2, r3, r2, r0
 8007736:	3a10      	subs	r2, #16
 8007738:	e7d4      	b.n	80076e4 <__gethex+0x100>
 800773a:	4631      	mov	r1, r6
 800773c:	e7df      	b.n	80076fe <__gethex+0x11a>
 800773e:	1bf3      	subs	r3, r6, r7
 8007740:	3b01      	subs	r3, #1
 8007742:	4621      	mov	r1, r4
 8007744:	2b07      	cmp	r3, #7
 8007746:	dc0b      	bgt.n	8007760 <__gethex+0x17c>
 8007748:	ee18 0a10 	vmov	r0, s16
 800774c:	f000 fa72 	bl	8007c34 <_Balloc>
 8007750:	4604      	mov	r4, r0
 8007752:	b940      	cbnz	r0, 8007766 <__gethex+0x182>
 8007754:	4b65      	ldr	r3, [pc, #404]	; (80078ec <__gethex+0x308>)
 8007756:	4602      	mov	r2, r0
 8007758:	21de      	movs	r1, #222	; 0xde
 800775a:	4865      	ldr	r0, [pc, #404]	; (80078f0 <__gethex+0x30c>)
 800775c:	f000 ffc8 	bl	80086f0 <__assert_func>
 8007760:	3101      	adds	r1, #1
 8007762:	105b      	asrs	r3, r3, #1
 8007764:	e7ee      	b.n	8007744 <__gethex+0x160>
 8007766:	f100 0914 	add.w	r9, r0, #20
 800776a:	f04f 0b00 	mov.w	fp, #0
 800776e:	f1ca 0301 	rsb	r3, sl, #1
 8007772:	f8cd 9008 	str.w	r9, [sp, #8]
 8007776:	f8cd b000 	str.w	fp, [sp]
 800777a:	9306      	str	r3, [sp, #24]
 800777c:	42b7      	cmp	r7, r6
 800777e:	d340      	bcc.n	8007802 <__gethex+0x21e>
 8007780:	9802      	ldr	r0, [sp, #8]
 8007782:	9b00      	ldr	r3, [sp, #0]
 8007784:	f840 3b04 	str.w	r3, [r0], #4
 8007788:	eba0 0009 	sub.w	r0, r0, r9
 800778c:	1080      	asrs	r0, r0, #2
 800778e:	0146      	lsls	r6, r0, #5
 8007790:	6120      	str	r0, [r4, #16]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fb44 	bl	8007e20 <__hi0bits>
 8007798:	1a30      	subs	r0, r6, r0
 800779a:	f8d8 6000 	ldr.w	r6, [r8]
 800779e:	42b0      	cmp	r0, r6
 80077a0:	dd63      	ble.n	800786a <__gethex+0x286>
 80077a2:	1b87      	subs	r7, r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fedf 	bl	800856a <__any_on>
 80077ac:	4682      	mov	sl, r0
 80077ae:	b1a8      	cbz	r0, 80077dc <__gethex+0x1f8>
 80077b0:	1e7b      	subs	r3, r7, #1
 80077b2:	1159      	asrs	r1, r3, #5
 80077b4:	f003 021f 	and.w	r2, r3, #31
 80077b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80077bc:	f04f 0a01 	mov.w	sl, #1
 80077c0:	fa0a f202 	lsl.w	r2, sl, r2
 80077c4:	420a      	tst	r2, r1
 80077c6:	d009      	beq.n	80077dc <__gethex+0x1f8>
 80077c8:	4553      	cmp	r3, sl
 80077ca:	dd05      	ble.n	80077d8 <__gethex+0x1f4>
 80077cc:	1eb9      	subs	r1, r7, #2
 80077ce:	4620      	mov	r0, r4
 80077d0:	f000 fecb 	bl	800856a <__any_on>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d145      	bne.n	8007864 <__gethex+0x280>
 80077d8:	f04f 0a02 	mov.w	sl, #2
 80077dc:	4639      	mov	r1, r7
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff fe98 	bl	8007514 <rshift>
 80077e4:	443d      	add	r5, r7
 80077e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077ea:	42ab      	cmp	r3, r5
 80077ec:	da4c      	bge.n	8007888 <__gethex+0x2a4>
 80077ee:	ee18 0a10 	vmov	r0, s16
 80077f2:	4621      	mov	r1, r4
 80077f4:	f000 fa5e 	bl	8007cb4 <_Bfree>
 80077f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077fa:	2300      	movs	r3, #0
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	27a3      	movs	r7, #163	; 0xa3
 8007800:	e785      	b.n	800770e <__gethex+0x12a>
 8007802:	1e73      	subs	r3, r6, #1
 8007804:	9a05      	ldr	r2, [sp, #20]
 8007806:	9303      	str	r3, [sp, #12]
 8007808:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800780c:	4293      	cmp	r3, r2
 800780e:	d019      	beq.n	8007844 <__gethex+0x260>
 8007810:	f1bb 0f20 	cmp.w	fp, #32
 8007814:	d107      	bne.n	8007826 <__gethex+0x242>
 8007816:	9b02      	ldr	r3, [sp, #8]
 8007818:	9a00      	ldr	r2, [sp, #0]
 800781a:	f843 2b04 	str.w	r2, [r3], #4
 800781e:	9302      	str	r3, [sp, #8]
 8007820:	2300      	movs	r3, #0
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	469b      	mov	fp, r3
 8007826:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800782a:	f7ff fec5 	bl	80075b8 <__hexdig_fun>
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	f000 000f 	and.w	r0, r0, #15
 8007834:	fa00 f00b 	lsl.w	r0, r0, fp
 8007838:	4303      	orrs	r3, r0
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	f10b 0b04 	add.w	fp, fp, #4
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	e00d      	b.n	8007860 <__gethex+0x27c>
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	9a06      	ldr	r2, [sp, #24]
 8007848:	4413      	add	r3, r2
 800784a:	42bb      	cmp	r3, r7
 800784c:	d3e0      	bcc.n	8007810 <__gethex+0x22c>
 800784e:	4618      	mov	r0, r3
 8007850:	9901      	ldr	r1, [sp, #4]
 8007852:	9307      	str	r3, [sp, #28]
 8007854:	4652      	mov	r2, sl
 8007856:	f000 ff2b 	bl	80086b0 <strncmp>
 800785a:	9b07      	ldr	r3, [sp, #28]
 800785c:	2800      	cmp	r0, #0
 800785e:	d1d7      	bne.n	8007810 <__gethex+0x22c>
 8007860:	461e      	mov	r6, r3
 8007862:	e78b      	b.n	800777c <__gethex+0x198>
 8007864:	f04f 0a03 	mov.w	sl, #3
 8007868:	e7b8      	b.n	80077dc <__gethex+0x1f8>
 800786a:	da0a      	bge.n	8007882 <__gethex+0x29e>
 800786c:	1a37      	subs	r7, r6, r0
 800786e:	4621      	mov	r1, r4
 8007870:	ee18 0a10 	vmov	r0, s16
 8007874:	463a      	mov	r2, r7
 8007876:	f000 fc39 	bl	80080ec <__lshift>
 800787a:	1bed      	subs	r5, r5, r7
 800787c:	4604      	mov	r4, r0
 800787e:	f100 0914 	add.w	r9, r0, #20
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	e7ae      	b.n	80077e6 <__gethex+0x202>
 8007888:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800788c:	42a8      	cmp	r0, r5
 800788e:	dd72      	ble.n	8007976 <__gethex+0x392>
 8007890:	1b45      	subs	r5, r0, r5
 8007892:	42ae      	cmp	r6, r5
 8007894:	dc36      	bgt.n	8007904 <__gethex+0x320>
 8007896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d02a      	beq.n	80078f4 <__gethex+0x310>
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d02c      	beq.n	80078fc <__gethex+0x318>
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d115      	bne.n	80078d2 <__gethex+0x2ee>
 80078a6:	42ae      	cmp	r6, r5
 80078a8:	d113      	bne.n	80078d2 <__gethex+0x2ee>
 80078aa:	2e01      	cmp	r6, #1
 80078ac:	d10b      	bne.n	80078c6 <__gethex+0x2e2>
 80078ae:	9a04      	ldr	r2, [sp, #16]
 80078b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	2301      	movs	r3, #1
 80078b8:	6123      	str	r3, [r4, #16]
 80078ba:	f8c9 3000 	str.w	r3, [r9]
 80078be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078c0:	2762      	movs	r7, #98	; 0x62
 80078c2:	601c      	str	r4, [r3, #0]
 80078c4:	e723      	b.n	800770e <__gethex+0x12a>
 80078c6:	1e71      	subs	r1, r6, #1
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fe4e 	bl	800856a <__any_on>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d1ed      	bne.n	80078ae <__gethex+0x2ca>
 80078d2:	ee18 0a10 	vmov	r0, s16
 80078d6:	4621      	mov	r1, r4
 80078d8:	f000 f9ec 	bl	8007cb4 <_Bfree>
 80078dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078de:	2300      	movs	r3, #0
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	2750      	movs	r7, #80	; 0x50
 80078e4:	e713      	b.n	800770e <__gethex+0x12a>
 80078e6:	bf00      	nop
 80078e8:	080096dc 	.word	0x080096dc
 80078ec:	08009660 	.word	0x08009660
 80078f0:	08009671 	.word	0x08009671
 80078f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1eb      	bne.n	80078d2 <__gethex+0x2ee>
 80078fa:	e7d8      	b.n	80078ae <__gethex+0x2ca>
 80078fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1d5      	bne.n	80078ae <__gethex+0x2ca>
 8007902:	e7e6      	b.n	80078d2 <__gethex+0x2ee>
 8007904:	1e6f      	subs	r7, r5, #1
 8007906:	f1ba 0f00 	cmp.w	sl, #0
 800790a:	d131      	bne.n	8007970 <__gethex+0x38c>
 800790c:	b127      	cbz	r7, 8007918 <__gethex+0x334>
 800790e:	4639      	mov	r1, r7
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fe2a 	bl	800856a <__any_on>
 8007916:	4682      	mov	sl, r0
 8007918:	117b      	asrs	r3, r7, #5
 800791a:	2101      	movs	r1, #1
 800791c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007920:	f007 071f 	and.w	r7, r7, #31
 8007924:	fa01 f707 	lsl.w	r7, r1, r7
 8007928:	421f      	tst	r7, r3
 800792a:	4629      	mov	r1, r5
 800792c:	4620      	mov	r0, r4
 800792e:	bf18      	it	ne
 8007930:	f04a 0a02 	orrne.w	sl, sl, #2
 8007934:	1b76      	subs	r6, r6, r5
 8007936:	f7ff fded 	bl	8007514 <rshift>
 800793a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800793e:	2702      	movs	r7, #2
 8007940:	f1ba 0f00 	cmp.w	sl, #0
 8007944:	d048      	beq.n	80079d8 <__gethex+0x3f4>
 8007946:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d015      	beq.n	800797a <__gethex+0x396>
 800794e:	2b03      	cmp	r3, #3
 8007950:	d017      	beq.n	8007982 <__gethex+0x39e>
 8007952:	2b01      	cmp	r3, #1
 8007954:	d109      	bne.n	800796a <__gethex+0x386>
 8007956:	f01a 0f02 	tst.w	sl, #2
 800795a:	d006      	beq.n	800796a <__gethex+0x386>
 800795c:	f8d9 0000 	ldr.w	r0, [r9]
 8007960:	ea4a 0a00 	orr.w	sl, sl, r0
 8007964:	f01a 0f01 	tst.w	sl, #1
 8007968:	d10e      	bne.n	8007988 <__gethex+0x3a4>
 800796a:	f047 0710 	orr.w	r7, r7, #16
 800796e:	e033      	b.n	80079d8 <__gethex+0x3f4>
 8007970:	f04f 0a01 	mov.w	sl, #1
 8007974:	e7d0      	b.n	8007918 <__gethex+0x334>
 8007976:	2701      	movs	r7, #1
 8007978:	e7e2      	b.n	8007940 <__gethex+0x35c>
 800797a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800797c:	f1c3 0301 	rsb	r3, r3, #1
 8007980:	9315      	str	r3, [sp, #84]	; 0x54
 8007982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f0      	beq.n	800796a <__gethex+0x386>
 8007988:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800798c:	f104 0314 	add.w	r3, r4, #20
 8007990:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007994:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007998:	f04f 0c00 	mov.w	ip, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80079a6:	d01c      	beq.n	80079e2 <__gethex+0x3fe>
 80079a8:	3201      	adds	r2, #1
 80079aa:	6002      	str	r2, [r0, #0]
 80079ac:	2f02      	cmp	r7, #2
 80079ae:	f104 0314 	add.w	r3, r4, #20
 80079b2:	d13f      	bne.n	8007a34 <__gethex+0x450>
 80079b4:	f8d8 2000 	ldr.w	r2, [r8]
 80079b8:	3a01      	subs	r2, #1
 80079ba:	42b2      	cmp	r2, r6
 80079bc:	d10a      	bne.n	80079d4 <__gethex+0x3f0>
 80079be:	1171      	asrs	r1, r6, #5
 80079c0:	2201      	movs	r2, #1
 80079c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079c6:	f006 061f 	and.w	r6, r6, #31
 80079ca:	fa02 f606 	lsl.w	r6, r2, r6
 80079ce:	421e      	tst	r6, r3
 80079d0:	bf18      	it	ne
 80079d2:	4617      	movne	r7, r2
 80079d4:	f047 0720 	orr.w	r7, r7, #32
 80079d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079da:	601c      	str	r4, [r3, #0]
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	601d      	str	r5, [r3, #0]
 80079e0:	e695      	b.n	800770e <__gethex+0x12a>
 80079e2:	4299      	cmp	r1, r3
 80079e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80079e8:	d8d8      	bhi.n	800799c <__gethex+0x3b8>
 80079ea:	68a3      	ldr	r3, [r4, #8]
 80079ec:	459b      	cmp	fp, r3
 80079ee:	db19      	blt.n	8007a24 <__gethex+0x440>
 80079f0:	6861      	ldr	r1, [r4, #4]
 80079f2:	ee18 0a10 	vmov	r0, s16
 80079f6:	3101      	adds	r1, #1
 80079f8:	f000 f91c 	bl	8007c34 <_Balloc>
 80079fc:	4681      	mov	r9, r0
 80079fe:	b918      	cbnz	r0, 8007a08 <__gethex+0x424>
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <__gethex+0x488>)
 8007a02:	4602      	mov	r2, r0
 8007a04:	2184      	movs	r1, #132	; 0x84
 8007a06:	e6a8      	b.n	800775a <__gethex+0x176>
 8007a08:	6922      	ldr	r2, [r4, #16]
 8007a0a:	3202      	adds	r2, #2
 8007a0c:	f104 010c 	add.w	r1, r4, #12
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	300c      	adds	r0, #12
 8007a14:	f000 f900 	bl	8007c18 <memcpy>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	ee18 0a10 	vmov	r0, s16
 8007a1e:	f000 f949 	bl	8007cb4 <_Bfree>
 8007a22:	464c      	mov	r4, r9
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a2c:	6122      	str	r2, [r4, #16]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	615a      	str	r2, [r3, #20]
 8007a32:	e7bb      	b.n	80079ac <__gethex+0x3c8>
 8007a34:	6922      	ldr	r2, [r4, #16]
 8007a36:	455a      	cmp	r2, fp
 8007a38:	dd0b      	ble.n	8007a52 <__gethex+0x46e>
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f7ff fd69 	bl	8007514 <rshift>
 8007a42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a46:	3501      	adds	r5, #1
 8007a48:	42ab      	cmp	r3, r5
 8007a4a:	f6ff aed0 	blt.w	80077ee <__gethex+0x20a>
 8007a4e:	2701      	movs	r7, #1
 8007a50:	e7c0      	b.n	80079d4 <__gethex+0x3f0>
 8007a52:	f016 061f 	ands.w	r6, r6, #31
 8007a56:	d0fa      	beq.n	8007a4e <__gethex+0x46a>
 8007a58:	449a      	add	sl, r3
 8007a5a:	f1c6 0620 	rsb	r6, r6, #32
 8007a5e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007a62:	f000 f9dd 	bl	8007e20 <__hi0bits>
 8007a66:	42b0      	cmp	r0, r6
 8007a68:	dbe7      	blt.n	8007a3a <__gethex+0x456>
 8007a6a:	e7f0      	b.n	8007a4e <__gethex+0x46a>
 8007a6c:	08009660 	.word	0x08009660

08007a70 <L_shift>:
 8007a70:	f1c2 0208 	rsb	r2, r2, #8
 8007a74:	0092      	lsls	r2, r2, #2
 8007a76:	b570      	push	{r4, r5, r6, lr}
 8007a78:	f1c2 0620 	rsb	r6, r2, #32
 8007a7c:	6843      	ldr	r3, [r0, #4]
 8007a7e:	6804      	ldr	r4, [r0, #0]
 8007a80:	fa03 f506 	lsl.w	r5, r3, r6
 8007a84:	432c      	orrs	r4, r5
 8007a86:	40d3      	lsrs	r3, r2
 8007a88:	6004      	str	r4, [r0, #0]
 8007a8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a8e:	4288      	cmp	r0, r1
 8007a90:	d3f4      	bcc.n	8007a7c <L_shift+0xc>
 8007a92:	bd70      	pop	{r4, r5, r6, pc}

08007a94 <__match>:
 8007a94:	b530      	push	{r4, r5, lr}
 8007a96:	6803      	ldr	r3, [r0, #0]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9e:	b914      	cbnz	r4, 8007aa6 <__match+0x12>
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	bd30      	pop	{r4, r5, pc}
 8007aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007aae:	2d19      	cmp	r5, #25
 8007ab0:	bf98      	it	ls
 8007ab2:	3220      	addls	r2, #32
 8007ab4:	42a2      	cmp	r2, r4
 8007ab6:	d0f0      	beq.n	8007a9a <__match+0x6>
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7f3      	b.n	8007aa4 <__match+0x10>

08007abc <__hexnan>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	680b      	ldr	r3, [r1, #0]
 8007ac2:	6801      	ldr	r1, [r0, #0]
 8007ac4:	115e      	asrs	r6, r3, #5
 8007ac6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007aca:	f013 031f 	ands.w	r3, r3, #31
 8007ace:	b087      	sub	sp, #28
 8007ad0:	bf18      	it	ne
 8007ad2:	3604      	addne	r6, #4
 8007ad4:	2500      	movs	r5, #0
 8007ad6:	1f37      	subs	r7, r6, #4
 8007ad8:	4682      	mov	sl, r0
 8007ada:	4690      	mov	r8, r2
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ae2:	46b9      	mov	r9, r7
 8007ae4:	463c      	mov	r4, r7
 8007ae6:	9502      	str	r5, [sp, #8]
 8007ae8:	46ab      	mov	fp, r5
 8007aea:	784a      	ldrb	r2, [r1, #1]
 8007aec:	1c4b      	adds	r3, r1, #1
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	b342      	cbz	r2, 8007b44 <__hexnan+0x88>
 8007af2:	4610      	mov	r0, r2
 8007af4:	9105      	str	r1, [sp, #20]
 8007af6:	9204      	str	r2, [sp, #16]
 8007af8:	f7ff fd5e 	bl	80075b8 <__hexdig_fun>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d14f      	bne.n	8007ba0 <__hexnan+0xe4>
 8007b00:	9a04      	ldr	r2, [sp, #16]
 8007b02:	9905      	ldr	r1, [sp, #20]
 8007b04:	2a20      	cmp	r2, #32
 8007b06:	d818      	bhi.n	8007b3a <__hexnan+0x7e>
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	459b      	cmp	fp, r3
 8007b0c:	dd13      	ble.n	8007b36 <__hexnan+0x7a>
 8007b0e:	454c      	cmp	r4, r9
 8007b10:	d206      	bcs.n	8007b20 <__hexnan+0x64>
 8007b12:	2d07      	cmp	r5, #7
 8007b14:	dc04      	bgt.n	8007b20 <__hexnan+0x64>
 8007b16:	462a      	mov	r2, r5
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff ffa8 	bl	8007a70 <L_shift>
 8007b20:	4544      	cmp	r4, r8
 8007b22:	d950      	bls.n	8007bc6 <__hexnan+0x10a>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f1a4 0904 	sub.w	r9, r4, #4
 8007b2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b2e:	f8cd b008 	str.w	fp, [sp, #8]
 8007b32:	464c      	mov	r4, r9
 8007b34:	461d      	mov	r5, r3
 8007b36:	9903      	ldr	r1, [sp, #12]
 8007b38:	e7d7      	b.n	8007aea <__hexnan+0x2e>
 8007b3a:	2a29      	cmp	r2, #41	; 0x29
 8007b3c:	d156      	bne.n	8007bec <__hexnan+0x130>
 8007b3e:	3102      	adds	r1, #2
 8007b40:	f8ca 1000 	str.w	r1, [sl]
 8007b44:	f1bb 0f00 	cmp.w	fp, #0
 8007b48:	d050      	beq.n	8007bec <__hexnan+0x130>
 8007b4a:	454c      	cmp	r4, r9
 8007b4c:	d206      	bcs.n	8007b5c <__hexnan+0xa0>
 8007b4e:	2d07      	cmp	r5, #7
 8007b50:	dc04      	bgt.n	8007b5c <__hexnan+0xa0>
 8007b52:	462a      	mov	r2, r5
 8007b54:	4649      	mov	r1, r9
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7ff ff8a 	bl	8007a70 <L_shift>
 8007b5c:	4544      	cmp	r4, r8
 8007b5e:	d934      	bls.n	8007bca <__hexnan+0x10e>
 8007b60:	f1a8 0204 	sub.w	r2, r8, #4
 8007b64:	4623      	mov	r3, r4
 8007b66:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b6e:	429f      	cmp	r7, r3
 8007b70:	d2f9      	bcs.n	8007b66 <__hexnan+0xaa>
 8007b72:	1b3b      	subs	r3, r7, r4
 8007b74:	f023 0303 	bic.w	r3, r3, #3
 8007b78:	3304      	adds	r3, #4
 8007b7a:	3401      	adds	r4, #1
 8007b7c:	3e03      	subs	r6, #3
 8007b7e:	42b4      	cmp	r4, r6
 8007b80:	bf88      	it	hi
 8007b82:	2304      	movhi	r3, #4
 8007b84:	4443      	add	r3, r8
 8007b86:	2200      	movs	r2, #0
 8007b88:	f843 2b04 	str.w	r2, [r3], #4
 8007b8c:	429f      	cmp	r7, r3
 8007b8e:	d2fb      	bcs.n	8007b88 <__hexnan+0xcc>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	b91b      	cbnz	r3, 8007b9c <__hexnan+0xe0>
 8007b94:	4547      	cmp	r7, r8
 8007b96:	d127      	bne.n	8007be8 <__hexnan+0x12c>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	2005      	movs	r0, #5
 8007b9e:	e026      	b.n	8007bee <__hexnan+0x132>
 8007ba0:	3501      	adds	r5, #1
 8007ba2:	2d08      	cmp	r5, #8
 8007ba4:	f10b 0b01 	add.w	fp, fp, #1
 8007ba8:	dd06      	ble.n	8007bb8 <__hexnan+0xfc>
 8007baa:	4544      	cmp	r4, r8
 8007bac:	d9c3      	bls.n	8007b36 <__hexnan+0x7a>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bb4:	2501      	movs	r5, #1
 8007bb6:	3c04      	subs	r4, #4
 8007bb8:	6822      	ldr	r2, [r4, #0]
 8007bba:	f000 000f 	and.w	r0, r0, #15
 8007bbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	e7b7      	b.n	8007b36 <__hexnan+0x7a>
 8007bc6:	2508      	movs	r5, #8
 8007bc8:	e7b5      	b.n	8007b36 <__hexnan+0x7a>
 8007bca:	9b01      	ldr	r3, [sp, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0df      	beq.n	8007b90 <__hexnan+0xd4>
 8007bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd4:	f1c3 0320 	rsb	r3, r3, #32
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007be0:	401a      	ands	r2, r3
 8007be2:	f846 2c04 	str.w	r2, [r6, #-4]
 8007be6:	e7d3      	b.n	8007b90 <__hexnan+0xd4>
 8007be8:	3f04      	subs	r7, #4
 8007bea:	e7d1      	b.n	8007b90 <__hexnan+0xd4>
 8007bec:	2004      	movs	r0, #4
 8007bee:	b007      	add	sp, #28
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bf4 <__ascii_mbtowc>:
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	b901      	cbnz	r1, 8007bfa <__ascii_mbtowc+0x6>
 8007bf8:	a901      	add	r1, sp, #4
 8007bfa:	b142      	cbz	r2, 8007c0e <__ascii_mbtowc+0x1a>
 8007bfc:	b14b      	cbz	r3, 8007c12 <__ascii_mbtowc+0x1e>
 8007bfe:	7813      	ldrb	r3, [r2, #0]
 8007c00:	600b      	str	r3, [r1, #0]
 8007c02:	7812      	ldrb	r2, [r2, #0]
 8007c04:	1e10      	subs	r0, r2, #0
 8007c06:	bf18      	it	ne
 8007c08:	2001      	movne	r0, #1
 8007c0a:	b002      	add	sp, #8
 8007c0c:	4770      	bx	lr
 8007c0e:	4610      	mov	r0, r2
 8007c10:	e7fb      	b.n	8007c0a <__ascii_mbtowc+0x16>
 8007c12:	f06f 0001 	mvn.w	r0, #1
 8007c16:	e7f8      	b.n	8007c0a <__ascii_mbtowc+0x16>

08007c18 <memcpy>:
 8007c18:	440a      	add	r2, r1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c20:	d100      	bne.n	8007c24 <memcpy+0xc>
 8007c22:	4770      	bx	lr
 8007c24:	b510      	push	{r4, lr}
 8007c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d1f9      	bne.n	8007c26 <memcpy+0xe>
 8007c32:	bd10      	pop	{r4, pc}

08007c34 <_Balloc>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	b976      	cbnz	r6, 8007c5c <_Balloc+0x28>
 8007c3e:	2010      	movs	r0, #16
 8007c40:	f000 fd86 	bl	8008750 <malloc>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6260      	str	r0, [r4, #36]	; 0x24
 8007c48:	b920      	cbnz	r0, 8007c54 <_Balloc+0x20>
 8007c4a:	4b18      	ldr	r3, [pc, #96]	; (8007cac <_Balloc+0x78>)
 8007c4c:	4818      	ldr	r0, [pc, #96]	; (8007cb0 <_Balloc+0x7c>)
 8007c4e:	2166      	movs	r1, #102	; 0x66
 8007c50:	f000 fd4e 	bl	80086f0 <__assert_func>
 8007c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c58:	6006      	str	r6, [r0, #0]
 8007c5a:	60c6      	str	r6, [r0, #12]
 8007c5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c5e:	68f3      	ldr	r3, [r6, #12]
 8007c60:	b183      	cbz	r3, 8007c84 <_Balloc+0x50>
 8007c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c6a:	b9b8      	cbnz	r0, 8007c9c <_Balloc+0x68>
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c72:	1d72      	adds	r2, r6, #5
 8007c74:	0092      	lsls	r2, r2, #2
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 fc98 	bl	80085ac <_calloc_r>
 8007c7c:	b160      	cbz	r0, 8007c98 <_Balloc+0x64>
 8007c7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c82:	e00e      	b.n	8007ca2 <_Balloc+0x6e>
 8007c84:	2221      	movs	r2, #33	; 0x21
 8007c86:	2104      	movs	r1, #4
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fc8f 	bl	80085ac <_calloc_r>
 8007c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c90:	60f0      	str	r0, [r6, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <_Balloc+0x2e>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	6802      	ldr	r2, [r0, #0]
 8007c9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ca8:	e7f7      	b.n	8007c9a <_Balloc+0x66>
 8007caa:	bf00      	nop
 8007cac:	080096f0 	.word	0x080096f0
 8007cb0:	08009707 	.word	0x08009707

08007cb4 <_Bfree>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b976      	cbnz	r6, 8007cdc <_Bfree+0x28>
 8007cbe:	2010      	movs	r0, #16
 8007cc0:	f000 fd46 	bl	8008750 <malloc>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6268      	str	r0, [r5, #36]	; 0x24
 8007cc8:	b920      	cbnz	r0, 8007cd4 <_Bfree+0x20>
 8007cca:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <_Bfree+0x3c>)
 8007ccc:	4809      	ldr	r0, [pc, #36]	; (8007cf4 <_Bfree+0x40>)
 8007cce:	218a      	movs	r1, #138	; 0x8a
 8007cd0:	f000 fd0e 	bl	80086f0 <__assert_func>
 8007cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd8:	6006      	str	r6, [r0, #0]
 8007cda:	60c6      	str	r6, [r0, #12]
 8007cdc:	b13c      	cbz	r4, 8007cee <_Bfree+0x3a>
 8007cde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ce0:	6862      	ldr	r2, [r4, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ce8:	6021      	str	r1, [r4, #0]
 8007cea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	080096f0 	.word	0x080096f0
 8007cf4:	08009707 	.word	0x08009707

08007cf8 <__multadd>:
 8007cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfc:	690e      	ldr	r6, [r1, #16]
 8007cfe:	4607      	mov	r7, r0
 8007d00:	4698      	mov	r8, r3
 8007d02:	460c      	mov	r4, r1
 8007d04:	f101 0014 	add.w	r0, r1, #20
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6805      	ldr	r5, [r0, #0]
 8007d0c:	b2a9      	uxth	r1, r5
 8007d0e:	fb02 8101 	mla	r1, r2, r1, r8
 8007d12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d16:	0c2d      	lsrs	r5, r5, #16
 8007d18:	fb02 c505 	mla	r5, r2, r5, ip
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	3301      	adds	r3, #1
 8007d20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d24:	429e      	cmp	r6, r3
 8007d26:	f840 1b04 	str.w	r1, [r0], #4
 8007d2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d2e:	dcec      	bgt.n	8007d0a <__multadd+0x12>
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	d022      	beq.n	8007d7c <__multadd+0x84>
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	42b3      	cmp	r3, r6
 8007d3a:	dc19      	bgt.n	8007d70 <__multadd+0x78>
 8007d3c:	6861      	ldr	r1, [r4, #4]
 8007d3e:	4638      	mov	r0, r7
 8007d40:	3101      	adds	r1, #1
 8007d42:	f7ff ff77 	bl	8007c34 <_Balloc>
 8007d46:	4605      	mov	r5, r0
 8007d48:	b928      	cbnz	r0, 8007d56 <__multadd+0x5e>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <__multadd+0x8c>)
 8007d4e:	480e      	ldr	r0, [pc, #56]	; (8007d88 <__multadd+0x90>)
 8007d50:	21b5      	movs	r1, #181	; 0xb5
 8007d52:	f000 fccd 	bl	80086f0 <__assert_func>
 8007d56:	6922      	ldr	r2, [r4, #16]
 8007d58:	3202      	adds	r2, #2
 8007d5a:	f104 010c 	add.w	r1, r4, #12
 8007d5e:	0092      	lsls	r2, r2, #2
 8007d60:	300c      	adds	r0, #12
 8007d62:	f7ff ff59 	bl	8007c18 <memcpy>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7ff ffa3 	bl	8007cb4 <_Bfree>
 8007d6e:	462c      	mov	r4, r5
 8007d70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007d74:	3601      	adds	r6, #1
 8007d76:	f8c3 8014 	str.w	r8, [r3, #20]
 8007d7a:	6126      	str	r6, [r4, #16]
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d82:	bf00      	nop
 8007d84:	08009660 	.word	0x08009660
 8007d88:	08009707 	.word	0x08009707

08007d8c <__s2b>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	4615      	mov	r5, r2
 8007d94:	461f      	mov	r7, r3
 8007d96:	2209      	movs	r2, #9
 8007d98:	3308      	adds	r3, #8
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007da0:	2100      	movs	r1, #0
 8007da2:	2201      	movs	r2, #1
 8007da4:	429a      	cmp	r2, r3
 8007da6:	db09      	blt.n	8007dbc <__s2b+0x30>
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ff43 	bl	8007c34 <_Balloc>
 8007dae:	b940      	cbnz	r0, 8007dc2 <__s2b+0x36>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <__s2b+0x8c>)
 8007db4:	4819      	ldr	r0, [pc, #100]	; (8007e1c <__s2b+0x90>)
 8007db6:	21ce      	movs	r1, #206	; 0xce
 8007db8:	f000 fc9a 	bl	80086f0 <__assert_func>
 8007dbc:	0052      	lsls	r2, r2, #1
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	e7f0      	b.n	8007da4 <__s2b+0x18>
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	6143      	str	r3, [r0, #20]
 8007dc6:	2d09      	cmp	r5, #9
 8007dc8:	f04f 0301 	mov.w	r3, #1
 8007dcc:	6103      	str	r3, [r0, #16]
 8007dce:	dd16      	ble.n	8007dfe <__s2b+0x72>
 8007dd0:	f104 0909 	add.w	r9, r4, #9
 8007dd4:	46c8      	mov	r8, r9
 8007dd6:	442c      	add	r4, r5
 8007dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ddc:	4601      	mov	r1, r0
 8007dde:	3b30      	subs	r3, #48	; 0x30
 8007de0:	220a      	movs	r2, #10
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ff88 	bl	8007cf8 <__multadd>
 8007de8:	45a0      	cmp	r8, r4
 8007dea:	d1f5      	bne.n	8007dd8 <__s2b+0x4c>
 8007dec:	f1a5 0408 	sub.w	r4, r5, #8
 8007df0:	444c      	add	r4, r9
 8007df2:	1b2d      	subs	r5, r5, r4
 8007df4:	1963      	adds	r3, r4, r5
 8007df6:	42bb      	cmp	r3, r7
 8007df8:	db04      	blt.n	8007e04 <__s2b+0x78>
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	340a      	adds	r4, #10
 8007e00:	2509      	movs	r5, #9
 8007e02:	e7f6      	b.n	8007df2 <__s2b+0x66>
 8007e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e08:	4601      	mov	r1, r0
 8007e0a:	3b30      	subs	r3, #48	; 0x30
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff72 	bl	8007cf8 <__multadd>
 8007e14:	e7ee      	b.n	8007df4 <__s2b+0x68>
 8007e16:	bf00      	nop
 8007e18:	08009660 	.word	0x08009660
 8007e1c:	08009707 	.word	0x08009707

08007e20 <__hi0bits>:
 8007e20:	0c03      	lsrs	r3, r0, #16
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	b9d3      	cbnz	r3, 8007e5c <__hi0bits+0x3c>
 8007e26:	0400      	lsls	r0, r0, #16
 8007e28:	2310      	movs	r3, #16
 8007e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e2e:	bf04      	itt	eq
 8007e30:	0200      	lsleq	r0, r0, #8
 8007e32:	3308      	addeq	r3, #8
 8007e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e38:	bf04      	itt	eq
 8007e3a:	0100      	lsleq	r0, r0, #4
 8007e3c:	3304      	addeq	r3, #4
 8007e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e42:	bf04      	itt	eq
 8007e44:	0080      	lsleq	r0, r0, #2
 8007e46:	3302      	addeq	r3, #2
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	db05      	blt.n	8007e58 <__hi0bits+0x38>
 8007e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e50:	f103 0301 	add.w	r3, r3, #1
 8007e54:	bf08      	it	eq
 8007e56:	2320      	moveq	r3, #32
 8007e58:	4618      	mov	r0, r3
 8007e5a:	4770      	bx	lr
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e7e4      	b.n	8007e2a <__hi0bits+0xa>

08007e60 <__lo0bits>:
 8007e60:	6803      	ldr	r3, [r0, #0]
 8007e62:	f013 0207 	ands.w	r2, r3, #7
 8007e66:	4601      	mov	r1, r0
 8007e68:	d00b      	beq.n	8007e82 <__lo0bits+0x22>
 8007e6a:	07da      	lsls	r2, r3, #31
 8007e6c:	d424      	bmi.n	8007eb8 <__lo0bits+0x58>
 8007e6e:	0798      	lsls	r0, r3, #30
 8007e70:	bf49      	itett	mi
 8007e72:	085b      	lsrmi	r3, r3, #1
 8007e74:	089b      	lsrpl	r3, r3, #2
 8007e76:	2001      	movmi	r0, #1
 8007e78:	600b      	strmi	r3, [r1, #0]
 8007e7a:	bf5c      	itt	pl
 8007e7c:	600b      	strpl	r3, [r1, #0]
 8007e7e:	2002      	movpl	r0, #2
 8007e80:	4770      	bx	lr
 8007e82:	b298      	uxth	r0, r3
 8007e84:	b9b0      	cbnz	r0, 8007eb4 <__lo0bits+0x54>
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	2010      	movs	r0, #16
 8007e8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e8e:	bf04      	itt	eq
 8007e90:	0a1b      	lsreq	r3, r3, #8
 8007e92:	3008      	addeq	r0, #8
 8007e94:	071a      	lsls	r2, r3, #28
 8007e96:	bf04      	itt	eq
 8007e98:	091b      	lsreq	r3, r3, #4
 8007e9a:	3004      	addeq	r0, #4
 8007e9c:	079a      	lsls	r2, r3, #30
 8007e9e:	bf04      	itt	eq
 8007ea0:	089b      	lsreq	r3, r3, #2
 8007ea2:	3002      	addeq	r0, #2
 8007ea4:	07da      	lsls	r2, r3, #31
 8007ea6:	d403      	bmi.n	8007eb0 <__lo0bits+0x50>
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	f100 0001 	add.w	r0, r0, #1
 8007eae:	d005      	beq.n	8007ebc <__lo0bits+0x5c>
 8007eb0:	600b      	str	r3, [r1, #0]
 8007eb2:	4770      	bx	lr
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	e7e8      	b.n	8007e8a <__lo0bits+0x2a>
 8007eb8:	2000      	movs	r0, #0
 8007eba:	4770      	bx	lr
 8007ebc:	2020      	movs	r0, #32
 8007ebe:	4770      	bx	lr

08007ec0 <__i2b>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	f7ff feb5 	bl	8007c34 <_Balloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	b928      	cbnz	r0, 8007eda <__i2b+0x1a>
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <__i2b+0x24>)
 8007ed0:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <__i2b+0x28>)
 8007ed2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ed6:	f000 fc0b 	bl	80086f0 <__assert_func>
 8007eda:	2301      	movs	r3, #1
 8007edc:	6144      	str	r4, [r0, #20]
 8007ede:	6103      	str	r3, [r0, #16]
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	08009660 	.word	0x08009660
 8007ee8:	08009707 	.word	0x08009707

08007eec <__multiply>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	690a      	ldr	r2, [r1, #16]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	bfb8      	it	lt
 8007efa:	460b      	movlt	r3, r1
 8007efc:	460d      	mov	r5, r1
 8007efe:	bfbc      	itt	lt
 8007f00:	4625      	movlt	r5, r4
 8007f02:	461c      	movlt	r4, r3
 8007f04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f0c:	68ab      	ldr	r3, [r5, #8]
 8007f0e:	6869      	ldr	r1, [r5, #4]
 8007f10:	eb0a 0709 	add.w	r7, sl, r9
 8007f14:	42bb      	cmp	r3, r7
 8007f16:	b085      	sub	sp, #20
 8007f18:	bfb8      	it	lt
 8007f1a:	3101      	addlt	r1, #1
 8007f1c:	f7ff fe8a 	bl	8007c34 <_Balloc>
 8007f20:	b930      	cbnz	r0, 8007f30 <__multiply+0x44>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b42      	ldr	r3, [pc, #264]	; (8008030 <__multiply+0x144>)
 8007f26:	4843      	ldr	r0, [pc, #268]	; (8008034 <__multiply+0x148>)
 8007f28:	f240 115d 	movw	r1, #349	; 0x15d
 8007f2c:	f000 fbe0 	bl	80086f0 <__assert_func>
 8007f30:	f100 0614 	add.w	r6, r0, #20
 8007f34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007f38:	4633      	mov	r3, r6
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	d31e      	bcc.n	8007f7e <__multiply+0x92>
 8007f40:	f105 0c14 	add.w	ip, r5, #20
 8007f44:	f104 0314 	add.w	r3, r4, #20
 8007f48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007f4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007f50:	9202      	str	r2, [sp, #8]
 8007f52:	ebac 0205 	sub.w	r2, ip, r5
 8007f56:	3a15      	subs	r2, #21
 8007f58:	f022 0203 	bic.w	r2, r2, #3
 8007f5c:	3204      	adds	r2, #4
 8007f5e:	f105 0115 	add.w	r1, r5, #21
 8007f62:	458c      	cmp	ip, r1
 8007f64:	bf38      	it	cc
 8007f66:	2204      	movcc	r2, #4
 8007f68:	9201      	str	r2, [sp, #4]
 8007f6a:	9a02      	ldr	r2, [sp, #8]
 8007f6c:	9303      	str	r3, [sp, #12]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d808      	bhi.n	8007f84 <__multiply+0x98>
 8007f72:	2f00      	cmp	r7, #0
 8007f74:	dc55      	bgt.n	8008022 <__multiply+0x136>
 8007f76:	6107      	str	r7, [r0, #16]
 8007f78:	b005      	add	sp, #20
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	f843 2b04 	str.w	r2, [r3], #4
 8007f82:	e7db      	b.n	8007f3c <__multiply+0x50>
 8007f84:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f88:	f1ba 0f00 	cmp.w	sl, #0
 8007f8c:	d020      	beq.n	8007fd0 <__multiply+0xe4>
 8007f8e:	f105 0e14 	add.w	lr, r5, #20
 8007f92:	46b1      	mov	r9, r6
 8007f94:	2200      	movs	r2, #0
 8007f96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007f9a:	f8d9 b000 	ldr.w	fp, [r9]
 8007f9e:	b2a1      	uxth	r1, r4
 8007fa0:	fa1f fb8b 	uxth.w	fp, fp
 8007fa4:	fb0a b101 	mla	r1, sl, r1, fp
 8007fa8:	4411      	add	r1, r2
 8007faa:	f8d9 2000 	ldr.w	r2, [r9]
 8007fae:	0c24      	lsrs	r4, r4, #16
 8007fb0:	0c12      	lsrs	r2, r2, #16
 8007fb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8007fb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007fba:	b289      	uxth	r1, r1
 8007fbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007fc0:	45f4      	cmp	ip, lr
 8007fc2:	f849 1b04 	str.w	r1, [r9], #4
 8007fc6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007fca:	d8e4      	bhi.n	8007f96 <__multiply+0xaa>
 8007fcc:	9901      	ldr	r1, [sp, #4]
 8007fce:	5072      	str	r2, [r6, r1]
 8007fd0:	9a03      	ldr	r2, [sp, #12]
 8007fd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	f1b9 0f00 	cmp.w	r9, #0
 8007fdc:	d01f      	beq.n	800801e <__multiply+0x132>
 8007fde:	6834      	ldr	r4, [r6, #0]
 8007fe0:	f105 0114 	add.w	r1, r5, #20
 8007fe4:	46b6      	mov	lr, r6
 8007fe6:	f04f 0a00 	mov.w	sl, #0
 8007fea:	880a      	ldrh	r2, [r1, #0]
 8007fec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ff0:	fb09 b202 	mla	r2, r9, r2, fp
 8007ff4:	4492      	add	sl, r2
 8007ff6:	b2a4      	uxth	r4, r4
 8007ff8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ffc:	f84e 4b04 	str.w	r4, [lr], #4
 8008000:	f851 4b04 	ldr.w	r4, [r1], #4
 8008004:	f8be 2000 	ldrh.w	r2, [lr]
 8008008:	0c24      	lsrs	r4, r4, #16
 800800a:	fb09 2404 	mla	r4, r9, r4, r2
 800800e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008012:	458c      	cmp	ip, r1
 8008014:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008018:	d8e7      	bhi.n	8007fea <__multiply+0xfe>
 800801a:	9a01      	ldr	r2, [sp, #4]
 800801c:	50b4      	str	r4, [r6, r2]
 800801e:	3604      	adds	r6, #4
 8008020:	e7a3      	b.n	8007f6a <__multiply+0x7e>
 8008022:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1a5      	bne.n	8007f76 <__multiply+0x8a>
 800802a:	3f01      	subs	r7, #1
 800802c:	e7a1      	b.n	8007f72 <__multiply+0x86>
 800802e:	bf00      	nop
 8008030:	08009660 	.word	0x08009660
 8008034:	08009707 	.word	0x08009707

08008038 <__pow5mult>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	4615      	mov	r5, r2
 800803e:	f012 0203 	ands.w	r2, r2, #3
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	d007      	beq.n	8008058 <__pow5mult+0x20>
 8008048:	4c25      	ldr	r4, [pc, #148]	; (80080e0 <__pow5mult+0xa8>)
 800804a:	3a01      	subs	r2, #1
 800804c:	2300      	movs	r3, #0
 800804e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008052:	f7ff fe51 	bl	8007cf8 <__multadd>
 8008056:	4607      	mov	r7, r0
 8008058:	10ad      	asrs	r5, r5, #2
 800805a:	d03d      	beq.n	80080d8 <__pow5mult+0xa0>
 800805c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800805e:	b97c      	cbnz	r4, 8008080 <__pow5mult+0x48>
 8008060:	2010      	movs	r0, #16
 8008062:	f000 fb75 	bl	8008750 <malloc>
 8008066:	4602      	mov	r2, r0
 8008068:	6270      	str	r0, [r6, #36]	; 0x24
 800806a:	b928      	cbnz	r0, 8008078 <__pow5mult+0x40>
 800806c:	4b1d      	ldr	r3, [pc, #116]	; (80080e4 <__pow5mult+0xac>)
 800806e:	481e      	ldr	r0, [pc, #120]	; (80080e8 <__pow5mult+0xb0>)
 8008070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008074:	f000 fb3c 	bl	80086f0 <__assert_func>
 8008078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800807c:	6004      	str	r4, [r0, #0]
 800807e:	60c4      	str	r4, [r0, #12]
 8008080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008088:	b94c      	cbnz	r4, 800809e <__pow5mult+0x66>
 800808a:	f240 2171 	movw	r1, #625	; 0x271
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ff16 	bl	8007ec0 <__i2b>
 8008094:	2300      	movs	r3, #0
 8008096:	f8c8 0008 	str.w	r0, [r8, #8]
 800809a:	4604      	mov	r4, r0
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	f04f 0900 	mov.w	r9, #0
 80080a2:	07eb      	lsls	r3, r5, #31
 80080a4:	d50a      	bpl.n	80080bc <__pow5mult+0x84>
 80080a6:	4639      	mov	r1, r7
 80080a8:	4622      	mov	r2, r4
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ff1e 	bl	8007eec <__multiply>
 80080b0:	4639      	mov	r1, r7
 80080b2:	4680      	mov	r8, r0
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff fdfd 	bl	8007cb4 <_Bfree>
 80080ba:	4647      	mov	r7, r8
 80080bc:	106d      	asrs	r5, r5, #1
 80080be:	d00b      	beq.n	80080d8 <__pow5mult+0xa0>
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	b938      	cbnz	r0, 80080d4 <__pow5mult+0x9c>
 80080c4:	4622      	mov	r2, r4
 80080c6:	4621      	mov	r1, r4
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff ff0f 	bl	8007eec <__multiply>
 80080ce:	6020      	str	r0, [r4, #0]
 80080d0:	f8c0 9000 	str.w	r9, [r0]
 80080d4:	4604      	mov	r4, r0
 80080d6:	e7e4      	b.n	80080a2 <__pow5mult+0x6a>
 80080d8:	4638      	mov	r0, r7
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	bf00      	nop
 80080e0:	08009858 	.word	0x08009858
 80080e4:	080096f0 	.word	0x080096f0
 80080e8:	08009707 	.word	0x08009707

080080ec <__lshift>:
 80080ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	460c      	mov	r4, r1
 80080f2:	6849      	ldr	r1, [r1, #4]
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	4607      	mov	r7, r0
 80080fe:	4691      	mov	r9, r2
 8008100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008104:	f108 0601 	add.w	r6, r8, #1
 8008108:	42b3      	cmp	r3, r6
 800810a:	db0b      	blt.n	8008124 <__lshift+0x38>
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff fd91 	bl	8007c34 <_Balloc>
 8008112:	4605      	mov	r5, r0
 8008114:	b948      	cbnz	r0, 800812a <__lshift+0x3e>
 8008116:	4602      	mov	r2, r0
 8008118:	4b28      	ldr	r3, [pc, #160]	; (80081bc <__lshift+0xd0>)
 800811a:	4829      	ldr	r0, [pc, #164]	; (80081c0 <__lshift+0xd4>)
 800811c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008120:	f000 fae6 	bl	80086f0 <__assert_func>
 8008124:	3101      	adds	r1, #1
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	e7ee      	b.n	8008108 <__lshift+0x1c>
 800812a:	2300      	movs	r3, #0
 800812c:	f100 0114 	add.w	r1, r0, #20
 8008130:	f100 0210 	add.w	r2, r0, #16
 8008134:	4618      	mov	r0, r3
 8008136:	4553      	cmp	r3, sl
 8008138:	db33      	blt.n	80081a2 <__lshift+0xb6>
 800813a:	6920      	ldr	r0, [r4, #16]
 800813c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008140:	f104 0314 	add.w	r3, r4, #20
 8008144:	f019 091f 	ands.w	r9, r9, #31
 8008148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800814c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008150:	d02b      	beq.n	80081aa <__lshift+0xbe>
 8008152:	f1c9 0e20 	rsb	lr, r9, #32
 8008156:	468a      	mov	sl, r1
 8008158:	2200      	movs	r2, #0
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	fa00 f009 	lsl.w	r0, r0, r9
 8008160:	4302      	orrs	r2, r0
 8008162:	f84a 2b04 	str.w	r2, [sl], #4
 8008166:	f853 2b04 	ldr.w	r2, [r3], #4
 800816a:	459c      	cmp	ip, r3
 800816c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008170:	d8f3      	bhi.n	800815a <__lshift+0x6e>
 8008172:	ebac 0304 	sub.w	r3, ip, r4
 8008176:	3b15      	subs	r3, #21
 8008178:	f023 0303 	bic.w	r3, r3, #3
 800817c:	3304      	adds	r3, #4
 800817e:	f104 0015 	add.w	r0, r4, #21
 8008182:	4584      	cmp	ip, r0
 8008184:	bf38      	it	cc
 8008186:	2304      	movcc	r3, #4
 8008188:	50ca      	str	r2, [r1, r3]
 800818a:	b10a      	cbz	r2, 8008190 <__lshift+0xa4>
 800818c:	f108 0602 	add.w	r6, r8, #2
 8008190:	3e01      	subs	r6, #1
 8008192:	4638      	mov	r0, r7
 8008194:	612e      	str	r6, [r5, #16]
 8008196:	4621      	mov	r1, r4
 8008198:	f7ff fd8c 	bl	8007cb4 <_Bfree>
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80081a6:	3301      	adds	r3, #1
 80081a8:	e7c5      	b.n	8008136 <__lshift+0x4a>
 80081aa:	3904      	subs	r1, #4
 80081ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80081b4:	459c      	cmp	ip, r3
 80081b6:	d8f9      	bhi.n	80081ac <__lshift+0xc0>
 80081b8:	e7ea      	b.n	8008190 <__lshift+0xa4>
 80081ba:	bf00      	nop
 80081bc:	08009660 	.word	0x08009660
 80081c0:	08009707 	.word	0x08009707

080081c4 <__mcmp>:
 80081c4:	b530      	push	{r4, r5, lr}
 80081c6:	6902      	ldr	r2, [r0, #16]
 80081c8:	690c      	ldr	r4, [r1, #16]
 80081ca:	1b12      	subs	r2, r2, r4
 80081cc:	d10e      	bne.n	80081ec <__mcmp+0x28>
 80081ce:	f100 0314 	add.w	r3, r0, #20
 80081d2:	3114      	adds	r1, #20
 80081d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081e4:	42a5      	cmp	r5, r4
 80081e6:	d003      	beq.n	80081f0 <__mcmp+0x2c>
 80081e8:	d305      	bcc.n	80081f6 <__mcmp+0x32>
 80081ea:	2201      	movs	r2, #1
 80081ec:	4610      	mov	r0, r2
 80081ee:	bd30      	pop	{r4, r5, pc}
 80081f0:	4283      	cmp	r3, r0
 80081f2:	d3f3      	bcc.n	80081dc <__mcmp+0x18>
 80081f4:	e7fa      	b.n	80081ec <__mcmp+0x28>
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	e7f7      	b.n	80081ec <__mcmp+0x28>

080081fc <__mdiff>:
 80081fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	4606      	mov	r6, r0
 8008204:	4611      	mov	r1, r2
 8008206:	4620      	mov	r0, r4
 8008208:	4617      	mov	r7, r2
 800820a:	f7ff ffdb 	bl	80081c4 <__mcmp>
 800820e:	1e05      	subs	r5, r0, #0
 8008210:	d110      	bne.n	8008234 <__mdiff+0x38>
 8008212:	4629      	mov	r1, r5
 8008214:	4630      	mov	r0, r6
 8008216:	f7ff fd0d 	bl	8007c34 <_Balloc>
 800821a:	b930      	cbnz	r0, 800822a <__mdiff+0x2e>
 800821c:	4b39      	ldr	r3, [pc, #228]	; (8008304 <__mdiff+0x108>)
 800821e:	4602      	mov	r2, r0
 8008220:	f240 2132 	movw	r1, #562	; 0x232
 8008224:	4838      	ldr	r0, [pc, #224]	; (8008308 <__mdiff+0x10c>)
 8008226:	f000 fa63 	bl	80086f0 <__assert_func>
 800822a:	2301      	movs	r3, #1
 800822c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	bfa4      	itt	ge
 8008236:	463b      	movge	r3, r7
 8008238:	4627      	movge	r7, r4
 800823a:	4630      	mov	r0, r6
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	bfa6      	itte	ge
 8008240:	461c      	movge	r4, r3
 8008242:	2500      	movge	r5, #0
 8008244:	2501      	movlt	r5, #1
 8008246:	f7ff fcf5 	bl	8007c34 <_Balloc>
 800824a:	b920      	cbnz	r0, 8008256 <__mdiff+0x5a>
 800824c:	4b2d      	ldr	r3, [pc, #180]	; (8008304 <__mdiff+0x108>)
 800824e:	4602      	mov	r2, r0
 8008250:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008254:	e7e6      	b.n	8008224 <__mdiff+0x28>
 8008256:	693e      	ldr	r6, [r7, #16]
 8008258:	60c5      	str	r5, [r0, #12]
 800825a:	6925      	ldr	r5, [r4, #16]
 800825c:	f107 0114 	add.w	r1, r7, #20
 8008260:	f104 0914 	add.w	r9, r4, #20
 8008264:	f100 0e14 	add.w	lr, r0, #20
 8008268:	f107 0210 	add.w	r2, r7, #16
 800826c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008270:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008274:	46f2      	mov	sl, lr
 8008276:	2700      	movs	r7, #0
 8008278:	f859 3b04 	ldr.w	r3, [r9], #4
 800827c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008280:	fa1f f883 	uxth.w	r8, r3
 8008284:	fa17 f78b 	uxtah	r7, r7, fp
 8008288:	0c1b      	lsrs	r3, r3, #16
 800828a:	eba7 0808 	sub.w	r8, r7, r8
 800828e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008292:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008296:	fa1f f888 	uxth.w	r8, r8
 800829a:	141f      	asrs	r7, r3, #16
 800829c:	454d      	cmp	r5, r9
 800829e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082a2:	f84a 3b04 	str.w	r3, [sl], #4
 80082a6:	d8e7      	bhi.n	8008278 <__mdiff+0x7c>
 80082a8:	1b2b      	subs	r3, r5, r4
 80082aa:	3b15      	subs	r3, #21
 80082ac:	f023 0303 	bic.w	r3, r3, #3
 80082b0:	3304      	adds	r3, #4
 80082b2:	3415      	adds	r4, #21
 80082b4:	42a5      	cmp	r5, r4
 80082b6:	bf38      	it	cc
 80082b8:	2304      	movcc	r3, #4
 80082ba:	4419      	add	r1, r3
 80082bc:	4473      	add	r3, lr
 80082be:	469e      	mov	lr, r3
 80082c0:	460d      	mov	r5, r1
 80082c2:	4565      	cmp	r5, ip
 80082c4:	d30e      	bcc.n	80082e4 <__mdiff+0xe8>
 80082c6:	f10c 0203 	add.w	r2, ip, #3
 80082ca:	1a52      	subs	r2, r2, r1
 80082cc:	f022 0203 	bic.w	r2, r2, #3
 80082d0:	3903      	subs	r1, #3
 80082d2:	458c      	cmp	ip, r1
 80082d4:	bf38      	it	cc
 80082d6:	2200      	movcc	r2, #0
 80082d8:	441a      	add	r2, r3
 80082da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082de:	b17b      	cbz	r3, 8008300 <__mdiff+0x104>
 80082e0:	6106      	str	r6, [r0, #16]
 80082e2:	e7a5      	b.n	8008230 <__mdiff+0x34>
 80082e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80082e8:	fa17 f488 	uxtah	r4, r7, r8
 80082ec:	1422      	asrs	r2, r4, #16
 80082ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80082f2:	b2a4      	uxth	r4, r4
 80082f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80082f8:	f84e 4b04 	str.w	r4, [lr], #4
 80082fc:	1417      	asrs	r7, r2, #16
 80082fe:	e7e0      	b.n	80082c2 <__mdiff+0xc6>
 8008300:	3e01      	subs	r6, #1
 8008302:	e7ea      	b.n	80082da <__mdiff+0xde>
 8008304:	08009660 	.word	0x08009660
 8008308:	08009707 	.word	0x08009707

0800830c <__ulp>:
 800830c:	b082      	sub	sp, #8
 800830e:	ed8d 0b00 	vstr	d0, [sp]
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	4912      	ldr	r1, [pc, #72]	; (8008360 <__ulp+0x54>)
 8008316:	4019      	ands	r1, r3
 8008318:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800831c:	2900      	cmp	r1, #0
 800831e:	dd05      	ble.n	800832c <__ulp+0x20>
 8008320:	2200      	movs	r2, #0
 8008322:	460b      	mov	r3, r1
 8008324:	ec43 2b10 	vmov	d0, r2, r3
 8008328:	b002      	add	sp, #8
 800832a:	4770      	bx	lr
 800832c:	4249      	negs	r1, r1
 800832e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008332:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	da04      	bge.n	800834a <__ulp+0x3e>
 8008340:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008344:	fa41 f300 	asr.w	r3, r1, r0
 8008348:	e7ec      	b.n	8008324 <__ulp+0x18>
 800834a:	f1a0 0114 	sub.w	r1, r0, #20
 800834e:	291e      	cmp	r1, #30
 8008350:	bfda      	itte	le
 8008352:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008356:	fa20 f101 	lsrle.w	r1, r0, r1
 800835a:	2101      	movgt	r1, #1
 800835c:	460a      	mov	r2, r1
 800835e:	e7e1      	b.n	8008324 <__ulp+0x18>
 8008360:	7ff00000 	.word	0x7ff00000

08008364 <__b2d>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	6905      	ldr	r5, [r0, #16]
 8008368:	f100 0714 	add.w	r7, r0, #20
 800836c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008370:	1f2e      	subs	r6, r5, #4
 8008372:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff fd52 	bl	8007e20 <__hi0bits>
 800837c:	f1c0 0320 	rsb	r3, r0, #32
 8008380:	280a      	cmp	r0, #10
 8008382:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008400 <__b2d+0x9c>
 8008386:	600b      	str	r3, [r1, #0]
 8008388:	dc14      	bgt.n	80083b4 <__b2d+0x50>
 800838a:	f1c0 0e0b 	rsb	lr, r0, #11
 800838e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008392:	42b7      	cmp	r7, r6
 8008394:	ea41 030c 	orr.w	r3, r1, ip
 8008398:	bf34      	ite	cc
 800839a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800839e:	2100      	movcs	r1, #0
 80083a0:	3015      	adds	r0, #21
 80083a2:	fa04 f000 	lsl.w	r0, r4, r0
 80083a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80083aa:	ea40 0201 	orr.w	r2, r0, r1
 80083ae:	ec43 2b10 	vmov	d0, r2, r3
 80083b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b4:	42b7      	cmp	r7, r6
 80083b6:	bf3a      	itte	cc
 80083b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083bc:	f1a5 0608 	subcc.w	r6, r5, #8
 80083c0:	2100      	movcs	r1, #0
 80083c2:	380b      	subs	r0, #11
 80083c4:	d017      	beq.n	80083f6 <__b2d+0x92>
 80083c6:	f1c0 0c20 	rsb	ip, r0, #32
 80083ca:	fa04 f500 	lsl.w	r5, r4, r0
 80083ce:	42be      	cmp	r6, r7
 80083d0:	fa21 f40c 	lsr.w	r4, r1, ip
 80083d4:	ea45 0504 	orr.w	r5, r5, r4
 80083d8:	bf8c      	ite	hi
 80083da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80083de:	2400      	movls	r4, #0
 80083e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083e4:	fa01 f000 	lsl.w	r0, r1, r0
 80083e8:	fa24 f40c 	lsr.w	r4, r4, ip
 80083ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083f0:	ea40 0204 	orr.w	r2, r0, r4
 80083f4:	e7db      	b.n	80083ae <__b2d+0x4a>
 80083f6:	ea44 030c 	orr.w	r3, r4, ip
 80083fa:	460a      	mov	r2, r1
 80083fc:	e7d7      	b.n	80083ae <__b2d+0x4a>
 80083fe:	bf00      	nop
 8008400:	3ff00000 	.word	0x3ff00000

08008404 <__d2b>:
 8008404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008408:	4689      	mov	r9, r1
 800840a:	2101      	movs	r1, #1
 800840c:	ec57 6b10 	vmov	r6, r7, d0
 8008410:	4690      	mov	r8, r2
 8008412:	f7ff fc0f 	bl	8007c34 <_Balloc>
 8008416:	4604      	mov	r4, r0
 8008418:	b930      	cbnz	r0, 8008428 <__d2b+0x24>
 800841a:	4602      	mov	r2, r0
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <__d2b+0xb0>)
 800841e:	4826      	ldr	r0, [pc, #152]	; (80084b8 <__d2b+0xb4>)
 8008420:	f240 310a 	movw	r1, #778	; 0x30a
 8008424:	f000 f964 	bl	80086f0 <__assert_func>
 8008428:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800842c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008430:	bb35      	cbnz	r5, 8008480 <__d2b+0x7c>
 8008432:	2e00      	cmp	r6, #0
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	d028      	beq.n	800848a <__d2b+0x86>
 8008438:	4668      	mov	r0, sp
 800843a:	9600      	str	r6, [sp, #0]
 800843c:	f7ff fd10 	bl	8007e60 <__lo0bits>
 8008440:	9900      	ldr	r1, [sp, #0]
 8008442:	b300      	cbz	r0, 8008486 <__d2b+0x82>
 8008444:	9a01      	ldr	r2, [sp, #4]
 8008446:	f1c0 0320 	rsb	r3, r0, #32
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	430b      	orrs	r3, r1
 8008450:	40c2      	lsrs	r2, r0
 8008452:	6163      	str	r3, [r4, #20]
 8008454:	9201      	str	r2, [sp, #4]
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	61a3      	str	r3, [r4, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	bf14      	ite	ne
 800845e:	2202      	movne	r2, #2
 8008460:	2201      	moveq	r2, #1
 8008462:	6122      	str	r2, [r4, #16]
 8008464:	b1d5      	cbz	r5, 800849c <__d2b+0x98>
 8008466:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800846a:	4405      	add	r5, r0
 800846c:	f8c9 5000 	str.w	r5, [r9]
 8008470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008474:	f8c8 0000 	str.w	r0, [r8]
 8008478:	4620      	mov	r0, r4
 800847a:	b003      	add	sp, #12
 800847c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008484:	e7d5      	b.n	8008432 <__d2b+0x2e>
 8008486:	6161      	str	r1, [r4, #20]
 8008488:	e7e5      	b.n	8008456 <__d2b+0x52>
 800848a:	a801      	add	r0, sp, #4
 800848c:	f7ff fce8 	bl	8007e60 <__lo0bits>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	6163      	str	r3, [r4, #20]
 8008494:	2201      	movs	r2, #1
 8008496:	6122      	str	r2, [r4, #16]
 8008498:	3020      	adds	r0, #32
 800849a:	e7e3      	b.n	8008464 <__d2b+0x60>
 800849c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084a4:	f8c9 0000 	str.w	r0, [r9]
 80084a8:	6918      	ldr	r0, [r3, #16]
 80084aa:	f7ff fcb9 	bl	8007e20 <__hi0bits>
 80084ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084b2:	e7df      	b.n	8008474 <__d2b+0x70>
 80084b4:	08009660 	.word	0x08009660
 80084b8:	08009707 	.word	0x08009707

080084bc <__ratio>:
 80084bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	468a      	mov	sl, r1
 80084c2:	4669      	mov	r1, sp
 80084c4:	4683      	mov	fp, r0
 80084c6:	f7ff ff4d 	bl	8008364 <__b2d>
 80084ca:	a901      	add	r1, sp, #4
 80084cc:	4650      	mov	r0, sl
 80084ce:	ec59 8b10 	vmov	r8, r9, d0
 80084d2:	ee10 6a10 	vmov	r6, s0
 80084d6:	f7ff ff45 	bl	8008364 <__b2d>
 80084da:	f8db 3010 	ldr.w	r3, [fp, #16]
 80084de:	f8da 2010 	ldr.w	r2, [sl, #16]
 80084e2:	eba3 0c02 	sub.w	ip, r3, r2
 80084e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084f0:	ec55 4b10 	vmov	r4, r5, d0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	ee10 0a10 	vmov	r0, s0
 80084fa:	bfce      	itee	gt
 80084fc:	464a      	movgt	r2, r9
 80084fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008502:	462a      	movle	r2, r5
 8008504:	464f      	mov	r7, r9
 8008506:	4629      	mov	r1, r5
 8008508:	bfcc      	ite	gt
 800850a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800850e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008512:	ec47 6b17 	vmov	d7, r6, r7
 8008516:	ec41 0b16 	vmov	d6, r0, r1
 800851a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800851e:	b003      	add	sp, #12
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008524 <__copybits>:
 8008524:	3901      	subs	r1, #1
 8008526:	b570      	push	{r4, r5, r6, lr}
 8008528:	1149      	asrs	r1, r1, #5
 800852a:	6914      	ldr	r4, [r2, #16]
 800852c:	3101      	adds	r1, #1
 800852e:	f102 0314 	add.w	r3, r2, #20
 8008532:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008536:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800853a:	1f05      	subs	r5, r0, #4
 800853c:	42a3      	cmp	r3, r4
 800853e:	d30c      	bcc.n	800855a <__copybits+0x36>
 8008540:	1aa3      	subs	r3, r4, r2
 8008542:	3b11      	subs	r3, #17
 8008544:	f023 0303 	bic.w	r3, r3, #3
 8008548:	3211      	adds	r2, #17
 800854a:	42a2      	cmp	r2, r4
 800854c:	bf88      	it	hi
 800854e:	2300      	movhi	r3, #0
 8008550:	4418      	add	r0, r3
 8008552:	2300      	movs	r3, #0
 8008554:	4288      	cmp	r0, r1
 8008556:	d305      	bcc.n	8008564 <__copybits+0x40>
 8008558:	bd70      	pop	{r4, r5, r6, pc}
 800855a:	f853 6b04 	ldr.w	r6, [r3], #4
 800855e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008562:	e7eb      	b.n	800853c <__copybits+0x18>
 8008564:	f840 3b04 	str.w	r3, [r0], #4
 8008568:	e7f4      	b.n	8008554 <__copybits+0x30>

0800856a <__any_on>:
 800856a:	f100 0214 	add.w	r2, r0, #20
 800856e:	6900      	ldr	r0, [r0, #16]
 8008570:	114b      	asrs	r3, r1, #5
 8008572:	4298      	cmp	r0, r3
 8008574:	b510      	push	{r4, lr}
 8008576:	db11      	blt.n	800859c <__any_on+0x32>
 8008578:	dd0a      	ble.n	8008590 <__any_on+0x26>
 800857a:	f011 011f 	ands.w	r1, r1, #31
 800857e:	d007      	beq.n	8008590 <__any_on+0x26>
 8008580:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008584:	fa24 f001 	lsr.w	r0, r4, r1
 8008588:	fa00 f101 	lsl.w	r1, r0, r1
 800858c:	428c      	cmp	r4, r1
 800858e:	d10b      	bne.n	80085a8 <__any_on+0x3e>
 8008590:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008594:	4293      	cmp	r3, r2
 8008596:	d803      	bhi.n	80085a0 <__any_on+0x36>
 8008598:	2000      	movs	r0, #0
 800859a:	bd10      	pop	{r4, pc}
 800859c:	4603      	mov	r3, r0
 800859e:	e7f7      	b.n	8008590 <__any_on+0x26>
 80085a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085a4:	2900      	cmp	r1, #0
 80085a6:	d0f5      	beq.n	8008594 <__any_on+0x2a>
 80085a8:	2001      	movs	r0, #1
 80085aa:	e7f6      	b.n	800859a <__any_on+0x30>

080085ac <_calloc_r>:
 80085ac:	b513      	push	{r0, r1, r4, lr}
 80085ae:	434a      	muls	r2, r1
 80085b0:	4611      	mov	r1, r2
 80085b2:	9201      	str	r2, [sp, #4]
 80085b4:	f000 f80a 	bl	80085cc <_malloc_r>
 80085b8:	4604      	mov	r4, r0
 80085ba:	b118      	cbz	r0, 80085c4 <_calloc_r+0x18>
 80085bc:	9a01      	ldr	r2, [sp, #4]
 80085be:	2100      	movs	r1, #0
 80085c0:	f7fe f9a2 	bl	8006908 <memset>
 80085c4:	4620      	mov	r0, r4
 80085c6:	b002      	add	sp, #8
 80085c8:	bd10      	pop	{r4, pc}
	...

080085cc <_malloc_r>:
 80085cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ce:	1ccd      	adds	r5, r1, #3
 80085d0:	f025 0503 	bic.w	r5, r5, #3
 80085d4:	3508      	adds	r5, #8
 80085d6:	2d0c      	cmp	r5, #12
 80085d8:	bf38      	it	cc
 80085da:	250c      	movcc	r5, #12
 80085dc:	2d00      	cmp	r5, #0
 80085de:	4606      	mov	r6, r0
 80085e0:	db01      	blt.n	80085e6 <_malloc_r+0x1a>
 80085e2:	42a9      	cmp	r1, r5
 80085e4:	d903      	bls.n	80085ee <_malloc_r+0x22>
 80085e6:	230c      	movs	r3, #12
 80085e8:	6033      	str	r3, [r6, #0]
 80085ea:	2000      	movs	r0, #0
 80085ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ee:	f000 f8b7 	bl	8008760 <__malloc_lock>
 80085f2:	4921      	ldr	r1, [pc, #132]	; (8008678 <_malloc_r+0xac>)
 80085f4:	680a      	ldr	r2, [r1, #0]
 80085f6:	4614      	mov	r4, r2
 80085f8:	b99c      	cbnz	r4, 8008622 <_malloc_r+0x56>
 80085fa:	4f20      	ldr	r7, [pc, #128]	; (800867c <_malloc_r+0xb0>)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	b923      	cbnz	r3, 800860a <_malloc_r+0x3e>
 8008600:	4621      	mov	r1, r4
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f844 	bl	8008690 <_sbrk_r>
 8008608:	6038      	str	r0, [r7, #0]
 800860a:	4629      	mov	r1, r5
 800860c:	4630      	mov	r0, r6
 800860e:	f000 f83f 	bl	8008690 <_sbrk_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	d123      	bne.n	800865e <_malloc_r+0x92>
 8008616:	230c      	movs	r3, #12
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	4630      	mov	r0, r6
 800861c:	f000 f8a6 	bl	800876c <__malloc_unlock>
 8008620:	e7e3      	b.n	80085ea <_malloc_r+0x1e>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	1b5b      	subs	r3, r3, r5
 8008626:	d417      	bmi.n	8008658 <_malloc_r+0x8c>
 8008628:	2b0b      	cmp	r3, #11
 800862a:	d903      	bls.n	8008634 <_malloc_r+0x68>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	441c      	add	r4, r3
 8008630:	6025      	str	r5, [r4, #0]
 8008632:	e004      	b.n	800863e <_malloc_r+0x72>
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	42a2      	cmp	r2, r4
 8008638:	bf0c      	ite	eq
 800863a:	600b      	streq	r3, [r1, #0]
 800863c:	6053      	strne	r3, [r2, #4]
 800863e:	4630      	mov	r0, r6
 8008640:	f000 f894 	bl	800876c <__malloc_unlock>
 8008644:	f104 000b 	add.w	r0, r4, #11
 8008648:	1d23      	adds	r3, r4, #4
 800864a:	f020 0007 	bic.w	r0, r0, #7
 800864e:	1ac2      	subs	r2, r0, r3
 8008650:	d0cc      	beq.n	80085ec <_malloc_r+0x20>
 8008652:	1a1b      	subs	r3, r3, r0
 8008654:	50a3      	str	r3, [r4, r2]
 8008656:	e7c9      	b.n	80085ec <_malloc_r+0x20>
 8008658:	4622      	mov	r2, r4
 800865a:	6864      	ldr	r4, [r4, #4]
 800865c:	e7cc      	b.n	80085f8 <_malloc_r+0x2c>
 800865e:	1cc4      	adds	r4, r0, #3
 8008660:	f024 0403 	bic.w	r4, r4, #3
 8008664:	42a0      	cmp	r0, r4
 8008666:	d0e3      	beq.n	8008630 <_malloc_r+0x64>
 8008668:	1a21      	subs	r1, r4, r0
 800866a:	4630      	mov	r0, r6
 800866c:	f000 f810 	bl	8008690 <_sbrk_r>
 8008670:	3001      	adds	r0, #1
 8008672:	d1dd      	bne.n	8008630 <_malloc_r+0x64>
 8008674:	e7cf      	b.n	8008616 <_malloc_r+0x4a>
 8008676:	bf00      	nop
 8008678:	20000224 	.word	0x20000224
 800867c:	20000228 	.word	0x20000228

08008680 <nan>:
 8008680:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008688 <nan+0x8>
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	00000000 	.word	0x00000000
 800868c:	7ff80000 	.word	0x7ff80000

08008690 <_sbrk_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d06      	ldr	r5, [pc, #24]	; (80086ac <_sbrk_r+0x1c>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	f7f8 fe22 	bl	80012e4 <_sbrk>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_sbrk_r+0x1a>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_sbrk_r+0x1a>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	200007c4 	.word	0x200007c4

080086b0 <strncmp>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	b16a      	cbz	r2, 80086d0 <strncmp+0x20>
 80086b4:	3901      	subs	r1, #1
 80086b6:	1884      	adds	r4, r0, r2
 80086b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80086bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d103      	bne.n	80086cc <strncmp+0x1c>
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d001      	beq.n	80086cc <strncmp+0x1c>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1f5      	bne.n	80086b8 <strncmp+0x8>
 80086cc:	1a98      	subs	r0, r3, r2
 80086ce:	bd10      	pop	{r4, pc}
 80086d0:	4610      	mov	r0, r2
 80086d2:	e7fc      	b.n	80086ce <strncmp+0x1e>

080086d4 <__ascii_wctomb>:
 80086d4:	b149      	cbz	r1, 80086ea <__ascii_wctomb+0x16>
 80086d6:	2aff      	cmp	r2, #255	; 0xff
 80086d8:	bf85      	ittet	hi
 80086da:	238a      	movhi	r3, #138	; 0x8a
 80086dc:	6003      	strhi	r3, [r0, #0]
 80086de:	700a      	strbls	r2, [r1, #0]
 80086e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80086e4:	bf98      	it	ls
 80086e6:	2001      	movls	r0, #1
 80086e8:	4770      	bx	lr
 80086ea:	4608      	mov	r0, r1
 80086ec:	4770      	bx	lr
	...

080086f0 <__assert_func>:
 80086f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086f2:	4614      	mov	r4, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <__assert_func+0x2c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4605      	mov	r5, r0
 80086fc:	68d8      	ldr	r0, [r3, #12]
 80086fe:	b14c      	cbz	r4, 8008714 <__assert_func+0x24>
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <__assert_func+0x30>)
 8008702:	9100      	str	r1, [sp, #0]
 8008704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008708:	4906      	ldr	r1, [pc, #24]	; (8008724 <__assert_func+0x34>)
 800870a:	462b      	mov	r3, r5
 800870c:	f000 f80e 	bl	800872c <fiprintf>
 8008710:	f000 fc30 	bl	8008f74 <abort>
 8008714:	4b04      	ldr	r3, [pc, #16]	; (8008728 <__assert_func+0x38>)
 8008716:	461c      	mov	r4, r3
 8008718:	e7f3      	b.n	8008702 <__assert_func+0x12>
 800871a:	bf00      	nop
 800871c:	2000000c 	.word	0x2000000c
 8008720:	08009864 	.word	0x08009864
 8008724:	08009871 	.word	0x08009871
 8008728:	0800989f 	.word	0x0800989f

0800872c <fiprintf>:
 800872c:	b40e      	push	{r1, r2, r3}
 800872e:	b503      	push	{r0, r1, lr}
 8008730:	4601      	mov	r1, r0
 8008732:	ab03      	add	r3, sp, #12
 8008734:	4805      	ldr	r0, [pc, #20]	; (800874c <fiprintf+0x20>)
 8008736:	f853 2b04 	ldr.w	r2, [r3], #4
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	f000 f895 	bl	800886c <_vfiprintf_r>
 8008742:	b002      	add	sp, #8
 8008744:	f85d eb04 	ldr.w	lr, [sp], #4
 8008748:	b003      	add	sp, #12
 800874a:	4770      	bx	lr
 800874c:	2000000c 	.word	0x2000000c

08008750 <malloc>:
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <malloc+0xc>)
 8008752:	4601      	mov	r1, r0
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	f7ff bf39 	b.w	80085cc <_malloc_r>
 800875a:	bf00      	nop
 800875c:	2000000c 	.word	0x2000000c

08008760 <__malloc_lock>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__malloc_lock+0x8>)
 8008762:	f000 bdc7 	b.w	80092f4 <__retarget_lock_acquire_recursive>
 8008766:	bf00      	nop
 8008768:	200007cc 	.word	0x200007cc

0800876c <__malloc_unlock>:
 800876c:	4801      	ldr	r0, [pc, #4]	; (8008774 <__malloc_unlock+0x8>)
 800876e:	f000 bdc2 	b.w	80092f6 <__retarget_lock_release_recursive>
 8008772:	bf00      	nop
 8008774:	200007cc 	.word	0x200007cc

08008778 <_free_r>:
 8008778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800877a:	2900      	cmp	r1, #0
 800877c:	d048      	beq.n	8008810 <_free_r+0x98>
 800877e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008782:	9001      	str	r0, [sp, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f1a1 0404 	sub.w	r4, r1, #4
 800878a:	bfb8      	it	lt
 800878c:	18e4      	addlt	r4, r4, r3
 800878e:	f7ff ffe7 	bl	8008760 <__malloc_lock>
 8008792:	4a20      	ldr	r2, [pc, #128]	; (8008814 <_free_r+0x9c>)
 8008794:	9801      	ldr	r0, [sp, #4]
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	4615      	mov	r5, r2
 800879a:	b933      	cbnz	r3, 80087aa <_free_r+0x32>
 800879c:	6063      	str	r3, [r4, #4]
 800879e:	6014      	str	r4, [r2, #0]
 80087a0:	b003      	add	sp, #12
 80087a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a6:	f7ff bfe1 	b.w	800876c <__malloc_unlock>
 80087aa:	42a3      	cmp	r3, r4
 80087ac:	d90b      	bls.n	80087c6 <_free_r+0x4e>
 80087ae:	6821      	ldr	r1, [r4, #0]
 80087b0:	1862      	adds	r2, r4, r1
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bf04      	itt	eq
 80087b6:	681a      	ldreq	r2, [r3, #0]
 80087b8:	685b      	ldreq	r3, [r3, #4]
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	bf04      	itt	eq
 80087be:	1852      	addeq	r2, r2, r1
 80087c0:	6022      	streq	r2, [r4, #0]
 80087c2:	602c      	str	r4, [r5, #0]
 80087c4:	e7ec      	b.n	80087a0 <_free_r+0x28>
 80087c6:	461a      	mov	r2, r3
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	b10b      	cbz	r3, 80087d0 <_free_r+0x58>
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d9fa      	bls.n	80087c6 <_free_r+0x4e>
 80087d0:	6811      	ldr	r1, [r2, #0]
 80087d2:	1855      	adds	r5, r2, r1
 80087d4:	42a5      	cmp	r5, r4
 80087d6:	d10b      	bne.n	80087f0 <_free_r+0x78>
 80087d8:	6824      	ldr	r4, [r4, #0]
 80087da:	4421      	add	r1, r4
 80087dc:	1854      	adds	r4, r2, r1
 80087de:	42a3      	cmp	r3, r4
 80087e0:	6011      	str	r1, [r2, #0]
 80087e2:	d1dd      	bne.n	80087a0 <_free_r+0x28>
 80087e4:	681c      	ldr	r4, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	6053      	str	r3, [r2, #4]
 80087ea:	4421      	add	r1, r4
 80087ec:	6011      	str	r1, [r2, #0]
 80087ee:	e7d7      	b.n	80087a0 <_free_r+0x28>
 80087f0:	d902      	bls.n	80087f8 <_free_r+0x80>
 80087f2:	230c      	movs	r3, #12
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	e7d3      	b.n	80087a0 <_free_r+0x28>
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	1961      	adds	r1, r4, r5
 80087fc:	428b      	cmp	r3, r1
 80087fe:	bf04      	itt	eq
 8008800:	6819      	ldreq	r1, [r3, #0]
 8008802:	685b      	ldreq	r3, [r3, #4]
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	bf04      	itt	eq
 8008808:	1949      	addeq	r1, r1, r5
 800880a:	6021      	streq	r1, [r4, #0]
 800880c:	6054      	str	r4, [r2, #4]
 800880e:	e7c7      	b.n	80087a0 <_free_r+0x28>
 8008810:	b003      	add	sp, #12
 8008812:	bd30      	pop	{r4, r5, pc}
 8008814:	20000224 	.word	0x20000224

08008818 <__sfputc_r>:
 8008818:	6893      	ldr	r3, [r2, #8]
 800881a:	3b01      	subs	r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	b410      	push	{r4}
 8008820:	6093      	str	r3, [r2, #8]
 8008822:	da08      	bge.n	8008836 <__sfputc_r+0x1e>
 8008824:	6994      	ldr	r4, [r2, #24]
 8008826:	42a3      	cmp	r3, r4
 8008828:	db01      	blt.n	800882e <__sfputc_r+0x16>
 800882a:	290a      	cmp	r1, #10
 800882c:	d103      	bne.n	8008836 <__sfputc_r+0x1e>
 800882e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008832:	f000 badf 	b.w	8008df4 <__swbuf_r>
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	1c58      	adds	r0, r3, #1
 800883a:	6010      	str	r0, [r2, #0]
 800883c:	7019      	strb	r1, [r3, #0]
 800883e:	4608      	mov	r0, r1
 8008840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008844:	4770      	bx	lr

08008846 <__sfputs_r>:
 8008846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008848:	4606      	mov	r6, r0
 800884a:	460f      	mov	r7, r1
 800884c:	4614      	mov	r4, r2
 800884e:	18d5      	adds	r5, r2, r3
 8008850:	42ac      	cmp	r4, r5
 8008852:	d101      	bne.n	8008858 <__sfputs_r+0x12>
 8008854:	2000      	movs	r0, #0
 8008856:	e007      	b.n	8008868 <__sfputs_r+0x22>
 8008858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885c:	463a      	mov	r2, r7
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff ffda 	bl	8008818 <__sfputc_r>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d1f3      	bne.n	8008850 <__sfputs_r+0xa>
 8008868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800886c <_vfiprintf_r>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	460d      	mov	r5, r1
 8008872:	b09d      	sub	sp, #116	; 0x74
 8008874:	4614      	mov	r4, r2
 8008876:	4698      	mov	r8, r3
 8008878:	4606      	mov	r6, r0
 800887a:	b118      	cbz	r0, 8008884 <_vfiprintf_r+0x18>
 800887c:	6983      	ldr	r3, [r0, #24]
 800887e:	b90b      	cbnz	r3, 8008884 <_vfiprintf_r+0x18>
 8008880:	f000 fc9a 	bl	80091b8 <__sinit>
 8008884:	4b89      	ldr	r3, [pc, #548]	; (8008aac <_vfiprintf_r+0x240>)
 8008886:	429d      	cmp	r5, r3
 8008888:	d11b      	bne.n	80088c2 <_vfiprintf_r+0x56>
 800888a:	6875      	ldr	r5, [r6, #4]
 800888c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800888e:	07d9      	lsls	r1, r3, #31
 8008890:	d405      	bmi.n	800889e <_vfiprintf_r+0x32>
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	059a      	lsls	r2, r3, #22
 8008896:	d402      	bmi.n	800889e <_vfiprintf_r+0x32>
 8008898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800889a:	f000 fd2b 	bl	80092f4 <__retarget_lock_acquire_recursive>
 800889e:	89ab      	ldrh	r3, [r5, #12]
 80088a0:	071b      	lsls	r3, r3, #28
 80088a2:	d501      	bpl.n	80088a8 <_vfiprintf_r+0x3c>
 80088a4:	692b      	ldr	r3, [r5, #16]
 80088a6:	b9eb      	cbnz	r3, 80088e4 <_vfiprintf_r+0x78>
 80088a8:	4629      	mov	r1, r5
 80088aa:	4630      	mov	r0, r6
 80088ac:	f000 faf4 	bl	8008e98 <__swsetup_r>
 80088b0:	b1c0      	cbz	r0, 80088e4 <_vfiprintf_r+0x78>
 80088b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088b4:	07dc      	lsls	r4, r3, #31
 80088b6:	d50e      	bpl.n	80088d6 <_vfiprintf_r+0x6a>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	b01d      	add	sp, #116	; 0x74
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	4b7b      	ldr	r3, [pc, #492]	; (8008ab0 <_vfiprintf_r+0x244>)
 80088c4:	429d      	cmp	r5, r3
 80088c6:	d101      	bne.n	80088cc <_vfiprintf_r+0x60>
 80088c8:	68b5      	ldr	r5, [r6, #8]
 80088ca:	e7df      	b.n	800888c <_vfiprintf_r+0x20>
 80088cc:	4b79      	ldr	r3, [pc, #484]	; (8008ab4 <_vfiprintf_r+0x248>)
 80088ce:	429d      	cmp	r5, r3
 80088d0:	bf08      	it	eq
 80088d2:	68f5      	ldreq	r5, [r6, #12]
 80088d4:	e7da      	b.n	800888c <_vfiprintf_r+0x20>
 80088d6:	89ab      	ldrh	r3, [r5, #12]
 80088d8:	0598      	lsls	r0, r3, #22
 80088da:	d4ed      	bmi.n	80088b8 <_vfiprintf_r+0x4c>
 80088dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088de:	f000 fd0a 	bl	80092f6 <__retarget_lock_release_recursive>
 80088e2:	e7e9      	b.n	80088b8 <_vfiprintf_r+0x4c>
 80088e4:	2300      	movs	r3, #0
 80088e6:	9309      	str	r3, [sp, #36]	; 0x24
 80088e8:	2320      	movs	r3, #32
 80088ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80088f2:	2330      	movs	r3, #48	; 0x30
 80088f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ab8 <_vfiprintf_r+0x24c>
 80088f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088fc:	f04f 0901 	mov.w	r9, #1
 8008900:	4623      	mov	r3, r4
 8008902:	469a      	mov	sl, r3
 8008904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008908:	b10a      	cbz	r2, 800890e <_vfiprintf_r+0xa2>
 800890a:	2a25      	cmp	r2, #37	; 0x25
 800890c:	d1f9      	bne.n	8008902 <_vfiprintf_r+0x96>
 800890e:	ebba 0b04 	subs.w	fp, sl, r4
 8008912:	d00b      	beq.n	800892c <_vfiprintf_r+0xc0>
 8008914:	465b      	mov	r3, fp
 8008916:	4622      	mov	r2, r4
 8008918:	4629      	mov	r1, r5
 800891a:	4630      	mov	r0, r6
 800891c:	f7ff ff93 	bl	8008846 <__sfputs_r>
 8008920:	3001      	adds	r0, #1
 8008922:	f000 80aa 	beq.w	8008a7a <_vfiprintf_r+0x20e>
 8008926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008928:	445a      	add	r2, fp
 800892a:	9209      	str	r2, [sp, #36]	; 0x24
 800892c:	f89a 3000 	ldrb.w	r3, [sl]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 80a2 	beq.w	8008a7a <_vfiprintf_r+0x20e>
 8008936:	2300      	movs	r3, #0
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008940:	f10a 0a01 	add.w	sl, sl, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800894c:	931a      	str	r3, [sp, #104]	; 0x68
 800894e:	4654      	mov	r4, sl
 8008950:	2205      	movs	r2, #5
 8008952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008956:	4858      	ldr	r0, [pc, #352]	; (8008ab8 <_vfiprintf_r+0x24c>)
 8008958:	f7f7 fc7a 	bl	8000250 <memchr>
 800895c:	9a04      	ldr	r2, [sp, #16]
 800895e:	b9d8      	cbnz	r0, 8008998 <_vfiprintf_r+0x12c>
 8008960:	06d1      	lsls	r1, r2, #27
 8008962:	bf44      	itt	mi
 8008964:	2320      	movmi	r3, #32
 8008966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896a:	0713      	lsls	r3, r2, #28
 800896c:	bf44      	itt	mi
 800896e:	232b      	movmi	r3, #43	; 0x2b
 8008970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008974:	f89a 3000 	ldrb.w	r3, [sl]
 8008978:	2b2a      	cmp	r3, #42	; 0x2a
 800897a:	d015      	beq.n	80089a8 <_vfiprintf_r+0x13c>
 800897c:	9a07      	ldr	r2, [sp, #28]
 800897e:	4654      	mov	r4, sl
 8008980:	2000      	movs	r0, #0
 8008982:	f04f 0c0a 	mov.w	ip, #10
 8008986:	4621      	mov	r1, r4
 8008988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800898c:	3b30      	subs	r3, #48	; 0x30
 800898e:	2b09      	cmp	r3, #9
 8008990:	d94e      	bls.n	8008a30 <_vfiprintf_r+0x1c4>
 8008992:	b1b0      	cbz	r0, 80089c2 <_vfiprintf_r+0x156>
 8008994:	9207      	str	r2, [sp, #28]
 8008996:	e014      	b.n	80089c2 <_vfiprintf_r+0x156>
 8008998:	eba0 0308 	sub.w	r3, r0, r8
 800899c:	fa09 f303 	lsl.w	r3, r9, r3
 80089a0:	4313      	orrs	r3, r2
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	46a2      	mov	sl, r4
 80089a6:	e7d2      	b.n	800894e <_vfiprintf_r+0xe2>
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	1d19      	adds	r1, r3, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	9103      	str	r1, [sp, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bfbb      	ittet	lt
 80089b4:	425b      	neglt	r3, r3
 80089b6:	f042 0202 	orrlt.w	r2, r2, #2
 80089ba:	9307      	strge	r3, [sp, #28]
 80089bc:	9307      	strlt	r3, [sp, #28]
 80089be:	bfb8      	it	lt
 80089c0:	9204      	strlt	r2, [sp, #16]
 80089c2:	7823      	ldrb	r3, [r4, #0]
 80089c4:	2b2e      	cmp	r3, #46	; 0x2e
 80089c6:	d10c      	bne.n	80089e2 <_vfiprintf_r+0x176>
 80089c8:	7863      	ldrb	r3, [r4, #1]
 80089ca:	2b2a      	cmp	r3, #42	; 0x2a
 80089cc:	d135      	bne.n	8008a3a <_vfiprintf_r+0x1ce>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	1d1a      	adds	r2, r3, #4
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	9203      	str	r2, [sp, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	bfb8      	it	lt
 80089da:	f04f 33ff 	movlt.w	r3, #4294967295
 80089de:	3402      	adds	r4, #2
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ac8 <_vfiprintf_r+0x25c>
 80089e6:	7821      	ldrb	r1, [r4, #0]
 80089e8:	2203      	movs	r2, #3
 80089ea:	4650      	mov	r0, sl
 80089ec:	f7f7 fc30 	bl	8000250 <memchr>
 80089f0:	b140      	cbz	r0, 8008a04 <_vfiprintf_r+0x198>
 80089f2:	2340      	movs	r3, #64	; 0x40
 80089f4:	eba0 000a 	sub.w	r0, r0, sl
 80089f8:	fa03 f000 	lsl.w	r0, r3, r0
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	4303      	orrs	r3, r0
 8008a00:	3401      	adds	r4, #1
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a08:	482c      	ldr	r0, [pc, #176]	; (8008abc <_vfiprintf_r+0x250>)
 8008a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a0e:	2206      	movs	r2, #6
 8008a10:	f7f7 fc1e 	bl	8000250 <memchr>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d03f      	beq.n	8008a98 <_vfiprintf_r+0x22c>
 8008a18:	4b29      	ldr	r3, [pc, #164]	; (8008ac0 <_vfiprintf_r+0x254>)
 8008a1a:	bb1b      	cbnz	r3, 8008a64 <_vfiprintf_r+0x1f8>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	3307      	adds	r3, #7
 8008a20:	f023 0307 	bic.w	r3, r3, #7
 8008a24:	3308      	adds	r3, #8
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	443b      	add	r3, r7
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2e:	e767      	b.n	8008900 <_vfiprintf_r+0x94>
 8008a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a34:	460c      	mov	r4, r1
 8008a36:	2001      	movs	r0, #1
 8008a38:	e7a5      	b.n	8008986 <_vfiprintf_r+0x11a>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	3401      	adds	r4, #1
 8008a3e:	9305      	str	r3, [sp, #20]
 8008a40:	4619      	mov	r1, r3
 8008a42:	f04f 0c0a 	mov.w	ip, #10
 8008a46:	4620      	mov	r0, r4
 8008a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a4c:	3a30      	subs	r2, #48	; 0x30
 8008a4e:	2a09      	cmp	r2, #9
 8008a50:	d903      	bls.n	8008a5a <_vfiprintf_r+0x1ee>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0c5      	beq.n	80089e2 <_vfiprintf_r+0x176>
 8008a56:	9105      	str	r1, [sp, #20]
 8008a58:	e7c3      	b.n	80089e2 <_vfiprintf_r+0x176>
 8008a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a5e:	4604      	mov	r4, r0
 8008a60:	2301      	movs	r3, #1
 8008a62:	e7f0      	b.n	8008a46 <_vfiprintf_r+0x1da>
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	462a      	mov	r2, r5
 8008a6a:	4b16      	ldr	r3, [pc, #88]	; (8008ac4 <_vfiprintf_r+0x258>)
 8008a6c:	a904      	add	r1, sp, #16
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f3af 8000 	nop.w
 8008a74:	4607      	mov	r7, r0
 8008a76:	1c78      	adds	r0, r7, #1
 8008a78:	d1d6      	bne.n	8008a28 <_vfiprintf_r+0x1bc>
 8008a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a7c:	07d9      	lsls	r1, r3, #31
 8008a7e:	d405      	bmi.n	8008a8c <_vfiprintf_r+0x220>
 8008a80:	89ab      	ldrh	r3, [r5, #12]
 8008a82:	059a      	lsls	r2, r3, #22
 8008a84:	d402      	bmi.n	8008a8c <_vfiprintf_r+0x220>
 8008a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a88:	f000 fc35 	bl	80092f6 <__retarget_lock_release_recursive>
 8008a8c:	89ab      	ldrh	r3, [r5, #12]
 8008a8e:	065b      	lsls	r3, r3, #25
 8008a90:	f53f af12 	bmi.w	80088b8 <_vfiprintf_r+0x4c>
 8008a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a96:	e711      	b.n	80088bc <_vfiprintf_r+0x50>
 8008a98:	ab03      	add	r3, sp, #12
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <_vfiprintf_r+0x258>)
 8008aa0:	a904      	add	r1, sp, #16
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f000 f880 	bl	8008ba8 <_printf_i>
 8008aa8:	e7e4      	b.n	8008a74 <_vfiprintf_r+0x208>
 8008aaa:	bf00      	nop
 8008aac:	080099f4 	.word	0x080099f4
 8008ab0:	08009a14 	.word	0x08009a14
 8008ab4:	080099d4 	.word	0x080099d4
 8008ab8:	080099a1 	.word	0x080099a1
 8008abc:	080099ab 	.word	0x080099ab
 8008ac0:	00000000 	.word	0x00000000
 8008ac4:	08008847 	.word	0x08008847
 8008ac8:	080099a7 	.word	0x080099a7

08008acc <_printf_common>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	4699      	mov	r9, r3
 8008ad4:	688a      	ldr	r2, [r1, #8]
 8008ad6:	690b      	ldr	r3, [r1, #16]
 8008ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	bfb8      	it	lt
 8008ae0:	4613      	movlt	r3, r2
 8008ae2:	6033      	str	r3, [r6, #0]
 8008ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae8:	4607      	mov	r7, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	b10a      	cbz	r2, 8008af2 <_printf_common+0x26>
 8008aee:	3301      	adds	r3, #1
 8008af0:	6033      	str	r3, [r6, #0]
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	0699      	lsls	r1, r3, #26
 8008af6:	bf42      	ittt	mi
 8008af8:	6833      	ldrmi	r3, [r6, #0]
 8008afa:	3302      	addmi	r3, #2
 8008afc:	6033      	strmi	r3, [r6, #0]
 8008afe:	6825      	ldr	r5, [r4, #0]
 8008b00:	f015 0506 	ands.w	r5, r5, #6
 8008b04:	d106      	bne.n	8008b14 <_printf_common+0x48>
 8008b06:	f104 0a19 	add.w	sl, r4, #25
 8008b0a:	68e3      	ldr	r3, [r4, #12]
 8008b0c:	6832      	ldr	r2, [r6, #0]
 8008b0e:	1a9b      	subs	r3, r3, r2
 8008b10:	42ab      	cmp	r3, r5
 8008b12:	dc26      	bgt.n	8008b62 <_printf_common+0x96>
 8008b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b18:	1e13      	subs	r3, r2, #0
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	bf18      	it	ne
 8008b1e:	2301      	movne	r3, #1
 8008b20:	0692      	lsls	r2, r2, #26
 8008b22:	d42b      	bmi.n	8008b7c <_printf_common+0xb0>
 8008b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b28:	4649      	mov	r1, r9
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	47c0      	blx	r8
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d01e      	beq.n	8008b70 <_printf_common+0xa4>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	68e5      	ldr	r5, [r4, #12]
 8008b36:	6832      	ldr	r2, [r6, #0]
 8008b38:	f003 0306 	and.w	r3, r3, #6
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	bf08      	it	eq
 8008b40:	1aad      	subeq	r5, r5, r2
 8008b42:	68a3      	ldr	r3, [r4, #8]
 8008b44:	6922      	ldr	r2, [r4, #16]
 8008b46:	bf0c      	ite	eq
 8008b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b4c:	2500      	movne	r5, #0
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	bfc4      	itt	gt
 8008b52:	1a9b      	subgt	r3, r3, r2
 8008b54:	18ed      	addgt	r5, r5, r3
 8008b56:	2600      	movs	r6, #0
 8008b58:	341a      	adds	r4, #26
 8008b5a:	42b5      	cmp	r5, r6
 8008b5c:	d11a      	bne.n	8008b94 <_printf_common+0xc8>
 8008b5e:	2000      	movs	r0, #0
 8008b60:	e008      	b.n	8008b74 <_printf_common+0xa8>
 8008b62:	2301      	movs	r3, #1
 8008b64:	4652      	mov	r2, sl
 8008b66:	4649      	mov	r1, r9
 8008b68:	4638      	mov	r0, r7
 8008b6a:	47c0      	blx	r8
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d103      	bne.n	8008b78 <_printf_common+0xac>
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b78:	3501      	adds	r5, #1
 8008b7a:	e7c6      	b.n	8008b0a <_printf_common+0x3e>
 8008b7c:	18e1      	adds	r1, r4, r3
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	2030      	movs	r0, #48	; 0x30
 8008b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b86:	4422      	add	r2, r4
 8008b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b90:	3302      	adds	r3, #2
 8008b92:	e7c7      	b.n	8008b24 <_printf_common+0x58>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4622      	mov	r2, r4
 8008b98:	4649      	mov	r1, r9
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	47c0      	blx	r8
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d0e6      	beq.n	8008b70 <_printf_common+0xa4>
 8008ba2:	3601      	adds	r6, #1
 8008ba4:	e7d9      	b.n	8008b5a <_printf_common+0x8e>
	...

08008ba8 <_printf_i>:
 8008ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	460c      	mov	r4, r1
 8008bae:	4691      	mov	r9, r2
 8008bb0:	7e27      	ldrb	r7, [r4, #24]
 8008bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008bb4:	2f78      	cmp	r7, #120	; 0x78
 8008bb6:	4680      	mov	r8, r0
 8008bb8:	469a      	mov	sl, r3
 8008bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bbe:	d807      	bhi.n	8008bd0 <_printf_i+0x28>
 8008bc0:	2f62      	cmp	r7, #98	; 0x62
 8008bc2:	d80a      	bhi.n	8008bda <_printf_i+0x32>
 8008bc4:	2f00      	cmp	r7, #0
 8008bc6:	f000 80d8 	beq.w	8008d7a <_printf_i+0x1d2>
 8008bca:	2f58      	cmp	r7, #88	; 0x58
 8008bcc:	f000 80a3 	beq.w	8008d16 <_printf_i+0x16e>
 8008bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bd8:	e03a      	b.n	8008c50 <_printf_i+0xa8>
 8008bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bde:	2b15      	cmp	r3, #21
 8008be0:	d8f6      	bhi.n	8008bd0 <_printf_i+0x28>
 8008be2:	a001      	add	r0, pc, #4	; (adr r0, 8008be8 <_printf_i+0x40>)
 8008be4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008be8:	08008c41 	.word	0x08008c41
 8008bec:	08008c55 	.word	0x08008c55
 8008bf0:	08008bd1 	.word	0x08008bd1
 8008bf4:	08008bd1 	.word	0x08008bd1
 8008bf8:	08008bd1 	.word	0x08008bd1
 8008bfc:	08008bd1 	.word	0x08008bd1
 8008c00:	08008c55 	.word	0x08008c55
 8008c04:	08008bd1 	.word	0x08008bd1
 8008c08:	08008bd1 	.word	0x08008bd1
 8008c0c:	08008bd1 	.word	0x08008bd1
 8008c10:	08008bd1 	.word	0x08008bd1
 8008c14:	08008d61 	.word	0x08008d61
 8008c18:	08008c85 	.word	0x08008c85
 8008c1c:	08008d43 	.word	0x08008d43
 8008c20:	08008bd1 	.word	0x08008bd1
 8008c24:	08008bd1 	.word	0x08008bd1
 8008c28:	08008d83 	.word	0x08008d83
 8008c2c:	08008bd1 	.word	0x08008bd1
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008bd1 	.word	0x08008bd1
 8008c38:	08008bd1 	.word	0x08008bd1
 8008c3c:	08008d4b 	.word	0x08008d4b
 8008c40:	680b      	ldr	r3, [r1, #0]
 8008c42:	1d1a      	adds	r2, r3, #4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	600a      	str	r2, [r1, #0]
 8008c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c50:	2301      	movs	r3, #1
 8008c52:	e0a3      	b.n	8008d9c <_printf_i+0x1f4>
 8008c54:	6825      	ldr	r5, [r4, #0]
 8008c56:	6808      	ldr	r0, [r1, #0]
 8008c58:	062e      	lsls	r6, r5, #24
 8008c5a:	f100 0304 	add.w	r3, r0, #4
 8008c5e:	d50a      	bpl.n	8008c76 <_printf_i+0xce>
 8008c60:	6805      	ldr	r5, [r0, #0]
 8008c62:	600b      	str	r3, [r1, #0]
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	da03      	bge.n	8008c70 <_printf_i+0xc8>
 8008c68:	232d      	movs	r3, #45	; 0x2d
 8008c6a:	426d      	negs	r5, r5
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c70:	485e      	ldr	r0, [pc, #376]	; (8008dec <_printf_i+0x244>)
 8008c72:	230a      	movs	r3, #10
 8008c74:	e019      	b.n	8008caa <_printf_i+0x102>
 8008c76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c7a:	6805      	ldr	r5, [r0, #0]
 8008c7c:	600b      	str	r3, [r1, #0]
 8008c7e:	bf18      	it	ne
 8008c80:	b22d      	sxthne	r5, r5
 8008c82:	e7ef      	b.n	8008c64 <_printf_i+0xbc>
 8008c84:	680b      	ldr	r3, [r1, #0]
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	1d18      	adds	r0, r3, #4
 8008c8a:	6008      	str	r0, [r1, #0]
 8008c8c:	0628      	lsls	r0, r5, #24
 8008c8e:	d501      	bpl.n	8008c94 <_printf_i+0xec>
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <_printf_i+0xf2>
 8008c94:	0669      	lsls	r1, r5, #25
 8008c96:	d5fb      	bpl.n	8008c90 <_printf_i+0xe8>
 8008c98:	881d      	ldrh	r5, [r3, #0]
 8008c9a:	4854      	ldr	r0, [pc, #336]	; (8008dec <_printf_i+0x244>)
 8008c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2308      	moveq	r3, #8
 8008ca2:	230a      	movne	r3, #10
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008caa:	6866      	ldr	r6, [r4, #4]
 8008cac:	60a6      	str	r6, [r4, #8]
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	bfa2      	ittt	ge
 8008cb2:	6821      	ldrge	r1, [r4, #0]
 8008cb4:	f021 0104 	bicge.w	r1, r1, #4
 8008cb8:	6021      	strge	r1, [r4, #0]
 8008cba:	b90d      	cbnz	r5, 8008cc0 <_printf_i+0x118>
 8008cbc:	2e00      	cmp	r6, #0
 8008cbe:	d04d      	beq.n	8008d5c <_printf_i+0x1b4>
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8008cca:	5dc7      	ldrb	r7, [r0, r7]
 8008ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cd0:	462f      	mov	r7, r5
 8008cd2:	42bb      	cmp	r3, r7
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	d9f4      	bls.n	8008cc2 <_printf_i+0x11a>
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d10b      	bne.n	8008cf4 <_printf_i+0x14c>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	07df      	lsls	r7, r3, #31
 8008ce0:	d508      	bpl.n	8008cf4 <_printf_i+0x14c>
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	6861      	ldr	r1, [r4, #4]
 8008ce6:	4299      	cmp	r1, r3
 8008ce8:	bfde      	ittt	le
 8008cea:	2330      	movle	r3, #48	; 0x30
 8008cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cf4:	1b92      	subs	r2, r2, r6
 8008cf6:	6122      	str	r2, [r4, #16]
 8008cf8:	f8cd a000 	str.w	sl, [sp]
 8008cfc:	464b      	mov	r3, r9
 8008cfe:	aa03      	add	r2, sp, #12
 8008d00:	4621      	mov	r1, r4
 8008d02:	4640      	mov	r0, r8
 8008d04:	f7ff fee2 	bl	8008acc <_printf_common>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d14c      	bne.n	8008da6 <_printf_i+0x1fe>
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	b004      	add	sp, #16
 8008d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d16:	4835      	ldr	r0, [pc, #212]	; (8008dec <_printf_i+0x244>)
 8008d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	680e      	ldr	r6, [r1, #0]
 8008d20:	061f      	lsls	r7, r3, #24
 8008d22:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d26:	600e      	str	r6, [r1, #0]
 8008d28:	d514      	bpl.n	8008d54 <_printf_i+0x1ac>
 8008d2a:	07d9      	lsls	r1, r3, #31
 8008d2c:	bf44      	itt	mi
 8008d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d32:	6023      	strmi	r3, [r4, #0]
 8008d34:	b91d      	cbnz	r5, 8008d3e <_printf_i+0x196>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	f023 0320 	bic.w	r3, r3, #32
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	2310      	movs	r3, #16
 8008d40:	e7b0      	b.n	8008ca4 <_printf_i+0xfc>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	f043 0320 	orr.w	r3, r3, #32
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	2378      	movs	r3, #120	; 0x78
 8008d4c:	4828      	ldr	r0, [pc, #160]	; (8008df0 <_printf_i+0x248>)
 8008d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d52:	e7e3      	b.n	8008d1c <_printf_i+0x174>
 8008d54:	065e      	lsls	r6, r3, #25
 8008d56:	bf48      	it	mi
 8008d58:	b2ad      	uxthmi	r5, r5
 8008d5a:	e7e6      	b.n	8008d2a <_printf_i+0x182>
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	e7bb      	b.n	8008cd8 <_printf_i+0x130>
 8008d60:	680b      	ldr	r3, [r1, #0]
 8008d62:	6826      	ldr	r6, [r4, #0]
 8008d64:	6960      	ldr	r0, [r4, #20]
 8008d66:	1d1d      	adds	r5, r3, #4
 8008d68:	600d      	str	r5, [r1, #0]
 8008d6a:	0635      	lsls	r5, r6, #24
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	d501      	bpl.n	8008d74 <_printf_i+0x1cc>
 8008d70:	6018      	str	r0, [r3, #0]
 8008d72:	e002      	b.n	8008d7a <_printf_i+0x1d2>
 8008d74:	0671      	lsls	r1, r6, #25
 8008d76:	d5fb      	bpl.n	8008d70 <_printf_i+0x1c8>
 8008d78:	8018      	strh	r0, [r3, #0]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6123      	str	r3, [r4, #16]
 8008d7e:	4616      	mov	r6, r2
 8008d80:	e7ba      	b.n	8008cf8 <_printf_i+0x150>
 8008d82:	680b      	ldr	r3, [r1, #0]
 8008d84:	1d1a      	adds	r2, r3, #4
 8008d86:	600a      	str	r2, [r1, #0]
 8008d88:	681e      	ldr	r6, [r3, #0]
 8008d8a:	6862      	ldr	r2, [r4, #4]
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7f7 fa5e 	bl	8000250 <memchr>
 8008d94:	b108      	cbz	r0, 8008d9a <_printf_i+0x1f2>
 8008d96:	1b80      	subs	r0, r0, r6
 8008d98:	6060      	str	r0, [r4, #4]
 8008d9a:	6863      	ldr	r3, [r4, #4]
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008da4:	e7a8      	b.n	8008cf8 <_printf_i+0x150>
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	4632      	mov	r2, r6
 8008daa:	4649      	mov	r1, r9
 8008dac:	4640      	mov	r0, r8
 8008dae:	47d0      	blx	sl
 8008db0:	3001      	adds	r0, #1
 8008db2:	d0ab      	beq.n	8008d0c <_printf_i+0x164>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	079b      	lsls	r3, r3, #30
 8008db8:	d413      	bmi.n	8008de2 <_printf_i+0x23a>
 8008dba:	68e0      	ldr	r0, [r4, #12]
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	4298      	cmp	r0, r3
 8008dc0:	bfb8      	it	lt
 8008dc2:	4618      	movlt	r0, r3
 8008dc4:	e7a4      	b.n	8008d10 <_printf_i+0x168>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4632      	mov	r2, r6
 8008dca:	4649      	mov	r1, r9
 8008dcc:	4640      	mov	r0, r8
 8008dce:	47d0      	blx	sl
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d09b      	beq.n	8008d0c <_printf_i+0x164>
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	9903      	ldr	r1, [sp, #12]
 8008dda:	1a5b      	subs	r3, r3, r1
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dcf2      	bgt.n	8008dc6 <_printf_i+0x21e>
 8008de0:	e7eb      	b.n	8008dba <_printf_i+0x212>
 8008de2:	2500      	movs	r5, #0
 8008de4:	f104 0619 	add.w	r6, r4, #25
 8008de8:	e7f5      	b.n	8008dd6 <_printf_i+0x22e>
 8008dea:	bf00      	nop
 8008dec:	080099b2 	.word	0x080099b2
 8008df0:	080099c3 	.word	0x080099c3

08008df4 <__swbuf_r>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	460e      	mov	r6, r1
 8008df8:	4614      	mov	r4, r2
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	b118      	cbz	r0, 8008e06 <__swbuf_r+0x12>
 8008dfe:	6983      	ldr	r3, [r0, #24]
 8008e00:	b90b      	cbnz	r3, 8008e06 <__swbuf_r+0x12>
 8008e02:	f000 f9d9 	bl	80091b8 <__sinit>
 8008e06:	4b21      	ldr	r3, [pc, #132]	; (8008e8c <__swbuf_r+0x98>)
 8008e08:	429c      	cmp	r4, r3
 8008e0a:	d12b      	bne.n	8008e64 <__swbuf_r+0x70>
 8008e0c:	686c      	ldr	r4, [r5, #4]
 8008e0e:	69a3      	ldr	r3, [r4, #24]
 8008e10:	60a3      	str	r3, [r4, #8]
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	071a      	lsls	r2, r3, #28
 8008e16:	d52f      	bpl.n	8008e78 <__swbuf_r+0x84>
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	b36b      	cbz	r3, 8008e78 <__swbuf_r+0x84>
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	6820      	ldr	r0, [r4, #0]
 8008e20:	1ac0      	subs	r0, r0, r3
 8008e22:	6963      	ldr	r3, [r4, #20]
 8008e24:	b2f6      	uxtb	r6, r6
 8008e26:	4283      	cmp	r3, r0
 8008e28:	4637      	mov	r7, r6
 8008e2a:	dc04      	bgt.n	8008e36 <__swbuf_r+0x42>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 f92e 	bl	8009090 <_fflush_r>
 8008e34:	bb30      	cbnz	r0, 8008e84 <__swbuf_r+0x90>
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	60a3      	str	r3, [r4, #8]
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	6022      	str	r2, [r4, #0]
 8008e42:	701e      	strb	r6, [r3, #0]
 8008e44:	6963      	ldr	r3, [r4, #20]
 8008e46:	3001      	adds	r0, #1
 8008e48:	4283      	cmp	r3, r0
 8008e4a:	d004      	beq.n	8008e56 <__swbuf_r+0x62>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	07db      	lsls	r3, r3, #31
 8008e50:	d506      	bpl.n	8008e60 <__swbuf_r+0x6c>
 8008e52:	2e0a      	cmp	r6, #10
 8008e54:	d104      	bne.n	8008e60 <__swbuf_r+0x6c>
 8008e56:	4621      	mov	r1, r4
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f000 f919 	bl	8009090 <_fflush_r>
 8008e5e:	b988      	cbnz	r0, 8008e84 <__swbuf_r+0x90>
 8008e60:	4638      	mov	r0, r7
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e64:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <__swbuf_r+0x9c>)
 8008e66:	429c      	cmp	r4, r3
 8008e68:	d101      	bne.n	8008e6e <__swbuf_r+0x7a>
 8008e6a:	68ac      	ldr	r4, [r5, #8]
 8008e6c:	e7cf      	b.n	8008e0e <__swbuf_r+0x1a>
 8008e6e:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <__swbuf_r+0xa0>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	bf08      	it	eq
 8008e74:	68ec      	ldreq	r4, [r5, #12]
 8008e76:	e7ca      	b.n	8008e0e <__swbuf_r+0x1a>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f000 f80c 	bl	8008e98 <__swsetup_r>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d0cb      	beq.n	8008e1c <__swbuf_r+0x28>
 8008e84:	f04f 37ff 	mov.w	r7, #4294967295
 8008e88:	e7ea      	b.n	8008e60 <__swbuf_r+0x6c>
 8008e8a:	bf00      	nop
 8008e8c:	080099f4 	.word	0x080099f4
 8008e90:	08009a14 	.word	0x08009a14
 8008e94:	080099d4 	.word	0x080099d4

08008e98 <__swsetup_r>:
 8008e98:	4b32      	ldr	r3, [pc, #200]	; (8008f64 <__swsetup_r+0xcc>)
 8008e9a:	b570      	push	{r4, r5, r6, lr}
 8008e9c:	681d      	ldr	r5, [r3, #0]
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	b125      	cbz	r5, 8008eae <__swsetup_r+0x16>
 8008ea4:	69ab      	ldr	r3, [r5, #24]
 8008ea6:	b913      	cbnz	r3, 8008eae <__swsetup_r+0x16>
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 f985 	bl	80091b8 <__sinit>
 8008eae:	4b2e      	ldr	r3, [pc, #184]	; (8008f68 <__swsetup_r+0xd0>)
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	d10f      	bne.n	8008ed4 <__swsetup_r+0x3c>
 8008eb4:	686c      	ldr	r4, [r5, #4]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ebc:	0719      	lsls	r1, r3, #28
 8008ebe:	d42c      	bmi.n	8008f1a <__swsetup_r+0x82>
 8008ec0:	06dd      	lsls	r5, r3, #27
 8008ec2:	d411      	bmi.n	8008ee8 <__swsetup_r+0x50>
 8008ec4:	2309      	movs	r3, #9
 8008ec6:	6033      	str	r3, [r6, #0]
 8008ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	e03e      	b.n	8008f52 <__swsetup_r+0xba>
 8008ed4:	4b25      	ldr	r3, [pc, #148]	; (8008f6c <__swsetup_r+0xd4>)
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d101      	bne.n	8008ede <__swsetup_r+0x46>
 8008eda:	68ac      	ldr	r4, [r5, #8]
 8008edc:	e7eb      	b.n	8008eb6 <__swsetup_r+0x1e>
 8008ede:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <__swsetup_r+0xd8>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	bf08      	it	eq
 8008ee4:	68ec      	ldreq	r4, [r5, #12]
 8008ee6:	e7e6      	b.n	8008eb6 <__swsetup_r+0x1e>
 8008ee8:	0758      	lsls	r0, r3, #29
 8008eea:	d512      	bpl.n	8008f12 <__swsetup_r+0x7a>
 8008eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eee:	b141      	cbz	r1, 8008f02 <__swsetup_r+0x6a>
 8008ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef4:	4299      	cmp	r1, r3
 8008ef6:	d002      	beq.n	8008efe <__swsetup_r+0x66>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff fc3d 	bl	8008778 <_free_r>
 8008efe:	2300      	movs	r3, #0
 8008f00:	6363      	str	r3, [r4, #52]	; 0x34
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	f043 0308 	orr.w	r3, r3, #8
 8008f18:	81a3      	strh	r3, [r4, #12]
 8008f1a:	6923      	ldr	r3, [r4, #16]
 8008f1c:	b94b      	cbnz	r3, 8008f32 <__swsetup_r+0x9a>
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f28:	d003      	beq.n	8008f32 <__swsetup_r+0x9a>
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f000 fa07 	bl	8009340 <__smakebuf_r>
 8008f32:	89a0      	ldrh	r0, [r4, #12]
 8008f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f38:	f010 0301 	ands.w	r3, r0, #1
 8008f3c:	d00a      	beq.n	8008f54 <__swsetup_r+0xbc>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	6963      	ldr	r3, [r4, #20]
 8008f44:	425b      	negs	r3, r3
 8008f46:	61a3      	str	r3, [r4, #24]
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	b943      	cbnz	r3, 8008f5e <__swsetup_r+0xc6>
 8008f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f50:	d1ba      	bne.n	8008ec8 <__swsetup_r+0x30>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	0781      	lsls	r1, r0, #30
 8008f56:	bf58      	it	pl
 8008f58:	6963      	ldrpl	r3, [r4, #20]
 8008f5a:	60a3      	str	r3, [r4, #8]
 8008f5c:	e7f4      	b.n	8008f48 <__swsetup_r+0xb0>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e7f7      	b.n	8008f52 <__swsetup_r+0xba>
 8008f62:	bf00      	nop
 8008f64:	2000000c 	.word	0x2000000c
 8008f68:	080099f4 	.word	0x080099f4
 8008f6c:	08009a14 	.word	0x08009a14
 8008f70:	080099d4 	.word	0x080099d4

08008f74 <abort>:
 8008f74:	b508      	push	{r3, lr}
 8008f76:	2006      	movs	r0, #6
 8008f78:	f000 fa4a 	bl	8009410 <raise>
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	f7f8 f939 	bl	80011f4 <_exit>
	...

08008f84 <__sflush_r>:
 8008f84:	898a      	ldrh	r2, [r1, #12]
 8008f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	0710      	lsls	r0, r2, #28
 8008f8e:	460c      	mov	r4, r1
 8008f90:	d458      	bmi.n	8009044 <__sflush_r+0xc0>
 8008f92:	684b      	ldr	r3, [r1, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dc05      	bgt.n	8008fa4 <__sflush_r+0x20>
 8008f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dc02      	bgt.n	8008fa4 <__sflush_r+0x20>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	d0f9      	beq.n	8008f9e <__sflush_r+0x1a>
 8008faa:	2300      	movs	r3, #0
 8008fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fb0:	682f      	ldr	r7, [r5, #0]
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	d032      	beq.n	800901c <__sflush_r+0x98>
 8008fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	075a      	lsls	r2, r3, #29
 8008fbc:	d505      	bpl.n	8008fca <__sflush_r+0x46>
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	1ac0      	subs	r0, r0, r3
 8008fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fc4:	b10b      	cbz	r3, 8008fca <__sflush_r+0x46>
 8008fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fc8:	1ac0      	subs	r0, r0, r3
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4602      	mov	r2, r0
 8008fce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fd0:	6a21      	ldr	r1, [r4, #32]
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	47b0      	blx	r6
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	d106      	bne.n	8008fea <__sflush_r+0x66>
 8008fdc:	6829      	ldr	r1, [r5, #0]
 8008fde:	291d      	cmp	r1, #29
 8008fe0:	d82c      	bhi.n	800903c <__sflush_r+0xb8>
 8008fe2:	4a2a      	ldr	r2, [pc, #168]	; (800908c <__sflush_r+0x108>)
 8008fe4:	40ca      	lsrs	r2, r1
 8008fe6:	07d6      	lsls	r6, r2, #31
 8008fe8:	d528      	bpl.n	800903c <__sflush_r+0xb8>
 8008fea:	2200      	movs	r2, #0
 8008fec:	6062      	str	r2, [r4, #4]
 8008fee:	04d9      	lsls	r1, r3, #19
 8008ff0:	6922      	ldr	r2, [r4, #16]
 8008ff2:	6022      	str	r2, [r4, #0]
 8008ff4:	d504      	bpl.n	8009000 <__sflush_r+0x7c>
 8008ff6:	1c42      	adds	r2, r0, #1
 8008ff8:	d101      	bne.n	8008ffe <__sflush_r+0x7a>
 8008ffa:	682b      	ldr	r3, [r5, #0]
 8008ffc:	b903      	cbnz	r3, 8009000 <__sflush_r+0x7c>
 8008ffe:	6560      	str	r0, [r4, #84]	; 0x54
 8009000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009002:	602f      	str	r7, [r5, #0]
 8009004:	2900      	cmp	r1, #0
 8009006:	d0ca      	beq.n	8008f9e <__sflush_r+0x1a>
 8009008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800900c:	4299      	cmp	r1, r3
 800900e:	d002      	beq.n	8009016 <__sflush_r+0x92>
 8009010:	4628      	mov	r0, r5
 8009012:	f7ff fbb1 	bl	8008778 <_free_r>
 8009016:	2000      	movs	r0, #0
 8009018:	6360      	str	r0, [r4, #52]	; 0x34
 800901a:	e7c1      	b.n	8008fa0 <__sflush_r+0x1c>
 800901c:	6a21      	ldr	r1, [r4, #32]
 800901e:	2301      	movs	r3, #1
 8009020:	4628      	mov	r0, r5
 8009022:	47b0      	blx	r6
 8009024:	1c41      	adds	r1, r0, #1
 8009026:	d1c7      	bne.n	8008fb8 <__sflush_r+0x34>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0c4      	beq.n	8008fb8 <__sflush_r+0x34>
 800902e:	2b1d      	cmp	r3, #29
 8009030:	d001      	beq.n	8009036 <__sflush_r+0xb2>
 8009032:	2b16      	cmp	r3, #22
 8009034:	d101      	bne.n	800903a <__sflush_r+0xb6>
 8009036:	602f      	str	r7, [r5, #0]
 8009038:	e7b1      	b.n	8008f9e <__sflush_r+0x1a>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	e7ad      	b.n	8008fa0 <__sflush_r+0x1c>
 8009044:	690f      	ldr	r7, [r1, #16]
 8009046:	2f00      	cmp	r7, #0
 8009048:	d0a9      	beq.n	8008f9e <__sflush_r+0x1a>
 800904a:	0793      	lsls	r3, r2, #30
 800904c:	680e      	ldr	r6, [r1, #0]
 800904e:	bf08      	it	eq
 8009050:	694b      	ldreq	r3, [r1, #20]
 8009052:	600f      	str	r7, [r1, #0]
 8009054:	bf18      	it	ne
 8009056:	2300      	movne	r3, #0
 8009058:	eba6 0807 	sub.w	r8, r6, r7
 800905c:	608b      	str	r3, [r1, #8]
 800905e:	f1b8 0f00 	cmp.w	r8, #0
 8009062:	dd9c      	ble.n	8008f9e <__sflush_r+0x1a>
 8009064:	6a21      	ldr	r1, [r4, #32]
 8009066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009068:	4643      	mov	r3, r8
 800906a:	463a      	mov	r2, r7
 800906c:	4628      	mov	r0, r5
 800906e:	47b0      	blx	r6
 8009070:	2800      	cmp	r0, #0
 8009072:	dc06      	bgt.n	8009082 <__sflush_r+0xfe>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	e78e      	b.n	8008fa0 <__sflush_r+0x1c>
 8009082:	4407      	add	r7, r0
 8009084:	eba8 0800 	sub.w	r8, r8, r0
 8009088:	e7e9      	b.n	800905e <__sflush_r+0xda>
 800908a:	bf00      	nop
 800908c:	20400001 	.word	0x20400001

08009090 <_fflush_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	690b      	ldr	r3, [r1, #16]
 8009094:	4605      	mov	r5, r0
 8009096:	460c      	mov	r4, r1
 8009098:	b913      	cbnz	r3, 80090a0 <_fflush_r+0x10>
 800909a:	2500      	movs	r5, #0
 800909c:	4628      	mov	r0, r5
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	b118      	cbz	r0, 80090aa <_fflush_r+0x1a>
 80090a2:	6983      	ldr	r3, [r0, #24]
 80090a4:	b90b      	cbnz	r3, 80090aa <_fflush_r+0x1a>
 80090a6:	f000 f887 	bl	80091b8 <__sinit>
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <_fflush_r+0x6c>)
 80090ac:	429c      	cmp	r4, r3
 80090ae:	d11b      	bne.n	80090e8 <_fflush_r+0x58>
 80090b0:	686c      	ldr	r4, [r5, #4]
 80090b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0ef      	beq.n	800909a <_fflush_r+0xa>
 80090ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090bc:	07d0      	lsls	r0, r2, #31
 80090be:	d404      	bmi.n	80090ca <_fflush_r+0x3a>
 80090c0:	0599      	lsls	r1, r3, #22
 80090c2:	d402      	bmi.n	80090ca <_fflush_r+0x3a>
 80090c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c6:	f000 f915 	bl	80092f4 <__retarget_lock_acquire_recursive>
 80090ca:	4628      	mov	r0, r5
 80090cc:	4621      	mov	r1, r4
 80090ce:	f7ff ff59 	bl	8008f84 <__sflush_r>
 80090d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090d4:	07da      	lsls	r2, r3, #31
 80090d6:	4605      	mov	r5, r0
 80090d8:	d4e0      	bmi.n	800909c <_fflush_r+0xc>
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	059b      	lsls	r3, r3, #22
 80090de:	d4dd      	bmi.n	800909c <_fflush_r+0xc>
 80090e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e2:	f000 f908 	bl	80092f6 <__retarget_lock_release_recursive>
 80090e6:	e7d9      	b.n	800909c <_fflush_r+0xc>
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <_fflush_r+0x70>)
 80090ea:	429c      	cmp	r4, r3
 80090ec:	d101      	bne.n	80090f2 <_fflush_r+0x62>
 80090ee:	68ac      	ldr	r4, [r5, #8]
 80090f0:	e7df      	b.n	80090b2 <_fflush_r+0x22>
 80090f2:	4b04      	ldr	r3, [pc, #16]	; (8009104 <_fflush_r+0x74>)
 80090f4:	429c      	cmp	r4, r3
 80090f6:	bf08      	it	eq
 80090f8:	68ec      	ldreq	r4, [r5, #12]
 80090fa:	e7da      	b.n	80090b2 <_fflush_r+0x22>
 80090fc:	080099f4 	.word	0x080099f4
 8009100:	08009a14 	.word	0x08009a14
 8009104:	080099d4 	.word	0x080099d4

08009108 <std>:
 8009108:	2300      	movs	r3, #0
 800910a:	b510      	push	{r4, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	e9c0 3300 	strd	r3, r3, [r0]
 8009112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009116:	6083      	str	r3, [r0, #8]
 8009118:	8181      	strh	r1, [r0, #12]
 800911a:	6643      	str	r3, [r0, #100]	; 0x64
 800911c:	81c2      	strh	r2, [r0, #14]
 800911e:	6183      	str	r3, [r0, #24]
 8009120:	4619      	mov	r1, r3
 8009122:	2208      	movs	r2, #8
 8009124:	305c      	adds	r0, #92	; 0x5c
 8009126:	f7fd fbef 	bl	8006908 <memset>
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x38>)
 800912c:	6263      	str	r3, [r4, #36]	; 0x24
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <std+0x3c>)
 8009130:	62a3      	str	r3, [r4, #40]	; 0x28
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <std+0x40>)
 8009134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009136:	4b05      	ldr	r3, [pc, #20]	; (800914c <std+0x44>)
 8009138:	6224      	str	r4, [r4, #32]
 800913a:	6323      	str	r3, [r4, #48]	; 0x30
 800913c:	bd10      	pop	{r4, pc}
 800913e:	bf00      	nop
 8009140:	08009449 	.word	0x08009449
 8009144:	0800946b 	.word	0x0800946b
 8009148:	080094a3 	.word	0x080094a3
 800914c:	080094c7 	.word	0x080094c7

08009150 <_cleanup_r>:
 8009150:	4901      	ldr	r1, [pc, #4]	; (8009158 <_cleanup_r+0x8>)
 8009152:	f000 b8af 	b.w	80092b4 <_fwalk_reent>
 8009156:	bf00      	nop
 8009158:	08009091 	.word	0x08009091

0800915c <__sfmoreglue>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	1e4a      	subs	r2, r1, #1
 8009160:	2568      	movs	r5, #104	; 0x68
 8009162:	4355      	muls	r5, r2
 8009164:	460e      	mov	r6, r1
 8009166:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800916a:	f7ff fa2f 	bl	80085cc <_malloc_r>
 800916e:	4604      	mov	r4, r0
 8009170:	b140      	cbz	r0, 8009184 <__sfmoreglue+0x28>
 8009172:	2100      	movs	r1, #0
 8009174:	e9c0 1600 	strd	r1, r6, [r0]
 8009178:	300c      	adds	r0, #12
 800917a:	60a0      	str	r0, [r4, #8]
 800917c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009180:	f7fd fbc2 	bl	8006908 <memset>
 8009184:	4620      	mov	r0, r4
 8009186:	bd70      	pop	{r4, r5, r6, pc}

08009188 <__sfp_lock_acquire>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sfp_lock_acquire+0x8>)
 800918a:	f000 b8b3 	b.w	80092f4 <__retarget_lock_acquire_recursive>
 800918e:	bf00      	nop
 8009190:	200007d0 	.word	0x200007d0

08009194 <__sfp_lock_release>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__sfp_lock_release+0x8>)
 8009196:	f000 b8ae 	b.w	80092f6 <__retarget_lock_release_recursive>
 800919a:	bf00      	nop
 800919c:	200007d0 	.word	0x200007d0

080091a0 <__sinit_lock_acquire>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__sinit_lock_acquire+0x8>)
 80091a2:	f000 b8a7 	b.w	80092f4 <__retarget_lock_acquire_recursive>
 80091a6:	bf00      	nop
 80091a8:	200007cb 	.word	0x200007cb

080091ac <__sinit_lock_release>:
 80091ac:	4801      	ldr	r0, [pc, #4]	; (80091b4 <__sinit_lock_release+0x8>)
 80091ae:	f000 b8a2 	b.w	80092f6 <__retarget_lock_release_recursive>
 80091b2:	bf00      	nop
 80091b4:	200007cb 	.word	0x200007cb

080091b8 <__sinit>:
 80091b8:	b510      	push	{r4, lr}
 80091ba:	4604      	mov	r4, r0
 80091bc:	f7ff fff0 	bl	80091a0 <__sinit_lock_acquire>
 80091c0:	69a3      	ldr	r3, [r4, #24]
 80091c2:	b11b      	cbz	r3, 80091cc <__sinit+0x14>
 80091c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c8:	f7ff bff0 	b.w	80091ac <__sinit_lock_release>
 80091cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091d0:	6523      	str	r3, [r4, #80]	; 0x50
 80091d2:	4b13      	ldr	r3, [pc, #76]	; (8009220 <__sinit+0x68>)
 80091d4:	4a13      	ldr	r2, [pc, #76]	; (8009224 <__sinit+0x6c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80091da:	42a3      	cmp	r3, r4
 80091dc:	bf04      	itt	eq
 80091de:	2301      	moveq	r3, #1
 80091e0:	61a3      	streq	r3, [r4, #24]
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f820 	bl	8009228 <__sfp>
 80091e8:	6060      	str	r0, [r4, #4]
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 f81c 	bl	8009228 <__sfp>
 80091f0:	60a0      	str	r0, [r4, #8]
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 f818 	bl	8009228 <__sfp>
 80091f8:	2200      	movs	r2, #0
 80091fa:	60e0      	str	r0, [r4, #12]
 80091fc:	2104      	movs	r1, #4
 80091fe:	6860      	ldr	r0, [r4, #4]
 8009200:	f7ff ff82 	bl	8009108 <std>
 8009204:	68a0      	ldr	r0, [r4, #8]
 8009206:	2201      	movs	r2, #1
 8009208:	2109      	movs	r1, #9
 800920a:	f7ff ff7d 	bl	8009108 <std>
 800920e:	68e0      	ldr	r0, [r4, #12]
 8009210:	2202      	movs	r2, #2
 8009212:	2112      	movs	r1, #18
 8009214:	f7ff ff78 	bl	8009108 <std>
 8009218:	2301      	movs	r3, #1
 800921a:	61a3      	str	r3, [r4, #24]
 800921c:	e7d2      	b.n	80091c4 <__sinit+0xc>
 800921e:	bf00      	nop
 8009220:	08009600 	.word	0x08009600
 8009224:	08009151 	.word	0x08009151

08009228 <__sfp>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	4607      	mov	r7, r0
 800922c:	f7ff ffac 	bl	8009188 <__sfp_lock_acquire>
 8009230:	4b1e      	ldr	r3, [pc, #120]	; (80092ac <__sfp+0x84>)
 8009232:	681e      	ldr	r6, [r3, #0]
 8009234:	69b3      	ldr	r3, [r6, #24]
 8009236:	b913      	cbnz	r3, 800923e <__sfp+0x16>
 8009238:	4630      	mov	r0, r6
 800923a:	f7ff ffbd 	bl	80091b8 <__sinit>
 800923e:	3648      	adds	r6, #72	; 0x48
 8009240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009244:	3b01      	subs	r3, #1
 8009246:	d503      	bpl.n	8009250 <__sfp+0x28>
 8009248:	6833      	ldr	r3, [r6, #0]
 800924a:	b30b      	cbz	r3, 8009290 <__sfp+0x68>
 800924c:	6836      	ldr	r6, [r6, #0]
 800924e:	e7f7      	b.n	8009240 <__sfp+0x18>
 8009250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009254:	b9d5      	cbnz	r5, 800928c <__sfp+0x64>
 8009256:	4b16      	ldr	r3, [pc, #88]	; (80092b0 <__sfp+0x88>)
 8009258:	60e3      	str	r3, [r4, #12]
 800925a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800925e:	6665      	str	r5, [r4, #100]	; 0x64
 8009260:	f000 f847 	bl	80092f2 <__retarget_lock_init_recursive>
 8009264:	f7ff ff96 	bl	8009194 <__sfp_lock_release>
 8009268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800926c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009270:	6025      	str	r5, [r4, #0]
 8009272:	61a5      	str	r5, [r4, #24]
 8009274:	2208      	movs	r2, #8
 8009276:	4629      	mov	r1, r5
 8009278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800927c:	f7fd fb44 	bl	8006908 <memset>
 8009280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009288:	4620      	mov	r0, r4
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928c:	3468      	adds	r4, #104	; 0x68
 800928e:	e7d9      	b.n	8009244 <__sfp+0x1c>
 8009290:	2104      	movs	r1, #4
 8009292:	4638      	mov	r0, r7
 8009294:	f7ff ff62 	bl	800915c <__sfmoreglue>
 8009298:	4604      	mov	r4, r0
 800929a:	6030      	str	r0, [r6, #0]
 800929c:	2800      	cmp	r0, #0
 800929e:	d1d5      	bne.n	800924c <__sfp+0x24>
 80092a0:	f7ff ff78 	bl	8009194 <__sfp_lock_release>
 80092a4:	230c      	movs	r3, #12
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	e7ee      	b.n	8009288 <__sfp+0x60>
 80092aa:	bf00      	nop
 80092ac:	08009600 	.word	0x08009600
 80092b0:	ffff0001 	.word	0xffff0001

080092b4 <_fwalk_reent>:
 80092b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b8:	4606      	mov	r6, r0
 80092ba:	4688      	mov	r8, r1
 80092bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092c0:	2700      	movs	r7, #0
 80092c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092c6:	f1b9 0901 	subs.w	r9, r9, #1
 80092ca:	d505      	bpl.n	80092d8 <_fwalk_reent+0x24>
 80092cc:	6824      	ldr	r4, [r4, #0]
 80092ce:	2c00      	cmp	r4, #0
 80092d0:	d1f7      	bne.n	80092c2 <_fwalk_reent+0xe>
 80092d2:	4638      	mov	r0, r7
 80092d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d8:	89ab      	ldrh	r3, [r5, #12]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d907      	bls.n	80092ee <_fwalk_reent+0x3a>
 80092de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092e2:	3301      	adds	r3, #1
 80092e4:	d003      	beq.n	80092ee <_fwalk_reent+0x3a>
 80092e6:	4629      	mov	r1, r5
 80092e8:	4630      	mov	r0, r6
 80092ea:	47c0      	blx	r8
 80092ec:	4307      	orrs	r7, r0
 80092ee:	3568      	adds	r5, #104	; 0x68
 80092f0:	e7e9      	b.n	80092c6 <_fwalk_reent+0x12>

080092f2 <__retarget_lock_init_recursive>:
 80092f2:	4770      	bx	lr

080092f4 <__retarget_lock_acquire_recursive>:
 80092f4:	4770      	bx	lr

080092f6 <__retarget_lock_release_recursive>:
 80092f6:	4770      	bx	lr

080092f8 <__swhatbuf_r>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	460e      	mov	r6, r1
 80092fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009300:	2900      	cmp	r1, #0
 8009302:	b096      	sub	sp, #88	; 0x58
 8009304:	4614      	mov	r4, r2
 8009306:	461d      	mov	r5, r3
 8009308:	da07      	bge.n	800931a <__swhatbuf_r+0x22>
 800930a:	2300      	movs	r3, #0
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	89b3      	ldrh	r3, [r6, #12]
 8009310:	061a      	lsls	r2, r3, #24
 8009312:	d410      	bmi.n	8009336 <__swhatbuf_r+0x3e>
 8009314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009318:	e00e      	b.n	8009338 <__swhatbuf_r+0x40>
 800931a:	466a      	mov	r2, sp
 800931c:	f000 f8fa 	bl	8009514 <_fstat_r>
 8009320:	2800      	cmp	r0, #0
 8009322:	dbf2      	blt.n	800930a <__swhatbuf_r+0x12>
 8009324:	9a01      	ldr	r2, [sp, #4]
 8009326:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800932a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800932e:	425a      	negs	r2, r3
 8009330:	415a      	adcs	r2, r3
 8009332:	602a      	str	r2, [r5, #0]
 8009334:	e7ee      	b.n	8009314 <__swhatbuf_r+0x1c>
 8009336:	2340      	movs	r3, #64	; 0x40
 8009338:	2000      	movs	r0, #0
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	b016      	add	sp, #88	; 0x58
 800933e:	bd70      	pop	{r4, r5, r6, pc}

08009340 <__smakebuf_r>:
 8009340:	898b      	ldrh	r3, [r1, #12]
 8009342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009344:	079d      	lsls	r5, r3, #30
 8009346:	4606      	mov	r6, r0
 8009348:	460c      	mov	r4, r1
 800934a:	d507      	bpl.n	800935c <__smakebuf_r+0x1c>
 800934c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	2301      	movs	r3, #1
 8009356:	6163      	str	r3, [r4, #20]
 8009358:	b002      	add	sp, #8
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	ab01      	add	r3, sp, #4
 800935e:	466a      	mov	r2, sp
 8009360:	f7ff ffca 	bl	80092f8 <__swhatbuf_r>
 8009364:	9900      	ldr	r1, [sp, #0]
 8009366:	4605      	mov	r5, r0
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff f92f 	bl	80085cc <_malloc_r>
 800936e:	b948      	cbnz	r0, 8009384 <__smakebuf_r+0x44>
 8009370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009374:	059a      	lsls	r2, r3, #22
 8009376:	d4ef      	bmi.n	8009358 <__smakebuf_r+0x18>
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	f043 0302 	orr.w	r3, r3, #2
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	e7e3      	b.n	800934c <__smakebuf_r+0xc>
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <__smakebuf_r+0x7c>)
 8009386:	62b3      	str	r3, [r6, #40]	; 0x28
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	6020      	str	r0, [r4, #0]
 800938c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	6163      	str	r3, [r4, #20]
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	6120      	str	r0, [r4, #16]
 800939a:	b15b      	cbz	r3, 80093b4 <__smakebuf_r+0x74>
 800939c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f8c9 	bl	8009538 <_isatty_r>
 80093a6:	b128      	cbz	r0, 80093b4 <__smakebuf_r+0x74>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f023 0303 	bic.w	r3, r3, #3
 80093ae:	f043 0301 	orr.w	r3, r3, #1
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	89a0      	ldrh	r0, [r4, #12]
 80093b6:	4305      	orrs	r5, r0
 80093b8:	81a5      	strh	r5, [r4, #12]
 80093ba:	e7cd      	b.n	8009358 <__smakebuf_r+0x18>
 80093bc:	08009151 	.word	0x08009151

080093c0 <_raise_r>:
 80093c0:	291f      	cmp	r1, #31
 80093c2:	b538      	push	{r3, r4, r5, lr}
 80093c4:	4604      	mov	r4, r0
 80093c6:	460d      	mov	r5, r1
 80093c8:	d904      	bls.n	80093d4 <_raise_r+0x14>
 80093ca:	2316      	movs	r3, #22
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093d6:	b112      	cbz	r2, 80093de <_raise_r+0x1e>
 80093d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093dc:	b94b      	cbnz	r3, 80093f2 <_raise_r+0x32>
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f830 	bl	8009444 <_getpid_r>
 80093e4:	462a      	mov	r2, r5
 80093e6:	4601      	mov	r1, r0
 80093e8:	4620      	mov	r0, r4
 80093ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ee:	f000 b817 	b.w	8009420 <_kill_r>
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d00a      	beq.n	800940c <_raise_r+0x4c>
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	d103      	bne.n	8009402 <_raise_r+0x42>
 80093fa:	2316      	movs	r3, #22
 80093fc:	6003      	str	r3, [r0, #0]
 80093fe:	2001      	movs	r0, #1
 8009400:	e7e7      	b.n	80093d2 <_raise_r+0x12>
 8009402:	2400      	movs	r4, #0
 8009404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009408:	4628      	mov	r0, r5
 800940a:	4798      	blx	r3
 800940c:	2000      	movs	r0, #0
 800940e:	e7e0      	b.n	80093d2 <_raise_r+0x12>

08009410 <raise>:
 8009410:	4b02      	ldr	r3, [pc, #8]	; (800941c <raise+0xc>)
 8009412:	4601      	mov	r1, r0
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	f7ff bfd3 	b.w	80093c0 <_raise_r>
 800941a:	bf00      	nop
 800941c:	2000000c 	.word	0x2000000c

08009420 <_kill_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	; (8009440 <_kill_r+0x20>)
 8009424:	2300      	movs	r3, #0
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	4611      	mov	r1, r2
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f7f7 fed1 	bl	80011d4 <_kill>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	d102      	bne.n	800943c <_kill_r+0x1c>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b103      	cbz	r3, 800943c <_kill_r+0x1c>
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	bf00      	nop
 8009440:	200007c4 	.word	0x200007c4

08009444 <_getpid_r>:
 8009444:	f7f7 bebe 	b.w	80011c4 <_getpid>

08009448 <__sread>:
 8009448:	b510      	push	{r4, lr}
 800944a:	460c      	mov	r4, r1
 800944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009450:	f000 f894 	bl	800957c <_read_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	bfab      	itete	ge
 8009458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800945a:	89a3      	ldrhlt	r3, [r4, #12]
 800945c:	181b      	addge	r3, r3, r0
 800945e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009462:	bfac      	ite	ge
 8009464:	6563      	strge	r3, [r4, #84]	; 0x54
 8009466:	81a3      	strhlt	r3, [r4, #12]
 8009468:	bd10      	pop	{r4, pc}

0800946a <__swrite>:
 800946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	461f      	mov	r7, r3
 8009470:	898b      	ldrh	r3, [r1, #12]
 8009472:	05db      	lsls	r3, r3, #23
 8009474:	4605      	mov	r5, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4616      	mov	r6, r2
 800947a:	d505      	bpl.n	8009488 <__swrite+0x1e>
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	2302      	movs	r3, #2
 8009482:	2200      	movs	r2, #0
 8009484:	f000 f868 	bl	8009558 <_lseek_r>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	4628      	mov	r0, r5
 800949a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	f000 b817 	b.w	80094d0 <_write_r>

080094a2 <__sseek>:
 80094a2:	b510      	push	{r4, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094aa:	f000 f855 	bl	8009558 <_lseek_r>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	bf15      	itete	ne
 80094b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80094b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094be:	81a3      	strheq	r3, [r4, #12]
 80094c0:	bf18      	it	ne
 80094c2:	81a3      	strhne	r3, [r4, #12]
 80094c4:	bd10      	pop	{r4, pc}

080094c6 <__sclose>:
 80094c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ca:	f000 b813 	b.w	80094f4 <_close_r>
	...

080094d0 <_write_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d07      	ldr	r5, [pc, #28]	; (80094f0 <_write_r+0x20>)
 80094d4:	4604      	mov	r4, r0
 80094d6:	4608      	mov	r0, r1
 80094d8:	4611      	mov	r1, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f7f7 feaf 	bl	8001242 <_write>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_write_r+0x1e>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_write_r+0x1e>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	200007c4 	.word	0x200007c4

080094f4 <_close_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d06      	ldr	r5, [pc, #24]	; (8009510 <_close_r+0x1c>)
 80094f8:	2300      	movs	r3, #0
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	f7f7 febb 	bl	800127a <_close>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_close_r+0x1a>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_close_r+0x1a>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	200007c4 	.word	0x200007c4

08009514 <_fstat_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d07      	ldr	r5, [pc, #28]	; (8009534 <_fstat_r+0x20>)
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	4611      	mov	r1, r2
 8009520:	602b      	str	r3, [r5, #0]
 8009522:	f7f7 feb6 	bl	8001292 <_fstat>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d102      	bne.n	8009530 <_fstat_r+0x1c>
 800952a:	682b      	ldr	r3, [r5, #0]
 800952c:	b103      	cbz	r3, 8009530 <_fstat_r+0x1c>
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	bd38      	pop	{r3, r4, r5, pc}
 8009532:	bf00      	nop
 8009534:	200007c4 	.word	0x200007c4

08009538 <_isatty_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d06      	ldr	r5, [pc, #24]	; (8009554 <_isatty_r+0x1c>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7f7 feb5 	bl	80012b2 <_isatty>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_isatty_r+0x1a>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_isatty_r+0x1a>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	200007c4 	.word	0x200007c4

08009558 <_lseek_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_lseek_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f7 feae 	bl	80012c8 <_lseek>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_lseek_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_lseek_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	200007c4 	.word	0x200007c4

0800957c <_read_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_read_r+0x20>)
 8009580:	4604      	mov	r4, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7f7 fe3c 	bl	8001208 <_read>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_read_r+0x1e>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_read_r+0x1e>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	200007c4 	.word	0x200007c4

080095a0 <_init>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr

080095ac <_fini>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	bf00      	nop
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr
