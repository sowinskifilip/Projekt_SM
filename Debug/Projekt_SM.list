
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035ec  080035ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ec  080035ec  000135ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f0  080035f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  2000000c  08003600  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08003600  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa9e  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236b  00000000  00000000  0002fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00032990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271d1  00000000  00000000  000333e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f599  00000000  00000000  0005a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efad4  00000000  00000000  00069b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015961e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d0c  00000000  00000000  00159674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080035b4 	.word	0x080035b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080035b4 	.word	0x080035b4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b68      	ldr	r3, [pc, #416]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a67      	ldr	r2, [pc, #412]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b65      	ldr	r3, [pc, #404]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	61bb      	str	r3, [r7, #24]
 800055c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b62      	ldr	r3, [pc, #392]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a61      	ldr	r2, [pc, #388]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b5f      	ldr	r3, [pc, #380]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b5c      	ldr	r3, [pc, #368]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a5b      	ldr	r2, [pc, #364]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a55      	ldr	r2, [pc, #340]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b53      	ldr	r3, [pc, #332]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a4f      	ldr	r2, [pc, #316]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b4d      	ldr	r3, [pc, #308]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005be:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a49      	ldr	r2, [pc, #292]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 80005c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b47      	ldr	r3, [pc, #284]	; (80006e8 <MX_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80005dc:	4843      	ldr	r0, [pc, #268]	; (80006ec <MX_GPIO_Init+0x1bc>)
 80005de:	f000 fdd5 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	; 0x40
 80005e6:	4842      	ldr	r0, [pc, #264]	; (80006f0 <MX_GPIO_Init+0x1c0>)
 80005e8:	f000 fdd0 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	483c      	ldr	r0, [pc, #240]	; (80006f4 <MX_GPIO_Init+0x1c4>)
 8000604:	f000 fc16 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000608:	2332      	movs	r3, #50	; 0x32
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000618:	230b      	movs	r3, #11
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	4834      	ldr	r0, [pc, #208]	; (80006f4 <MX_GPIO_Init+0x1c4>)
 8000624:	f000 fc06 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000628:	2386      	movs	r3, #134	; 0x86
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000638:	230b      	movs	r3, #11
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	482d      	ldr	r0, [pc, #180]	; (80006f8 <MX_GPIO_Init+0x1c8>)
 8000644:	f000 fbf6 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000648:	f244 0381 	movw	r3, #16513	; 0x4081
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4822      	ldr	r0, [pc, #136]	; (80006ec <MX_GPIO_Init+0x1bc>)
 8000662:	f000 fbe7 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000678:	230b      	movs	r3, #11
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <MX_GPIO_Init+0x1bc>)
 8000684:	f000 fbd6 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_GPIO_Init+0x1c0>)
 80006a0:	f000 fbc8 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_GPIO_Init+0x1c0>)
 80006b8:	f000 fbbc 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ce:	230b      	movs	r3, #11
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_GPIO_Init+0x1c0>)
 80006da:	f000 fbab 	bl	8000e34 <HAL_GPIO_Init>

}
 80006de:	bf00      	nop
 80006e0:	3730      	adds	r7, #48	; 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40021800 	.word	0x40021800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020000 	.word	0x40020000

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fa31 	bl	8000b66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f808 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f7ff ff12 	bl	8000530 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800070c:	f000 f904 	bl	8000918 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000710:	f000 f976 	bl	8000a00 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x18>
	...

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b0b8      	sub	sp, #224	; 0xe0
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000722:	2234      	movs	r2, #52	; 0x34
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f002 ff3c 	bl	80035a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2290      	movs	r2, #144	; 0x90
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 ff2d 	bl	80035a4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800074a:	f000 fe81 	bl	8001450 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <SystemClock_Config+0x128>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <SystemClock_Config+0x128>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <SystemClock_Config+0x128>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <SystemClock_Config+0x12c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076e:	4a35      	ldr	r2, [pc, #212]	; (8000844 <SystemClock_Config+0x12c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	4b33      	ldr	r3, [pc, #204]	; (8000844 <SystemClock_Config+0x12c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000782:	2301      	movs	r3, #1
 8000784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000788:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007a4:	2360      	movs	r3, #96	; 0x60
 80007a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fea5 	bl	8001510 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007cc:	f000 f83e 	bl	800084c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d0:	f000 fe4e 	bl	8001470 <HAL_PWREx_EnableOverDrive>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007da:	f000 f837 	bl	800084c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000802:	2103      	movs	r1, #3
 8000804:	4618      	mov	r0, r3
 8000806:	f001 f931 	bl	8001a6c <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000810:	f000 f81c 	bl	800084c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <SystemClock_Config+0x130>)
 8000816:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000818:	2300      	movs	r3, #0
 800081a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fb22 	bl	8001e70 <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000832:	f000 f80b 	bl	800084c <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	37e0      	adds	r7, #224	; 0xe0
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000
 8000848:	00200100 	.word	0x00200100

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x44>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x44>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x44>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x44>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x44>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x44>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 f978 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART3_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART3_UART_Init+0x58>)
 800095c:	f001 feb0 	bl	80026c0 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f7ff ff71 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000028 	.word	0x20000028
 8000974:	40004800 	.word	0x40004800

08000978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x7c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d128      	bne.n	80009ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x80>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_UART_MspInit+0x80>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009dc:	2307      	movs	r3, #7
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <HAL_UART_MspInit+0x84>)
 80009e8:	f000 fa24 	bl	8000e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004800 	.word	0x40004800
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0e:	2206      	movs	r2, #6
 8000a10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	f000 fbbb 	bl	80011be <HAL_PCD_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f7ff fefd 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000ac 	.word	0x200000ac

08000a5c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7c:	d141      	bne.n	8000b02 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4817      	ldr	r0, [pc, #92]	; (8000b10 <HAL_PCD_MspInit+0xb4>)
 8000ab4:	f000 f9be 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <HAL_PCD_MspInit+0xb4>)
 8000ace:	f000 f9b1 	bl	8000e34 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6353      	str	r3, [r2, #52]	; 0x34
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff fed9 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f002 fd0b 	bl	800355c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fdd9 	bl	80006fc <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b58:	080035f4 	.word	0x080035f4
  ldr r2, =_sbss
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b60:	200004b4 	.word	0x200004b4

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>

08000b66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6a:	2003      	movs	r0, #3
 8000b6c:	f000 f92e 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f805 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b76:	f7ff fe6f 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f93b 	bl	8000e1a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f911 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200004b0 	.word	0x200004b0

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200004b0 	.word	0x200004b0

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	05fa0000 	.word	0x05fa0000

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff8e 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff47 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5c 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff8e 	bl	8000d20 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e175      	b.n	8001140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8164 	bne.w	800113a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x56>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80be 	beq.w	800113a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b66      	ldr	r3, [pc, #408]	; (8001158 <HAL_GPIO_Init+0x324>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <HAL_GPIO_Init+0x324>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b63      	ldr	r3, [pc, #396]	; (8001158 <HAL_GPIO_Init+0x324>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fd6:	4a61      	ldr	r2, [pc, #388]	; (800115c <HAL_GPIO_Init+0x328>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	; (8001160 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d037      	beq.n	8001072 <HAL_GPIO_Init+0x23e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a57      	ldr	r2, [pc, #348]	; (8001164 <HAL_GPIO_Init+0x330>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d031      	beq.n	800106e <HAL_GPIO_Init+0x23a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a56      	ldr	r2, [pc, #344]	; (8001168 <HAL_GPIO_Init+0x334>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d02b      	beq.n	800106a <HAL_GPIO_Init+0x236>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a55      	ldr	r2, [pc, #340]	; (800116c <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d025      	beq.n	8001066 <HAL_GPIO_Init+0x232>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a54      	ldr	r2, [pc, #336]	; (8001170 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01f      	beq.n	8001062 <HAL_GPIO_Init+0x22e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a53      	ldr	r2, [pc, #332]	; (8001174 <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x22a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a52      	ldr	r2, [pc, #328]	; (8001178 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x226>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a51      	ldr	r2, [pc, #324]	; (800117c <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x222>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a50      	ldr	r2, [pc, #320]	; (8001180 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x21e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	; (8001184 <HAL_GPIO_Init+0x350>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x21a>
 800104a:	2309      	movs	r3, #9
 800104c:	e012      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800104e:	230a      	movs	r3, #10
 8001050:	e010      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001052:	2308      	movs	r3, #8
 8001054:	e00e      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001056:	2307      	movs	r3, #7
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800105a:	2306      	movs	r3, #6
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x240>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x240>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x328>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_GPIO_Init+0x354>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a34      	ldr	r2, [pc, #208]	; (8001188 <HAL_GPIO_Init+0x354>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_GPIO_Init+0x354>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a29      	ldr	r2, [pc, #164]	; (8001188 <HAL_GPIO_Init+0x354>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <HAL_GPIO_Init+0x354>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <HAL_GPIO_Init+0x354>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_GPIO_Init+0x354>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_GPIO_Init+0x354>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f ae86 	bls.w	8000e54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40021400 	.word	0x40021400
 8001178:	40021800 	.word	0x40021800
 800117c:	40021c00 	.word	0x40021c00
 8001180:	40022000 	.word	0x40022000
 8001184:	40022400 	.word	0x40022400
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c0:	b08f      	sub	sp, #60	; 0x3c
 80011c2:	af0a      	add	r7, sp, #40	; 0x28
 80011c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e116      	b.n	80013fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fc36 	bl	8000a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f001 ff0e 	bl	8003030 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	687e      	ldr	r6, [r7, #4]
 800121c:	466d      	mov	r5, sp
 800121e:	f106 0410 	add.w	r4, r6, #16
 8001222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800122e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001232:	1d33      	adds	r3, r6, #4
 8001234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f001 fea2 	bl	8002f80 <USB_CoreInit>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2202      	movs	r2, #2
 8001246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0d7      	b.n	80013fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fefc 	bl	8003052 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e04a      	b.n	80012f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	333d      	adds	r3, #61	; 0x3d
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	333c      	adds	r3, #60	; 0x3c
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	b298      	uxth	r0, r3
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3342      	adds	r3, #66	; 0x42
 800129c:	4602      	mov	r2, r0
 800129e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	333f      	adds	r3, #63	; 0x3f
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3344      	adds	r3, #68	; 0x44
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3348      	adds	r3, #72	; 0x48
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3350      	adds	r3, #80	; 0x50
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3af      	bcc.n	8001260 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e044      	b.n	8001390 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3301      	adds	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3b5      	bcc.n	8001306 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	687e      	ldr	r6, [r7, #4]
 80013a2:	466d      	mov	r5, sp
 80013a4:	f106 0410 	add.w	r4, r6, #16
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013b8:	1d33      	adds	r3, r6, #4
 80013ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f001 fe95 	bl	80030ec <USB_DevInit>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e014      	b.n	80013fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d102      	bne.n	80013f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f80b 	bl	8001408 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 f84f 	bl	800349a <USB_DevDisconnect>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001408 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_PCDEx_ActivateLPM+0x44>)
 8001438:	4313      	orrs	r3, r2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	10000003 	.word	0x10000003

08001450 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40007000 	.word	0x40007000

08001470 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_PWREx_EnableOverDrive+0x98>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a22      	ldr	r2, [pc, #136]	; (8001508 <HAL_PWREx_EnableOverDrive+0x98>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_PWREx_EnableOverDrive+0x98>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149e:	f7ff fbb3 	bl	8000c08 <HAL_GetTick>
 80014a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014a4:	e009      	b.n	80014ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014a6:	f7ff fbaf 	bl	8000c08 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b4:	d901      	bls.n	80014ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e022      	b.n	8001500 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d1ee      	bne.n	80014a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff fb98 	bl	8000c08 <HAL_GetTick>
 80014d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014da:	e009      	b.n	80014f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014dc:	f7ff fb94 	bl	8000c08 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ea:	d901      	bls.n	80014f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e007      	b.n	8001500 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014fc:	d1ee      	bne.n	80014dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e29b      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8087 	beq.w	8001642 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001534:	4b96      	ldr	r3, [pc, #600]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b04      	cmp	r3, #4
 800153e:	d00c      	beq.n	800155a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001540:	4b93      	ldr	r3, [pc, #588]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b08      	cmp	r3, #8
 800154a:	d112      	bne.n	8001572 <HAL_RCC_OscConfig+0x62>
 800154c:	4b90      	ldr	r3, [pc, #576]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001558:	d10b      	bne.n	8001572 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155a:	4b8d      	ldr	r3, [pc, #564]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d06c      	beq.n	8001640 <HAL_RCC_OscConfig+0x130>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d168      	bne.n	8001640 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e275      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x7a>
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a83      	ldr	r2, [pc, #524]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e02e      	b.n	80015e8 <HAL_RCC_OscConfig+0xd8>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x9c>
 8001592:	4b7f      	ldr	r3, [pc, #508]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7e      	ldr	r2, [pc, #504]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b7c      	ldr	r3, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7b      	ldr	r2, [pc, #492]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xd8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0xc0>
 80015b6:	4b76      	ldr	r3, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a75      	ldr	r2, [pc, #468]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b73      	ldr	r3, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a72      	ldr	r2, [pc, #456]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xd8>
 80015d0:	4b6f      	ldr	r3, [pc, #444]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a6e      	ldr	r2, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6b      	ldr	r2, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb0a 	bl	8000c08 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb06 	bl	8000c08 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e229      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe8>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff faf6 	bl	8000c08 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff faf2 	bl	8000c08 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e215      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	4b57      	ldr	r3, [pc, #348]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x110>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d069      	beq.n	8001722 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800164e:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x190>
 8001666:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x17a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1e9      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	493d      	ldr	r1, [pc, #244]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	e040      	b.n	8001722 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d023      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a38      	ldr	r2, [pc, #224]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff faa8 	bl	8000c08 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff faa4 	bl	8000c08 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1c7      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4929      	ldr	r1, [pc, #164]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
 80016ee:	e018      	b.n	8001722 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa84 	bl	8000c08 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fa80 	bl	8000c08 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1a3      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d038      	beq.n	80017a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d019      	beq.n	800176a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fa61 	bl	8000c08 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fa5d 	bl	8000c08 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e180      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800175e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x23a>
 8001768:	e01a      	b.n	80017a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_RCC_OscConfig+0x280>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001776:	f7ff fa47 	bl	8000c08 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177e:	f7ff fa43 	bl	8000c08 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d903      	bls.n	8001794 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e166      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
 8001790:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80a4 	beq.w	80018f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b8c      	ldr	r3, [pc, #560]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10d      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a88      	ldr	r2, [pc, #544]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b86      	ldr	r3, [pc, #536]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d6:	4b83      	ldr	r3, [pc, #524]	; (80019e4 <HAL_RCC_OscConfig+0x4d4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d118      	bne.n	8001814 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017e2:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <HAL_RCC_OscConfig+0x4d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7f      	ldr	r2, [pc, #508]	; (80019e4 <HAL_RCC_OscConfig+0x4d4>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa0b 	bl	8000c08 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff fa07 	bl	8000c08 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e12a      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001808:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x4d4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x31a>
 800181c:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a6f      	ldr	r2, [pc, #444]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	e02d      	b.n	8001886 <HAL_RCC_OscConfig+0x376>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x33c>
 8001832:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a6a      	ldr	r2, [pc, #424]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
 800183e:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a67      	ldr	r2, [pc, #412]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	e01c      	b.n	8001886 <HAL_RCC_OscConfig+0x376>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x35e>
 8001854:	4b62      	ldr	r3, [pc, #392]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a61      	ldr	r2, [pc, #388]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x376>
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a5b      	ldr	r2, [pc, #364]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d015      	beq.n	80018ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff f9bb 	bl	8000c08 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff f9b7 	bl	8000c08 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0d8      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ee      	beq.n	8001896 <HAL_RCC_OscConfig+0x386>
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff f9a5 	bl	8000c08 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff f9a1 	bl	8000c08 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0c2      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ee      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80ae 	beq.w	8001a5c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d06d      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d14b      	bne.n	80019ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a31      	ldr	r2, [pc, #196]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 800191a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f972 	bl	8000c08 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f96e 	bl	8000c08 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e091      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	3b01      	subs	r3, #1
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	071b      	lsls	r3, r3, #28
 8001972:	491b      	ldr	r1, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f940 	bl	8000c08 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f93c 	bl	8000c08 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e05f      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x47c>
 80019aa:	e057      	b.n	8001a5c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff f926 	bl	8000c08 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f922 	bl	8000c08 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e045      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4b0>
 80019de:	e03d      	b.n	8001a5c <HAL_RCC_OscConfig+0x54c>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_RCC_OscConfig+0x558>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d030      	beq.n	8001a58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d129      	bne.n	8001a58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d122      	bne.n	8001a58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a18:	4013      	ands	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d119      	bne.n	8001a58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	3b01      	subs	r3, #1
 8001a32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d10f      	bne.n	8001a58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0d0      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 020f 	bic.w	r2, r3, #15
 8001a9a:	4965      	ldr	r1, [pc, #404]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	494d      	ldr	r1, [pc, #308]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d040      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d115      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e07f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e073      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06b      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f023 0203 	bic.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4936      	ldr	r1, [pc, #216]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b60:	f7ff f852 	bl	8000c08 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7ff f84e 	bl	8000c08 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e053      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 020c 	and.w	r2, r3, #12
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d210      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 020f 	bic.w	r2, r3, #15
 8001ba6:	4922      	ldr	r1, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4916      	ldr	r1, [pc, #88]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x1c8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	490a      	ldr	r1, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x1cc>)
 8001c10:	5ccb      	ldrb	r3, [r1, r3]
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1d0>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1d4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe ffae 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00
 8001c34:	40023800 	.word	0x40023800
 8001c38:	080035cc 	.word	0x080035cc
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5c:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d00d      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x40>
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	f200 80bd 	bhi.w	8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c76:	e0b7      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c7a:	60bb      	str	r3, [r7, #8]
      break;
 8001c7c:	e0b7      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7e:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c80:	60bb      	str	r3, [r7, #8]
      break;
 8001c82:	e0b4      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c84:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c8c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d04d      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9a:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001caa:	f04f 0100 	mov.w	r1, #0
 8001cae:	ea02 0800 	and.w	r8, r2, r0
 8001cb2:	ea03 0901 	and.w	r9, r3, r1
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	014b      	lsls	r3, r1, #5
 8001cc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cc8:	0142      	lsls	r2, r0, #5
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	ebb0 0008 	subs.w	r0, r0, r8
 8001cd2:	eb61 0109 	sbc.w	r1, r1, r9
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	018b      	lsls	r3, r1, #6
 8001ce0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ce4:	0182      	lsls	r2, r0, #6
 8001ce6:	1a12      	subs	r2, r2, r0
 8001ce8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cec:	f04f 0000 	mov.w	r0, #0
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	00d9      	lsls	r1, r3, #3
 8001cf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cfa:	00d0      	lsls	r0, r2, #3
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	eb12 0208 	adds.w	r2, r2, r8
 8001d04:	eb43 0309 	adc.w	r3, r3, r9
 8001d08:	f04f 0000 	mov.w	r0, #0
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	0259      	lsls	r1, r3, #9
 8001d12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d16:	0250      	lsls	r0, r2, #9
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	f7fe fa86 	bl	8000238 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e04a      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	ea02 0400 	and.w	r4, r2, r0
 8001d4e:	ea03 0501 	and.w	r5, r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	014b      	lsls	r3, r1, #5
 8001d60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d64:	0142      	lsls	r2, r0, #5
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	1b00      	subs	r0, r0, r4
 8001d6c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	018b      	lsls	r3, r1, #6
 8001d7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d7e:	0182      	lsls	r2, r0, #6
 8001d80:	1a12      	subs	r2, r2, r0
 8001d82:	eb63 0301 	sbc.w	r3, r3, r1
 8001d86:	f04f 0000 	mov.w	r0, #0
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	00d9      	lsls	r1, r3, #3
 8001d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d94:	00d0      	lsls	r0, r2, #3
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	1912      	adds	r2, r2, r4
 8001d9c:	eb45 0303 	adc.w	r3, r5, r3
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	0299      	lsls	r1, r3, #10
 8001daa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dae:	0290      	lsls	r0, r2, #10
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	f7fe fa3a 	bl	8000238 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	60bb      	str	r3, [r7, #8]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dea:	60bb      	str	r3, [r7, #8]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	68bb      	ldr	r3, [r7, #8]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e24:	f7ff fff0 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	080035dc 	.word	0x080035dc

08001e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e4c:	f7ff ffdc 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0b5b      	lsrs	r3, r3, #13
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	080035dc 	.word	0x080035dc

08001e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d012      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e98:	4b69      	ldr	r3, [pc, #420]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ea2:	6093      	str	r3, [r2, #8]
 8001ea4:	4b66      	ldr	r3, [pc, #408]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	4964      	ldr	r1, [pc, #400]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d017      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	4959      	ldr	r1, [pc, #356]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee8:	d101      	bne.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d017      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f06:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	494a      	ldr	r1, [pc, #296]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f24:	d101      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 808b 	beq.w	800206a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a39      	ldr	r2, [pc, #228]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b37      	ldr	r3, [pc, #220]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f6c:	4b35      	ldr	r3, [pc, #212]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a34      	ldr	r2, [pc, #208]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f78:	f7fe fe46 	bl	8000c08 <HAL_GetTick>
 8001f7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7fe fe42 	bl	8000c08 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e38f      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d035      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d02e      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001fde:	4a18      	ldr	r2, [pc, #96]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d114      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fe0a 	bl	8000c08 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff6:	e00a      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fe06 	bl	8000c08 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e351      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ee      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002026:	d111      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002036:	400b      	ands	r3, r1
 8002038:	4901      	ldr	r1, [pc, #4]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
 800203e:	e00b      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000
 8002048:	0ffffcff 	.word	0x0ffffcff
 800204c:	4bb3      	ldr	r3, [pc, #716]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4ab2      	ldr	r2, [pc, #712]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002052:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002056:	6093      	str	r3, [r2, #8]
 8002058:	4bb0      	ldr	r3, [pc, #704]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800205a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	49ad      	ldr	r1, [pc, #692]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002066:	4313      	orrs	r3, r2
 8002068:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002076:	4ba9      	ldr	r3, [pc, #676]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800207c:	4aa7      	ldr	r2, [pc, #668]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800207e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002082:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002086:	4ba5      	ldr	r3, [pc, #660]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002088:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	49a2      	ldr	r1, [pc, #648]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020a4:	4b9d      	ldr	r3, [pc, #628]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b2:	499a      	ldr	r1, [pc, #616]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020c6:	4b95      	ldr	r3, [pc, #596]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d4:	4991      	ldr	r1, [pc, #580]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020e8:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f6:	4989      	ldr	r1, [pc, #548]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800210a:	4b84      	ldr	r3, [pc, #528]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4980      	ldr	r1, [pc, #512]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800212c:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4978      	ldr	r1, [pc, #480]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800214e:	4b73      	ldr	r3, [pc, #460]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f023 020c 	bic.w	r2, r3, #12
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215c:	496f      	ldr	r1, [pc, #444]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4967      	ldr	r1, [pc, #412]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002192:	4b62      	ldr	r3, [pc, #392]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a0:	495e      	ldr	r1, [pc, #376]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	4956      	ldr	r1, [pc, #344]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021d6:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	494d      	ldr	r1, [pc, #308]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021f8:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	4945      	ldr	r1, [pc, #276]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	493c      	ldr	r1, [pc, #240]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800224a:	4934      	ldr	r1, [pc, #208]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d011      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800225e:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800226c:	492b      	ldr	r1, [pc, #172]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227c:	d101      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ac:	491b      	ldr	r1, [pc, #108]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d0:	4912      	ldr	r1, [pc, #72]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f4:	4909      	ldr	r1, [pc, #36]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00f      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	e002      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	4986      	ldr	r1, [pc, #536]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00b      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002344:	497d      	ldr	r1, [pc, #500]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d006      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80d6 	beq.w	800250c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002360:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a75      	ldr	r2, [pc, #468]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800236a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236c:	f7fe fc4c 	bl	8000c08 <HAL_GetTick>
 8002370:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002374:	f7fe fc48 	bl	8000c08 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e195      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002386:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d021      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11d      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023b4:	4b61      	ldr	r3, [pc, #388]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ba:	0e1b      	lsrs	r3, r3, #24
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	019a      	lsls	r2, r3, #6
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	041b      	lsls	r3, r3, #16
 80023cc:	431a      	orrs	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	071b      	lsls	r3, r3, #28
 80023da:	4958      	ldr	r1, [pc, #352]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02e      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240c:	d129      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800240e:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800241c:	4b47      	ldr	r3, [pc, #284]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002422:	0f1b      	lsrs	r3, r3, #28
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	019a      	lsls	r2, r3, #6
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	071b      	lsls	r3, r3, #28
 8002442:	493e      	ldr	r1, [pc, #248]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800244a:	4b3c      	ldr	r3, [pc, #240]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002450:	f023 021f 	bic.w	r2, r3, #31
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	3b01      	subs	r3, #1
 800245a:	4938      	ldr	r1, [pc, #224]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01d      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800246e:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800247c:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002482:	0f1b      	lsrs	r3, r3, #28
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	071b      	lsls	r3, r3, #28
 80024a2:	4926      	ldr	r1, [pc, #152]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d011      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	019a      	lsls	r2, r3, #6
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	071b      	lsls	r3, r3, #28
 80024d2:	491a      	ldr	r1, [pc, #104]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e6:	f7fe fb8f 	bl	8000c08 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024ee:	f7fe fb8b 	bl	8000c08 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	; 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0d8      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80ce 	bne.w	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002520:	f7fe fb72 	bl	8000c08 <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002526:	e00b      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002528:	f7fe fb6e 	bl	8000c08 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d904      	bls.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0bb      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254c:	d0ec      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02e      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d12a      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002584:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	0f1b      	lsrs	r3, r3, #28
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	019a      	lsls	r2, r3, #6
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	071b      	lsls	r3, r3, #28
 80025aa:	4944      	ldr	r1, [pc, #272]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025b2:	4b42      	ldr	r3, [pc, #264]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	493d      	ldr	r1, [pc, #244]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d022      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e0:	d11d      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	0e1b      	lsrs	r3, r3, #24
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025f0:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	0f1b      	lsrs	r3, r3, #28
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	019a      	lsls	r2, r3, #6
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	431a      	orrs	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	061b      	lsls	r3, r3, #24
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	071b      	lsls	r3, r3, #28
 8002616:	4929      	ldr	r1, [pc, #164]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	0e1b      	lsrs	r3, r3, #24
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	019a      	lsls	r2, r3, #6
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	431a      	orrs	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	071b      	lsls	r3, r3, #28
 800265e:	4917      	ldr	r1, [pc, #92]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	4911      	ldr	r1, [pc, #68]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002688:	f7fe fabe 	bl	8000c08 <HAL_GetTick>
 800268c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002690:	f7fe faba 	bl	8000c08 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e007      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ae:	d1ef      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800

080026c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e040      	b.n	8002754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe f948 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	; 0x24
 80026ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f82c 	bl	800275c <UART_SetConfig>
 8002704:	4603      	mov	r3, r0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e022      	b.n	8002754 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa82 	bl	8002c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800272a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800273a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fb09 	bl	8002d64 <UART_CheckIdleState>
 8002752:	4603      	mov	r3, r0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4ba7      	ldr	r3, [pc, #668]	; (8002a24 <UART_SetConfig+0x2c8>)
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	6979      	ldr	r1, [r7, #20]
 8002790:	430b      	orrs	r3, r1
 8002792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a95      	ldr	r2, [pc, #596]	; (8002a28 <UART_SetConfig+0x2cc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d120      	bne.n	800281a <UART_SetConfig+0xbe>
 80027d8:	4b94      	ldr	r3, [pc, #592]	; (8002a2c <UART_SetConfig+0x2d0>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d816      	bhi.n	8002814 <UART_SetConfig+0xb8>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <UART_SetConfig+0x90>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	080027fd 	.word	0x080027fd
 80027f0:	08002809 	.word	0x08002809
 80027f4:	08002803 	.word	0x08002803
 80027f8:	0800280f 	.word	0x0800280f
 80027fc:	2301      	movs	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e14f      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002802:	2302      	movs	r3, #2
 8002804:	77fb      	strb	r3, [r7, #31]
 8002806:	e14c      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002808:	2304      	movs	r3, #4
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e149      	b.n	8002aa2 <UART_SetConfig+0x346>
 800280e:	2308      	movs	r3, #8
 8002810:	77fb      	strb	r3, [r7, #31]
 8002812:	e146      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002814:	2310      	movs	r3, #16
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e143      	b.n	8002aa2 <UART_SetConfig+0x346>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a84      	ldr	r2, [pc, #528]	; (8002a30 <UART_SetConfig+0x2d4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d132      	bne.n	800288a <UART_SetConfig+0x12e>
 8002824:	4b81      	ldr	r3, [pc, #516]	; (8002a2c <UART_SetConfig+0x2d0>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d828      	bhi.n	8002884 <UART_SetConfig+0x128>
 8002832:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <UART_SetConfig+0xdc>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	0800286d 	.word	0x0800286d
 800283c:	08002885 	.word	0x08002885
 8002840:	08002885 	.word	0x08002885
 8002844:	08002885 	.word	0x08002885
 8002848:	08002879 	.word	0x08002879
 800284c:	08002885 	.word	0x08002885
 8002850:	08002885 	.word	0x08002885
 8002854:	08002885 	.word	0x08002885
 8002858:	08002873 	.word	0x08002873
 800285c:	08002885 	.word	0x08002885
 8002860:	08002885 	.word	0x08002885
 8002864:	08002885 	.word	0x08002885
 8002868:	0800287f 	.word	0x0800287f
 800286c:	2300      	movs	r3, #0
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e117      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002872:	2302      	movs	r3, #2
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	e114      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002878:	2304      	movs	r3, #4
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	e111      	b.n	8002aa2 <UART_SetConfig+0x346>
 800287e:	2308      	movs	r3, #8
 8002880:	77fb      	strb	r3, [r7, #31]
 8002882:	e10e      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002884:	2310      	movs	r3, #16
 8002886:	77fb      	strb	r3, [r7, #31]
 8002888:	e10b      	b.n	8002aa2 <UART_SetConfig+0x346>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a69      	ldr	r2, [pc, #420]	; (8002a34 <UART_SetConfig+0x2d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d120      	bne.n	80028d6 <UART_SetConfig+0x17a>
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <UART_SetConfig+0x2d0>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800289e:	2b30      	cmp	r3, #48	; 0x30
 80028a0:	d013      	beq.n	80028ca <UART_SetConfig+0x16e>
 80028a2:	2b30      	cmp	r3, #48	; 0x30
 80028a4:	d814      	bhi.n	80028d0 <UART_SetConfig+0x174>
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d009      	beq.n	80028be <UART_SetConfig+0x162>
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d810      	bhi.n	80028d0 <UART_SetConfig+0x174>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <UART_SetConfig+0x15c>
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d006      	beq.n	80028c4 <UART_SetConfig+0x168>
 80028b6:	e00b      	b.n	80028d0 <UART_SetConfig+0x174>
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e0f1      	b.n	8002aa2 <UART_SetConfig+0x346>
 80028be:	2302      	movs	r3, #2
 80028c0:	77fb      	strb	r3, [r7, #31]
 80028c2:	e0ee      	b.n	8002aa2 <UART_SetConfig+0x346>
 80028c4:	2304      	movs	r3, #4
 80028c6:	77fb      	strb	r3, [r7, #31]
 80028c8:	e0eb      	b.n	8002aa2 <UART_SetConfig+0x346>
 80028ca:	2308      	movs	r3, #8
 80028cc:	77fb      	strb	r3, [r7, #31]
 80028ce:	e0e8      	b.n	8002aa2 <UART_SetConfig+0x346>
 80028d0:	2310      	movs	r3, #16
 80028d2:	77fb      	strb	r3, [r7, #31]
 80028d4:	e0e5      	b.n	8002aa2 <UART_SetConfig+0x346>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <UART_SetConfig+0x2dc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d120      	bne.n	8002922 <UART_SetConfig+0x1c6>
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <UART_SetConfig+0x2d0>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028ea:	2bc0      	cmp	r3, #192	; 0xc0
 80028ec:	d013      	beq.n	8002916 <UART_SetConfig+0x1ba>
 80028ee:	2bc0      	cmp	r3, #192	; 0xc0
 80028f0:	d814      	bhi.n	800291c <UART_SetConfig+0x1c0>
 80028f2:	2b80      	cmp	r3, #128	; 0x80
 80028f4:	d009      	beq.n	800290a <UART_SetConfig+0x1ae>
 80028f6:	2b80      	cmp	r3, #128	; 0x80
 80028f8:	d810      	bhi.n	800291c <UART_SetConfig+0x1c0>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <UART_SetConfig+0x1a8>
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d006      	beq.n	8002910 <UART_SetConfig+0x1b4>
 8002902:	e00b      	b.n	800291c <UART_SetConfig+0x1c0>
 8002904:	2300      	movs	r3, #0
 8002906:	77fb      	strb	r3, [r7, #31]
 8002908:	e0cb      	b.n	8002aa2 <UART_SetConfig+0x346>
 800290a:	2302      	movs	r3, #2
 800290c:	77fb      	strb	r3, [r7, #31]
 800290e:	e0c8      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002910:	2304      	movs	r3, #4
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e0c5      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002916:	2308      	movs	r3, #8
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e0c2      	b.n	8002aa2 <UART_SetConfig+0x346>
 800291c:	2310      	movs	r3, #16
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e0bf      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <UART_SetConfig+0x2e0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d125      	bne.n	8002978 <UART_SetConfig+0x21c>
 800292c:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <UART_SetConfig+0x2d0>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800293a:	d017      	beq.n	800296c <UART_SetConfig+0x210>
 800293c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002940:	d817      	bhi.n	8002972 <UART_SetConfig+0x216>
 8002942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002946:	d00b      	beq.n	8002960 <UART_SetConfig+0x204>
 8002948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294c:	d811      	bhi.n	8002972 <UART_SetConfig+0x216>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <UART_SetConfig+0x1fe>
 8002952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002956:	d006      	beq.n	8002966 <UART_SetConfig+0x20a>
 8002958:	e00b      	b.n	8002972 <UART_SetConfig+0x216>
 800295a:	2300      	movs	r3, #0
 800295c:	77fb      	strb	r3, [r7, #31]
 800295e:	e0a0      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002960:	2302      	movs	r3, #2
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e09d      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002966:	2304      	movs	r3, #4
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e09a      	b.n	8002aa2 <UART_SetConfig+0x346>
 800296c:	2308      	movs	r3, #8
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e097      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002972:	2310      	movs	r3, #16
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e094      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <UART_SetConfig+0x2e4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d125      	bne.n	80029ce <UART_SetConfig+0x272>
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <UART_SetConfig+0x2d0>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800298c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002990:	d017      	beq.n	80029c2 <UART_SetConfig+0x266>
 8002992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002996:	d817      	bhi.n	80029c8 <UART_SetConfig+0x26c>
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	d00b      	beq.n	80029b6 <UART_SetConfig+0x25a>
 800299e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a2:	d811      	bhi.n	80029c8 <UART_SetConfig+0x26c>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <UART_SetConfig+0x254>
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d006      	beq.n	80029bc <UART_SetConfig+0x260>
 80029ae:	e00b      	b.n	80029c8 <UART_SetConfig+0x26c>
 80029b0:	2301      	movs	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e075      	b.n	8002aa2 <UART_SetConfig+0x346>
 80029b6:	2302      	movs	r3, #2
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e072      	b.n	8002aa2 <UART_SetConfig+0x346>
 80029bc:	2304      	movs	r3, #4
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e06f      	b.n	8002aa2 <UART_SetConfig+0x346>
 80029c2:	2308      	movs	r3, #8
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e06c      	b.n	8002aa2 <UART_SetConfig+0x346>
 80029c8:	2310      	movs	r3, #16
 80029ca:	77fb      	strb	r3, [r7, #31]
 80029cc:	e069      	b.n	8002aa2 <UART_SetConfig+0x346>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <UART_SetConfig+0x2e8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d137      	bne.n	8002a48 <UART_SetConfig+0x2ec>
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <UART_SetConfig+0x2d0>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029e6:	d017      	beq.n	8002a18 <UART_SetConfig+0x2bc>
 80029e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ec:	d817      	bhi.n	8002a1e <UART_SetConfig+0x2c2>
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f2:	d00b      	beq.n	8002a0c <UART_SetConfig+0x2b0>
 80029f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f8:	d811      	bhi.n	8002a1e <UART_SetConfig+0x2c2>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <UART_SetConfig+0x2aa>
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d006      	beq.n	8002a12 <UART_SetConfig+0x2b6>
 8002a04:	e00b      	b.n	8002a1e <UART_SetConfig+0x2c2>
 8002a06:	2300      	movs	r3, #0
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e04a      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	e047      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a12:	2304      	movs	r3, #4
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	e044      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a18:	2308      	movs	r3, #8
 8002a1a:	77fb      	strb	r3, [r7, #31]
 8002a1c:	e041      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a1e:	2310      	movs	r3, #16
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	e03e      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a24:	efff69f3 	.word	0xefff69f3
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40004400 	.word	0x40004400
 8002a34:	40004800 	.word	0x40004800
 8002a38:	40004c00 	.word	0x40004c00
 8002a3c:	40005000 	.word	0x40005000
 8002a40:	40011400 	.word	0x40011400
 8002a44:	40007800 	.word	0x40007800
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a71      	ldr	r2, [pc, #452]	; (8002c14 <UART_SetConfig+0x4b8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d125      	bne.n	8002a9e <UART_SetConfig+0x342>
 8002a52:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <UART_SetConfig+0x4bc>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a60:	d017      	beq.n	8002a92 <UART_SetConfig+0x336>
 8002a62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a66:	d817      	bhi.n	8002a98 <UART_SetConfig+0x33c>
 8002a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6c:	d00b      	beq.n	8002a86 <UART_SetConfig+0x32a>
 8002a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a72:	d811      	bhi.n	8002a98 <UART_SetConfig+0x33c>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <UART_SetConfig+0x324>
 8002a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a7c:	d006      	beq.n	8002a8c <UART_SetConfig+0x330>
 8002a7e:	e00b      	b.n	8002a98 <UART_SetConfig+0x33c>
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e00d      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a86:	2302      	movs	r3, #2
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e00a      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e007      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a92:	2308      	movs	r3, #8
 8002a94:	77fb      	strb	r3, [r7, #31]
 8002a96:	e004      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a98:	2310      	movs	r3, #16
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e001      	b.n	8002aa2 <UART_SetConfig+0x346>
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aaa:	d15a      	bne.n	8002b62 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8002aac:	7ffb      	ldrb	r3, [r7, #31]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d827      	bhi.n	8002b02 <UART_SetConfig+0x3a6>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <UART_SetConfig+0x35c>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002add 	.word	0x08002add
 8002abc:	08002ae5 	.word	0x08002ae5
 8002ac0:	08002aed 	.word	0x08002aed
 8002ac4:	08002b03 	.word	0x08002b03
 8002ac8:	08002af3 	.word	0x08002af3
 8002acc:	08002b03 	.word	0x08002b03
 8002ad0:	08002b03 	.word	0x08002b03
 8002ad4:	08002b03 	.word	0x08002b03
 8002ad8:	08002afb 	.word	0x08002afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002adc:	f7ff f9a0 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8002ae0:	61b8      	str	r0, [r7, #24]
        break;
 8002ae2:	e013      	b.n	8002b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae4:	f7ff f9b0 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002ae8:	61b8      	str	r0, [r7, #24]
        break;
 8002aea:	e00f      	b.n	8002b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aec:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <UART_SetConfig+0x4c0>)
 8002aee:	61bb      	str	r3, [r7, #24]
        break;
 8002af0:	e00c      	b.n	8002b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002af2:	f7ff f8a7 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002af6:	61b8      	str	r0, [r7, #24]
        break;
 8002af8:	e008      	b.n	8002b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002afe:	61bb      	str	r3, [r7, #24]
        break;
 8002b00:	e004      	b.n	8002b0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	77bb      	strb	r3, [r7, #30]
        break;
 8002b0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d074      	beq.n	8002bfc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	005a      	lsls	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	441a      	add	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	d916      	bls.n	8002b5c <UART_SetConfig+0x400>
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d212      	bcs.n	8002b5c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f023 030f 	bic.w	r3, r3, #15
 8002b3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	89fb      	ldrh	r3, [r7, #14]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	89fa      	ldrh	r2, [r7, #14]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	e04f      	b.n	8002bfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77bb      	strb	r3, [r7, #30]
 8002b60:	e04c      	b.n	8002bfc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b62:	7ffb      	ldrb	r3, [r7, #31]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d828      	bhi.n	8002bba <UART_SetConfig+0x45e>
 8002b68:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <UART_SetConfig+0x414>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002b9d 	.word	0x08002b9d
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002bbb 	.word	0x08002bbb
 8002b80:	08002bab 	.word	0x08002bab
 8002b84:	08002bbb 	.word	0x08002bbb
 8002b88:	08002bbb 	.word	0x08002bbb
 8002b8c:	08002bbb 	.word	0x08002bbb
 8002b90:	08002bb3 	.word	0x08002bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b94:	f7ff f944 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8002b98:	61b8      	str	r0, [r7, #24]
        break;
 8002b9a:	e013      	b.n	8002bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b9c:	f7ff f954 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002ba0:	61b8      	str	r0, [r7, #24]
        break;
 8002ba2:	e00f      	b.n	8002bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <UART_SetConfig+0x4c0>)
 8002ba6:	61bb      	str	r3, [r7, #24]
        break;
 8002ba8:	e00c      	b.n	8002bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002baa:	f7ff f84b 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002bae:	61b8      	str	r0, [r7, #24]
        break;
 8002bb0:	e008      	b.n	8002bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb6:	61bb      	str	r3, [r7, #24]
        break;
 8002bb8:	e004      	b.n	8002bc4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8002bc2:	bf00      	nop
    }

    if (pclk != 0U)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d018      	beq.n	8002bfc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	085a      	lsrs	r2, r3, #1
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	441a      	add	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	d909      	bls.n	8002bf8 <UART_SetConfig+0x49c>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d205      	bcs.n	8002bf8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	e001      	b.n	8002bfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c08:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40007c00 	.word	0x40007c00
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	00f42400 	.word	0x00f42400

08002c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01a      	beq.n	8002d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d1e:	d10a      	bne.n	8002d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d74:	f7fd ff48 	bl	8000c08 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d10e      	bne.n	8002da6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f82d 	bl	8002df6 <UART_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e023      	b.n	8002dee <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d10e      	bne.n	8002dd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f817 	bl	8002df6 <UART_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e00d      	b.n	8002dee <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b09c      	sub	sp, #112	; 0x70
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	4613      	mov	r3, r2
 8002e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e06:	e0a5      	b.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	f000 80a1 	beq.w	8002f54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fd fef9 	bl	8000c08 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d13e      	bne.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e6      	bne.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3308      	adds	r3, #8
 8002e60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	663b      	str	r3, [r7, #96]	; 0x60
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3308      	adds	r3, #8
 8002e78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e5      	bne.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e067      	b.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d04f      	beq.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec2:	d147      	bne.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ecc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
 8002eee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e6      	bne.n	8002ece <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3308      	adds	r3, #8
 8002f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f20:	623a      	str	r2, [r7, #32]
 8002f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	69f9      	ldr	r1, [r7, #28]
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e5      	bne.n	8002f00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e010      	b.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	f43f af4a 	beq.w	8002e08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3770      	adds	r7, #112	; 0x70
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f80:	b084      	sub	sp, #16
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	f107 001c 	add.w	r0, r7, #28
 8002f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d120      	bne.n	8002fda <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <USB_CoreInit+0xac>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d105      	bne.n	8002fce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa92 	bl	80034f8 <USB_CoreReset>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e010      	b.n	8002ffc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa86 	bl	80034f8 <USB_CoreReset>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10b      	bne.n	800301a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f043 0206 	orr.w	r2, r3, #6
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003026:	b004      	add	sp, #16
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	ffbdffbf 	.word	0xffbdffbf

08003030 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 0201 	bic.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d115      	bne.n	80030a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003080:	2001      	movs	r0, #1
 8003082:	f7fd fdcd 	bl	8000c20 <HAL_Delay>
      ms++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3301      	adds	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa25 	bl	80034dc <USB_GetMode>
 8003092:	4603      	mov	r3, r0
 8003094:	2b01      	cmp	r3, #1
 8003096:	d01e      	beq.n	80030d6 <USB_SetCurrentMode+0x84>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b31      	cmp	r3, #49	; 0x31
 800309c:	d9f0      	bls.n	8003080 <USB_SetCurrentMode+0x2e>
 800309e:	e01a      	b.n	80030d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d115      	bne.n	80030d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7fd fdb4 	bl	8000c20 <HAL_Delay>
      ms++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa0c 	bl	80034dc <USB_GetMode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <USB_SetCurrentMode+0x84>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b31      	cmp	r3, #49	; 0x31
 80030ce:	d9f0      	bls.n	80030b2 <USB_SetCurrentMode+0x60>
 80030d0:	e001      	b.n	80030d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e005      	b.n	80030e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b32      	cmp	r3, #50	; 0x32
 80030da:	d101      	bne.n	80030e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030ec:	b084      	sub	sp, #16
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e009      	b.n	8003120 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	3340      	adds	r3, #64	; 0x40
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	3301      	adds	r3, #1
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b0e      	cmp	r3, #14
 8003124:	d9f2      	bls.n	800310c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11c      	bne.n	8003166 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	e005      	b.n	8003172 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003178:	461a      	mov	r2, r3
 800317a:	2300      	movs	r3, #0
 800317c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003184:	4619      	mov	r1, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318c:	461a      	mov	r2, r3
 800318e:	680b      	ldr	r3, [r1, #0]
 8003190:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10c      	bne.n	80031b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800319e:	2100      	movs	r1, #0
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f961 	bl	8003468 <USB_SetDevSpeed>
 80031a6:	e008      	b.n	80031ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031a8:	2101      	movs	r1, #1
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f95c 	bl	8003468 <USB_SetDevSpeed>
 80031b0:	e003      	b.n	80031ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031b2:	2103      	movs	r1, #3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f957 	bl	8003468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031ba:	2110      	movs	r1, #16
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f8f3 	bl	80033a8 <USB_FlushTxFifo>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f91d 	bl	800340c <USB_FlushRxFifo>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e2:	461a      	mov	r2, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ee:	461a      	mov	r2, r3
 80031f0:	2300      	movs	r3, #0
 80031f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	461a      	mov	r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e043      	b.n	800328e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800321c:	d118      	bne.n	8003250 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003230:	461a      	mov	r2, r3
 8003232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e013      	b.n	8003262 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003246:	461a      	mov	r2, r3
 8003248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e008      	b.n	8003262 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325c:	461a      	mov	r2, r3
 800325e:	2300      	movs	r3, #0
 8003260:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326e:	461a      	mov	r2, r3
 8003270:	2300      	movs	r3, #0
 8003272:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	461a      	mov	r2, r3
 8003282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3301      	adds	r3, #1
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3b7      	bcc.n	8003206 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	e043      	b.n	8003324 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032b2:	d118      	bne.n	80032e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c6:	461a      	mov	r2, r3
 80032c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e013      	b.n	80032f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	461a      	mov	r2, r3
 80032de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e008      	b.n	80032f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	461a      	mov	r2, r3
 80032f4:	2300      	movs	r3, #0
 80032f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003304:	461a      	mov	r2, r3
 8003306:	2300      	movs	r3, #0
 8003308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003316:	461a      	mov	r2, r3
 8003318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800331c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	3301      	adds	r3, #1
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d3b7      	bcc.n	800329c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800333e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800334c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <USB_DevInit+0x2b4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f043 0208 	orr.w	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <USB_DevInit+0x2b8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003390:	7dfb      	ldrb	r3, [r7, #23]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800339c:	b004      	add	sp, #16
 800339e:	4770      	bx	lr
 80033a0:	803c3800 	.word	0x803c3800
 80033a4:	40000004 	.word	0x40000004

080033a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3301      	adds	r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	4a12      	ldr	r2, [pc, #72]	; (8003408 <USB_FlushTxFifo+0x60>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e01a      	b.n	80033fc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	daf3      	bge.n	80033b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	f043 0220 	orr.w	r2, r3, #32
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <USB_FlushTxFifo+0x60>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e006      	b.n	80033fc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d0f1      	beq.n	80033de <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	00030d40 	.word	0x00030d40

0800340c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3301      	adds	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	4a11      	ldr	r2, [pc, #68]	; (8003464 <USB_FlushRxFifo+0x58>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e017      	b.n	8003458 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	daf3      	bge.n	8003418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2210      	movs	r2, #16
 8003438:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	4a08      	ldr	r2, [pc, #32]	; (8003464 <USB_FlushRxFifo+0x58>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e006      	b.n	8003458 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b10      	cmp	r3, #16
 8003454:	d0f1      	beq.n	800343a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	00030d40 	.word	0x00030d40

08003468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80034b4:	f023 0303 	bic.w	r3, r3, #3
 80034b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3301      	adds	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <USB_CoreReset+0x60>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e01a      	b.n	800354a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	daf3      	bge.n	8003504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <USB_CoreReset+0x60>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e006      	b.n	800354a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d0f1      	beq.n	800352c <USB_CoreReset+0x34>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	00030d40 	.word	0x00030d40

0800355c <__libc_init_array>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	4d0d      	ldr	r5, [pc, #52]	; (8003594 <__libc_init_array+0x38>)
 8003560:	4c0d      	ldr	r4, [pc, #52]	; (8003598 <__libc_init_array+0x3c>)
 8003562:	1b64      	subs	r4, r4, r5
 8003564:	10a4      	asrs	r4, r4, #2
 8003566:	2600      	movs	r6, #0
 8003568:	42a6      	cmp	r6, r4
 800356a:	d109      	bne.n	8003580 <__libc_init_array+0x24>
 800356c:	4d0b      	ldr	r5, [pc, #44]	; (800359c <__libc_init_array+0x40>)
 800356e:	4c0c      	ldr	r4, [pc, #48]	; (80035a0 <__libc_init_array+0x44>)
 8003570:	f000 f820 	bl	80035b4 <_init>
 8003574:	1b64      	subs	r4, r4, r5
 8003576:	10a4      	asrs	r4, r4, #2
 8003578:	2600      	movs	r6, #0
 800357a:	42a6      	cmp	r6, r4
 800357c:	d105      	bne.n	800358a <__libc_init_array+0x2e>
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	f855 3b04 	ldr.w	r3, [r5], #4
 8003584:	4798      	blx	r3
 8003586:	3601      	adds	r6, #1
 8003588:	e7ee      	b.n	8003568 <__libc_init_array+0xc>
 800358a:	f855 3b04 	ldr.w	r3, [r5], #4
 800358e:	4798      	blx	r3
 8003590:	3601      	adds	r6, #1
 8003592:	e7f2      	b.n	800357a <__libc_init_array+0x1e>
 8003594:	080035ec 	.word	0x080035ec
 8003598:	080035ec 	.word	0x080035ec
 800359c:	080035ec 	.word	0x080035ec
 80035a0:	080035f0 	.word	0x080035f0

080035a4 <memset>:
 80035a4:	4402      	add	r2, r0
 80035a6:	4603      	mov	r3, r0
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d100      	bne.n	80035ae <memset+0xa>
 80035ac:	4770      	bx	lr
 80035ae:	f803 1b01 	strb.w	r1, [r3], #1
 80035b2:	e7f9      	b.n	80035a8 <memset+0x4>

080035b4 <_init>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr

080035c0 <_fini>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr
