
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006034  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006378  08006378  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006380  08006380  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000070  080063f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  080063f8  00020614  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001761c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e32  00000000  00000000  000376ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0003a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002954a  00000000  00000000  0003c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ff1  00000000  00000000  00065c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb73  00000000  00000000  0007cc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b7e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  0017b83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08006214 	.word	0x08006214

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08006214 	.word	0x08006214

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b6e      	ldr	r3, [pc, #440]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a6d      	ldr	r2, [pc, #436]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b6b      	ldr	r3, [pc, #428]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	61bb      	str	r3, [r7, #24]
 800055c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	4b68      	ldr	r3, [pc, #416]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a67      	ldr	r2, [pc, #412]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b65      	ldr	r3, [pc, #404]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b62      	ldr	r3, [pc, #392]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a61      	ldr	r2, [pc, #388]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b5f      	ldr	r3, [pc, #380]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b5c      	ldr	r3, [pc, #368]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a5b      	ldr	r2, [pc, #364]	; (8000700 <MX_GPIO_Init+0x1d0>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b59      	ldr	r3, [pc, #356]	; (8000700 <MX_GPIO_Init+0x1d0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	4b56      	ldr	r3, [pc, #344]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a55      	ldr	r2, [pc, #340]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b53      	ldr	r3, [pc, #332]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0310 	and.w	r3, r3, #16
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005be:	4b50      	ldr	r3, [pc, #320]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a4f      	ldr	r2, [pc, #316]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b4d      	ldr	r3, [pc, #308]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0308 	and.w	r3, r3, #8
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005d6:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a49      	ldr	r2, [pc, #292]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <MX_GPIO_Init+0x1d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005f4:	4843      	ldr	r0, [pc, #268]	; (8000704 <MX_GPIO_Init+0x1d4>)
 80005f6:	f001 f9bb 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4842      	ldr	r0, [pc, #264]	; (8000708 <MX_GPIO_Init+0x1d8>)
 8000600:	f001 f9b6 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	483c      	ldr	r0, [pc, #240]	; (800070c <MX_GPIO_Init+0x1dc>)
 800061c:	f000 fffc 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000620:	2332      	movs	r3, #50	; 0x32
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000630:	230b      	movs	r3, #11
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <MX_GPIO_Init+0x1dc>)
 800063c:	f000 ffec 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000640:	2386      	movs	r3, #134	; 0x86
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000650:	230b      	movs	r3, #11
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	482d      	ldr	r0, [pc, #180]	; (8000710 <MX_GPIO_Init+0x1e0>)
 800065c:	f000 ffdc 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000660:	f244 0381 	movw	r3, #16513	; 0x4081
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4822      	ldr	r0, [pc, #136]	; (8000704 <MX_GPIO_Init+0x1d4>)
 800067a:	f000 ffcd 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <MX_GPIO_Init+0x1d4>)
 800069c:	f000 ffbc 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <MX_GPIO_Init+0x1d8>)
 80006b8:	f000 ffae 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <MX_GPIO_Init+0x1d8>)
 80006d0:	f000 ffa2 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e6:	230b      	movs	r3, #11
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_GPIO_Init+0x1d8>)
 80006f2:	f000 ff91 	bl	8001618 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3730      	adds	r7, #48	; 0x30
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400
 8000708:	40021800 	.word	0x40021800
 800070c:	40020800 	.word	0x40020800
 8000710:	40020000 	.word	0x40020000
 8000714:	00000000 	.word	0x00000000

08000718 <SpeedCalculation>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SpeedCalculation(int16_t count){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	speed = (int16_t)((count * TIMER_FREQENCY * MINUTE_IN_SECOND)/
 8000722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000726:	f44f 7216 	mov.w	r2, #600	; 0x258
 800072a:	fb02 f303 	mul.w	r3, r2, r3
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000736:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000758 <SpeedCalculation+0x40>
 800073a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800073e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000742:	ee17 3a90 	vmov	r3, s15
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SpeedCalculation+0x48>)
 800074a:	801a      	strh	r2, [r3, #0]
			(ENCODER_RESOLUTION*TIMER_CONF_BOTH_EDGE_T1T2));
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	cccccccd 	.word	0xcccccccd
 800075c:	408c0ccc 	.word	0x408c0ccc
 8000760:	2000009e 	.word	0x2000009e

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 fd31 	bl	80011ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f83c 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f7ff fede 	bl	8000530 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000774:	f000 fbfc 	bl	8000f70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000778:	f000 fc76 	bl	8001068 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800077c:	f000 fa62 	bl	8000c44 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000780:	f000 fa06 	bl	8000b90 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000784:	f000 fae0 	bl	8000d48 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // PWM CONFIG // CounterPeriod = 100
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000788:	2100      	movs	r1, #0
 800078a:	4810      	ldr	r0, [pc, #64]	; (80007cc <main+0x68>)
 800078c:	f002 fcbc 	bl	8003108 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000790:	2104      	movs	r1, #4
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <main+0x68>)
 8000794:	f002 fcb8 	bl	8003108 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <main+0x6c>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <main+0x68>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <main+0x70>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <main+0x68>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38

  // UART CONFIG
  HAL_UART_Receive_IT(&huart3, &user_val, 4);
 80007b0:	2204      	movs	r2, #4
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <main+0x74>)
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <main+0x78>)
 80007b6:	f003 ff46 	bl	8004646 <HAL_UART_Receive_IT>

  // ENCODER CONFIG
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80007ba:	213c      	movs	r1, #60	; 0x3c
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <main+0x7c>)
 80007be:	f002 fe43 	bl	8003448 <HAL_TIM_Encoder_Start>

  // MAIN TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim6);
 80007c2:	4808      	ldr	r0, [pc, #32]	; (80007e4 <main+0x80>)
 80007c4:	f002 fbc6 	bl	8002f54 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x64>
 80007ca:	bf00      	nop
 80007cc:	200000a4 	.word	0x200000a4
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	2000008e 	.word	0x2000008e
 80007d8:	200000a0 	.word	0x200000a0
 80007dc:	20000188 	.word	0x20000188
 80007e0:	2000013c 	.word	0x2000013c
 80007e4:	200000f0 	.word	0x200000f0

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0b8      	sub	sp, #224	; 0xe0
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007f2:	2234      	movs	r2, #52	; 0x34
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fc76 	bl	80060e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2290      	movs	r2, #144	; 0x90
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fc67 	bl	80060e8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800081a:	f001 fa0b 	bl	8001c34 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <SystemClock_Config+0x128>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a3b      	ldr	r2, [pc, #236]	; (8000910 <SystemClock_Config+0x128>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b39      	ldr	r3, [pc, #228]	; (8000910 <SystemClock_Config+0x128>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <SystemClock_Config+0x12c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800083e:	4a35      	ldr	r2, [pc, #212]	; (8000914 <SystemClock_Config+0x12c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <SystemClock_Config+0x12c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000852:	2301      	movs	r3, #1
 8000854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000858:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800085c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086e:	2304      	movs	r3, #4
 8000870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fa2f 	bl	8001cf4 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800089c:	f000 f8f4 	bl	8000a88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a0:	f001 f9d8 	bl	8001c54 <HAL_PWREx_EnableOverDrive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008aa:	f000 f8ed 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008d2:	2103      	movs	r1, #3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fcbb 	bl	8002250 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008e0:	f000 f8d2 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <SystemClock_Config+0x130>)
 80008e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 feac 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000902:	f000 f8c1 	bl	8000a88 <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	37e0      	adds	r7, #224	; 0xe0
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000
 8000918:	00200100 	.word	0x00200100

0800091c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// UART CONFIG // Przerobic na predkosc // TODO
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a39      	ldr	r2, [pc, #228]	; (8000a0c <HAL_UART_RxCpltCallback+0xf0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d15f      	bne.n	80009ec <HAL_UART_RxCpltCallback+0xd0>
		user_duty = atoi(user_val);
 800092c:	4838      	ldr	r0, [pc, #224]	; (8000a10 <HAL_UART_RxCpltCallback+0xf4>)
 800092e:	f005 fbad 	bl	800608c <atoi>
 8000932:	4603      	mov	r3, r0
 8000934:	4a37      	ldr	r2, [pc, #220]	; (8000a14 <HAL_UART_RxCpltCallback+0xf8>)
 8000936:	6013      	str	r3, [r2, #0]
		if(user_duty >= 25 && user_duty <= 100){
 8000938:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <HAL_UART_RxCpltCallback+0xf8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b18      	cmp	r3, #24
 800093e:	dd07      	ble.n	8000950 <HAL_UART_RxCpltCallback+0x34>
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_UART_RxCpltCallback+0xf8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b64      	cmp	r3, #100	; 0x64
 8000946:	dc03      	bgt.n	8000950 <HAL_UART_RxCpltCallback+0x34>
			flag = 1;
 8000948:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <HAL_UART_RxCpltCallback+0xfc>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e008      	b.n	8000962 <HAL_UART_RxCpltCallback+0x46>
		}
		else{
			flag = 0;
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <HAL_UART_RxCpltCallback+0xfc>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, &error_2, strlen(error_2), 100);
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	220e      	movs	r2, #14
 800095a:	4930      	ldr	r1, [pc, #192]	; (8000a1c <HAL_UART_RxCpltCallback+0x100>)
 800095c:	482b      	ldr	r0, [pc, #172]	; (8000a0c <HAL_UART_RxCpltCallback+0xf0>)
 800095e:	f003 fddf 	bl	8004520 <HAL_UART_Transmit>
		}

		if(user_val[3] == 'R' && flag == 1){
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <HAL_UART_RxCpltCallback+0xf4>)
 8000964:	78db      	ldrb	r3, [r3, #3]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b52      	cmp	r3, #82	; 0x52
 800096a:	d119      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x84>
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <HAL_UART_RxCpltCallback+0xfc>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b01      	cmp	r3, #1
 8000974:	d114      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x84>
			duty_A = (uint16_t)user_duty;
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <HAL_UART_RxCpltCallback+0xf8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <HAL_UART_RxCpltCallback+0x104>)
 800097e:	801a      	strh	r2, [r3, #0]
			duty_B = 0;
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <HAL_UART_RxCpltCallback+0x108>)
 8000982:	2200      	movs	r2, #0
 8000984:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <HAL_UART_RxCpltCallback+0x104>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <HAL_UART_RxCpltCallback+0x10c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <HAL_UART_RxCpltCallback+0x108>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <HAL_UART_RxCpltCallback+0x10c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	639a      	str	r2, [r3, #56]	; 0x38
 800099e:	e02b      	b.n	80009f8 <HAL_UART_RxCpltCallback+0xdc>
		}
		else if(user_val[3] == 'L' && flag == 1){
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_UART_RxCpltCallback+0xf4>)
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b4c      	cmp	r3, #76	; 0x4c
 80009a8:	d119      	bne.n	80009de <HAL_UART_RxCpltCallback+0xc2>
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_UART_RxCpltCallback+0xfc>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d114      	bne.n	80009de <HAL_UART_RxCpltCallback+0xc2>
			duty_B = (uint16_t)user_duty;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_UART_RxCpltCallback+0xf8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_RxCpltCallback+0x108>)
 80009bc:	801a      	strh	r2, [r3, #0]
			duty_A = 0;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_RxCpltCallback+0x104>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_UART_RxCpltCallback+0x104>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_RxCpltCallback+0x10c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_RxCpltCallback+0x108>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_RxCpltCallback+0x10c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	639a      	str	r2, [r3, #56]	; 0x38
 80009dc:	e00c      	b.n	80009f8 <HAL_UART_RxCpltCallback+0xdc>
		}
		else{
			HAL_UART_Transmit(&huart3, &error_1, strlen(error_1), 100);
 80009de:	2364      	movs	r3, #100	; 0x64
 80009e0:	220c      	movs	r2, #12
 80009e2:	4912      	ldr	r1, [pc, #72]	; (8000a2c <HAL_UART_RxCpltCallback+0x110>)
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <HAL_UART_RxCpltCallback+0xf0>)
 80009e6:	f003 fd9b 	bl	8004520 <HAL_UART_Transmit>
 80009ea:	e005      	b.n	80009f8 <HAL_UART_RxCpltCallback+0xdc>
		}
	}

	else{
		HAL_UART_Transmit(&huart3, &error_3, strlen(error_3), 100);
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	220c      	movs	r2, #12
 80009f0:	490f      	ldr	r1, [pc, #60]	; (8000a30 <HAL_UART_RxCpltCallback+0x114>)
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <HAL_UART_RxCpltCallback+0xf0>)
 80009f4:	f003 fd94 	bl	8004520 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(&huart3, &user_val, 4);
 80009f8:	2204      	movs	r2, #4
 80009fa:	4905      	ldr	r1, [pc, #20]	; (8000a10 <HAL_UART_RxCpltCallback+0xf4>)
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <HAL_UART_RxCpltCallback+0xf0>)
 80009fe:	f003 fe22 	bl	8004646 <HAL_UART_Receive_IT>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000188 	.word	0x20000188
 8000a10:	200000a0 	.word	0x200000a0
 8000a14:	20000090 	.word	0x20000090
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	0800623c 	.word	0x0800623c
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	2000008e 	.word	0x2000008e
 8000a28:	200000a4 	.word	0x200000a4
 8000a2c:	0800622c 	.word	0x0800622c
 8000a30:	0800624c 	.word	0x0800624c

08000a34 <HAL_TIM_PeriodElapsedCallback>:

// MAIN TIMER CONFIG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM6)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d113      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		// SPEED CALCULATION
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a4e:	6013      	str	r3, [r2, #0]
		count = (int16_t)counter;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a58:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
		SpeedCalculation(count);
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe55 	bl	8000718 <SpeedCalculation>

	}
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40001000 	.word	0x40001000
 8000a7c:	2000013c 	.word	0x2000013c
 8000a80:	20000098 	.word	0x20000098
 8000a84:	2000009c 	.word	0x2000009c

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 fb8e 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <TIM3_IRQHandler+0x10>)
 8000b36:	f002 fd15 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000a4 	.word	0x200000a4

08000b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <USART3_IRQHandler+0x10>)
 8000b4a:	f003 fdcb 	bl	80046e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000188 	.word	0x20000188

08000b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM6_DAC_IRQHandler+0x10>)
 8000b5e:	f002 fd01 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000f0 	.word	0x200000f0

08000b6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2224      	movs	r2, #36	; 0x24
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f005 faa2 	bl	80060e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000bb0:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_TIM1_Init+0xb0>)
 8000bb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000be2:	2301      	movs	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000bea:	230f      	movs	r3, #15
 8000bec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000c06:	f002 fb79 	bl	80032fc <HAL_TIM_Encoder_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000c10:	f7ff ff3a 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_TIM1_Init+0xac>)
 8000c26:	f003 fb81 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c30:	f7ff ff2a 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000013c 	.word	0x2000013c
 8000c40:	40010000 	.word	0x40010000

08000c44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	615a      	str	r2, [r3, #20]
 8000c74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000c78:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <MX_TIM3_Init+0x100>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000c7e:	222f      	movs	r2, #47	; 0x2f
 8000c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000c8a:	2263      	movs	r2, #99	; 0x63
 8000c8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c9a:	4829      	ldr	r0, [pc, #164]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000c9c:	f002 f902 	bl	8002ea4 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ca6:	f7ff feef 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4822      	ldr	r0, [pc, #136]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000cb8:	f002 fe88 	bl	80039cc <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cc2:	f7ff fee1 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cc6:	481e      	ldr	r0, [pc, #120]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000cc8:	f002 f9bc 	bl	8003044 <HAL_TIM_PWM_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cd2:	f7ff fed9 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4816      	ldr	r0, [pc, #88]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000ce6:	f003 fb21 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000cf0:	f7ff feca 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf4:	2360      	movs	r3, #96	; 0x60
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000d0c:	f002 fd4a 	bl	80037a4 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d16:	f7ff feb7 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000d22:	f002 fd3f 	bl	80037a4 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d2c:	f7ff feac 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <MX_TIM3_Init+0xfc>)
 8000d32:	f000 f8c7 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3738      	adds	r7, #56	; 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000a4 	.word	0x200000a4
 8000d44:	40000400 	.word	0x40000400

08000d48 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <MX_TIM6_Init+0x6c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d60:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000d64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d6e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d7c:	f002 f892 	bl	8002ea4 <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d86:	f7ff fe7f 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_TIM6_Init+0x68>)
 8000d98:	f003 fac8 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000da2:	f7ff fe71 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000f0 	.word	0x200000f0
 8000db4:	40001000 	.word	0x40001000

08000db8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d128      	bne.n	8000e2c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_TIM_Encoder_MspInit+0x80>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_TIM_Encoder_MspInit+0x80>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_TIM_Encoder_MspInit+0x80>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_Encoder_MspInit+0x80>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_TIM_Encoder_MspInit+0x80>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000e0a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_TIM_Encoder_MspInit+0x84>)
 8000e28:	f000 fbf6 	bl	8001618 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010000 	.word	0x40010000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <HAL_TIM_Base_MspInit+0x78>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d114      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_TIM_Base_MspInit+0x7c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_TIM_Base_MspInit+0x7c>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_TIM_Base_MspInit+0x7c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	201d      	movs	r0, #29
 8000e70:	f000 fb09 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e74:	201d      	movs	r0, #29
 8000e76:	f000 fb22 	bl	80014be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e7a:	e018      	b.n	8000eae <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_TIM_Base_MspInit+0x80>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d113      	bne.n	8000eae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_TIM_Base_MspInit+0x7c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <HAL_TIM_Base_MspInit+0x7c>)
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_TIM_Base_MspInit+0x7c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2036      	movs	r0, #54	; 0x36
 8000ea4:	f000 faef 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ea8:	2036      	movs	r0, #54	; 0x36
 8000eaa:	f000 fb08 	bl	80014be <HAL_NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40001000 	.word	0x40001000

08000ec4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_TIM_MspPostInit+0x9c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d137      	bne.n	8000f56 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_TIM_MspPostInit+0xa0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_TIM_MspPostInit+0xa0>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_TIM_MspPostInit+0xa0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_TIM_MspPostInit+0xa0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_TIM_MspPostInit+0xa0>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_TIM_MspPostInit+0xa0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f26:	2302      	movs	r3, #2
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <HAL_TIM_MspPostInit+0xa4>)
 8000f32:	f000 fb71 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f46:	2302      	movs	r3, #2
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4806      	ldr	r0, [pc, #24]	; (8000f6c <HAL_TIM_MspPostInit+0xa8>)
 8000f52:	f000 fb61 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40000400 	.word	0x40000400
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020800 	.word	0x40020800

08000f70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_USART3_UART_Init+0x5c>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART3_UART_Init+0x58>)
 8000fb4:	f003 fa66 	bl	8004484 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f7ff fd63 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000188 	.word	0x20000188
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_UART_MspInit+0x8c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d130      	bne.n	8001054 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_UART_MspInit+0x90>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <HAL_UART_MspInit+0x90>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_UART_MspInit+0x90>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0x90>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_UART_MspInit+0x90>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_UART_MspInit+0x90>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <HAL_UART_MspInit+0x94>)
 8001040:	f000 faea 	bl	8001618 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2027      	movs	r0, #39	; 0x27
 800104a:	f000 fa1c 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800104e:	2027      	movs	r0, #39	; 0x27
 8001050:	f000 fa35 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40004800 	.word	0x40004800
 8001060:	40023800 	.word	0x40023800
 8001064:	40020c00 	.word	0x40020c00

08001068 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001072:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001076:	2206      	movs	r2, #6
 8001078:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107c:	2202      	movs	r2, #2
 800107e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001088:	2202      	movs	r2, #2
 800108a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108e:	2201      	movs	r2, #1
 8001090:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ac:	f000 fc79 	bl	80019a2 <HAL_PCD_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010b6:	f7ff fce7 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000020c 	.word	0x2000020c

080010c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e4:	d141      	bne.n	800116a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010fe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001110:	230a      	movs	r3, #10
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4817      	ldr	r0, [pc, #92]	; (8001178 <HAL_PCD_MspInit+0xb4>)
 800111c:	f000 fa7c 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <HAL_PCD_MspInit+0xb4>)
 8001136:	f000 fa6f 	bl	8001618 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_PCD_MspInit+0xb0>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000

0800117c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001198:	4c0b      	ldr	r4, [pc, #44]	; (80011c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a6:	f7ff fce1 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011aa:	f004 ff79 	bl	80060a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ae:	f7ff fad9 	bl	8000764 <main>
  bx  lr    
 80011b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011c0:	08006388 	.word	0x08006388
  ldr r2, =_sbss
 80011c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011c8:	20000614 	.word	0x20000614

080011cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC_IRQHandler>

080011ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f000 f94c 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f805 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011de:	f7ff fc59 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f967 	bl	80014da <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f92f 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000008 	.word	0x20000008
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008
 800126c:	20000610 	.word	0x20000610

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000610 	.word	0x20000610

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	05fa0000 	.word	0x05fa0000

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff feb6 	bl	8001270 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d008      	beq.n	8001524 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e052      	b.n	80015ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0216 	bic.w	r2, r2, #22
 8001532:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001542:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <HAL_DMA_Abort+0x62>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0208 	bic.w	r2, r2, #8
 8001562:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001574:	e013      	b.n	800159e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001576:	f7ff fe7b 	bl	8001270 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b05      	cmp	r3, #5
 8001582:	d90c      	bls.n	800159e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e015      	b.n	80015ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e4      	bne.n	8001576 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	223f      	movs	r2, #63	; 0x3f
 80015b2:	409a      	lsls	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d004      	beq.n	80015f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e00c      	b.n	800160a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2205      	movs	r2, #5
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e175      	b.n	8001924 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8164 	bne.w	800191e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_GPIO_Init+0x56>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80be 	beq.w	800191e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <HAL_GPIO_Init+0x324>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a65      	ldr	r2, [pc, #404]	; (800193c <HAL_GPIO_Init+0x324>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b63      	ldr	r3, [pc, #396]	; (800193c <HAL_GPIO_Init+0x324>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ba:	4a61      	ldr	r2, [pc, #388]	; (8001940 <HAL_GPIO_Init+0x328>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a58      	ldr	r2, [pc, #352]	; (8001944 <HAL_GPIO_Init+0x32c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d037      	beq.n	8001856 <HAL_GPIO_Init+0x23e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a57      	ldr	r2, [pc, #348]	; (8001948 <HAL_GPIO_Init+0x330>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_GPIO_Init+0x23a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a56      	ldr	r2, [pc, #344]	; (800194c <HAL_GPIO_Init+0x334>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02b      	beq.n	800184e <HAL_GPIO_Init+0x236>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a55      	ldr	r2, [pc, #340]	; (8001950 <HAL_GPIO_Init+0x338>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x232>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_GPIO_Init+0x33c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x22e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a53      	ldr	r2, [pc, #332]	; (8001958 <HAL_GPIO_Init+0x340>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x22a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a52      	ldr	r2, [pc, #328]	; (800195c <HAL_GPIO_Init+0x344>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x226>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <HAL_GPIO_Init+0x348>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x222>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a50      	ldr	r2, [pc, #320]	; (8001964 <HAL_GPIO_Init+0x34c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <HAL_GPIO_Init+0x350>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x21a>
 800182e:	2309      	movs	r3, #9
 8001830:	e012      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001832:	230a      	movs	r3, #10
 8001834:	e010      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001836:	2308      	movs	r3, #8
 8001838:	e00e      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800183a:	2307      	movs	r3, #7
 800183c:	e00c      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800183e:	2306      	movs	r3, #6
 8001840:	e00a      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001846:	2304      	movs	r3, #4
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	; (8001940 <HAL_GPIO_Init+0x328>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_GPIO_Init+0x354>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a34      	ldr	r2, [pc, #208]	; (800196c <HAL_GPIO_Init+0x354>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_GPIO_Init+0x354>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_GPIO_Init+0x354>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ca:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_GPIO_Init+0x354>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ee:	4a1f      	ldr	r2, [pc, #124]	; (800196c <HAL_GPIO_Init+0x354>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_GPIO_Init+0x354>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_GPIO_Init+0x354>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f ae86 	bls.w	8001638 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40020800 	.word	0x40020800
 8001950:	40020c00 	.word	0x40020c00
 8001954:	40021000 	.word	0x40021000
 8001958:	40021400 	.word	0x40021400
 800195c:	40021800 	.word	0x40021800
 8001960:	40021c00 	.word	0x40021c00
 8001964:	40022000 	.word	0x40022000
 8001968:	40022400 	.word	0x40022400
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a4:	b08f      	sub	sp, #60	; 0x3c
 80019a6:	af0a      	add	r7, sp, #40	; 0x28
 80019a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e116      	b.n	8001be2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fb78 	bl	80010c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 f8b4 	bl	8005b60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	687e      	ldr	r6, [r7, #4]
 8001a00:	466d      	mov	r5, sp
 8001a02:	f106 0410 	add.w	r4, r6, #16
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a16:	1d33      	adds	r3, r6, #4
 8001a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1a:	6838      	ldr	r0, [r7, #0]
 8001a1c:	f004 f848 	bl	8005ab0 <USB_CoreInit>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0d7      	b.n	8001be2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 f8a2 	bl	8005b82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e04a      	b.n	8001ada <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	333d      	adds	r3, #61	; 0x3d
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	333c      	adds	r3, #60	; 0x3c
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	b298      	uxth	r0, r3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3342      	adds	r3, #66	; 0x42
 8001a80:	4602      	mov	r2, r0
 8001a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	333f      	adds	r3, #63	; 0x3f
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3344      	adds	r3, #68	; 0x44
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3348      	adds	r3, #72	; 0x48
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3350      	adds	r3, #80	; 0x50
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3af      	bcc.n	8001a44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	e044      	b.n	8001b74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	3301      	adds	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3b5      	bcc.n	8001aea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	687e      	ldr	r6, [r7, #4]
 8001b86:	466d      	mov	r5, sp
 8001b88:	f106 0410 	add.w	r4, r6, #16
 8001b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b98:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9c:	1d33      	adds	r3, r6, #4
 8001b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba0:	6838      	ldr	r0, [r7, #0]
 8001ba2:	f004 f83b 	bl	8005c1c <USB_DevInit>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e014      	b.n	8001be2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d102      	bne.n	8001bd6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f80b 	bl	8001bec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 f9f5 	bl	8005fca <USB_DevDisconnect>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_PCDEx_ActivateLPM+0x44>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	10000003 	.word	0x10000003

08001c34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40007000 	.word	0x40007000

08001c54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_PWREx_EnableOverDrive+0x98>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_PWREx_EnableOverDrive+0x98>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_PWREx_EnableOverDrive+0x98>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c82:	f7ff faf5 	bl	8001270 <HAL_GetTick>
 8001c86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c88:	e009      	b.n	8001c9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c8a:	f7ff faf1 	bl	8001270 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c98:	d901      	bls.n	8001c9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e022      	b.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d1ee      	bne.n	8001c8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb8:	f7ff fada 	bl	8001270 <HAL_GetTick>
 8001cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cbe:	e009      	b.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cc0:	f7ff fad6 	bl	8001270 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cce:	d901      	bls.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e007      	b.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e29b      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	4b96      	ldr	r3, [pc, #600]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d24:	4b93      	ldr	r3, [pc, #588]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62>
 8001d30:	4b90      	ldr	r3, [pc, #576]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3c:	d10b      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3e:	4b8d      	ldr	r3, [pc, #564]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d06c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x130>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d168      	bne.n	8001e24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e275      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7a>
 8001d60:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a83      	ldr	r2, [pc, #524]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e02e      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x9c>
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b7c      	ldr	r3, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7b      	ldr	r2, [pc, #492]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001d9a:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a72      	ldr	r2, [pc, #456]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6b      	ldr	r2, [pc, #428]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fa4c 	bl	8001270 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fa48 	bl	8001270 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e229      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fa38 	bl	8001270 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fa34 	bl	8001270 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e215      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x110>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d069      	beq.n	8001f06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b4d      	ldr	r3, [pc, #308]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x190>
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1e9      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	493d      	ldr	r1, [pc, #244]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e040      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f9ea 	bl	8001270 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f9e6 	bl	8001270 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1c7      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4929      	ldr	r1, [pc, #164]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f9c6 	bl	8001270 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff f9c2 	bl	8001270 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1a3      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d038      	beq.n	8001f84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d019      	beq.n	8001f4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff f9a3 	bl	8001270 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7ff f99f 	bl	8001270 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e180      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x23a>
 8001f4c:	e01a      	b.n	8001f84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f989 	bl	8001270 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7ff f985 	bl	8001270 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d903      	bls.n	8001f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e166      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
 8001f74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a4 	beq.w	80020da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b8c      	ldr	r3, [pc, #560]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b89      	ldr	r3, [pc, #548]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a88      	ldr	r2, [pc, #544]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b86      	ldr	r3, [pc, #536]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fba:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <HAL_RCC_OscConfig+0x4d4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d118      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fc6:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <HAL_RCC_OscConfig+0x4d4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7f      	ldr	r2, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x4d4>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff f94d 	bl	8001270 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7ff f949 	bl	8001270 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b64      	cmp	r3, #100	; 0x64
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e12a      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x4d4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x31a>
 8002000:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a6f      	ldr	r2, [pc, #444]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	e02d      	b.n	800206a <HAL_RCC_OscConfig+0x376>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x33c>
 8002016:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
 8002022:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a67      	ldr	r2, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e01c      	b.n	800206a <HAL_RCC_OscConfig+0x376>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x35e>
 8002038:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a61      	ldr	r2, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	4b5f      	ldr	r3, [pc, #380]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a5e      	ldr	r2, [pc, #376]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x376>
 8002052:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a5b      	ldr	r2, [pc, #364]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f8fd 	bl	8001270 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff f8f9 	bl	8001270 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0d8      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ee      	beq.n	800207a <HAL_RCC_OscConfig+0x386>
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7ff f8e7 	bl	8001270 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff f8e3 	bl	8001270 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0c2      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80ae 	beq.w	8002240 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d06d      	beq.n	80021cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d14b      	bne.n	8002190 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f8b4 	bl	8001270 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff f8b0 	bl	8001270 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e091      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	071b      	lsls	r3, r3, #28
 8002156:	491b      	ldr	r1, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f882 	bl	8001270 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f87e 	bl	8001270 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e05f      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x47c>
 800218e:	e057      	b.n	8002240 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8002196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff f868 	bl	8001270 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f864 	bl	8001270 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e045      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4b0>
 80021c2:	e03d      	b.n	8002240 <HAL_RCC_OscConfig+0x54c>
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_RCC_OscConfig+0x558>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d129      	bne.n	800223c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d122      	bne.n	800223c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002202:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002204:	4293      	cmp	r3, r2
 8002206:	d119      	bne.n	800223c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	3b01      	subs	r3, #1
 8002216:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d10f      	bne.n	800223c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d107      	bne.n	800223c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0d0      	b.n	800240a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d910      	bls.n	8002298 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 020f 	bic.w	r2, r3, #15
 800227e:	4965      	ldr	r1, [pc, #404]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b8      	b.n	800240a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b0:	4b59      	ldr	r3, [pc, #356]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a58      	ldr	r2, [pc, #352]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c8:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a52      	ldr	r2, [pc, #328]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	494d      	ldr	r1, [pc, #308]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d040      	beq.n	8002374 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d115      	bne.n	8002332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e07f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e073      	b.n	800240a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e06b      	b.n	800240a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002332:	4b39      	ldr	r3, [pc, #228]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4936      	ldr	r1, [pc, #216]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe ff94 	bl	8001270 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	e00a      	b.n	8002362 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe ff90 	bl	8001270 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e053      	b.n	800240a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 020c 	and.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	429a      	cmp	r2, r3
 8002372:	d1eb      	bne.n	800234c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d210      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 020f 	bic.w	r2, r3, #15
 800238a:	4922      	ldr	r1, [pc, #136]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e032      	b.n	800240a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4916      	ldr	r1, [pc, #88]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490e      	ldr	r1, [pc, #56]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e2:	f000 f821 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	490a      	ldr	r1, [pc, #40]	; (800241c <HAL_RCC_ClockConfig+0x1cc>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1d0>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1d4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fef0 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00
 8002418:	40023800 	.word	0x40023800
 800241c:	0800625c 	.word	0x0800625c
 8002420:	20000000 	.word	0x20000000
 8002424:	20000004 	.word	0x20000004

08002428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	2300      	movs	r3, #0
 800243a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002440:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d00d      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x40>
 800244c:	2b08      	cmp	r3, #8
 800244e:	f200 80bd 	bhi.w	80025cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x34>
 8002456:	2b04      	cmp	r3, #4
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x3a>
 800245a:	e0b7      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800245e:	60bb      	str	r3, [r7, #8]
      break;
 8002460:	e0b7      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002462:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002464:	60bb      	str	r3, [r7, #8]
      break;
 8002466:	e0b4      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002468:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002470:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002472:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d04d      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b58      	ldr	r3, [pc, #352]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	461a      	mov	r2, r3
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	ea02 0800 	and.w	r8, r2, r0
 8002496:	ea03 0901 	and.w	r9, r3, r1
 800249a:	4640      	mov	r0, r8
 800249c:	4649      	mov	r1, r9
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	014b      	lsls	r3, r1, #5
 80024a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024ac:	0142      	lsls	r2, r0, #5
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	ebb0 0008 	subs.w	r0, r0, r8
 80024b6:	eb61 0109 	sbc.w	r1, r1, r9
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	018b      	lsls	r3, r1, #6
 80024c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024c8:	0182      	lsls	r2, r0, #6
 80024ca:	1a12      	subs	r2, r2, r0
 80024cc:	eb63 0301 	sbc.w	r3, r3, r1
 80024d0:	f04f 0000 	mov.w	r0, #0
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	00d9      	lsls	r1, r3, #3
 80024da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024de:	00d0      	lsls	r0, r2, #3
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	eb12 0208 	adds.w	r2, r2, r8
 80024e8:	eb43 0309 	adc.w	r3, r3, r9
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	0259      	lsls	r1, r3, #9
 80024f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024fa:	0250      	lsls	r0, r2, #9
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	461a      	mov	r2, r3
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	f7fd fe94 	bl	8000238 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e04a      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	461a      	mov	r2, r3
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	ea02 0400 	and.w	r4, r2, r0
 8002532:	ea03 0501 	and.w	r5, r3, r1
 8002536:	4620      	mov	r0, r4
 8002538:	4629      	mov	r1, r5
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	014b      	lsls	r3, r1, #5
 8002544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002548:	0142      	lsls	r2, r0, #5
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	1b00      	subs	r0, r0, r4
 8002550:	eb61 0105 	sbc.w	r1, r1, r5
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	018b      	lsls	r3, r1, #6
 800255e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002562:	0182      	lsls	r2, r0, #6
 8002564:	1a12      	subs	r2, r2, r0
 8002566:	eb63 0301 	sbc.w	r3, r3, r1
 800256a:	f04f 0000 	mov.w	r0, #0
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	00d9      	lsls	r1, r3, #3
 8002574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002578:	00d0      	lsls	r0, r2, #3
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	1912      	adds	r2, r2, r4
 8002580:	eb45 0303 	adc.w	r3, r5, r3
 8002584:	f04f 0000 	mov.w	r0, #0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	0299      	lsls	r1, r3, #10
 800258e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002592:	0290      	lsls	r0, r2, #10
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	f7fd fe48 	bl	8000238 <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	60bb      	str	r3, [r7, #8]
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025ce:	60bb      	str	r3, [r7, #8]
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	68bb      	ldr	r3, [r7, #8]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200

080025ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff0 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	0800626c 	.word	0x0800626c

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffdc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	0800626c 	.word	0x0800626c

08002654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800267c:	4b69      	ldr	r3, [pc, #420]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a68      	ldr	r2, [pc, #416]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002686:	6093      	str	r3, [r2, #8]
 8002688:	4b66      	ldr	r3, [pc, #408]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	4964      	ldr	r1, [pc, #400]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d017      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	4959      	ldr	r1, [pc, #356]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026cc:	d101      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d017      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ea:	4b4e      	ldr	r3, [pc, #312]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	494a      	ldr	r1, [pc, #296]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002708:	d101      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002716:	2301      	movs	r3, #1
 8002718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 808b 	beq.w	800284e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4a39      	ldr	r2, [pc, #228]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002742:	6413      	str	r3, [r2, #64]	; 0x40
 8002744:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002750:	4b35      	ldr	r3, [pc, #212]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fe fd88 	bl	8001270 <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fd84 	bl	8001270 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e38f      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002776:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d035      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d02e      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d114      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fd4c 	bl	8001270 <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fd48 	bl	8001270 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e351      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800280a:	d111      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800281a:	400b      	ands	r3, r1
 800281c:	4901      	ldr	r1, [pc, #4]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
 8002822:	e00b      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000
 800282c:	0ffffcff 	.word	0x0ffffcff
 8002830:	4bb3      	ldr	r3, [pc, #716]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4ab2      	ldr	r2, [pc, #712]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002836:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800283a:	6093      	str	r3, [r2, #8]
 800283c:	4bb0      	ldr	r3, [pc, #704]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800283e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	49ad      	ldr	r1, [pc, #692]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800284a:	4313      	orrs	r3, r2
 800284c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800285a:	4ba9      	ldr	r3, [pc, #676]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800285c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002860:	4aa7      	ldr	r2, [pc, #668]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002866:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800286a:	4ba5      	ldr	r3, [pc, #660]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800286c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	49a2      	ldr	r1, [pc, #648]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002888:	4b9d      	ldr	r3, [pc, #628]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002896:	499a      	ldr	r1, [pc, #616]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028aa:	4b95      	ldr	r3, [pc, #596]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b8:	4991      	ldr	r1, [pc, #580]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028da:	4989      	ldr	r1, [pc, #548]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028ee:	4b84      	ldr	r3, [pc, #528]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4980      	ldr	r1, [pc, #512]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002910:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4978      	ldr	r1, [pc, #480]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002932:	4b73      	ldr	r3, [pc, #460]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f023 020c 	bic.w	r2, r3, #12
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	496f      	ldr	r1, [pc, #444]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	4967      	ldr	r1, [pc, #412]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	495e      	ldr	r1, [pc, #376]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	4956      	ldr	r1, [pc, #344]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029ba:	4b51      	ldr	r3, [pc, #324]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	494d      	ldr	r1, [pc, #308]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029dc:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	4945      	ldr	r1, [pc, #276]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029fe:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	493c      	ldr	r1, [pc, #240]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a20:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a2e:	4934      	ldr	r1, [pc, #208]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d011      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a42:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a50:	492b      	ldr	r1, [pc, #172]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a60:	d101      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	491b      	ldr	r1, [pc, #108]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab4:	4912      	ldr	r1, [pc, #72]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad8:	4909      	ldr	r1, [pc, #36]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00f      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	e002      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	4986      	ldr	r1, [pc, #536]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b18:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b28:	497d      	ldr	r1, [pc, #500]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d006      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80d6 	beq.w	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b44:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b50:	f7fe fb8e 	bl	8001270 <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b58:	f7fe fb8a 	bl	8001270 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e195      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d021      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b8a:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	0e1b      	lsrs	r3, r3, #24
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	019a      	lsls	r2, r3, #6
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	071b      	lsls	r3, r3, #28
 8002bbe:	4958      	ldr	r1, [pc, #352]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02e      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf0:	d129      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c06:	0f1b      	lsrs	r3, r3, #28
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	019a      	lsls	r2, r3, #6
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	071b      	lsls	r3, r3, #28
 8002c26:	493e      	ldr	r1, [pc, #248]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c34:	f023 021f 	bic.w	r2, r3, #31
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	4938      	ldr	r1, [pc, #224]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01d      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c52:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c58:	0e1b      	lsrs	r3, r3, #24
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c66:	0f1b      	lsrs	r3, r3, #28
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	019a      	lsls	r2, r3, #6
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	061b      	lsls	r3, r3, #24
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	071b      	lsls	r3, r3, #28
 8002c86:	4926      	ldr	r1, [pc, #152]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d011      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	019a      	lsls	r2, r3, #6
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cca:	f7fe fad1 	bl	8001270 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cd2:	f7fe facd 	bl	8001270 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0d8      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 80ce 	bne.w	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fab4 	bl	8001270 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d0c:	f7fe fab0 	bl	8001270 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d904      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0bb      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d24:	4b5e      	ldr	r3, [pc, #376]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d30:	d0ec      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02e      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d12a      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d68:	4b4d      	ldr	r3, [pc, #308]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	0f1b      	lsrs	r3, r3, #28
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	019a      	lsls	r2, r3, #6
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	071b      	lsls	r3, r3, #28
 8002d8e:	4944      	ldr	r1, [pc, #272]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d96:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	493d      	ldr	r1, [pc, #244]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d022      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc4:	d11d      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	0e1b      	lsrs	r3, r3, #24
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	0f1b      	lsrs	r3, r3, #28
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	019a      	lsls	r2, r3, #6
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	431a      	orrs	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	061b      	lsls	r3, r3, #24
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	071b      	lsls	r3, r3, #28
 8002dfa:	4929      	ldr	r1, [pc, #164]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d028      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	0e1b      	lsrs	r3, r3, #24
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	019a      	lsls	r2, r3, #6
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	071b      	lsls	r3, r3, #28
 8002e42:	4917      	ldr	r1, [pc, #92]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	4911      	ldr	r1, [pc, #68]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fa00 	bl	8001270 <HAL_GetTick>
 8002e70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e74:	f7fe f9fc 	bl	8001270 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b64      	cmp	r3, #100	; 0x64
 8002e80:	d901      	bls.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e007      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e92:	d1ef      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800

08002ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e049      	b.n	8002f4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd ffb8 	bl	8000e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 fe64 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d001      	beq.n	8002f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e054      	b.n	8003016 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a26      	ldr	r2, [pc, #152]	; (8003024 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d022      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x80>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f96:	d01d      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x80>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d018      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x80>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a21      	ldr	r2, [pc, #132]	; (800302c <HAL_TIM_Base_Start_IT+0xd8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x80>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x80>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_TIM_Base_Start_IT+0xe0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x80>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_TIM_Base_Start_IT+0xe4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x80>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_TIM_Base_Start_IT+0xe8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d115      	bne.n	8003000 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_TIM_Base_Start_IT+0xec>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d015      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0xbe>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d011      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	e008      	b.n	8003012 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e000      	b.n	8003014 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40010400 	.word	0x40010400
 8003038:	40014000 	.word	0x40014000
 800303c:	40001800 	.word	0x40001800
 8003040:	00010007 	.word	0x00010007

08003044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e049      	b.n	80030ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f841 	bl	80030f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f000 fd94 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_TIM_PWM_Start+0x24>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e03c      	b.n	80031a6 <HAL_TIM_PWM_Start+0x9e>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d109      	bne.n	8003146 <HAL_TIM_PWM_Start+0x3e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e02f      	b.n	80031a6 <HAL_TIM_PWM_Start+0x9e>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d109      	bne.n	8003160 <HAL_TIM_PWM_Start+0x58>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e022      	b.n	80031a6 <HAL_TIM_PWM_Start+0x9e>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d109      	bne.n	800317a <HAL_TIM_PWM_Start+0x72>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e015      	b.n	80031a6 <HAL_TIM_PWM_Start+0x9e>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d109      	bne.n	8003194 <HAL_TIM_PWM_Start+0x8c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e008      	b.n	80031a6 <HAL_TIM_PWM_Start+0x9e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e092      	b.n	80032d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0xb6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031bc:	e023      	b.n	8003206 <HAL_TIM_PWM_Start+0xfe>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0xc6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031cc:	e01b      	b.n	8003206 <HAL_TIM_PWM_Start+0xfe>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0xd6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	e013      	b.n	8003206 <HAL_TIM_PWM_Start+0xfe>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PWM_Start+0xe6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ec:	e00b      	b.n	8003206 <HAL_TIM_PWM_Start+0xfe>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0xf6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fc:	e003      	b.n	8003206 <HAL_TIM_PWM_Start+0xfe>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	6839      	ldr	r1, [r7, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f001 f866 	bl	80042e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a30      	ldr	r2, [pc, #192]	; (80032dc <HAL_TIM_PWM_Start+0x1d4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_TIM_PWM_Start+0x120>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <HAL_TIM_PWM_Start+0x1d8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_TIM_PWM_Start+0x124>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_TIM_PWM_Start+0x126>
 800322c:	2300      	movs	r3, #0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a25      	ldr	r2, [pc, #148]	; (80032dc <HAL_TIM_PWM_Start+0x1d4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_TIM_PWM_Start+0x18a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	d01d      	beq.n	8003292 <HAL_TIM_PWM_Start+0x18a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_TIM_PWM_Start+0x1dc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_TIM_PWM_Start+0x18a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <HAL_TIM_PWM_Start+0x1e0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_TIM_PWM_Start+0x18a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_TIM_PWM_Start+0x1e4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_TIM_PWM_Start+0x18a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_TIM_PWM_Start+0x1d8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_TIM_PWM_Start+0x18a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_TIM_PWM_Start+0x1e8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_TIM_PWM_Start+0x18a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_TIM_PWM_Start+0x1ec>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d115      	bne.n	80032be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_TIM_PWM_Start+0x1f0>)
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d015      	beq.n	80032d0 <HAL_TIM_PWM_Start+0x1c8>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032aa:	d011      	beq.n	80032d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	e008      	b.n	80032d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e000      	b.n	80032d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40010400 	.word	0x40010400
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40000c00 	.word	0x40000c00
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40001800 	.word	0x40001800
 80032f8:	00010007 	.word	0x00010007

080032fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e08f      	b.n	8003430 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fd fd47 	bl	8000db8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <HAL_TIM_Encoder_Init+0x13c>)
 800333e:	400b      	ands	r3, r1
 8003340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f000 fc2f 	bl	8003bb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4b31      	ldr	r3, [pc, #196]	; (800343c <HAL_TIM_Encoder_Init+0x140>)
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	4313      	orrs	r3, r2
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_TIM_Encoder_Init+0x144>)
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_TIM_Encoder_Init+0x148>)
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4313      	orrs	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	011a      	lsls	r2, r3, #4
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	031b      	lsls	r3, r3, #12
 80033bc:	4313      	orrs	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	4313      	orrs	r3, r2
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fffebff8 	.word	0xfffebff8
 800343c:	fffffcfc 	.word	0xfffffcfc
 8003440:	fffff3f3 	.word	0xfffff3f3
 8003444:	ffff0f0f 	.word	0xffff0f0f

08003448 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003458:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003460:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003468:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003470:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d110      	bne.n	800349a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800347e:	7b7b      	ldrb	r3, [r7, #13]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e069      	b.n	800355c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	e031      	b.n	80034fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d110      	bne.n	80034c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a0:	7bbb      	ldrb	r3, [r7, #14]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034a6:	7b3b      	ldrb	r3, [r7, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e055      	b.n	800355c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c0:	e01d      	b.n	80034fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d108      	bne.n	80034da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ce:	7b7b      	ldrb	r3, [r7, #13]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d102      	bne.n	80034da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034d4:	7b3b      	ldrb	r3, [r7, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e03e      	b.n	800355c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_TIM_Encoder_Start+0xc4>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d008      	beq.n	800351c <HAL_TIM_Encoder_Start+0xd4>
 800350a:	e00f      	b.n	800352c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fee3 	bl	80042e0 <TIM_CCxChannelCmd>
      break;
 800351a:	e016      	b.n	800354a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	2104      	movs	r1, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fedb 	bl	80042e0 <TIM_CCxChannelCmd>
      break;
 800352a:	e00e      	b.n	800354a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fed3 	bl	80042e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2201      	movs	r2, #1
 8003540:	2104      	movs	r1, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fecc 	bl	80042e0 <TIM_CCxChannelCmd>
      break;
 8003548:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0202 	mvn.w	r2, #2
 8003590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fae4 	bl	8003b74 <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fad6 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fae7 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0204 	mvn.w	r2, #4
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 faba 	bl	8003b74 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 faac 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fabd 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0208 	mvn.w	r2, #8
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2204      	movs	r2, #4
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa90 	bl	8003b74 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa82 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa93 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b10      	cmp	r3, #16
 8003674:	d122      	bne.n	80036bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b10      	cmp	r3, #16
 8003682:	d11b      	bne.n	80036bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0210 	mvn.w	r2, #16
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2208      	movs	r2, #8
 8003692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa66 	bl	8003b74 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa58 	bl	8003b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa69 	bl	8003b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0201 	mvn.w	r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd f9a6 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fea4 	bl	800445c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003722:	d10e      	bne.n	8003742 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b80      	cmp	r3, #128	; 0x80
 8003730:	d107      	bne.n	8003742 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fe97 	bl	8004470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d10e      	bne.n	800376e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d107      	bne.n	800376e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fa17 	bl	8003b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b20      	cmp	r3, #32
 800377a:	d10e      	bne.n	800379a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d107      	bne.n	800379a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f06f 0220 	mvn.w	r2, #32
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fe57 	bl	8004448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0ff      	b.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b14      	cmp	r3, #20
 80037ce:	f200 80f0 	bhi.w	80039b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	0800382d 	.word	0x0800382d
 80037dc:	080039b3 	.word	0x080039b3
 80037e0:	080039b3 	.word	0x080039b3
 80037e4:	080039b3 	.word	0x080039b3
 80037e8:	0800386d 	.word	0x0800386d
 80037ec:	080039b3 	.word	0x080039b3
 80037f0:	080039b3 	.word	0x080039b3
 80037f4:	080039b3 	.word	0x080039b3
 80037f8:	080038af 	.word	0x080038af
 80037fc:	080039b3 	.word	0x080039b3
 8003800:	080039b3 	.word	0x080039b3
 8003804:	080039b3 	.word	0x080039b3
 8003808:	080038ef 	.word	0x080038ef
 800380c:	080039b3 	.word	0x080039b3
 8003810:	080039b3 	.word	0x080039b3
 8003814:	080039b3 	.word	0x080039b3
 8003818:	08003931 	.word	0x08003931
 800381c:	080039b3 	.word	0x080039b3
 8003820:	080039b3 	.word	0x080039b3
 8003824:	080039b3 	.word	0x080039b3
 8003828:	08003971 	.word	0x08003971
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fa5c 	bl	8003cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0208 	orr.w	r2, r2, #8
 8003846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6999      	ldr	r1, [r3, #24]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	619a      	str	r2, [r3, #24]
      break;
 800386a:	e0a5      	b.n	80039b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 faae 	bl	8003dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6999      	ldr	r1, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]
      break;
 80038ac:	e084      	b.n	80039b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fb05 	bl	8003ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0208 	orr.w	r2, r2, #8
 80038c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0204 	bic.w	r2, r2, #4
 80038d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69d9      	ldr	r1, [r3, #28]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	61da      	str	r2, [r3, #28]
      break;
 80038ec:	e064      	b.n	80039b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb5b 	bl	8003fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	61da      	str	r2, [r3, #28]
      break;
 800392e:	e043      	b.n	80039b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb92 	bl	8004060 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0208 	orr.w	r2, r2, #8
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0204 	bic.w	r2, r2, #4
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800396e:	e023      	b.n	80039b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fbc4 	bl	8004104 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	021a      	lsls	r2, r3, #8
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039b0:	e002      	b.n	80039b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
      break;
 80039b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_ConfigClockSource+0x1c>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0b4      	b.n	8003b52 <HAL_TIM_ConfigClockSource+0x186>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <HAL_TIM_ConfigClockSource+0x190>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a20:	d03e      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0xd4>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a26:	f200 8087 	bhi.w	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	f000 8086 	beq.w	8003b3e <HAL_TIM_ConfigClockSource+0x172>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d87f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d01a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xa6>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d87b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d050      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x11a>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d877      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d03c      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0xfa>
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d873      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d058      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x13a>
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d86f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d064      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d86b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d060      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d867      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d05a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	e062      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f000 fc0d 	bl	80042a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	609a      	str	r2, [r3, #8]
      break;
 8003a9e:	e04f      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f000 fbf6 	bl	80042a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac2:	609a      	str	r2, [r3, #8]
      break;
 8003ac4:	e03c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f000 fb6a 	bl	80041ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2150      	movs	r1, #80	; 0x50
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fbc3 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003ae4:	e02c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f000 fb89 	bl	800420a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2160      	movs	r1, #96	; 0x60
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fbb3 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003b04:	e01c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 fb4a 	bl	80041ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fba3 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003b24:	e00c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 fb9a 	bl	800426a <TIM_ITRx_SetConfig>
      break;
 8003b36:	e003      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e000      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	fffeff88 	.word	0xfffeff88

08003b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a40      	ldr	r2, [pc, #256]	; (8003cc4 <TIM_Base_SetConfig+0x114>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3d      	ldr	r2, [pc, #244]	; (8003cc8 <TIM_Base_SetConfig+0x118>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3c      	ldr	r2, [pc, #240]	; (8003ccc <TIM_Base_SetConfig+0x11c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3b      	ldr	r2, [pc, #236]	; (8003cd0 <TIM_Base_SetConfig+0x120>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3a      	ldr	r2, [pc, #232]	; (8003cd4 <TIM_Base_SetConfig+0x124>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2f      	ldr	r2, [pc, #188]	; (8003cc4 <TIM_Base_SetConfig+0x114>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d027      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <TIM_Base_SetConfig+0x118>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d023      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <TIM_Base_SetConfig+0x11c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01f      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <TIM_Base_SetConfig+0x120>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01b      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <TIM_Base_SetConfig+0x124>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d017      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <TIM_Base_SetConfig+0x128>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <TIM_Base_SetConfig+0x12c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00f      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <TIM_Base_SetConfig+0x130>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a25      	ldr	r2, [pc, #148]	; (8003ce4 <TIM_Base_SetConfig+0x134>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a24      	ldr	r2, [pc, #144]	; (8003ce8 <TIM_Base_SetConfig+0x138>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <TIM_Base_SetConfig+0x13c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <TIM_Base_SetConfig+0x114>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0xf8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <TIM_Base_SetConfig+0x124>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d103      	bne.n	8003cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	615a      	str	r2, [r3, #20]
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800
 8003ce4:	40001800 	.word	0x40001800
 8003ce8:	40001c00 	.word	0x40001c00
 8003cec:	40002000 	.word	0x40002000

08003cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <TIM_OC1_SetConfig+0xd8>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 0302 	bic.w	r3, r3, #2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <TIM_OC1_SetConfig+0xdc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_OC1_SetConfig+0x64>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <TIM_OC1_SetConfig+0xe0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10c      	bne.n	8003d6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0308 	bic.w	r3, r3, #8
 8003d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <TIM_OC1_SetConfig+0xdc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_OC1_SetConfig+0x8e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <TIM_OC1_SetConfig+0xe0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d111      	bne.n	8003da2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	fffeff8f 	.word	0xfffeff8f
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0210 	bic.w	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <TIM_OC2_SetConfig+0xe4>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0320 	bic.w	r3, r3, #32
 8003e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <TIM_OC2_SetConfig+0xe8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_OC2_SetConfig+0x68>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <TIM_OC2_SetConfig+0xec>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10d      	bne.n	8003e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <TIM_OC2_SetConfig+0xe8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC2_SetConfig+0x94>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <TIM_OC2_SetConfig+0xec>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d113      	bne.n	8003e90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	feff8fff 	.word	0xfeff8fff
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <TIM_OC3_SetConfig+0xe0>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <TIM_OC3_SetConfig+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC3_SetConfig+0x66>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a21      	ldr	r2, [pc, #132]	; (8003fac <TIM_OC3_SetConfig+0xe8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10d      	bne.n	8003f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <TIM_OC3_SetConfig+0xe4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <TIM_OC3_SetConfig+0x92>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a16      	ldr	r2, [pc, #88]	; (8003fac <TIM_OC3_SetConfig+0xe8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d113      	bne.n	8003f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	fffeff8f 	.word	0xfffeff8f
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	40010400 	.word	0x40010400

08003fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <TIM_OC4_SetConfig+0xa4>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <TIM_OC4_SetConfig+0xa8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC4_SetConfig+0x68>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a12      	ldr	r2, [pc, #72]	; (800405c <TIM_OC4_SetConfig+0xac>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d109      	bne.n	800402c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800401e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	019b      	lsls	r3, r3, #6
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	feff8fff 	.word	0xfeff8fff
 8004058:	40010000 	.word	0x40010000
 800405c:	40010400 	.word	0x40010400

08004060 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <TIM_OC5_SetConfig+0x98>)
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a12      	ldr	r2, [pc, #72]	; (80040fc <TIM_OC5_SetConfig+0x9c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC5_SetConfig+0x5e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <TIM_OC5_SetConfig+0xa0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d109      	bne.n	80040d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	621a      	str	r2, [r3, #32]
}
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	fffeff8f 	.word	0xfffeff8f
 80040fc:	40010000 	.word	0x40010000
 8004100:	40010400 	.word	0x40010400

08004104 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <TIM_OC6_SetConfig+0x9c>)
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	051b      	lsls	r3, r3, #20
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <TIM_OC6_SetConfig+0xa0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC6_SetConfig+0x60>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <TIM_OC6_SetConfig+0xa4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d109      	bne.n	8004178 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	029b      	lsls	r3, r3, #10
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	feff8fff 	.word	0xfeff8fff
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40010400 	.word	0x40010400

080041ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 030a 	bic.w	r3, r3, #10
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f023 0210 	bic.w	r2, r3, #16
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	f043 0307 	orr.w	r3, r3, #7
 800428c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	609a      	str	r2, [r3, #8]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2201      	movs	r2, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	43db      	mvns	r3, r3
 8004302:	401a      	ands	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004340:	2302      	movs	r3, #2
 8004342:	e06d      	b.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a30      	ldr	r2, [pc, #192]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d108      	bne.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800437e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004390:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a20      	ldr	r2, [pc, #128]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d022      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d01d      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1a      	ldr	r2, [pc, #104]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a15      	ldr	r2, [pc, #84]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a16      	ldr	r2, [pc, #88]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a15      	ldr	r2, [pc, #84]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10c      	bne.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	4313      	orrs	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	40010000 	.word	0x40010000
 8004430:	40010400 	.word	0x40010400
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40014000 	.word	0x40014000
 8004444:	40001800 	.word	0x40001800

08004448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e040      	b.n	8004518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc fd92 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2224      	movs	r2, #36	; 0x24
 80044b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fc18 	bl	8004cf8 <UART_SetConfig>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e022      	b.n	8004518 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fe6e 	bl	80051bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fef5 	bl	8005300 <UART_CheckIdleState>
 8004516:	4603      	mov	r3, r0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004534:	2b20      	cmp	r3, #32
 8004536:	f040 8081 	bne.w	800463c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_UART_Transmit+0x26>
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e079      	b.n	800463e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_UART_Transmit+0x38>
 8004554:	2302      	movs	r3, #2
 8004556:	e072      	b.n	800463e <HAL_UART_Transmit+0x11e>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2221      	movs	r2, #33	; 0x21
 800456c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456e:	f7fc fe7f 	bl	8001270 <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458c:	d108      	bne.n	80045a0 <HAL_UART_Transmit+0x80>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e003      	b.n	80045a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80045b0:	e02c      	b.n	800460c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fee8 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e038      	b.n	800463e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	3302      	adds	r3, #2
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	e007      	b.n	80045fa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1cc      	bne.n	80045b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2200      	movs	r2, #0
 8004620:	2140      	movs	r1, #64	; 0x40
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 feb5 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e005      	b.n	800463e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b08a      	sub	sp, #40	; 0x28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004658:	2b20      	cmp	r3, #32
 800465a:	d13d      	bne.n	80046d8 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Receive_IT+0x22>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e036      	b.n	80046da <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_UART_Receive_IT+0x34>
 8004676:	2302      	movs	r3, #2
 8004678:	e02f      	b.n	80046da <HAL_UART_Receive_IT+0x94>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	613b      	str	r3, [r7, #16]
   return(result);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	623b      	str	r3, [r7, #32]
 80046b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69f9      	ldr	r1, [r7, #28]
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 ff24 	bl	800551c <UART_Start_Receive_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	e000      	b.n	80046da <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3728      	adds	r7, #40	; 0x28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b0ba      	sub	sp, #232	; 0xe8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800470a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800470e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004712:	4013      	ands	r3, r2
 8004714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d115      	bne.n	800474c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00f      	beq.n	800474c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 82a4 	beq.w	8004c8a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
      }
      return;
 800474a:	e29e      	b.n	8004c8a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800474c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8117 	beq.w	8004984 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004766:	4b85      	ldr	r3, [pc, #532]	; (800497c <HAL_UART_IRQHandler+0x298>)
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 810a 	beq.w	8004984 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d011      	beq.n	80047a0 <HAL_UART_IRQHandler+0xbc>
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004796:	f043 0201 	orr.w	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d011      	beq.n	80047d0 <HAL_UART_IRQHandler+0xec>
 80047ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2202      	movs	r2, #2
 80047be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c6:	f043 0204 	orr.w	r2, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d011      	beq.n	8004800 <HAL_UART_IRQHandler+0x11c>
 80047dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2204      	movs	r2, #4
 80047ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f6:	f043 0202 	orr.w	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d017      	beq.n	800483c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2208      	movs	r2, #8
 800482a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004832:	f043 0208 	orr.w	r2, r3, #8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004844:	2b00      	cmp	r3, #0
 8004846:	d012      	beq.n	800486e <HAL_UART_IRQHandler+0x18a>
 8004848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00c      	beq.n	800486e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800485c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 820a 	beq.w	8004c8e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b40      	cmp	r3, #64	; 0x40
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04f      	beq.n	8004966 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fef2 	bl	80056b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d141      	bne.n	800495e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800490a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800491e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1d9      	bne.n	80048da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	2b00      	cmp	r3, #0
 800492c:	d013      	beq.n	8004956 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <HAL_UART_IRQHandler+0x29c>)
 8004934:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	4618      	mov	r0, r3
 800493c:	f7fc fe49 	bl	80015d2 <HAL_DMA_Abort_IT>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d017      	beq.n	8004976 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004950:	4610      	mov	r0, r2
 8004952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	e00f      	b.n	8004976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9ae 	bl	8004cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	e00b      	b.n	8004976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9aa 	bl	8004cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	e007      	b.n	8004976 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9a6 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004974:	e18b      	b.n	8004c8e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004976:	bf00      	nop
    return;
 8004978:	e189      	b.n	8004c8e <HAL_UART_IRQHandler+0x5aa>
 800497a:	bf00      	nop
 800497c:	04000120 	.word	0x04000120
 8004980:	08005777 	.word	0x08005777

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 8144 	bne.w	8004c16 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 813d 	beq.w	8004c16 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8136 	beq.w	8004c16 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2210      	movs	r2, #16
 80049b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	f040 80b2 	bne.w	8004b26 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 815d 	beq.w	8004c92 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049e2:	429a      	cmp	r2, r3
 80049e4:	f080 8155 	bcs.w	8004c92 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fc:	f000 8085 	beq.w	8004b0a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1da      	bne.n	8004a00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3308      	adds	r3, #8
 8004a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e1      	bne.n	8004a4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e3      	bne.n	8004a86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ada:	f023 0310 	bic.w	r3, r3, #16
 8004ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e4      	bne.n	8004aca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fc fcf4 	bl	80014f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8d4 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b24:	e0b5      	b.n	8004c92 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80a7 	beq.w	8004c96 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80a2 	beq.w	8004c96 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
 8004b76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e4      	bne.n	8004b52 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	623b      	str	r3, [r7, #32]
   return(result);
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bac:	633a      	str	r2, [r7, #48]	; 0x30
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e3      	bne.n	8004b88 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0310 	bic.w	r3, r3, #16
 8004be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	617b      	str	r3, [r7, #20]
   return(result);
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e4      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f85c 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c14:	e03f      	b.n	8004c96 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00e      	beq.n	8004c40 <HAL_UART_IRQHandler+0x55c>
 8004c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f853 	bl	8004ce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c3e:	e02d      	b.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01c      	beq.n	8004c9a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	4798      	blx	r3
    }
    return;
 8004c68:	e017      	b.n	8004c9a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
 8004c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fd8d 	bl	80057a2 <UART_EndTransmit_IT>
    return;
 8004c88:	e008      	b.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c8a:	bf00      	nop
 8004c8c:	e006      	b.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004c9a:	bf00      	nop
  }

}
 8004c9c:	37e8      	adds	r7, #232	; 0xe8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4ba7      	ldr	r3, [pc, #668]	; (8004fc0 <UART_SetConfig+0x2c8>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a95      	ldr	r2, [pc, #596]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d120      	bne.n	8004db6 <UART_SetConfig+0xbe>
 8004d74:	4b94      	ldr	r3, [pc, #592]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d816      	bhi.n	8004db0 <UART_SetConfig+0xb8>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x90>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004da5 	.word	0x08004da5
 8004d90:	08004d9f 	.word	0x08004d9f
 8004d94:	08004dab 	.word	0x08004dab
 8004d98:	2301      	movs	r3, #1
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e14f      	b.n	800503e <UART_SetConfig+0x346>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e14c      	b.n	800503e <UART_SetConfig+0x346>
 8004da4:	2304      	movs	r3, #4
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e149      	b.n	800503e <UART_SetConfig+0x346>
 8004daa:	2308      	movs	r3, #8
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e146      	b.n	800503e <UART_SetConfig+0x346>
 8004db0:	2310      	movs	r3, #16
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e143      	b.n	800503e <UART_SetConfig+0x346>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a84      	ldr	r2, [pc, #528]	; (8004fcc <UART_SetConfig+0x2d4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d132      	bne.n	8004e26 <UART_SetConfig+0x12e>
 8004dc0:	4b81      	ldr	r3, [pc, #516]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d828      	bhi.n	8004e20 <UART_SetConfig+0x128>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0xdc>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e21 	.word	0x08004e21
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e15 	.word	0x08004e15
 8004de8:	08004e21 	.word	0x08004e21
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004e0f 	.word	0x08004e0f
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e1b 	.word	0x08004e1b
 8004e08:	2300      	movs	r3, #0
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e117      	b.n	800503e <UART_SetConfig+0x346>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e114      	b.n	800503e <UART_SetConfig+0x346>
 8004e14:	2304      	movs	r3, #4
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e111      	b.n	800503e <UART_SetConfig+0x346>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e10e      	b.n	800503e <UART_SetConfig+0x346>
 8004e20:	2310      	movs	r3, #16
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e10b      	b.n	800503e <UART_SetConfig+0x346>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a69      	ldr	r2, [pc, #420]	; (8004fd0 <UART_SetConfig+0x2d8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d120      	bne.n	8004e72 <UART_SetConfig+0x17a>
 8004e30:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e3a:	2b30      	cmp	r3, #48	; 0x30
 8004e3c:	d013      	beq.n	8004e66 <UART_SetConfig+0x16e>
 8004e3e:	2b30      	cmp	r3, #48	; 0x30
 8004e40:	d814      	bhi.n	8004e6c <UART_SetConfig+0x174>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d009      	beq.n	8004e5a <UART_SetConfig+0x162>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d810      	bhi.n	8004e6c <UART_SetConfig+0x174>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <UART_SetConfig+0x15c>
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d006      	beq.n	8004e60 <UART_SetConfig+0x168>
 8004e52:	e00b      	b.n	8004e6c <UART_SetConfig+0x174>
 8004e54:	2300      	movs	r3, #0
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e0f1      	b.n	800503e <UART_SetConfig+0x346>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e0ee      	b.n	800503e <UART_SetConfig+0x346>
 8004e60:	2304      	movs	r3, #4
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e0eb      	b.n	800503e <UART_SetConfig+0x346>
 8004e66:	2308      	movs	r3, #8
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e0e8      	b.n	800503e <UART_SetConfig+0x346>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e0e5      	b.n	800503e <UART_SetConfig+0x346>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a57      	ldr	r2, [pc, #348]	; (8004fd4 <UART_SetConfig+0x2dc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d120      	bne.n	8004ebe <UART_SetConfig+0x1c6>
 8004e7c:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e86:	2bc0      	cmp	r3, #192	; 0xc0
 8004e88:	d013      	beq.n	8004eb2 <UART_SetConfig+0x1ba>
 8004e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e8c:	d814      	bhi.n	8004eb8 <UART_SetConfig+0x1c0>
 8004e8e:	2b80      	cmp	r3, #128	; 0x80
 8004e90:	d009      	beq.n	8004ea6 <UART_SetConfig+0x1ae>
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d810      	bhi.n	8004eb8 <UART_SetConfig+0x1c0>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <UART_SetConfig+0x1a8>
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d006      	beq.n	8004eac <UART_SetConfig+0x1b4>
 8004e9e:	e00b      	b.n	8004eb8 <UART_SetConfig+0x1c0>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e0cb      	b.n	800503e <UART_SetConfig+0x346>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e0c8      	b.n	800503e <UART_SetConfig+0x346>
 8004eac:	2304      	movs	r3, #4
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e0c5      	b.n	800503e <UART_SetConfig+0x346>
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e0c2      	b.n	800503e <UART_SetConfig+0x346>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e0bf      	b.n	800503e <UART_SetConfig+0x346>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a45      	ldr	r2, [pc, #276]	; (8004fd8 <UART_SetConfig+0x2e0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d125      	bne.n	8004f14 <UART_SetConfig+0x21c>
 8004ec8:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed6:	d017      	beq.n	8004f08 <UART_SetConfig+0x210>
 8004ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004edc:	d817      	bhi.n	8004f0e <UART_SetConfig+0x216>
 8004ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee2:	d00b      	beq.n	8004efc <UART_SetConfig+0x204>
 8004ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee8:	d811      	bhi.n	8004f0e <UART_SetConfig+0x216>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <UART_SetConfig+0x1fe>
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d006      	beq.n	8004f02 <UART_SetConfig+0x20a>
 8004ef4:	e00b      	b.n	8004f0e <UART_SetConfig+0x216>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e0a0      	b.n	800503e <UART_SetConfig+0x346>
 8004efc:	2302      	movs	r3, #2
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e09d      	b.n	800503e <UART_SetConfig+0x346>
 8004f02:	2304      	movs	r3, #4
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e09a      	b.n	800503e <UART_SetConfig+0x346>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e097      	b.n	800503e <UART_SetConfig+0x346>
 8004f0e:	2310      	movs	r3, #16
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e094      	b.n	800503e <UART_SetConfig+0x346>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a30      	ldr	r2, [pc, #192]	; (8004fdc <UART_SetConfig+0x2e4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d125      	bne.n	8004f6a <UART_SetConfig+0x272>
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f2c:	d017      	beq.n	8004f5e <UART_SetConfig+0x266>
 8004f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f32:	d817      	bhi.n	8004f64 <UART_SetConfig+0x26c>
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f38:	d00b      	beq.n	8004f52 <UART_SetConfig+0x25a>
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d811      	bhi.n	8004f64 <UART_SetConfig+0x26c>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <UART_SetConfig+0x254>
 8004f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f48:	d006      	beq.n	8004f58 <UART_SetConfig+0x260>
 8004f4a:	e00b      	b.n	8004f64 <UART_SetConfig+0x26c>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e075      	b.n	800503e <UART_SetConfig+0x346>
 8004f52:	2302      	movs	r3, #2
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e072      	b.n	800503e <UART_SetConfig+0x346>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e06f      	b.n	800503e <UART_SetConfig+0x346>
 8004f5e:	2308      	movs	r3, #8
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e06c      	b.n	800503e <UART_SetConfig+0x346>
 8004f64:	2310      	movs	r3, #16
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e069      	b.n	800503e <UART_SetConfig+0x346>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <UART_SetConfig+0x2e8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d137      	bne.n	8004fe4 <UART_SetConfig+0x2ec>
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f82:	d017      	beq.n	8004fb4 <UART_SetConfig+0x2bc>
 8004f84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f88:	d817      	bhi.n	8004fba <UART_SetConfig+0x2c2>
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d00b      	beq.n	8004fa8 <UART_SetConfig+0x2b0>
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f94:	d811      	bhi.n	8004fba <UART_SetConfig+0x2c2>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <UART_SetConfig+0x2aa>
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	d006      	beq.n	8004fae <UART_SetConfig+0x2b6>
 8004fa0:	e00b      	b.n	8004fba <UART_SetConfig+0x2c2>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e04a      	b.n	800503e <UART_SetConfig+0x346>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e047      	b.n	800503e <UART_SetConfig+0x346>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e044      	b.n	800503e <UART_SetConfig+0x346>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e041      	b.n	800503e <UART_SetConfig+0x346>
 8004fba:	2310      	movs	r3, #16
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e03e      	b.n	800503e <UART_SetConfig+0x346>
 8004fc0:	efff69f3 	.word	0xefff69f3
 8004fc4:	40011000 	.word	0x40011000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40004400 	.word	0x40004400
 8004fd0:	40004800 	.word	0x40004800
 8004fd4:	40004c00 	.word	0x40004c00
 8004fd8:	40005000 	.word	0x40005000
 8004fdc:	40011400 	.word	0x40011400
 8004fe0:	40007800 	.word	0x40007800
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a71      	ldr	r2, [pc, #452]	; (80051b0 <UART_SetConfig+0x4b8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d125      	bne.n	800503a <UART_SetConfig+0x342>
 8004fee:	4b71      	ldr	r3, [pc, #452]	; (80051b4 <UART_SetConfig+0x4bc>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ff8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ffc:	d017      	beq.n	800502e <UART_SetConfig+0x336>
 8004ffe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005002:	d817      	bhi.n	8005034 <UART_SetConfig+0x33c>
 8005004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005008:	d00b      	beq.n	8005022 <UART_SetConfig+0x32a>
 800500a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500e:	d811      	bhi.n	8005034 <UART_SetConfig+0x33c>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <UART_SetConfig+0x324>
 8005014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005018:	d006      	beq.n	8005028 <UART_SetConfig+0x330>
 800501a:	e00b      	b.n	8005034 <UART_SetConfig+0x33c>
 800501c:	2300      	movs	r3, #0
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e00d      	b.n	800503e <UART_SetConfig+0x346>
 8005022:	2302      	movs	r3, #2
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e00a      	b.n	800503e <UART_SetConfig+0x346>
 8005028:	2304      	movs	r3, #4
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e007      	b.n	800503e <UART_SetConfig+0x346>
 800502e:	2308      	movs	r3, #8
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e004      	b.n	800503e <UART_SetConfig+0x346>
 8005034:	2310      	movs	r3, #16
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e001      	b.n	800503e <UART_SetConfig+0x346>
 800503a:	2310      	movs	r3, #16
 800503c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005046:	d15a      	bne.n	80050fe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005048:	7ffb      	ldrb	r3, [r7, #31]
 800504a:	2b08      	cmp	r3, #8
 800504c:	d827      	bhi.n	800509e <UART_SetConfig+0x3a6>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x35c>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	0800509f 	.word	0x0800509f
 8005064:	0800508f 	.word	0x0800508f
 8005068:	0800509f 	.word	0x0800509f
 800506c:	0800509f 	.word	0x0800509f
 8005070:	0800509f 	.word	0x0800509f
 8005074:	08005097 	.word	0x08005097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fd fac4 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 800507c:	61b8      	str	r0, [r7, #24]
        break;
 800507e:	e013      	b.n	80050a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7fd fad4 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8005084:	61b8      	str	r0, [r7, #24]
        break;
 8005086:	e00f      	b.n	80050a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005088:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <UART_SetConfig+0x4c0>)
 800508a:	61bb      	str	r3, [r7, #24]
        break;
 800508c:	e00c      	b.n	80050a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508e:	f7fd f9cb 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 8005092:	61b8      	str	r0, [r7, #24]
        break;
 8005094:	e008      	b.n	80050a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509a:	61bb      	str	r3, [r7, #24]
        break;
 800509c:	e004      	b.n	80050a8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77bb      	strb	r3, [r7, #30]
        break;
 80050a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d074      	beq.n	8005198 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	005a      	lsls	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d916      	bls.n	80050f8 <UART_SetConfig+0x400>
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d212      	bcs.n	80050f8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f023 030f 	bic.w	r3, r3, #15
 80050da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	89fa      	ldrh	r2, [r7, #14]
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	e04f      	b.n	8005198 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	77bb      	strb	r3, [r7, #30]
 80050fc:	e04c      	b.n	8005198 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050fe:	7ffb      	ldrb	r3, [r7, #31]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d828      	bhi.n	8005156 <UART_SetConfig+0x45e>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0x414>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	08005157 	.word	0x08005157
 800511c:	08005147 	.word	0x08005147
 8005120:	08005157 	.word	0x08005157
 8005124:	08005157 	.word	0x08005157
 8005128:	08005157 	.word	0x08005157
 800512c:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fd fa68 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8005134:	61b8      	str	r0, [r7, #24]
        break;
 8005136:	e013      	b.n	8005160 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7fd fa78 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 800513c:	61b8      	str	r0, [r7, #24]
        break;
 800513e:	e00f      	b.n	8005160 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <UART_SetConfig+0x4c0>)
 8005142:	61bb      	str	r3, [r7, #24]
        break;
 8005144:	e00c      	b.n	8005160 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7fd f96f 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 800514a:	61b8      	str	r0, [r7, #24]
        break;
 800514c:	e008      	b.n	8005160 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005152:	61bb      	str	r3, [r7, #24]
        break;
 8005154:	e004      	b.n	8005160 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	77bb      	strb	r3, [r7, #30]
        break;
 800515e:	bf00      	nop
    }

    if (pclk != 0U)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085a      	lsrs	r2, r3, #1
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	441a      	add	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d909      	bls.n	8005194 <UART_SetConfig+0x49c>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d205      	bcs.n	8005194 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	b29a      	uxth	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e001      	b.n	8005198 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40007c00 	.word	0x40007c00
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400

080051bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01a      	beq.n	80052d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ba:	d10a      	bne.n	80052d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005310:	f7fb ffae 	bl	8001270 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b08      	cmp	r3, #8
 8005322:	d10e      	bne.n	8005342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f82d 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e023      	b.n	800538a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b04      	cmp	r3, #4
 800534e:	d10e      	bne.n	800536e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f817 	bl	8005392 <UART_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e00d      	b.n	800538a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b09c      	sub	sp, #112	; 0x70
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a2:	e0a5      	b.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	f000 80a1 	beq.w	80054f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fb ff5f 	bl	8001270 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80053be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d13e      	bne.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053d8:	667b      	str	r3, [r7, #100]	; 0x64
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	663b      	str	r3, [r7, #96]	; 0x60
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005416:	64ba      	str	r2, [r7, #72]	; 0x48
 8005418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800541c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e067      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d04f      	beq.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545e:	d147      	bne.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005468:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800547e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
 800548a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800548e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e6      	bne.n	800546a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	613b      	str	r3, [r7, #16]
   return(result);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054bc:	623a      	str	r2, [r7, #32]
 80054be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	69f9      	ldr	r1, [r7, #28]
 80054c2:	6a3a      	ldr	r2, [r7, #32]
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e5      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e010      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4013      	ands	r3, r2
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	429a      	cmp	r2, r3
 800550c:	f43f af4a 	beq.w	80053a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3770      	adds	r7, #112	; 0x70
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800551c:	b480      	push	{r7}
 800551e:	b097      	sub	sp, #92	; 0x5c
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554e:	d10e      	bne.n	800556e <UART_Start_Receive_IT+0x52>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <UART_Start_Receive_IT+0x48>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800555e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005562:	e02d      	b.n	80055c0 <UART_Start_Receive_IT+0xa4>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	22ff      	movs	r2, #255	; 0xff
 8005568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800556c:	e028      	b.n	80055c0 <UART_Start_Receive_IT+0xa4>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <UART_Start_Receive_IT+0x76>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <UART_Start_Receive_IT+0x6c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005586:	e01b      	b.n	80055c0 <UART_Start_Receive_IT+0xa4>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	227f      	movs	r2, #127	; 0x7f
 800558c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005590:	e016      	b.n	80055c0 <UART_Start_Receive_IT+0xa4>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800559a:	d10d      	bne.n	80055b8 <UART_Start_Receive_IT+0x9c>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <UART_Start_Receive_IT+0x92>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	227f      	movs	r2, #127	; 0x7f
 80055a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ac:	e008      	b.n	80055c0 <UART_Start_Receive_IT+0xa4>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	223f      	movs	r2, #63	; 0x3f
 80055b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055b6:	e003      	b.n	80055c0 <UART_Start_Receive_IT+0xa4>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2222      	movs	r2, #34	; 0x22
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	657b      	str	r3, [r7, #84]	; 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d107      	bne.n	800561c <UART_Start_Receive_IT+0x100>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <UART_Start_Receive_IT+0x18c>)
 8005618:	665a      	str	r2, [r3, #100]	; 0x64
 800561a:	e002      	b.n	8005622 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a23      	ldr	r2, [pc, #140]	; (80056ac <UART_Start_Receive_IT+0x190>)
 8005620:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d019      	beq.n	8005666 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e6      	bne.n	8005632 <UART_Start_Receive_IT+0x116>
 8005664:	e018      	b.n	8005698 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	613b      	str	r3, [r7, #16]
   return(result);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f043 0320 	orr.w	r3, r3, #32
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69f9      	ldr	r1, [r7, #28]
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	61bb      	str	r3, [r7, #24]
   return(result);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	375c      	adds	r7, #92	; 0x5c
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	08005953 	.word	0x08005953
 80056ac:	080057f7 	.word	0x080057f7

080056b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b095      	sub	sp, #84	; 0x54
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d6:	643b      	str	r3, [r7, #64]	; 0x40
 80056d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e6      	bne.n	80056b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	64bb      	str	r3, [r7, #72]	; 0x48
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3308      	adds	r3, #8
 8005708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e5      	bne.n	80056ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005722:	2b01      	cmp	r3, #1
 8005724:	d118      	bne.n	8005758 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	60bb      	str	r3, [r7, #8]
   return(result);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	647b      	str	r3, [r7, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6979      	ldr	r1, [r7, #20]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	613b      	str	r3, [r7, #16]
   return(result);
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	665a      	str	r2, [r3, #100]	; 0x64
}
 800576a:	bf00      	nop
 800576c:	3754      	adds	r7, #84	; 0x54
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff fa8f 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b088      	sub	sp, #32
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6979      	ldr	r1, [r7, #20]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	613b      	str	r3, [r7, #16]
   return(result);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e6      	bne.n	80057aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff fa5b 	bl	8004ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ee:	bf00      	nop
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b096      	sub	sp, #88	; 0x58
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005804:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580c:	2b22      	cmp	r3, #34	; 0x22
 800580e:	f040 8094 	bne.w	800593a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800581c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005820:	b2d9      	uxtb	r1, r3
 8005822:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	400a      	ands	r2, r1
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d177      	bne.n	800594a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800586e:	653b      	str	r3, [r7, #80]	; 0x50
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005878:	647b      	str	r3, [r7, #68]	; 0x44
 800587a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800587e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	623b      	str	r3, [r7, #32]
   return(result);
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058ac:	633a      	str	r2, [r7, #48]	; 0x30
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d12e      	bne.n	8005932 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0310 	bic.w	r3, r3, #16
 80058ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	617b      	str	r3, [r7, #20]
   return(result);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e6      	bne.n	80058da <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b10      	cmp	r3, #16
 8005918:	d103      	bne.n	8005922 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2210      	movs	r2, #16
 8005920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff f9ce 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005930:	e00b      	b.n	800594a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fa fff2 	bl	800091c <HAL_UART_RxCpltCallback>
}
 8005938:	e007      	b.n	800594a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0208 	orr.w	r2, r2, #8
 8005948:	619a      	str	r2, [r3, #24]
}
 800594a:	bf00      	nop
 800594c:	3758      	adds	r7, #88	; 0x58
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b096      	sub	sp, #88	; 0x58
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005960:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005968:	2b22      	cmp	r3, #34	; 0x22
 800596a:	f040 8094 	bne.w	8005a96 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800597e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005986:	4013      	ands	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	1c9a      	adds	r2, r3, #2
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d177      	bne.n	8005aa6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	643b      	str	r3, [r7, #64]	; 0x40
 80059d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3308      	adds	r3, #8
 8005a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d12e      	bne.n	8005a8e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6979      	ldr	r1, [r7, #20]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	613b      	str	r3, [r7, #16]
   return(result);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e6      	bne.n	8005a36 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d103      	bne.n	8005a7e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff f920 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a8c:	e00b      	b.n	8005aa6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fa ff44 	bl	800091c <HAL_UART_RxCpltCallback>
}
 8005a94:	e007      	b.n	8005aa6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0208 	orr.w	r2, r2, #8
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	3758      	adds	r7, #88	; 0x58
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	f107 001c 	add.w	r0, r7, #28
 8005abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d120      	bne.n	8005b0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <USB_CoreInit+0xac>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa92 	bl	8006028 <USB_CoreReset>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
 8005b08:	e010      	b.n	8005b2c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa86 	bl	8006028 <USB_CoreReset>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d10b      	bne.n	8005b4a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f043 0206 	orr.w	r2, r3, #6
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b56:	b004      	add	sp, #16
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	ffbdffbf 	.word	0xffbdffbf

08005b60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 0201 	bic.w	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d115      	bne.n	8005bd0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f7fb fb69 	bl	8001288 <HAL_Delay>
      ms++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa25 	bl	800600c <USB_GetMode>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d01e      	beq.n	8005c06 <USB_SetCurrentMode+0x84>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b31      	cmp	r3, #49	; 0x31
 8005bcc:	d9f0      	bls.n	8005bb0 <USB_SetCurrentMode+0x2e>
 8005bce:	e01a      	b.n	8005c06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d115      	bne.n	8005c02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005be2:	2001      	movs	r0, #1
 8005be4:	f7fb fb50 	bl	8001288 <HAL_Delay>
      ms++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa0c 	bl	800600c <USB_GetMode>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <USB_SetCurrentMode+0x84>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b31      	cmp	r3, #49	; 0x31
 8005bfe:	d9f0      	bls.n	8005be2 <USB_SetCurrentMode+0x60>
 8005c00:	e001      	b.n	8005c06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e005      	b.n	8005c12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b32      	cmp	r3, #50	; 0x32
 8005c0a:	d101      	bne.n	8005c10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	e009      	b.n	8005c50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3340      	adds	r3, #64	; 0x40
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b0e      	cmp	r3, #14
 8005c54:	d9f2      	bls.n	8005c3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11c      	bne.n	8005c96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6a:	f043 0302 	orr.w	r3, r3, #2
 8005c6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e005      	b.n	8005ca2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2300      	movs	r3, #0
 8005cac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	680b      	ldr	r3, [r1, #0]
 8005cc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10c      	bne.n	8005ce2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f961 	bl	8005f98 <USB_SetDevSpeed>
 8005cd6:	e008      	b.n	8005cea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cd8:	2101      	movs	r1, #1
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f95c 	bl	8005f98 <USB_SetDevSpeed>
 8005ce0:	e003      	b.n	8005cea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ce2:	2103      	movs	r1, #3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f957 	bl	8005f98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cea:	2110      	movs	r1, #16
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8f3 	bl	8005ed8 <USB_FlushTxFifo>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f91d 	bl	8005f3c <USB_FlushRxFifo>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	461a      	mov	r2, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	e043      	b.n	8005dbe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4c:	d118      	bne.n	8005d80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	461a      	mov	r2, r3
 8005d62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	e013      	b.n	8005d92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	461a      	mov	r2, r3
 8005d78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e008      	b.n	8005d92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005db6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d3b7      	bcc.n	8005d36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	e043      	b.n	8005e54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de2:	d118      	bne.n	8005e16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	461a      	mov	r2, r3
 8005df8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e013      	b.n	8005e28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e008      	b.n	8005e28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	461a      	mov	r2, r3
 8005e24:	2300      	movs	r3, #0
 8005e26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	3301      	adds	r3, #1
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d3b7      	bcc.n	8005dcc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f043 0210 	orr.w	r2, r3, #16
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <USB_DevInit+0x2b4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f043 0208 	orr.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <USB_DevInit+0x2b8>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ecc:	b004      	add	sp, #16
 8005ece:	4770      	bx	lr
 8005ed0:	803c3800 	.word	0x803c3800
 8005ed4:	40000004 	.word	0x40000004

08005ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <USB_FlushTxFifo+0x60>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e01a      	b.n	8005f2c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	daf3      	bge.n	8005ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	019b      	lsls	r3, r3, #6
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <USB_FlushTxFifo+0x60>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e006      	b.n	8005f2c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d0f1      	beq.n	8005f0e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	00030d40 	.word	0x00030d40

08005f3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <USB_FlushRxFifo+0x58>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d901      	bls.n	8005f58 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e017      	b.n	8005f88 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	daf3      	bge.n	8005f48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2210      	movs	r2, #16
 8005f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <USB_FlushRxFifo+0x58>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e006      	b.n	8005f88 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d0f1      	beq.n	8005f6a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	00030d40 	.word	0x00030d40

08005f98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fe4:	f023 0303 	bic.w	r3, r3, #3
 8005fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0301 	and.w	r3, r3, #1
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <USB_CoreReset+0x60>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e01a      	b.n	800607a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	daf3      	bge.n	8006034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f043 0201 	orr.w	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	4a09      	ldr	r2, [pc, #36]	; (8006088 <USB_CoreReset+0x60>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e006      	b.n	800607a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d0f1      	beq.n	800605c <USB_CoreReset+0x34>

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	00030d40 	.word	0x00030d40

0800608c <atoi>:
 800608c:	220a      	movs	r2, #10
 800608e:	2100      	movs	r1, #0
 8006090:	f000 b8b6 	b.w	8006200 <strtol>

08006094 <__errno>:
 8006094:	4b01      	ldr	r3, [pc, #4]	; (800609c <__errno+0x8>)
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	2000000c 	.word	0x2000000c

080060a0 <__libc_init_array>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4d0d      	ldr	r5, [pc, #52]	; (80060d8 <__libc_init_array+0x38>)
 80060a4:	4c0d      	ldr	r4, [pc, #52]	; (80060dc <__libc_init_array+0x3c>)
 80060a6:	1b64      	subs	r4, r4, r5
 80060a8:	10a4      	asrs	r4, r4, #2
 80060aa:	2600      	movs	r6, #0
 80060ac:	42a6      	cmp	r6, r4
 80060ae:	d109      	bne.n	80060c4 <__libc_init_array+0x24>
 80060b0:	4d0b      	ldr	r5, [pc, #44]	; (80060e0 <__libc_init_array+0x40>)
 80060b2:	4c0c      	ldr	r4, [pc, #48]	; (80060e4 <__libc_init_array+0x44>)
 80060b4:	f000 f8ae 	bl	8006214 <_init>
 80060b8:	1b64      	subs	r4, r4, r5
 80060ba:	10a4      	asrs	r4, r4, #2
 80060bc:	2600      	movs	r6, #0
 80060be:	42a6      	cmp	r6, r4
 80060c0:	d105      	bne.n	80060ce <__libc_init_array+0x2e>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c8:	4798      	blx	r3
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7ee      	b.n	80060ac <__libc_init_array+0xc>
 80060ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d2:	4798      	blx	r3
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7f2      	b.n	80060be <__libc_init_array+0x1e>
 80060d8:	08006380 	.word	0x08006380
 80060dc:	08006380 	.word	0x08006380
 80060e0:	08006380 	.word	0x08006380
 80060e4:	08006384 	.word	0x08006384

080060e8 <memset>:
 80060e8:	4402      	add	r2, r0
 80060ea:	4603      	mov	r3, r0
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d100      	bne.n	80060f2 <memset+0xa>
 80060f0:	4770      	bx	lr
 80060f2:	f803 1b01 	strb.w	r1, [r3], #1
 80060f6:	e7f9      	b.n	80060ec <memset+0x4>

080060f8 <_strtol_l.isra.0>:
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060fe:	d001      	beq.n	8006104 <_strtol_l.isra.0+0xc>
 8006100:	2b24      	cmp	r3, #36	; 0x24
 8006102:	d906      	bls.n	8006112 <_strtol_l.isra.0+0x1a>
 8006104:	f7ff ffc6 	bl	8006094 <__errno>
 8006108:	2316      	movs	r3, #22
 800610a:	6003      	str	r3, [r0, #0]
 800610c:	2000      	movs	r0, #0
 800610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006112:	4f3a      	ldr	r7, [pc, #232]	; (80061fc <_strtol_l.isra.0+0x104>)
 8006114:	468e      	mov	lr, r1
 8006116:	4676      	mov	r6, lr
 8006118:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800611c:	5de5      	ldrb	r5, [r4, r7]
 800611e:	f015 0508 	ands.w	r5, r5, #8
 8006122:	d1f8      	bne.n	8006116 <_strtol_l.isra.0+0x1e>
 8006124:	2c2d      	cmp	r4, #45	; 0x2d
 8006126:	d134      	bne.n	8006192 <_strtol_l.isra.0+0x9a>
 8006128:	f89e 4000 	ldrb.w	r4, [lr]
 800612c:	f04f 0801 	mov.w	r8, #1
 8006130:	f106 0e02 	add.w	lr, r6, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d05c      	beq.n	80061f2 <_strtol_l.isra.0+0xfa>
 8006138:	2b10      	cmp	r3, #16
 800613a:	d10c      	bne.n	8006156 <_strtol_l.isra.0+0x5e>
 800613c:	2c30      	cmp	r4, #48	; 0x30
 800613e:	d10a      	bne.n	8006156 <_strtol_l.isra.0+0x5e>
 8006140:	f89e 4000 	ldrb.w	r4, [lr]
 8006144:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006148:	2c58      	cmp	r4, #88	; 0x58
 800614a:	d14d      	bne.n	80061e8 <_strtol_l.isra.0+0xf0>
 800614c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006150:	2310      	movs	r3, #16
 8006152:	f10e 0e02 	add.w	lr, lr, #2
 8006156:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800615a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800615e:	2600      	movs	r6, #0
 8006160:	fbbc f9f3 	udiv	r9, ip, r3
 8006164:	4635      	mov	r5, r6
 8006166:	fb03 ca19 	mls	sl, r3, r9, ip
 800616a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800616e:	2f09      	cmp	r7, #9
 8006170:	d818      	bhi.n	80061a4 <_strtol_l.isra.0+0xac>
 8006172:	463c      	mov	r4, r7
 8006174:	42a3      	cmp	r3, r4
 8006176:	dd24      	ble.n	80061c2 <_strtol_l.isra.0+0xca>
 8006178:	2e00      	cmp	r6, #0
 800617a:	db1f      	blt.n	80061bc <_strtol_l.isra.0+0xc4>
 800617c:	45a9      	cmp	r9, r5
 800617e:	d31d      	bcc.n	80061bc <_strtol_l.isra.0+0xc4>
 8006180:	d101      	bne.n	8006186 <_strtol_l.isra.0+0x8e>
 8006182:	45a2      	cmp	sl, r4
 8006184:	db1a      	blt.n	80061bc <_strtol_l.isra.0+0xc4>
 8006186:	fb05 4503 	mla	r5, r5, r3, r4
 800618a:	2601      	movs	r6, #1
 800618c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006190:	e7eb      	b.n	800616a <_strtol_l.isra.0+0x72>
 8006192:	2c2b      	cmp	r4, #43	; 0x2b
 8006194:	bf08      	it	eq
 8006196:	f89e 4000 	ldrbeq.w	r4, [lr]
 800619a:	46a8      	mov	r8, r5
 800619c:	bf08      	it	eq
 800619e:	f106 0e02 	addeq.w	lr, r6, #2
 80061a2:	e7c7      	b.n	8006134 <_strtol_l.isra.0+0x3c>
 80061a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80061a8:	2f19      	cmp	r7, #25
 80061aa:	d801      	bhi.n	80061b0 <_strtol_l.isra.0+0xb8>
 80061ac:	3c37      	subs	r4, #55	; 0x37
 80061ae:	e7e1      	b.n	8006174 <_strtol_l.isra.0+0x7c>
 80061b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80061b4:	2f19      	cmp	r7, #25
 80061b6:	d804      	bhi.n	80061c2 <_strtol_l.isra.0+0xca>
 80061b8:	3c57      	subs	r4, #87	; 0x57
 80061ba:	e7db      	b.n	8006174 <_strtol_l.isra.0+0x7c>
 80061bc:	f04f 36ff 	mov.w	r6, #4294967295
 80061c0:	e7e4      	b.n	800618c <_strtol_l.isra.0+0x94>
 80061c2:	2e00      	cmp	r6, #0
 80061c4:	da05      	bge.n	80061d2 <_strtol_l.isra.0+0xda>
 80061c6:	2322      	movs	r3, #34	; 0x22
 80061c8:	6003      	str	r3, [r0, #0]
 80061ca:	4665      	mov	r5, ip
 80061cc:	b942      	cbnz	r2, 80061e0 <_strtol_l.isra.0+0xe8>
 80061ce:	4628      	mov	r0, r5
 80061d0:	e79d      	b.n	800610e <_strtol_l.isra.0+0x16>
 80061d2:	f1b8 0f00 	cmp.w	r8, #0
 80061d6:	d000      	beq.n	80061da <_strtol_l.isra.0+0xe2>
 80061d8:	426d      	negs	r5, r5
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d0f7      	beq.n	80061ce <_strtol_l.isra.0+0xd6>
 80061de:	b10e      	cbz	r6, 80061e4 <_strtol_l.isra.0+0xec>
 80061e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	e7f2      	b.n	80061ce <_strtol_l.isra.0+0xd6>
 80061e8:	2430      	movs	r4, #48	; 0x30
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1b3      	bne.n	8006156 <_strtol_l.isra.0+0x5e>
 80061ee:	2308      	movs	r3, #8
 80061f0:	e7b1      	b.n	8006156 <_strtol_l.isra.0+0x5e>
 80061f2:	2c30      	cmp	r4, #48	; 0x30
 80061f4:	d0a4      	beq.n	8006140 <_strtol_l.isra.0+0x48>
 80061f6:	230a      	movs	r3, #10
 80061f8:	e7ad      	b.n	8006156 <_strtol_l.isra.0+0x5e>
 80061fa:	bf00      	nop
 80061fc:	08006275 	.word	0x08006275

08006200 <strtol>:
 8006200:	4613      	mov	r3, r2
 8006202:	460a      	mov	r2, r1
 8006204:	4601      	mov	r1, r0
 8006206:	4802      	ldr	r0, [pc, #8]	; (8006210 <strtol+0x10>)
 8006208:	6800      	ldr	r0, [r0, #0]
 800620a:	f7ff bf75 	b.w	80060f8 <_strtol_l.isra.0>
 800620e:	bf00      	nop
 8006210:	2000000c 	.word	0x2000000c

08006214 <_init>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	bf00      	nop
 8006218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621a:	bc08      	pop	{r3}
 800621c:	469e      	mov	lr, r3
 800621e:	4770      	bx	lr

08006220 <_fini>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr
