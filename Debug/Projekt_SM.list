
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800b7a0  0800b7a0  0001b7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc4  0800bcc4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcc4  0800bcc4  0001bcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bccc  0800bccc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd0  0800bcd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bcd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  200001e0  0800beb4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  0800beb4  000208f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca02  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b62  00000000  00000000  0003cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00040778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00041bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba5e  00000000  00000000  00042ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3af  00000000  00000000  0006e93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106e1e  00000000  00000000  00089ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  00190b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c0  00000000  00000000  00190bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b788 	.word	0x0800b788

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800b788 	.word	0x0800b788

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MX_ADC1_Init+0x9c>)
 80009e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC1_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <MX_ADC1_Init+0xa0>)
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a32:	f001 fa05 	bl	8001e40 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f000 fc9c 	bl	8001378 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a40:	2309      	movs	r3, #9
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC1_Init+0x98>)
 8000a52:	f001 fc43 	bl	80022dc <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a5c:	f000 fc8c 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000234 	.word	0x20000234
 8000a6c:	40012000 	.word	0x40012000
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_ADC_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12b      	bne.n	8000aee <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_ADC_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	2303      	movs	r3, #3
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <HAL_ADC_MspInit+0x8c>)
 8000ada:	f001 fffd 	bl	8002ad8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2012      	movs	r0, #18
 8000ae4:	f001 ff2f 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ae8:	2012      	movs	r0, #18
 8000aea:	f001 ff48 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40012000 	.word	0x40012000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b6e      	ldr	r3, [pc, #440]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a6d      	ldr	r2, [pc, #436]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b68      	ldr	r3, [pc, #416]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a67      	ldr	r2, [pc, #412]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b65      	ldr	r3, [pc, #404]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a61      	ldr	r2, [pc, #388]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b5f      	ldr	r3, [pc, #380]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b5c      	ldr	r3, [pc, #368]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a5b      	ldr	r2, [pc, #364]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a55      	ldr	r2, [pc, #340]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <MX_GPIO_Init+0x1d0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bc8:	4843      	ldr	r0, [pc, #268]	; (8000cd8 <MX_GPIO_Init+0x1d4>)
 8000bca:	f002 f931 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2140      	movs	r1, #64	; 0x40
 8000bd2:	4842      	ldr	r0, [pc, #264]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000bd4:	f002 f92c 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	483c      	ldr	r0, [pc, #240]	; (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000bf0:	f001 ff72 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf4:	2332      	movs	r3, #50	; 0x32
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4834      	ldr	r0, [pc, #208]	; (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000c10:	f001 ff62 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c14:	2386      	movs	r3, #134	; 0x86
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482d      	ldr	r0, [pc, #180]	; (8000ce4 <MX_GPIO_Init+0x1e0>)
 8000c30:	f001 ff52 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <MX_GPIO_Init+0x1d4>)
 8000c4e:	f001 ff43 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481a      	ldr	r0, [pc, #104]	; (8000cd8 <MX_GPIO_Init+0x1d4>)
 8000c70:	f001 ff32 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4814      	ldr	r0, [pc, #80]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000c8c:	f001 ff24 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000ca4:	f001 ff18 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ca8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_GPIO_Init+0x1d8>)
 8000cc6:	f001 ff07 	bl	8002ad8 <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40021800 	.word	0x40021800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <SpeedCalculation>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SpeedCalculation(int16_t count){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	speed = (float32_t)((count * TIMER_FREQENCY * MINUTE_IN_SECOND)/
 8000cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	ee07 3a90 	vmov	s15, r3
 8000d02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d06:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8000d28 <SpeedCalculation+0x40>
 8000d0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <SpeedCalculation+0x48>)
 8000d14:	edc3 7a00 	vstr	s15, [r3]
			(ENCODER_RESOLUTION*TIMER_CONF_BOTH_EDGE_T1T2));
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	f3af 8000 	nop.w
 8000d28:	cccccccd 	.word	0xcccccccd
 8000d2c:	408c0ccc 	.word	0x408c0ccc
 8000d30:	20000218 	.word	0x20000218

08000d34 <SetDutyPID>:

void SetDutyPID(arm_pid_instance_f32* pid, float32_t y_ref, float32_t y){
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d40:	edc7 0a01 	vstr	s1, [r7, #4]

	PID_Error = y_ref - y; //Error calc
 8000d44:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d50:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <SetDutyPID+0x14c>)
 8000d52:	edc3 7a00 	vstr	s15, [r3]
	PID_Output = arm_pid_f32(pid, PID_Error); // Output PID signal
 8000d56:	4b4a      	ldr	r3, [pc, #296]	; (8000e80 <SetDutyPID+0x14c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	61fa      	str	r2, [r7, #28]
 8000d5e:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	ed93 7a00 	vldr	s14, [r3]
 8000d66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <SetDutyPID+0x150>)
 8000dbc:	6013      	str	r3, [r2, #0]

	if(PID_Output > 0){
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <SetDutyPID+0x150>)
 8000dc0:	edd3 7a00 	vldr	s15, [r3]
 8000dc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	dd29      	ble.n	8000e22 <SetDutyPID+0xee>
		// SATURATION
		if (PID_Output > 1000){
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <SetDutyPID+0x150>)
 8000dd0:	edd3 7a00 	vldr	s15, [r3]
 8000dd4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000e88 <SetDutyPID+0x154>
 8000dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	dd02      	ble.n	8000de8 <SetDutyPID+0xb4>
			PID_Output = 1000;
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <SetDutyPID+0x150>)
 8000de4:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <SetDutyPID+0x158>)
 8000de6:	601a      	str	r2, [r3, #0]
		}

		duty_A = (uint16_t)(abs(PID_Output));
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <SetDutyPID+0x150>)
 8000dea:	edd3 7a00 	vldr	s15, [r3]
 8000dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df2:	ee17 3a90 	vmov	r3, s15
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bfb8      	it	lt
 8000dfa:	425b      	neglt	r3, r3
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <SetDutyPID+0x15c>)
 8000e00:	801a      	strh	r2, [r3, #0]
		duty_B = 0;
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <SetDutyPID+0x160>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <SetDutyPID+0x15c>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <SetDutyPID+0x164>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <SetDutyPID+0x160>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <SetDutyPID+0x164>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
	}


}
 8000e20:	e028      	b.n	8000e74 <SetDutyPID+0x140>
		if (PID_Output < -1000){
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <SetDutyPID+0x150>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000e9c <SetDutyPID+0x168>
 8000e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e34:	d502      	bpl.n	8000e3c <SetDutyPID+0x108>
			PID_Output = -1000;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <SetDutyPID+0x150>)
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <SetDutyPID+0x16c>)
 8000e3a:	601a      	str	r2, [r3, #0]
		duty_A = 0;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <SetDutyPID+0x15c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	801a      	strh	r2, [r3, #0]
		duty_B = (uint16_t)(abs(PID_Output));;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <SetDutyPID+0x150>)
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e4c:	ee17 3a90 	vmov	r3, s15
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bfb8      	it	lt
 8000e54:	425b      	neglt	r3, r3
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <SetDutyPID+0x160>)
 8000e5a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <SetDutyPID+0x15c>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <SetDutyPID+0x164>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <SetDutyPID+0x160>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <SetDutyPID+0x164>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e74:	bf00      	nop
 8000e76:	3724      	adds	r7, #36	; 0x24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000224 	.word	0x20000224
 8000e84:	20000220 	.word	0x20000220
 8000e88:	447a0000 	.word	0x447a0000
 8000e8c:	447a0000 	.word	0x447a0000
 8000e90:	200001fc 	.word	0x200001fc
 8000e94:	200001fe 	.word	0x200001fe
 8000e98:	20000328 	.word	0x20000328
 8000e9c:	c47a0000 	.word	0xc47a0000
 8000ea0:	c47a0000 	.word	0xc47a0000

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// PID CONTROLER INIT
	PID.Kp = PID_KP;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <main+0x90>)
 8000eaa:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <main+0x94>)
 8000eac:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_KI;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <main+0x90>)
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <main+0x98>)
 8000eb2:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_KD;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <main+0x90>)
 8000eb6:	4a22      	ldr	r2, [pc, #136]	; (8000f40 <main+0x9c>)
 8000eb8:	621a      	str	r2, [r3, #32]

	arm_pid_init_f32(&PID, 1);
 8000eba:	2101      	movs	r1, #1
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <main+0x90>)
 8000ebe:	f006 fb45 	bl	800754c <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 ff3c 	bl	8001d3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f84d 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f7ff fe1b 	bl	8000b04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ece:	f000 fe07 	bl	8001ae0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ed2:	f000 fe81 	bl	8001bd8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000ed6:	f000 fc11 	bl	80016fc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000eda:	f000 fbb5 	bl	8001648 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000ede:	f000 fc8f 	bl	8001800 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ee2:	f000 fcc5 	bl	8001870 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000ee6:	f7ff fd73 	bl	80009d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // PWM CONFIG // CounterPeriod = 1000
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	4815      	ldr	r0, [pc, #84]	; (8000f44 <main+0xa0>)
 8000eee:	f003 fb6b 	bl	80045c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <main+0xa0>)
 8000ef6:	f003 fb67 	bl	80045c8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_A); // PA6
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <main+0xa4>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <main+0xa0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_B); // PC7
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <main+0xa8>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <main+0xa0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38

  // UART CONFIG
  HAL_UART_Receive_IT(&huart3, user_val, 4);
 8000f12:	2204      	movs	r2, #4
 8000f14:	490e      	ldr	r1, [pc, #56]	; (8000f50 <main+0xac>)
 8000f16:	480f      	ldr	r0, [pc, #60]	; (8000f54 <main+0xb0>)
 8000f18:	f004 fdf5 	bl	8005b06 <HAL_UART_Receive_IT>

  // ENCODER CONFIG
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f1c:	213c      	movs	r1, #60	; 0x3c
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <main+0xb4>)
 8000f20:	f003 fcf2 	bl	8004908 <HAL_TIM_Encoder_Start>

  // MAIN TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim6);
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <main+0xb8>)
 8000f26:	f003 fa75 	bl	8004414 <HAL_TIM_Base_Start_IT>

  // DATA TRANSMIT TIMER CONFIG
  HAL_TIM_Base_Start_IT(&htim7);
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <main+0xbc>)
 8000f2c:	f003 fa72 	bl	8004414 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <main+0x8c>
 8000f32:	bf00      	nop
 8000f34:	2000027c 	.word	0x2000027c
 8000f38:	3f99999a 	.word	0x3f99999a
 8000f3c:	3dcccccd 	.word	0x3dcccccd
 8000f40:	3e4ccccd 	.word	0x3e4ccccd
 8000f44:	20000328 	.word	0x20000328
 8000f48:	200001fc 	.word	0x200001fc
 8000f4c:	200001fe 	.word	0x200001fe
 8000f50:	200002a4 	.word	0x200002a4
 8000f54:	20000458 	.word	0x20000458
 8000f58:	200003c0 	.word	0x200003c0
 8000f5c:	20000374 	.word	0x20000374
 8000f60:	2000040c 	.word	0x2000040c

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0b8      	sub	sp, #224	; 0xe0
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f6e:	2234      	movs	r2, #52	; 0x34
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fb36 	bl	80075e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2290      	movs	r2, #144	; 0x90
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f006 fb27 	bl	80075e4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f96:	f002 f8ad 	bl	80030f4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <SystemClock_Config+0x128>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a3b      	ldr	r2, [pc, #236]	; (800108c <SystemClock_Config+0x128>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <SystemClock_Config+0x128>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <SystemClock_Config+0x12c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fba:	4a35      	ldr	r2, [pc, #212]	; (8001090 <SystemClock_Config+0x12c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <SystemClock_Config+0x12c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fd4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f8d1 	bl	80031b4 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001018:	f000 f9ae 	bl	8001378 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800101c:	f002 f87a 	bl	8003114 <HAL_PWREx_EnableOverDrive>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001026:	f000 f9a7 	bl	8001378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800104a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800104e:	2103      	movs	r1, #3
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fb5d 	bl	8003710 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800105c:	f000 f98c 	bl	8001378 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <SystemClock_Config+0x130>)
 8001062:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001064:	2300      	movs	r3, #0
 8001066:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fd4e 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800107e:	f000 f97b 	bl	8001378 <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	37e0      	adds	r7, #224	; 0xe0
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000
 8001094:	00200100 	.word	0x00200100

08001098 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// UART CONFIG
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a36      	ldr	r2, [pc, #216]	; (800117c <HAL_UART_RxCpltCallback+0xe4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d160      	bne.n	800116a <HAL_UART_RxCpltCallback+0xd2>
		// USER SPEED READ
		if(state == 0){
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HAL_UART_RxCpltCallback+0xe8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d155      	bne.n	800115e <HAL_UART_RxCpltCallback+0xc6>
		user_speed = (float32_t)(atof(user_val));
 80010b2:	4834      	ldr	r0, [pc, #208]	; (8001184 <HAL_UART_RxCpltCallback+0xec>)
 80010b4:	f006 fa68 	bl	8007588 <atof>
 80010b8:	eeb0 7b40 	vmov.f64	d7, d0
 80010bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_UART_RxCpltCallback+0xf0>)
 80010c2:	edc3 7a00 	vstr	s15, [r3]

		if(user_speed >= min_speed && user_speed <= max_speed){
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <HAL_UART_RxCpltCallback+0xf0>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	db37      	blt.n	800114a <HAL_UART_RxCpltCallback+0xb2>
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_UART_RxCpltCallback+0xf0>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800118c <HAL_UART_RxCpltCallback+0xf4>
 80010e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	d82d      	bhi.n	800114a <HAL_UART_RxCpltCallback+0xb2>
			flag = 1;
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_UART_RxCpltCallback+0xf8>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
			if(user_val[3] == 'R' && flag == 1){
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_UART_RxCpltCallback+0xec>)
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	2b52      	cmp	r3, #82	; 0x52
 80010fa:	d109      	bne.n	8001110 <HAL_UART_RxCpltCallback+0x78>
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_UART_RxCpltCallback+0xf8>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d104      	bne.n	8001110 <HAL_UART_RxCpltCallback+0x78>
				reference_speed = user_speed;
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_UART_RxCpltCallback+0xf0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <HAL_UART_RxCpltCallback+0xfc>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01b      	b.n	8001148 <HAL_UART_RxCpltCallback+0xb0>
			}
			else if(user_val[3] == 'L' && flag == 1){
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_UART_RxCpltCallback+0xec>)
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	2b4c      	cmp	r3, #76	; 0x4c
 8001116:	d10d      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x9c>
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_UART_RxCpltCallback+0xf8>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x9c>
				reference_speed = -(user_speed);
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_UART_RxCpltCallback+0xf0>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	eef1 7a67 	vneg.f32	s15, s15
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_UART_RxCpltCallback+0xfc>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
 8001132:	e009      	b.n	8001148 <HAL_UART_RxCpltCallback+0xb0>
			}
			else{
				flag = 0;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_UART_RxCpltCallback+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, error_1, strlen(error_1), 100);
 800113a:	2364      	movs	r3, #100	; 0x64
 800113c:	220c      	movs	r2, #12
 800113e:	4916      	ldr	r1, [pc, #88]	; (8001198 <HAL_UART_RxCpltCallback+0x100>)
 8001140:	480e      	ldr	r0, [pc, #56]	; (800117c <HAL_UART_RxCpltCallback+0xe4>)
 8001142:	f004 fc4d 	bl	80059e0 <HAL_UART_Transmit>
			if(user_val[3] == 'R' && flag == 1){
 8001146:	e010      	b.n	800116a <HAL_UART_RxCpltCallback+0xd2>
 8001148:	e00f      	b.n	800116a <HAL_UART_RxCpltCallback+0xd2>
			}
		}
		else{
			flag = 0;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_UART_RxCpltCallback+0xf8>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, error_2, strlen(error_2), 100);
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	220e      	movs	r2, #14
 8001154:	4911      	ldr	r1, [pc, #68]	; (800119c <HAL_UART_RxCpltCallback+0x104>)
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <HAL_UART_RxCpltCallback+0xe4>)
 8001158:	f004 fc42 	bl	80059e0 <HAL_UART_Transmit>
 800115c:	e005      	b.n	800116a <HAL_UART_RxCpltCallback+0xd2>
		}
		}
		else{
			HAL_UART_Transmit(&huart3, error_3, strlen(error_3), 100);
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	220c      	movs	r2, #12
 8001162:	490f      	ldr	r1, [pc, #60]	; (80011a0 <HAL_UART_RxCpltCallback+0x108>)
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_RxCpltCallback+0xe4>)
 8001166:	f004 fc3b 	bl	80059e0 <HAL_UART_Transmit>
		}
	}

	HAL_UART_Receive_IT(&huart3, user_val, 4);
 800116a:	2204      	movs	r2, #4
 800116c:	4905      	ldr	r1, [pc, #20]	; (8001184 <HAL_UART_RxCpltCallback+0xec>)
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <HAL_UART_RxCpltCallback+0xe4>)
 8001170:	f004 fcc9 	bl	8005b06 <HAL_UART_Receive_IT>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000458 	.word	0x20000458
 8001180:	20000205 	.word	0x20000205
 8001184:	200002a4 	.word	0x200002a4
 8001188:	20000200 	.word	0x20000200
 800118c:	43870000 	.word	0x43870000
 8001190:	20000204 	.word	0x20000204
 8001194:	2000021c 	.word	0x2000021c
 8001198:	0800b7cc 	.word	0x0800b7cc
 800119c:	0800b7dc 	.word	0x0800b7dc
 80011a0:	0800b7ec 	.word	0x0800b7ec

080011a4 <HAL_ADC_ConvCpltCallback>:

// ADC CONFIG
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <HAL_ADC_ConvCpltCallback+0xbc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d150      	bne.n	8001256 <HAL_ADC_ConvCpltCallback+0xb2>
		ADC_measurement = HAL_ADC_GetValue(&hadc1);
 80011b4:	482a      	ldr	r0, [pc, #168]	; (8001260 <HAL_ADC_ConvCpltCallback+0xbc>)
 80011b6:	f001 f86f 	bl	8002298 <HAL_ADC_GetValue>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a29      	ldr	r2, [pc, #164]	; (8001264 <HAL_ADC_ConvCpltCallback+0xc0>)
 80011be:	6013      	str	r3, [r2, #0]
		ADC_voltage = ((float32_t)ADC_measurement / (float32_t)ADC_REG_MAX) * ADC_VOLTAGE_MAX;
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <HAL_ADC_ConvCpltCallback+0xc0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011cc:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001268 <HAL_ADC_ConvCpltCallback+0xc4>
 80011d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800126c <HAL_ADC_ConvCpltCallback+0xc8>
 80011dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_ADC_ConvCpltCallback+0xcc>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]

		if(state == 1){
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_ADC_ConvCpltCallback+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d132      	bne.n	8001256 <HAL_ADC_ConvCpltCallback+0xb2>
			reference_speed = (uint16_t)((ADC_voltage * max_speed)/ADC_VOLTAGE_MAX);
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HAL_ADC_ConvCpltCallback+0xcc>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001278 <HAL_ADC_ConvCpltCallback+0xd4>
 80011fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011fe:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800126c <HAL_ADC_ConvCpltCallback+0xc8>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800120a:	ee17 3a90 	vmov	r3, s15
 800120e:	b29b      	uxth	r3, r3
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_ADC_ConvCpltCallback+0xd8>)
 800121a:	edc3 7a00 	vstr	s15, [r3]

			if(reference_speed < min_speed){
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d503      	bpl.n	800123a <HAL_ADC_ConvCpltCallback+0x96>
				reference_speed = min_speed;
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001236:	601a      	str	r2, [r3, #0]
				reference_speed = max_speed;
			}
		}

	}
}
 8001238:	e00d      	b.n	8001256 <HAL_ADC_ConvCpltCallback+0xb2>
			else if(reference_speed > max_speed){
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_ADC_ConvCpltCallback+0xd8>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001278 <HAL_ADC_ConvCpltCallback+0xd4>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dc00      	bgt.n	8001250 <HAL_ADC_ConvCpltCallback+0xac>
}
 800124e:	e002      	b.n	8001256 <HAL_ADC_ConvCpltCallback+0xb2>
				reference_speed = max_speed;
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000234 	.word	0x20000234
 8001264:	20000208 	.word	0x20000208
 8001268:	00000fff 	.word	0x00000fff
 800126c:	40533333 	.word	0x40533333
 8001270:	2000020c 	.word	0x2000020c
 8001274:	20000205 	.word	0x20000205
 8001278:	43870000 	.word	0x43870000
 800127c:	2000021c 	.word	0x2000021c
 8001280:	41f00000 	.word	0x41f00000
 8001284:	43870000 	.word	0x43870000

08001288 <HAL_TIM_PeriodElapsedCallback>:

// TIMER CONFIG
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af04      	add	r7, sp, #16
 800128e:	6078      	str	r0, [r7, #4]
	// MAIN TIMER CONFIG
	if(htim -> Instance == TIM6)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2a      	ldr	r2, [pc, #168]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d123      	bne.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		HAL_ADC_Start_IT(&hadc1);
 800129a:	482a      	ldr	r0, [pc, #168]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800129c:	f000 fe14 	bl	8001ec8 <HAL_ADC_Start_IT>

		// SPEED CALCULATION
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	4a29      	ldr	r2, [pc, #164]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012a8:	6013      	str	r3, [r2, #0]
		count = (int16_t)counter;
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012b2:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
		SpeedCalculation(count);
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fd10 	bl	8000ce8 <SpeedCalculation>

		// SPEED REGULATION
		SetDutyPID(&PID, reference_speed, speed);
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	eef0 0a47 	vmov.f32	s1, s14
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	481f      	ldr	r0, [pc, #124]	; (800135c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80012de:	f7ff fd29 	bl	8000d34 <SetDutyPID>
	}

	// DATA TRANSMIT TIMER CONFIG
	if(htim -> Instance == TIM7)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d124      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0xae>
	{
		length = sprintf(data_msg, " POM: %3.3f  , REF: %3.3f  , STER: %3.3f \r\n", (float)speed,  (float)reference_speed, (float)PID_Output);
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001302:	edd3 6a00 	vldr	s13, [r3]
 8001306:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800130a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800130e:	ed8d 7b00 	vstr	d7, [sp]
 8001312:	ec53 2b15 	vmov	r2, r3, d5
 8001316:	4914      	ldr	r1, [pc, #80]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800131a:	f006 fdaf 	bl	8007e7c <siprintf>
 800131e:	4603      	mov	r3, r0
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001322:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29a      	uxth	r2, r3
 800132a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132e:	490f      	ldr	r1, [pc, #60]	; (800136c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001332:	f004 fb55 	bl	80059e0 <HAL_UART_Transmit>
	}
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40001000 	.word	0x40001000
 8001344:	20000234 	.word	0x20000234
 8001348:	200003c0 	.word	0x200003c0
 800134c:	20000210 	.word	0x20000210
 8001350:	20000214 	.word	0x20000214
 8001354:	2000021c 	.word	0x2000021c
 8001358:	20000218 	.word	0x20000218
 800135c:	2000027c 	.word	0x2000027c
 8001360:	40001400 	.word	0x40001400
 8001364:	20000220 	.word	0x20000220
 8001368:	0800b7a0 	.word	0x0800b7a0
 800136c:	200002a8 	.word	0x200002a8
 8001370:	200002a0 	.word	0x200002a0
 8001374:	20000458 	.word	0x20000458

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	e7fe      	b.n	8001380 <Error_Handler+0x8>
	...

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x44>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x44>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x44>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x44>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x44>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x44>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 fcce 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <ADC_IRQHandler+0x10>)
 8001426:	f000 fe27 	bl	8002078 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000234 	.word	0x20000234

08001434 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800143a:	f003 faf3 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200003c0 	.word	0x200003c0

08001448 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM3_IRQHandler+0x10>)
 800144e:	f003 fae9 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000328 	.word	0x20000328

0800145c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <USART3_IRQHandler+0x10>)
 8001462:	f004 fb9f 	bl	8005ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000458 	.word	0x20000458

08001470 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <TIM6_DAC_IRQHandler+0x10>)
 8001476:	f003 fad5 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000374 	.word	0x20000374

08001484 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM7_IRQHandler+0x10>)
 800148a:	f003 facb 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000040c 	.word	0x2000040c

08001498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
	return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_kill>:

int _kill(int pid, int sig)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014b2:	f006 f86d 	bl	8007590 <__errno>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2216      	movs	r2, #22
 80014ba:	601a      	str	r2, [r3, #0]
	return -1;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_exit>:

void _exit (int status)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffe7 	bl	80014a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014da:	e7fe      	b.n	80014da <_exit+0x12>

080014dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e00a      	b.n	8001504 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ee:	f3af 8000 	nop.w
 80014f2:	4601      	mov	r1, r0
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	b2ca      	uxtb	r2, r1
 80014fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf0      	blt.n	80014ee <_read+0x12>
	}

return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e009      	b.n	800153c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf1      	blt.n	8001528 <_write+0x12>
	}
	return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_close>:

int _close(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001576:	605a      	str	r2, [r3, #4]
	return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_isatty>:

int _isatty(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	return 1;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
	return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f005 ffd2 	bl	8007590 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20080000 	.word	0x20080000
 8001618:	00000400 	.word	0x00000400
 800161c:	20000228 	.word	0x20000228
 8001620:	200008f8 	.word	0x200008f8

08001624 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 ffc4 	bl	80075e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <MX_TIM1_Init+0xac>)
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <MX_TIM1_Init+0xb0>)
 800166a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_TIM1_Init+0xac>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <MX_TIM1_Init+0xac>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_TIM1_Init+0xac>)
 800167a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM1_Init+0xac>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_TIM1_Init+0xac>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_TIM1_Init+0xac>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001692:	2303      	movs	r3, #3
 8001694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169a:	2301      	movs	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80016a2:	230f      	movs	r3, #15
 80016a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016aa:	2301      	movs	r3, #1
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80016b2:	230f      	movs	r3, #15
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_TIM1_Init+0xac>)
 80016be:	f003 f87d 	bl	80047bc <HAL_TIM_Encoder_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80016c8:	f7ff fe56 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_TIM1_Init+0xac>)
 80016de:	f004 f885 	bl	80057ec <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80016e8:	f7ff fe46 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200003c0 	.word	0x200003c0
 80016f8:	40010000 	.word	0x40010000

080016fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	615a      	str	r2, [r3, #20]
 800172c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001730:	4a32      	ldr	r2, [pc, #200]	; (80017fc <MX_TIM3_Init+0x100>)
 8001732:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001736:	2203      	movs	r2, #3
 8001738:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <MX_TIM3_Init+0xfc>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001742:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001746:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <MX_TIM3_Init+0xfc>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001754:	4828      	ldr	r0, [pc, #160]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001756:	f002 fe05 	bl	8004364 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001760:	f7ff fe0a 	bl	8001378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176e:	4619      	mov	r1, r3
 8001770:	4821      	ldr	r0, [pc, #132]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001772:	f003 fb8b 	bl	8004e8c <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800177c:	f7ff fdfc 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001780:	481d      	ldr	r0, [pc, #116]	; (80017f8 <MX_TIM3_Init+0xfc>)
 8001782:	f002 febf 	bl	8004504 <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800178c:	f7ff fdf4 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4816      	ldr	r0, [pc, #88]	; (80017f8 <MX_TIM3_Init+0xfc>)
 80017a0:	f004 f824 	bl	80057ec <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017aa:	f7ff fde5 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <MX_TIM3_Init+0xfc>)
 80017c6:	f003 fa4d 	bl	8004c64 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017d0:	f7ff fdd2 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	2204      	movs	r2, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MX_TIM3_Init+0xfc>)
 80017dc:	f003 fa42 	bl	8004c64 <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80017e6:	f7ff fdc7 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017ea:	4803      	ldr	r0, [pc, #12]	; (80017f8 <MX_TIM3_Init+0xfc>)
 80017ec:	f000 f922 	bl	8001a34 <HAL_TIM_MspPostInit>

}
 80017f0:	bf00      	nop
 80017f2:	3738      	adds	r7, #56	; 0x38
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000328 	.word	0x20000328
 80017fc:	40000400 	.word	0x40000400

08001800 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_TIM6_Init+0x68>)
 8001812:	4a16      	ldr	r2, [pc, #88]	; (800186c <MX_TIM6_Init+0x6c>)
 8001814:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_TIM6_Init+0x68>)
 8001818:	f240 32bf 	movw	r2, #959	; 0x3bf
 800181c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_TIM6_Init+0x68>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_TIM6_Init+0x68>)
 8001826:	f242 720f 	movw	r2, #9999	; 0x270f
 800182a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_TIM6_Init+0x68>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001832:	480d      	ldr	r0, [pc, #52]	; (8001868 <MX_TIM6_Init+0x68>)
 8001834:	f002 fd96 	bl	8004364 <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800183e:	f7ff fd9b 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	; (8001868 <MX_TIM6_Init+0x68>)
 8001850:	f003 ffcc 	bl	80057ec <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800185a:	f7ff fd8d 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000374 	.word	0x20000374
 800186c:	40001000 	.word	0x40001000

08001870 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_TIM7_Init+0x68>)
 8001882:	4a16      	ldr	r2, [pc, #88]	; (80018dc <MX_TIM7_Init+0x6c>)
 8001884:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9599;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_TIM7_Init+0x68>)
 8001888:	f242 527f 	movw	r2, #9599	; 0x257f
 800188c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_TIM7_Init+0x68>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_TIM7_Init+0x68>)
 8001896:	f242 720f 	movw	r2, #9999	; 0x270f
 800189a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_TIM7_Init+0x68>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_TIM7_Init+0x68>)
 80018a4:	f002 fd5e 	bl	8004364 <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80018ae:	f7ff fd63 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <MX_TIM7_Init+0x68>)
 80018c0:	f003 ff94 	bl	80057ec <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80018ca:	f7ff fd55 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000040c 	.word	0x2000040c
 80018dc:	40001400 	.word	0x40001400

080018e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_TIM_Encoder_MspInit+0x8c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d130      	bne.n	8001964 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_TIM_Encoder_MspInit+0x90>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <HAL_TIM_Encoder_MspInit+0x90>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_TIM_Encoder_MspInit+0x90>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_TIM_Encoder_MspInit+0x90>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_TIM_Encoder_MspInit+0x90>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_TIM_Encoder_MspInit+0x90>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001932:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <HAL_TIM_Encoder_MspInit+0x94>)
 8001950:	f001 f8c2 	bl	8002ad8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2019      	movs	r0, #25
 800195a:	f000 fff4 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800195e:	2019      	movs	r0, #25
 8001960:	f001 f80d 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40010000 	.word	0x40010000
 8001970:	40023800 	.word	0x40023800
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <HAL_TIM_Base_MspInit+0xac>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d114      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	201d      	movs	r0, #29
 80019a8:	f000 ffcd 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019ac:	201d      	movs	r0, #29
 80019ae:	f000 ffe6 	bl	800297e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80019b2:	e032      	b.n	8001a1a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_TIM_Base_MspInit+0xb4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d114      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2036      	movs	r0, #54	; 0x36
 80019dc:	f000 ffb3 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019e0:	2036      	movs	r0, #54	; 0x36
 80019e2:	f000 ffcc 	bl	800297e <HAL_NVIC_EnableIRQ>
}
 80019e6:	e018      	b.n	8001a1a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_TIM_Base_MspInit+0xb8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d113      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 80019f8:	f043 0320 	orr.w	r3, r3, #32
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_TIM_Base_MspInit+0xb0>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2037      	movs	r0, #55	; 0x37
 8001a10:	f000 ff99 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a14:	2037      	movs	r0, #55	; 0x37
 8001a16:	f000 ffb2 	bl	800297e <HAL_NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40001000 	.word	0x40001000
 8001a30:	40001400 	.word	0x40001400

08001a34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_MspPostInit+0x9c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d137      	bne.n	8001ac6 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_TIM_MspPostInit+0xa0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_TIM_MspPostInit+0xa0>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_TIM_MspPostInit+0xa0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_TIM_MspPostInit+0xa0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_TIM_MspPostInit+0xa0>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_TIM_MspPostInit+0xa0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a86:	2340      	movs	r3, #64	; 0x40
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a96:	2302      	movs	r3, #2
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <HAL_TIM_MspPostInit+0xa4>)
 8001aa2:	f001 f819 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <HAL_TIM_MspPostInit+0xa8>)
 8001ac2:	f001 f809 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020800 	.word	0x40020800

08001ae0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <MX_USART3_UART_Init+0x5c>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001aec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_USART3_UART_Init+0x58>)
 8001b24:	f003 ff0e 	bl	8005944 <HAL_UART_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b2e:	f7ff fc23 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000458 	.word	0x20000458
 8001b3c:	40004800 	.word	0x40004800

08001b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_UART_MspInit+0x8c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d130      	bne.n	8001bc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_UART_MspInit+0x90>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <HAL_UART_MspInit+0x90>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_UART_MspInit+0x90>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_UART_MspInit+0x90>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_UART_MspInit+0x90>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_UART_MspInit+0x90>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <HAL_UART_MspInit+0x94>)
 8001bb0:	f000 ff92 	bl	8002ad8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2027      	movs	r0, #39	; 0x27
 8001bba:	f000 fec4 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bbe:	2027      	movs	r0, #39	; 0x27
 8001bc0:	f000 fedd 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	; 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40004800 	.word	0x40004800
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020c00 	.word	0x40020c00

08001bd8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001be2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001be6:	2206      	movs	r2, #6
 8001be8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bec:	2202      	movs	r2, #2
 8001bee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1c:	f001 f921 	bl	8002e62 <HAL_PCD_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c26:	f7ff fba7 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200004dc 	.word	0x200004dc

08001c34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c54:	d141      	bne.n	8001cda <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c80:	230a      	movs	r3, #10
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4817      	ldr	r0, [pc, #92]	; (8001ce8 <HAL_PCD_MspInit+0xb4>)
 8001c8c:	f000 ff24 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <HAL_PCD_MspInit+0xb4>)
 8001ca6:	f000 ff17 	bl	8002ad8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6353      	str	r3, [r2, #52]	; 0x34
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_PCD_MspInit+0xb0>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d16:	f7ff fc85 	bl	8001624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f005 fc3f 	bl	800759c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff f8c1 	bl	8000ea4 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d30:	0800bcd4 	.word	0x0800bcd4
  ldr r2, =_sbss
 8001d34:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d38:	200008f4 	.word	0x200008f4

08001d3c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <CAN1_RX0_IRQHandler>

08001d3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d42:	2003      	movs	r0, #3
 8001d44:	f000 fdf4 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 f805 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4e:	f7ff fb19 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fe0f 	bl	800299a <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 fdd7 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	200008e0 	.word	0x200008e0

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	200008e0 	.word	0x200008e0

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000008 	.word	0x20000008

08001e40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e031      	b.n	8001eba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fe08 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_ADC_Init+0x84>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	f043 0202 	orr.w	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fb7a 	bl	8002588 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eaa:	e001      	b.n	8001eb0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	ffffeefd 	.word	0xffffeefd

08001ec8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_Start_IT+0x1a>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e0b5      	b.n	800204e <HAL_ADC_Start_IT+0x186>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d018      	beq.n	8001f2a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001f08:	4b54      	ldr	r3, [pc, #336]	; (800205c <HAL_ADC_Start_IT+0x194>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_ADC_Start_IT+0x198>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0c9a      	lsrs	r2, r3, #18
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f1c:	e002      	b.n	8001f24 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f9      	bne.n	8001f1e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d17d      	bne.n	8002034 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3c:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_ADC_Start_IT+0x19c>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f72:	d106      	bne.n	8001f82 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f023 0206 	bic.w	r2, r3, #6
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f98:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <HAL_ADC_Start_IT+0x1a0>)
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_ADC_Start_IT+0x1a4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d143      	bne.n	800204c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e03a      	b.n	800204c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_ADC_Start_IT+0x1a8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d10e      	bne.n	8001ffe <HAL_ADC_Start_IT+0x136>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d107      	bne.n	8001ffe <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_ADC_Start_IT+0x1a4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d120      	bne.n	800204c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_ADC_Start_IT+0x1ac>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d11b      	bne.n	800204c <HAL_ADC_Start_IT+0x184>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d114      	bne.n	800204c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	e00b      	b.n	800204c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000
 8002060:	431bde83 	.word	0x431bde83
 8002064:	fffff8fe 	.word	0xfffff8fe
 8002068:	04000020 	.word	0x04000020
 800206c:	40012300 	.word	0x40012300
 8002070:	40012000 	.word	0x40012000
 8002074:	40012200 	.word	0x40012200

08002078 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d049      	beq.n	8002142 <HAL_ADC_IRQHandler+0xca>
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d046      	beq.n	8002142 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d12b      	bne.n	8002132 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d127      	bne.n	8002132 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d119      	bne.n	8002132 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0220 	bic.w	r2, r2, #32
 800210c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d105      	bne.n	8002132 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff f836 	bl	80011a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0212 	mvn.w	r2, #18
 8002140:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d057      	beq.n	8002208 <HAL_ADC_IRQHandler+0x190>
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d054      	beq.n	8002208 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d139      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800219c:	2b00      	cmp	r3, #0
 800219e:	d12b      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d124      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11d      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d119      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fabf 	bl	800277c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f06f 020c 	mvn.w	r2, #12
 8002206:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d017      	beq.n	800224e <HAL_ADC_IRQHandler+0x1d6>
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d014      	beq.n	800224e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10d      	bne.n	800224e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f837 	bl	80022b2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0201 	mvn.w	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800225c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d015      	beq.n	8002290 <HAL_ADC_IRQHandler+0x218>
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f06f 0220 	mvn.w	r2, #32
 800227e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f820 	bl	80022c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f06f 0220 	mvn.w	r2, #32
 800228e:	601a      	str	r2, [r3, #0]
  }
}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e136      	b.n	8002566 <HAL_ADC_ConfigChannel+0x28a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d93a      	bls.n	800237e <HAL_ADC_ConfigChannel+0xa2>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002310:	d035      	beq.n	800237e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68d9      	ldr	r1, [r3, #12]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	3b1e      	subs	r3, #30
 8002328:	2207      	movs	r2, #7
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a8d      	ldr	r2, [pc, #564]	; (8002574 <HAL_ADC_ConfigChannel+0x298>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68d9      	ldr	r1, [r3, #12]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	061a      	lsls	r2, r3, #24
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002356:	e035      	b.n	80023c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	4603      	mov	r3, r0
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4403      	add	r3, r0
 8002370:	3b1e      	subs	r3, #30
 8002372:	409a      	lsls	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800237c:	e022      	b.n	80023c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	2207      	movs	r2, #7
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43da      	mvns	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	400a      	ands	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6919      	ldr	r1, [r3, #16]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4403      	add	r3, r0
 80023ba:	409a      	lsls	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d824      	bhi.n	8002416 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b05      	subs	r3, #5
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b05      	subs	r3, #5
 8002408:	fa00 f203 	lsl.w	r2, r0, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	635a      	str	r2, [r3, #52]	; 0x34
 8002414:	e04c      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d824      	bhi.n	8002468 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b23      	subs	r3, #35	; 0x23
 8002430:	221f      	movs	r2, #31
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	400a      	ands	r2, r1
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	3b23      	subs	r3, #35	; 0x23
 800245a:	fa00 f203 	lsl.w	r2, r0, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
 8002466:	e023      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	3b41      	subs	r3, #65	; 0x41
 800247a:	221f      	movs	r2, #31
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43da      	mvns	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	400a      	ands	r2, r1
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b41      	subs	r3, #65	; 0x41
 80024a4:	fa00 f203 	lsl.w	r2, r0, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a30      	ldr	r2, [pc, #192]	; (8002578 <HAL_ADC_ConfigChannel+0x29c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10a      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x1f4>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024c2:	d105      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a2c      	ldr	r2, [pc, #176]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 80024ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a28      	ldr	r2, [pc, #160]	; (8002578 <HAL_ADC_ConfigChannel+0x29c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10f      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d10b      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 80024e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 80024f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_ADC_ConfigChannel+0x29c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d12b      	bne.n	800255c <HAL_ADC_ConfigChannel+0x280>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <HAL_ADC_ConfigChannel+0x298>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d003      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x23a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b11      	cmp	r3, #17
 8002514:	d122      	bne.n	800255c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 800251c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002520:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <HAL_ADC_ConfigChannel+0x2a0>)
 8002528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800252c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_ADC_ConfigChannel+0x298>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_ADC_ConfigChannel+0x2a4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_ADC_ConfigChannel+0x2a8>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9a      	lsrs	r2, r3, #18
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800254e:	e002      	b.n	8002556 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3b01      	subs	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f9      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	10000012 	.word	0x10000012
 8002578:	40012000 	.word	0x40012000
 800257c:	40012300 	.word	0x40012300
 8002580:	20000000 	.word	0x20000000
 8002584:	431bde83 	.word	0x431bde83

08002588 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002590:	4b78      	ldr	r3, [pc, #480]	; (8002774 <ADC_Init+0x1ec>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a77      	ldr	r2, [pc, #476]	; (8002774 <ADC_Init+0x1ec>)
 8002596:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800259a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800259c:	4b75      	ldr	r3, [pc, #468]	; (8002774 <ADC_Init+0x1ec>)
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4973      	ldr	r1, [pc, #460]	; (8002774 <ADC_Init+0x1ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	4a58      	ldr	r2, [pc, #352]	; (8002778 <ADC_Init+0x1f0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800262a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e00f      	b.n	8002682 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002680:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0202 	bic.w	r2, r2, #2
 8002690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	005a      	lsls	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	035a      	lsls	r2, r3, #13
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e007      	b.n	80026f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	3b01      	subs	r3, #1
 8002714:	051a      	lsls	r2, r3, #20
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800273a:	025a      	lsls	r2, r3, #9
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	029a      	lsls	r2, r3, #10
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40012300 	.word	0x40012300
 8002778:	0f000001 	.word	0x0f000001

0800277c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <__NVIC_SetPriorityGrouping+0x40>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x40>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00
 80027d4:	05fa0000 	.word	0x05fa0000

080027d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff3e 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff31 	bl	80027f4 <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff fa0e 	bl	8001de0 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d008      	beq.n	80029e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e052      	b.n	8002a8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0216 	bic.w	r2, r2, #22
 80029f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <HAL_DMA_Abort+0x62>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0208 	bic.w	r2, r2, #8
 8002a22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a34:	e013      	b.n	8002a5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a36:	f7ff f9d3 	bl	8001de0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d90c      	bls.n	8002a5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e015      	b.n	8002a8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e4      	bne.n	8002a36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	223f      	movs	r2, #63	; 0x3f
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e00c      	b.n	8002aca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e175      	b.n	8002de4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8164 	bne.w	8002dde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x56>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80be 	beq.w	8002dde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_GPIO_Init+0x324>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c7a:	4a61      	ldr	r2, [pc, #388]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_GPIO_Init+0x32c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d037      	beq.n	8002d16 <HAL_GPIO_Init+0x23e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <HAL_GPIO_Init+0x330>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_GPIO_Init+0x23a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <HAL_GPIO_Init+0x334>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x236>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a55      	ldr	r2, [pc, #340]	; (8002e10 <HAL_GPIO_Init+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x232>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a54      	ldr	r2, [pc, #336]	; (8002e14 <HAL_GPIO_Init+0x33c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x22e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a53      	ldr	r2, [pc, #332]	; (8002e18 <HAL_GPIO_Init+0x340>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x22a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_GPIO_Init+0x344>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <HAL_GPIO_Init+0x348>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x222>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a50      	ldr	r2, [pc, #320]	; (8002e24 <HAL_GPIO_Init+0x34c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x21e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	; (8002e28 <HAL_GPIO_Init+0x350>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002cee:	2309      	movs	r3, #9
 8002cf0:	e012      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	e010      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00e      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	; (8002e00 <HAL_GPIO_Init+0x328>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a34      	ldr	r2, [pc, #208]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_GPIO_Init+0x354>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ae86 	bls.w	8002af8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40021400 	.word	0x40021400
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40021c00 	.word	0x40021c00
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40022400 	.word	0x40022400
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e64:	b08f      	sub	sp, #60	; 0x3c
 8002e66:	af0a      	add	r7, sp, #40	; 0x28
 8002e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e116      	b.n	80030a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe fed0 	bl	8001c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 f8b4 	bl	8007020 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	687e      	ldr	r6, [r7, #4]
 8002ec0:	466d      	mov	r5, sp
 8002ec2:	f106 0410 	add.w	r4, r6, #16
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed6:	1d33      	adds	r3, r6, #4
 8002ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eda:	6838      	ldr	r0, [r7, #0]
 8002edc:	f004 f848 	bl	8006f70 <USB_CoreInit>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0d7      	b.n	80030a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 f8a2 	bl	8007042 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e04a      	b.n	8002f9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	333d      	adds	r3, #61	; 0x3d
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	333c      	adds	r3, #60	; 0x3c
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	b298      	uxth	r0, r3
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3342      	adds	r3, #66	; 0x42
 8002f40:	4602      	mov	r2, r0
 8002f42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	333f      	adds	r3, #63	; 0x3f
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3344      	adds	r3, #68	; 0x44
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3348      	adds	r3, #72	; 0x48
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3350      	adds	r3, #80	; 0x50
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3301      	adds	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3af      	bcc.n	8002f04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e044      	b.n	8003034 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3301      	adds	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3b5      	bcc.n	8002faa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	687e      	ldr	r6, [r7, #4]
 8003046:	466d      	mov	r5, sp
 8003048:	f106 0410 	add.w	r4, r6, #16
 800304c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003054:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003058:	e885 0003 	stmia.w	r5, {r0, r1}
 800305c:	1d33      	adds	r3, r6, #4
 800305e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f004 f83b 	bl	80070dc <USB_DevInit>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e014      	b.n	80030a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f80b 	bl	80030ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f004 f9f5 	bl	800748a <USB_DevDisconnect>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	10000003 	.word	0x10000003

080030f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40007000 	.word	0x40007000

08003114 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_PWREx_EnableOverDrive+0x98>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003142:	f7fe fe4d 	bl	8001de0 <HAL_GetTick>
 8003146:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003148:	e009      	b.n	800315e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800314a:	f7fe fe49 	bl	8001de0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003158:	d901      	bls.n	800315e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e022      	b.n	80031a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316a:	d1ee      	bne.n	800314a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003176:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003178:	f7fe fe32 	bl	8001de0 <HAL_GetTick>
 800317c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800317e:	e009      	b.n	8003194 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003180:	f7fe fe2e 	bl	8001de0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318e:	d901      	bls.n	8003194 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e007      	b.n	80031a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a0:	d1ee      	bne.n	8003180 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40007000 	.word	0x40007000

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031bc:	2300      	movs	r3, #0
 80031be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e29b      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8087 	beq.w	80032e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d8:	4b96      	ldr	r3, [pc, #600]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d00c      	beq.n	80031fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e4:	4b93      	ldr	r3, [pc, #588]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d112      	bne.n	8003216 <HAL_RCC_OscConfig+0x62>
 80031f0:	4b90      	ldr	r3, [pc, #576]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d10b      	bne.n	8003216 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d06c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x130>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d168      	bne.n	80032e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e275      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x7a>
 8003220:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a83      	ldr	r2, [pc, #524]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e02e      	b.n	800328c <HAL_RCC_OscConfig+0xd8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x9c>
 8003236:	4b7f      	ldr	r3, [pc, #508]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7e      	ldr	r2, [pc, #504]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800323c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7b      	ldr	r2, [pc, #492]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e01d      	b.n	800328c <HAL_RCC_OscConfig+0xd8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0xc0>
 800325a:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a75      	ldr	r2, [pc, #468]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a72      	ldr	r2, [pc, #456]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0xd8>
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6b      	ldr	r2, [pc, #428]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe fda4 	bl	8001de0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fda0 	bl	8001de0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e229      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b61      	ldr	r3, [pc, #388]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fd90 	bl	8001de0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fd8c 	bl	8001de0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e215      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x110>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d069      	beq.n	80033c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f2:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fe:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b08      	cmp	r3, #8
 8003308:	d11c      	bne.n	8003344 <HAL_RCC_OscConfig+0x190>
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d116      	bne.n	8003344 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x17a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e1e9      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	493d      	ldr	r1, [pc, #244]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	e040      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d023      	beq.n	8003394 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334c:	4b39      	ldr	r3, [pc, #228]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a38      	ldr	r2, [pc, #224]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fd42 	bl	8001de0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7fe fd3e 	bl	8001de0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e1c7      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4929      	ldr	r1, [pc, #164]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
 8003392:	e018      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a26      	ldr	r2, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fd1e 	bl	8001de0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7fe fd1a 	bl	8001de0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1a3      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d038      	beq.n	8003444 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d019      	beq.n	800340e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80033dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fe fcfb 	bl	8001de0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ee:	f7fe fcf7 	bl	8001de0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e180      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x23a>
 800340c:	e01a      	b.n	8003444 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	4a08      	ldr	r2, [pc, #32]	; (8003434 <HAL_RCC_OscConfig+0x280>)
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fe fce1 	bl	8001de0 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003422:	f7fe fcdd 	bl	8001de0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d903      	bls.n	8003438 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e166      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
 8003434:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	4b92      	ldr	r3, [pc, #584]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 800343a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ee      	bne.n	8003422 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a4 	beq.w	800359a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b8c      	ldr	r3, [pc, #560]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b89      	ldr	r3, [pc, #548]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a88      	ldr	r2, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
 800346a:	4b86      	ldr	r3, [pc, #536]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347a:	4b83      	ldr	r3, [pc, #524]	; (8003688 <HAL_RCC_OscConfig+0x4d4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003486:	4b80      	ldr	r3, [pc, #512]	; (8003688 <HAL_RCC_OscConfig+0x4d4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7f      	ldr	r2, [pc, #508]	; (8003688 <HAL_RCC_OscConfig+0x4d4>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003492:	f7fe fca5 	bl	8001de0 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fe fca1 	bl	8001de0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	; 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e12a      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x4d4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x31a>
 80034c0:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a6f      	ldr	r2, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	e02d      	b.n	800352a <HAL_RCC_OscConfig+0x376>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x33c>
 80034d6:	4b6b      	ldr	r3, [pc, #428]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a67      	ldr	r2, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
 80034ee:	e01c      	b.n	800352a <HAL_RCC_OscConfig+0x376>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d10c      	bne.n	8003512 <HAL_RCC_OscConfig+0x35e>
 80034f8:	4b62      	ldr	r3, [pc, #392]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a61      	ldr	r2, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4a5e      	ldr	r2, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6713      	str	r3, [r2, #112]	; 0x70
 8003510:	e00b      	b.n	800352a <HAL_RCC_OscConfig+0x376>
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a5b      	ldr	r2, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d015      	beq.n	800355e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fe fc55 	bl	8001de0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe fc51 	bl	8001de0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0d8      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0ee      	beq.n	800353a <HAL_RCC_OscConfig+0x386>
 800355c:	e014      	b.n	8003588 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7fe fc3f 	bl	8001de0 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe fc3b 	bl	8001de0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0c2      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357c:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ee      	bne.n	8003566 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	4a3c      	ldr	r2, [pc, #240]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80ae 	beq.w	8003700 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a4:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d06d      	beq.n	800368c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d14b      	bne.n	8003650 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a31      	ldr	r2, [pc, #196]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fc0c 	bl	8001de0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fc08 	bl	8001de0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e091      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	071b      	lsls	r3, r3, #28
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe fbda 	bl	8001de0 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe fbd6 	bl	8001de0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e05f      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x47c>
 800364e:	e057      	b.n	8003700 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fbc0 	bl	8001de0 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fbbc 	bl	8001de0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e045      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_OscConfig+0x4d0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x4b0>
 8003682:	e03d      	b.n	8003700 <HAL_RCC_OscConfig+0x54c>
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800368c:	4b1f      	ldr	r3, [pc, #124]	; (800370c <HAL_RCC_OscConfig+0x558>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d030      	beq.n	80036fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d129      	bne.n	80036fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d122      	bne.n	80036fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d119      	bne.n	80036fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d10f      	bne.n	80036fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800

08003710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 020f 	bic.w	r2, r3, #15
 800373e:	4965      	ldr	r1, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e073      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4936      	ldr	r1, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fe faec 	bl	8001de0 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fe fae8 	bl	8001de0 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e053      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d210      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	4922      	ldr	r1, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1cc>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1d0>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1d4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fa48 	bl	8001d58 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	0800b7fc 	.word	0x0800b7fc
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	2300      	movs	r3, #0
 80038fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003900:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d00d      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x40>
 800390c:	2b08      	cmp	r3, #8
 800390e:	f200 80bd 	bhi.w	8003a8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x3a>
 800391a:	e0b7      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b61      	ldr	r3, [pc, #388]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800391e:	60bb      	str	r3, [r7, #8]
      break;
 8003920:	e0b7      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003922:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003924:	60bb      	str	r3, [r7, #8]
      break;
 8003926:	e0b4      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4b5d      	ldr	r3, [pc, #372]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003932:	4b5b      	ldr	r3, [pc, #364]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04d      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4b58      	ldr	r3, [pc, #352]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	461a      	mov	r2, r3
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	ea02 0800 	and.w	r8, r2, r0
 8003956:	ea03 0901 	and.w	r9, r3, r1
 800395a:	4640      	mov	r0, r8
 800395c:	4649      	mov	r1, r9
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	014b      	lsls	r3, r1, #5
 8003968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800396c:	0142      	lsls	r2, r0, #5
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	ebb0 0008 	subs.w	r0, r0, r8
 8003976:	eb61 0109 	sbc.w	r1, r1, r9
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	018b      	lsls	r3, r1, #6
 8003984:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003988:	0182      	lsls	r2, r0, #6
 800398a:	1a12      	subs	r2, r2, r0
 800398c:	eb63 0301 	sbc.w	r3, r3, r1
 8003990:	f04f 0000 	mov.w	r0, #0
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	00d9      	lsls	r1, r3, #3
 800399a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800399e:	00d0      	lsls	r0, r2, #3
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	eb12 0208 	adds.w	r2, r2, r8
 80039a8:	eb43 0309 	adc.w	r3, r3, r9
 80039ac:	f04f 0000 	mov.w	r0, #0
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	0259      	lsls	r1, r3, #9
 80039b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039ba:	0250      	lsls	r0, r2, #9
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	f7fc fe4c 	bl	8000668 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4613      	mov	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e04a      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	099b      	lsrs	r3, r3, #6
 80039e0:	461a      	mov	r2, r3
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	ea02 0400 	and.w	r4, r2, r0
 80039f2:	ea03 0501 	and.w	r5, r3, r1
 80039f6:	4620      	mov	r0, r4
 80039f8:	4629      	mov	r1, r5
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	014b      	lsls	r3, r1, #5
 8003a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a08:	0142      	lsls	r2, r0, #5
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	1b00      	subs	r0, r0, r4
 8003a10:	eb61 0105 	sbc.w	r1, r1, r5
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	018b      	lsls	r3, r1, #6
 8003a1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a22:	0182      	lsls	r2, r0, #6
 8003a24:	1a12      	subs	r2, r2, r0
 8003a26:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	00d9      	lsls	r1, r3, #3
 8003a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a38:	00d0      	lsls	r0, r2, #3
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	1912      	adds	r2, r2, r4
 8003a40:	eb45 0303 	adc.w	r3, r5, r3
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	0299      	lsls	r1, r3, #10
 8003a4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a52:	0290      	lsls	r0, r2, #10
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	f7fc fe00 	bl	8000668 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	60bb      	str	r3, [r7, #8]
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a8e:	60bb      	str	r3, [r7, #8]
      break;
 8003a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a92:	68bb      	ldr	r3, [r7, #8]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	007a1200 	.word	0x007a1200

08003aac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac8:	f7ff fff0 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0a9b      	lsrs	r3, r3, #10
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4903      	ldr	r1, [pc, #12]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	0800b80c 	.word	0x0800b80c

08003aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af0:	f7ff ffdc 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0b5b      	lsrs	r3, r3, #13
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	0800b80c 	.word	0x0800b80c

08003b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d012      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b3c:	4b69      	ldr	r3, [pc, #420]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a68      	ldr	r2, [pc, #416]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b46:	6093      	str	r3, [r2, #8]
 8003b48:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	4964      	ldr	r1, [pc, #400]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d017      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	4959      	ldr	r1, [pc, #356]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003baa:	4b4e      	ldr	r3, [pc, #312]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	494a      	ldr	r1, [pc, #296]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 808b 	beq.w	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bf8:	4b3a      	ldr	r3, [pc, #232]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c02:	6413      	str	r3, [r2, #64]	; 0x40
 8003c04:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c10:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a34      	ldr	r2, [pc, #208]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fe f8e0 	bl	8001de0 <HAL_GetTick>
 8003c20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fe f8dc 	bl	8001de0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e38f      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c42:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d035      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d02e      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c82:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d114      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe f8a4 	bl	8001de0 <HAL_GetTick>
 8003c98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fe f8a0 	bl	8001de0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e351      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ee      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cca:	d111      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cda:	400b      	ands	r3, r1
 8003cdc:	4901      	ldr	r1, [pc, #4]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	0ffffcff 	.word	0x0ffffcff
 8003cf0:	4bb3      	ldr	r3, [pc, #716]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4ab2      	ldr	r2, [pc, #712]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cfa:	6093      	str	r3, [r2, #8]
 8003cfc:	4bb0      	ldr	r3, [pc, #704]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	49ad      	ldr	r1, [pc, #692]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d010      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d1a:	4ba9      	ldr	r3, [pc, #676]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d20:	4aa7      	ldr	r2, [pc, #668]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d2a:	4ba5      	ldr	r3, [pc, #660]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	49a2      	ldr	r1, [pc, #648]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d48:	4b9d      	ldr	r3, [pc, #628]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d56:	499a      	ldr	r1, [pc, #616]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d6a:	4b95      	ldr	r3, [pc, #596]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d78:	4991      	ldr	r1, [pc, #580]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d8c:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	4989      	ldr	r1, [pc, #548]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dae:	4b84      	ldr	r3, [pc, #528]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	4980      	ldr	r1, [pc, #512]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd0:	4b7b      	ldr	r3, [pc, #492]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f023 0203 	bic.w	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	4978      	ldr	r1, [pc, #480]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df2:	4b73      	ldr	r3, [pc, #460]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f023 020c 	bic.w	r2, r3, #12
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e00:	496f      	ldr	r1, [pc, #444]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e14:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	4967      	ldr	r1, [pc, #412]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e36:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	495e      	ldr	r1, [pc, #376]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e58:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	4956      	ldr	r1, [pc, #344]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e7a:	4b51      	ldr	r3, [pc, #324]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	494d      	ldr	r1, [pc, #308]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e9c:	4b48      	ldr	r3, [pc, #288]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	4945      	ldr	r1, [pc, #276]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ebe:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	493c      	ldr	r1, [pc, #240]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eee:	4934      	ldr	r1, [pc, #208]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d011      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f02:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f10:	492b      	ldr	r1, [pc, #172]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f20:	d101      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f42:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f50:	491b      	ldr	r1, [pc, #108]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f74:	4912      	ldr	r1, [pc, #72]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	4909      	ldr	r1, [pc, #36]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00f      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	4986      	ldr	r1, [pc, #536]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe8:	497d      	ldr	r1, [pc, #500]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d006      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80d6 	beq.w	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004004:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800400a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800400e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fd fee6 	bl	8001de0 <HAL_GetTick>
 8004014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004018:	f7fd fee2 	bl	8001de0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e195      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800402a:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d021      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11d      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004058:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405e:	0e1b      	lsrs	r3, r3, #24
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	019a      	lsls	r2, r3, #6
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	071b      	lsls	r3, r3, #28
 800407e:	4958      	ldr	r1, [pc, #352]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d129      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040b2:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040c0:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c6:	0f1b      	lsrs	r3, r3, #28
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	019a      	lsls	r2, r3, #6
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	071b      	lsls	r3, r3, #28
 80040e6:	493e      	ldr	r1, [pc, #248]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040ee:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	f023 021f 	bic.w	r2, r3, #31
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	3b01      	subs	r3, #1
 80040fe:	4938      	ldr	r1, [pc, #224]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01d      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004118:	0e1b      	lsrs	r3, r3, #24
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004126:	0f1b      	lsrs	r3, r3, #28
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	019a      	lsls	r2, r3, #6
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	061b      	lsls	r3, r3, #24
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	4926      	ldr	r1, [pc, #152]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d011      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	071b      	lsls	r3, r3, #28
 8004176:	491a      	ldr	r1, [pc, #104]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418a:	f7fd fe29 	bl	8001de0 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004192:	f7fd fe25 	bl	8001de0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b64      	cmp	r3, #100	; 0x64
 800419e:	d901      	bls.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0d8      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	f040 80ce 	bne.w	8004354 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c4:	f7fd fe0c 	bl	8001de0 <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041ca:	e00b      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041cc:	f7fd fe08 	bl	8001de0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	; 0x64
 80041d8:	d904      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e0bb      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041e4:	4b5e      	ldr	r3, [pc, #376]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f0:	d0ec      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02e      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d12a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800421a:	4b51      	ldr	r3, [pc, #324]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004228:	4b4d      	ldr	r3, [pc, #308]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	0f1b      	lsrs	r3, r3, #28
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	019a      	lsls	r2, r3, #6
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	071b      	lsls	r3, r3, #28
 800424e:	4944      	ldr	r1, [pc, #272]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004256:	4b42      	ldr	r3, [pc, #264]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	493d      	ldr	r1, [pc, #244]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d022      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004284:	d11d      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	0e1b      	lsrs	r3, r3, #24
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004294:	4b32      	ldr	r3, [pc, #200]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	0f1b      	lsrs	r3, r3, #28
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	019a      	lsls	r2, r3, #6
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	041b      	lsls	r3, r3, #16
 80042ae:	431a      	orrs	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	071b      	lsls	r3, r3, #28
 80042ba:	4929      	ldr	r1, [pc, #164]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d028      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042dc:	4b20      	ldr	r3, [pc, #128]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	019a      	lsls	r2, r3, #6
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	431a      	orrs	r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	4917      	ldr	r1, [pc, #92]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4911      	ldr	r1, [pc, #68]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fd fd58 	bl	8001de0 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004334:	f7fd fd54 	bl	8001de0 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e007      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800434e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004352:	d1ef      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e049      	b.n	800440a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd faf4 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fe64 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e054      	b.n	80044d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d022      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d01d      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1b      	ldr	r2, [pc, #108]	; (80044fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d115      	bne.n	80044c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_TIM_Base_Start_IT+0xec>)
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d015      	beq.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d011      	beq.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e008      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010400 	.word	0x40010400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40001800 	.word	0x40001800
 8004500:	00010007 	.word	0x00010007

08004504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e049      	b.n	80045aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f841 	bl	80045b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f000 fd94 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_TIM_PWM_Start+0x24>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e03c      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d109      	bne.n	8004606 <HAL_TIM_PWM_Start+0x3e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e02f      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d109      	bne.n	8004620 <HAL_TIM_PWM_Start+0x58>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e022      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d109      	bne.n	800463a <HAL_TIM_PWM_Start+0x72>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e015      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b10      	cmp	r3, #16
 800463e:	d109      	bne.n	8004654 <HAL_TIM_PWM_Start+0x8c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e008      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e092      	b.n	8004794 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xb6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800467c:	e023      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start+0xc6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468c:	e01b      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0xd6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469c:	e013      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0xe6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046ac:	e00b      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0xf6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046bc:	e003      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f866 	bl	80057a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a30      	ldr	r2, [pc, #192]	; (800479c <HAL_TIM_PWM_Start+0x1d4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_PWM_Start+0x120>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <HAL_TIM_PWM_Start+0x1d8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_PWM_Start+0x124>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_TIM_PWM_Start+0x126>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a25      	ldr	r2, [pc, #148]	; (800479c <HAL_TIM_PWM_Start+0x1d4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_TIM_PWM_Start+0x18a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_PWM_Start+0x18a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a22      	ldr	r2, [pc, #136]	; (80047a4 <HAL_TIM_PWM_Start+0x1dc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_TIM_PWM_Start+0x18a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a20      	ldr	r2, [pc, #128]	; (80047a8 <HAL_TIM_PWM_Start+0x1e0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_PWM_Start+0x18a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <HAL_TIM_PWM_Start+0x1e4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_PWM_Start+0x18a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_TIM_PWM_Start+0x1d8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_PWM_Start+0x18a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIM_PWM_Start+0x1e8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_PWM_Start+0x18a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_TIM_PWM_Start+0x1ec>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <HAL_TIM_PWM_Start+0x1f0>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1c8>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800
 80047b8:	00010007 	.word	0x00010007

080047bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e08f      	b.n	80048f0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fd f87b 	bl	80018e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6899      	ldr	r1, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_TIM_Encoder_Init+0x13c>)
 80047fe:	400b      	ands	r3, r1
 8004800:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f000 fc2f 	bl	8005070 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4b31      	ldr	r3, [pc, #196]	; (80048fc <HAL_TIM_Encoder_Init+0x140>)
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	4313      	orrs	r3, r2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <HAL_TIM_Encoder_Init+0x144>)
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <HAL_TIM_Encoder_Init+0x148>)
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	4313      	orrs	r3, r2
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	011a      	lsls	r2, r3, #4
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	031b      	lsls	r3, r3, #12
 800487c:	4313      	orrs	r3, r2
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	4313      	orrs	r3, r2
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	fffebff8 	.word	0xfffebff8
 80048fc:	fffffcfc 	.word	0xfffffcfc
 8004900:	fffff3f3 	.word	0xfffff3f3
 8004904:	ffff0f0f 	.word	0xffff0f0f

08004908 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004918:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004920:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004928:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004930:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d110      	bne.n	800495a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d102      	bne.n	8004944 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800493e:	7b7b      	ldrb	r3, [r7, #13]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e069      	b.n	8004a1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004958:	e031      	b.n	80049be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d110      	bne.n	8004982 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004960:	7bbb      	ldrb	r3, [r7, #14]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004966:	7b3b      	ldrb	r3, [r7, #12]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d001      	beq.n	8004970 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e055      	b.n	8004a1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004980:	e01d      	b.n	80049be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004988:	7bbb      	ldrb	r3, [r7, #14]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d105      	bne.n	800499a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800498e:	7b7b      	ldrb	r3, [r7, #13]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004994:	7b3b      	ldrb	r3, [r7, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e03e      	b.n	8004a1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_TIM_Encoder_Start+0xc4>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d008      	beq.n	80049dc <HAL_TIM_Encoder_Start+0xd4>
 80049ca:	e00f      	b.n	80049ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fee3 	bl	80057a0 <TIM_CCxChannelCmd>
      break;
 80049da:	e016      	b.n	8004a0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	2104      	movs	r1, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fedb 	bl	80057a0 <TIM_CCxChannelCmd>
      break;
 80049ea:	e00e      	b.n	8004a0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fed3 	bl	80057a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2201      	movs	r2, #1
 8004a00:	2104      	movs	r1, #4
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fecc 	bl	80057a0 <TIM_CCxChannelCmd>
      break;
 8004a08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fae4 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fad6 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fae7 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0204 	mvn.w	r2, #4
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 faba 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 faac 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fabd 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0208 	mvn.w	r2, #8
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa90 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa82 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa93 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2208      	movs	r2, #8
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa66 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa58 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fa69 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0201 	mvn.w	r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fb70 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fea4 	bl	800591c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be2:	d10e      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d107      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fe97 	bl	8005930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d10e      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d107      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa17 	bl	800505c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d10e      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d107      	bne.n	8004c5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0220 	mvn.w	r2, #32
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fe57 	bl	8005908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0ff      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b14      	cmp	r3, #20
 8004c8e:	f200 80f0 	bhi.w	8004e72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004e73 	.word	0x08004e73
 8004ca0:	08004e73 	.word	0x08004e73
 8004ca4:	08004e73 	.word	0x08004e73
 8004ca8:	08004d2d 	.word	0x08004d2d
 8004cac:	08004e73 	.word	0x08004e73
 8004cb0:	08004e73 	.word	0x08004e73
 8004cb4:	08004e73 	.word	0x08004e73
 8004cb8:	08004d6f 	.word	0x08004d6f
 8004cbc:	08004e73 	.word	0x08004e73
 8004cc0:	08004e73 	.word	0x08004e73
 8004cc4:	08004e73 	.word	0x08004e73
 8004cc8:	08004daf 	.word	0x08004daf
 8004ccc:	08004e73 	.word	0x08004e73
 8004cd0:	08004e73 	.word	0x08004e73
 8004cd4:	08004e73 	.word	0x08004e73
 8004cd8:	08004df1 	.word	0x08004df1
 8004cdc:	08004e73 	.word	0x08004e73
 8004ce0:	08004e73 	.word	0x08004e73
 8004ce4:	08004e73 	.word	0x08004e73
 8004ce8:	08004e31 	.word	0x08004e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fa5c 	bl	80051b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	619a      	str	r2, [r3, #24]
      break;
 8004d2a:	e0a5      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 faae 	bl	8005294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]
      break;
 8004d6c:	e084      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fb05 	bl	8005384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0208 	orr.w	r2, r2, #8
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0204 	bic.w	r2, r2, #4
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
      break;
 8004dac:	e064      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fb5b 	bl	8005470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	021a      	lsls	r2, r3, #8
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	61da      	str	r2, [r3, #28]
      break;
 8004dee:	e043      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fb92 	bl	8005520 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e2e:	e023      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fbc4 	bl	80055c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e70:	e002      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
      break;
 8004e76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop

08004e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0b4      	b.n	8005012 <HAL_TIM_ConfigClockSource+0x186>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	4b56      	ldr	r3, [pc, #344]	; (800501c <HAL_TIM_ConfigClockSource+0x190>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee0:	d03e      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0xd4>
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee6:	f200 8087 	bhi.w	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	f000 8086 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x172>
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	d87f      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b70      	cmp	r3, #112	; 0x70
 8004efa:	d01a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0xa6>
 8004efc:	2b70      	cmp	r3, #112	; 0x70
 8004efe:	d87b      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b60      	cmp	r3, #96	; 0x60
 8004f02:	d050      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f04:	2b60      	cmp	r3, #96	; 0x60
 8004f06:	d877      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b50      	cmp	r3, #80	; 0x50
 8004f0a:	d03c      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0xfa>
 8004f0c:	2b50      	cmp	r3, #80	; 0x50
 8004f0e:	d873      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d058      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d86f      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b30      	cmp	r3, #48	; 0x30
 8004f1a:	d064      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d86b      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d060      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d867      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d05c      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d05a      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f30:	e062      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6899      	ldr	r1, [r3, #8]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f000 fc0d 	bl	8005760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	609a      	str	r2, [r3, #8]
      break;
 8004f5e:	e04f      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6899      	ldr	r1, [r3, #8]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f000 fbf6 	bl	8005760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f82:	609a      	str	r2, [r3, #8]
      break;
 8004f84:	e03c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 fb6a 	bl	800566c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2150      	movs	r1, #80	; 0x50
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fbc3 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e02c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 fb89 	bl	80056ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2160      	movs	r1, #96	; 0x60
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fbb3 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e01c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fb4a 	bl	800566c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2140      	movs	r1, #64	; 0x40
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fba3 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e00c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f000 fb9a 	bl	800572a <TIM_ITRx_SetConfig>
      break;
 8004ff6:	e003      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffc:	e000      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	fffeff88 	.word	0xfffeff88

08005020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a40      	ldr	r2, [pc, #256]	; (8005184 <TIM_Base_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3d      	ldr	r2, [pc, #244]	; (8005188 <TIM_Base_SetConfig+0x118>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <TIM_Base_SetConfig+0x11c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <TIM_Base_SetConfig+0x120>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <TIM_Base_SetConfig+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d108      	bne.n	80050c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <TIM_Base_SetConfig+0x114>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d02b      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d027      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2c      	ldr	r2, [pc, #176]	; (8005188 <TIM_Base_SetConfig+0x118>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d023      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2b      	ldr	r2, [pc, #172]	; (800518c <TIM_Base_SetConfig+0x11c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01f      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <TIM_Base_SetConfig+0x120>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01b      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a29      	ldr	r2, [pc, #164]	; (8005194 <TIM_Base_SetConfig+0x124>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d017      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a28      	ldr	r2, [pc, #160]	; (8005198 <TIM_Base_SetConfig+0x128>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a27      	ldr	r2, [pc, #156]	; (800519c <TIM_Base_SetConfig+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00f      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <TIM_Base_SetConfig+0x130>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00b      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <TIM_Base_SetConfig+0x134>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d007      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <TIM_Base_SetConfig+0x138>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a23      	ldr	r2, [pc, #140]	; (80051ac <TIM_Base_SetConfig+0x13c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d108      	bne.n	8005134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <TIM_Base_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <TIM_Base_SetConfig+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d103      	bne.n	8005170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	615a      	str	r2, [r3, #20]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40010400 	.word	0x40010400
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800
 80051a4:	40001800 	.word	0x40001800
 80051a8:	40001c00 	.word	0x40001c00
 80051ac:	40002000 	.word	0x40002000

080051b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f023 0201 	bic.w	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4b2b      	ldr	r3, [pc, #172]	; (8005288 <TIM_OC1_SetConfig+0xd8>)
 80051dc:	4013      	ands	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f023 0302 	bic.w	r3, r3, #2
 80051f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a21      	ldr	r2, [pc, #132]	; (800528c <TIM_OC1_SetConfig+0xdc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC1_SetConfig+0x64>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a20      	ldr	r2, [pc, #128]	; (8005290 <TIM_OC1_SetConfig+0xe0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10c      	bne.n	800522e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0308 	bic.w	r3, r3, #8
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 0304 	bic.w	r3, r3, #4
 800522c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <TIM_OC1_SetConfig+0xdc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_OC1_SetConfig+0x8e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a15      	ldr	r2, [pc, #84]	; (8005290 <TIM_OC1_SetConfig+0xe0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d111      	bne.n	8005262 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	fffeff8f 	.word	0xfffeff8f
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0210 	bic.w	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <TIM_OC2_SetConfig+0xe4>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a23      	ldr	r2, [pc, #140]	; (800537c <TIM_OC2_SetConfig+0xe8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC2_SetConfig+0x68>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a22      	ldr	r2, [pc, #136]	; (8005380 <TIM_OC2_SetConfig+0xec>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10d      	bne.n	8005318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <TIM_OC2_SetConfig+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC2_SetConfig+0x94>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a17      	ldr	r2, [pc, #92]	; (8005380 <TIM_OC2_SetConfig+0xec>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	feff8fff 	.word	0xfeff8fff
 800537c:	40010000 	.word	0x40010000
 8005380:	40010400 	.word	0x40010400

08005384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <TIM_OC3_SetConfig+0xe0>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a22      	ldr	r2, [pc, #136]	; (8005468 <TIM_OC3_SetConfig+0xe4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d003      	beq.n	80053ea <TIM_OC3_SetConfig+0x66>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a21      	ldr	r2, [pc, #132]	; (800546c <TIM_OC3_SetConfig+0xe8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10d      	bne.n	8005406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a17      	ldr	r2, [pc, #92]	; (8005468 <TIM_OC3_SetConfig+0xe4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC3_SetConfig+0x92>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a16      	ldr	r2, [pc, #88]	; (800546c <TIM_OC3_SetConfig+0xe8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d113      	bne.n	800543e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800541c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	fffeff8f 	.word	0xfffeff8f
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400

08005470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <TIM_OC4_SetConfig+0xa4>)
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a13      	ldr	r2, [pc, #76]	; (8005518 <TIM_OC4_SetConfig+0xa8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC4_SetConfig+0x68>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a12      	ldr	r2, [pc, #72]	; (800551c <TIM_OC4_SetConfig+0xac>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d109      	bne.n	80054ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	019b      	lsls	r3, r3, #6
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	feff8fff 	.word	0xfeff8fff
 8005518:	40010000 	.word	0x40010000
 800551c:	40010400 	.word	0x40010400

08005520 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <TIM_OC5_SetConfig+0x98>)
 800554c:	4013      	ands	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005560:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	041b      	lsls	r3, r3, #16
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a12      	ldr	r2, [pc, #72]	; (80055bc <TIM_OC5_SetConfig+0x9c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC5_SetConfig+0x5e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a11      	ldr	r2, [pc, #68]	; (80055c0 <TIM_OC5_SetConfig+0xa0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d109      	bne.n	8005592 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	fffeff8f 	.word	0xfffeff8f
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <TIM_OC6_SetConfig+0x9c>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	051b      	lsls	r3, r3, #20
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a13      	ldr	r2, [pc, #76]	; (8005664 <TIM_OC6_SetConfig+0xa0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_OC6_SetConfig+0x60>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a12      	ldr	r2, [pc, #72]	; (8005668 <TIM_OC6_SetConfig+0xa4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d109      	bne.n	8005638 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	029b      	lsls	r3, r3, #10
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	feff8fff 	.word	0xfeff8fff
 8005664:	40010000 	.word	0x40010000
 8005668:	40010400 	.word	0x40010400

0800566c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 030a 	bic.w	r3, r3, #10
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0210 	bic.w	r2, r3, #16
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	031b      	lsls	r3, r3, #12
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	f043 0307 	orr.w	r3, r3, #7
 800574c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	431a      	orrs	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4313      	orrs	r3, r2
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2201      	movs	r2, #1
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	401a      	ands	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	fa01 f303 	lsl.w	r3, r1, r3
 80057d8:	431a      	orrs	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005800:	2302      	movs	r3, #2
 8005802:	e06d      	b.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a30      	ldr	r2, [pc, #192]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2f      	ldr	r2, [pc, #188]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d108      	bne.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800583e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005850:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a20      	ldr	r2, [pc, #128]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d022      	beq.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d01d      	beq.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d018      	beq.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00e      	beq.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d009      	beq.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a16      	ldr	r2, [pc, #88]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a15      	ldr	r2, [pc, #84]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d10c      	bne.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40010400 	.word	0x40010400
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40014000 	.word	0x40014000
 8005904:	40001800 	.word	0x40001800

08005908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e040      	b.n	80059d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc f8ea 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fc18 	bl	80061b8 <UART_SetConfig>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e022      	b.n	80059d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fe6e 	bl	800667c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fef5 	bl	80067c0 <UART_CheckIdleState>
 80059d6:	4603      	mov	r3, r0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	f040 8081 	bne.w	8005afc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UART_Transmit+0x26>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e079      	b.n	8005afe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_UART_Transmit+0x38>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e072      	b.n	8005afe <HAL_UART_Transmit+0x11e>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2221      	movs	r2, #33	; 0x21
 8005a2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2e:	f7fc f9d7 	bl	8001de0 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4c:	d108      	bne.n	8005a60 <HAL_UART_Transmit+0x80>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e003      	b.n	8005a68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005a70:	e02c      	b.n	8005acc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2180      	movs	r1, #128	; 0x80
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fee8 	bl	8006852 <UART_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e038      	b.n	8005afe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e007      	b.n	8005aba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1cc      	bne.n	8005a72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2140      	movs	r1, #64	; 0x40
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 feb5 	bl	8006852 <UART_WaitOnFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e005      	b.n	8005afe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e000      	b.n	8005afe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b08a      	sub	sp, #40	; 0x28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	4613      	mov	r3, r2
 8005b12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d13d      	bne.n	8005b98 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UART_Receive_IT+0x22>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e036      	b.n	8005b9a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_UART_Receive_IT+0x34>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e02f      	b.n	8005b9a <HAL_UART_Receive_IT+0x94>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	613b      	str	r3, [r7, #16]
   return(result);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	623b      	str	r3, [r7, #32]
 8005b76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	69f9      	ldr	r1, [r7, #28]
 8005b7a:	6a3a      	ldr	r2, [r7, #32]
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 ff24 	bl	80069dc <UART_Start_Receive_IT>
 8005b94:	4603      	mov	r3, r0
 8005b96:	e000      	b.n	8005b9a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3728      	adds	r7, #40	; 0x28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b0ba      	sub	sp, #232	; 0xe8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005bce:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d115      	bne.n	8005c0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00f      	beq.n	8005c0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 82a4 	beq.w	800614a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
      }
      return;
 8005c0a:	e29e      	b.n	800614a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8117 	beq.w	8005e44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c26:	4b85      	ldr	r3, [pc, #532]	; (8005e3c <HAL_UART_IRQHandler+0x298>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 810a 	beq.w	8005e44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d011      	beq.n	8005c60 <HAL_UART_IRQHandler+0xbc>
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c56:	f043 0201 	orr.w	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d011      	beq.n	8005c90 <HAL_UART_IRQHandler+0xec>
 8005c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d011      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x11c>
 8005c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2204      	movs	r2, #4
 8005cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb6:	f043 0202 	orr.w	r2, r3, #2
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d017      	beq.n	8005cfc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2208      	movs	r2, #8
 8005cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf2:	f043 0208 	orr.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d012      	beq.n	8005d2e <HAL_UART_IRQHandler+0x18a>
 8005d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00c      	beq.n	8005d2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 820a 	beq.w	800614e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d76:	2b40      	cmp	r3, #64	; 0x40
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d04f      	beq.n	8005e26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fef2 	bl	8006b70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d141      	bne.n	8005e1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1d9      	bne.n	8005d9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d013      	beq.n	8005e16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <HAL_UART_IRQHandler+0x29c>)
 8005df4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fc fe49 	bl	8002a92 <HAL_DMA_Abort_IT>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d017      	beq.n	8005e36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e14:	e00f      	b.n	8005e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f9ae 	bl	8006178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	e00b      	b.n	8005e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9aa 	bl	8006178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	e007      	b.n	8005e36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f9a6 	bl	8006178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e34:	e18b      	b.n	800614e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e36:	bf00      	nop
    return;
 8005e38:	e189      	b.n	800614e <HAL_UART_IRQHandler+0x5aa>
 8005e3a:	bf00      	nop
 8005e3c:	04000120 	.word	0x04000120
 8005e40:	08006c37 	.word	0x08006c37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f040 8144 	bne.w	80060d6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 813d 	beq.w	80060d6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 8136 	beq.w	80060d6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2210      	movs	r2, #16
 8005e70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	f040 80b2 	bne.w	8005fe6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 815d 	beq.w	8006152 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	f080 8155 	bcs.w	8006152 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ebc:	f000 8085 	beq.w	8005fca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005eee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1da      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e1      	bne.n	8005f0a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e3      	bne.n	8005f46 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9a:	f023 0310 	bic.w	r3, r3, #16
 8005f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e4      	bne.n	8005f8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fc fcf4 	bl	80029b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8d4 	bl	800618c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fe4:	e0b5      	b.n	8006152 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80a7 	beq.w	8006156 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80a2 	beq.w	8006156 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006026:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
 8006036:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800603a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e4      	bne.n	8006012 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	e853 3f00 	ldrex	r3, [r3]
 8006056:	623b      	str	r3, [r7, #32]
   return(result);
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	f023 0301 	bic.w	r3, r3, #1
 800605e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800606c:	633a      	str	r2, [r7, #48]	; 0x30
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e3      	bne.n	8006048 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0310 	bic.w	r3, r3, #16
 80060a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	69b9      	ldr	r1, [r7, #24]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	617b      	str	r3, [r7, #20]
   return(result);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e4      	bne.n	8006092 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f85c 	bl	800618c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060d4:	e03f      	b.n	8006156 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00e      	beq.n	8006100 <HAL_UART_IRQHandler+0x55c>
 80060e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f853 	bl	80061a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060fe:	e02d      	b.n	800615c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00e      	beq.n	800612a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800610c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01c      	beq.n	800615a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	4798      	blx	r3
    }
    return;
 8006128:	e017      	b.n	800615a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d012      	beq.n	800615c <HAL_UART_IRQHandler+0x5b8>
 8006136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00c      	beq.n	800615c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fd8d 	bl	8006c62 <UART_EndTransmit_IT>
    return;
 8006148:	e008      	b.n	800615c <HAL_UART_IRQHandler+0x5b8>
      return;
 800614a:	bf00      	nop
 800614c:	e006      	b.n	800615c <HAL_UART_IRQHandler+0x5b8>
    return;
 800614e:	bf00      	nop
 8006150:	e004      	b.n	800615c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006152:	bf00      	nop
 8006154:	e002      	b.n	800615c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <HAL_UART_IRQHandler+0x5b8>
    return;
 800615a:	bf00      	nop
  }

}
 800615c:	37e8      	adds	r7, #232	; 0xe8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop

08006164 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4ba7      	ldr	r3, [pc, #668]	; (8006480 <UART_SetConfig+0x2c8>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a95      	ldr	r2, [pc, #596]	; (8006484 <UART_SetConfig+0x2cc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d120      	bne.n	8006276 <UART_SetConfig+0xbe>
 8006234:	4b94      	ldr	r3, [pc, #592]	; (8006488 <UART_SetConfig+0x2d0>)
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b03      	cmp	r3, #3
 8006240:	d816      	bhi.n	8006270 <UART_SetConfig+0xb8>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x90>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006259 	.word	0x08006259
 800624c:	08006265 	.word	0x08006265
 8006250:	0800625f 	.word	0x0800625f
 8006254:	0800626b 	.word	0x0800626b
 8006258:	2301      	movs	r3, #1
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e14f      	b.n	80064fe <UART_SetConfig+0x346>
 800625e:	2302      	movs	r3, #2
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e14c      	b.n	80064fe <UART_SetConfig+0x346>
 8006264:	2304      	movs	r3, #4
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e149      	b.n	80064fe <UART_SetConfig+0x346>
 800626a:	2308      	movs	r3, #8
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e146      	b.n	80064fe <UART_SetConfig+0x346>
 8006270:	2310      	movs	r3, #16
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e143      	b.n	80064fe <UART_SetConfig+0x346>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a84      	ldr	r2, [pc, #528]	; (800648c <UART_SetConfig+0x2d4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d132      	bne.n	80062e6 <UART_SetConfig+0x12e>
 8006280:	4b81      	ldr	r3, [pc, #516]	; (8006488 <UART_SetConfig+0x2d0>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f003 030c 	and.w	r3, r3, #12
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d828      	bhi.n	80062e0 <UART_SetConfig+0x128>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0xdc>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062c9 	.word	0x080062c9
 8006298:	080062e1 	.word	0x080062e1
 800629c:	080062e1 	.word	0x080062e1
 80062a0:	080062e1 	.word	0x080062e1
 80062a4:	080062d5 	.word	0x080062d5
 80062a8:	080062e1 	.word	0x080062e1
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	080062e1 	.word	0x080062e1
 80062b4:	080062cf 	.word	0x080062cf
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e1 	.word	0x080062e1
 80062c4:	080062db 	.word	0x080062db
 80062c8:	2300      	movs	r3, #0
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e117      	b.n	80064fe <UART_SetConfig+0x346>
 80062ce:	2302      	movs	r3, #2
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e114      	b.n	80064fe <UART_SetConfig+0x346>
 80062d4:	2304      	movs	r3, #4
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e111      	b.n	80064fe <UART_SetConfig+0x346>
 80062da:	2308      	movs	r3, #8
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e10e      	b.n	80064fe <UART_SetConfig+0x346>
 80062e0:	2310      	movs	r3, #16
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e10b      	b.n	80064fe <UART_SetConfig+0x346>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a69      	ldr	r2, [pc, #420]	; (8006490 <UART_SetConfig+0x2d8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d120      	bne.n	8006332 <UART_SetConfig+0x17a>
 80062f0:	4b65      	ldr	r3, [pc, #404]	; (8006488 <UART_SetConfig+0x2d0>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062fa:	2b30      	cmp	r3, #48	; 0x30
 80062fc:	d013      	beq.n	8006326 <UART_SetConfig+0x16e>
 80062fe:	2b30      	cmp	r3, #48	; 0x30
 8006300:	d814      	bhi.n	800632c <UART_SetConfig+0x174>
 8006302:	2b20      	cmp	r3, #32
 8006304:	d009      	beq.n	800631a <UART_SetConfig+0x162>
 8006306:	2b20      	cmp	r3, #32
 8006308:	d810      	bhi.n	800632c <UART_SetConfig+0x174>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <UART_SetConfig+0x15c>
 800630e:	2b10      	cmp	r3, #16
 8006310:	d006      	beq.n	8006320 <UART_SetConfig+0x168>
 8006312:	e00b      	b.n	800632c <UART_SetConfig+0x174>
 8006314:	2300      	movs	r3, #0
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e0f1      	b.n	80064fe <UART_SetConfig+0x346>
 800631a:	2302      	movs	r3, #2
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e0ee      	b.n	80064fe <UART_SetConfig+0x346>
 8006320:	2304      	movs	r3, #4
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e0eb      	b.n	80064fe <UART_SetConfig+0x346>
 8006326:	2308      	movs	r3, #8
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e0e8      	b.n	80064fe <UART_SetConfig+0x346>
 800632c:	2310      	movs	r3, #16
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e0e5      	b.n	80064fe <UART_SetConfig+0x346>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a57      	ldr	r2, [pc, #348]	; (8006494 <UART_SetConfig+0x2dc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d120      	bne.n	800637e <UART_SetConfig+0x1c6>
 800633c:	4b52      	ldr	r3, [pc, #328]	; (8006488 <UART_SetConfig+0x2d0>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006346:	2bc0      	cmp	r3, #192	; 0xc0
 8006348:	d013      	beq.n	8006372 <UART_SetConfig+0x1ba>
 800634a:	2bc0      	cmp	r3, #192	; 0xc0
 800634c:	d814      	bhi.n	8006378 <UART_SetConfig+0x1c0>
 800634e:	2b80      	cmp	r3, #128	; 0x80
 8006350:	d009      	beq.n	8006366 <UART_SetConfig+0x1ae>
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d810      	bhi.n	8006378 <UART_SetConfig+0x1c0>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <UART_SetConfig+0x1a8>
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d006      	beq.n	800636c <UART_SetConfig+0x1b4>
 800635e:	e00b      	b.n	8006378 <UART_SetConfig+0x1c0>
 8006360:	2300      	movs	r3, #0
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e0cb      	b.n	80064fe <UART_SetConfig+0x346>
 8006366:	2302      	movs	r3, #2
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e0c8      	b.n	80064fe <UART_SetConfig+0x346>
 800636c:	2304      	movs	r3, #4
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e0c5      	b.n	80064fe <UART_SetConfig+0x346>
 8006372:	2308      	movs	r3, #8
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e0c2      	b.n	80064fe <UART_SetConfig+0x346>
 8006378:	2310      	movs	r3, #16
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e0bf      	b.n	80064fe <UART_SetConfig+0x346>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a45      	ldr	r2, [pc, #276]	; (8006498 <UART_SetConfig+0x2e0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d125      	bne.n	80063d4 <UART_SetConfig+0x21c>
 8006388:	4b3f      	ldr	r3, [pc, #252]	; (8006488 <UART_SetConfig+0x2d0>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006396:	d017      	beq.n	80063c8 <UART_SetConfig+0x210>
 8006398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800639c:	d817      	bhi.n	80063ce <UART_SetConfig+0x216>
 800639e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a2:	d00b      	beq.n	80063bc <UART_SetConfig+0x204>
 80063a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a8:	d811      	bhi.n	80063ce <UART_SetConfig+0x216>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <UART_SetConfig+0x1fe>
 80063ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b2:	d006      	beq.n	80063c2 <UART_SetConfig+0x20a>
 80063b4:	e00b      	b.n	80063ce <UART_SetConfig+0x216>
 80063b6:	2300      	movs	r3, #0
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e0a0      	b.n	80064fe <UART_SetConfig+0x346>
 80063bc:	2302      	movs	r3, #2
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e09d      	b.n	80064fe <UART_SetConfig+0x346>
 80063c2:	2304      	movs	r3, #4
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e09a      	b.n	80064fe <UART_SetConfig+0x346>
 80063c8:	2308      	movs	r3, #8
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e097      	b.n	80064fe <UART_SetConfig+0x346>
 80063ce:	2310      	movs	r3, #16
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e094      	b.n	80064fe <UART_SetConfig+0x346>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a30      	ldr	r2, [pc, #192]	; (800649c <UART_SetConfig+0x2e4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d125      	bne.n	800642a <UART_SetConfig+0x272>
 80063de:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <UART_SetConfig+0x2d0>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ec:	d017      	beq.n	800641e <UART_SetConfig+0x266>
 80063ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f2:	d817      	bhi.n	8006424 <UART_SetConfig+0x26c>
 80063f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f8:	d00b      	beq.n	8006412 <UART_SetConfig+0x25a>
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fe:	d811      	bhi.n	8006424 <UART_SetConfig+0x26c>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <UART_SetConfig+0x254>
 8006404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006408:	d006      	beq.n	8006418 <UART_SetConfig+0x260>
 800640a:	e00b      	b.n	8006424 <UART_SetConfig+0x26c>
 800640c:	2301      	movs	r3, #1
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e075      	b.n	80064fe <UART_SetConfig+0x346>
 8006412:	2302      	movs	r3, #2
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e072      	b.n	80064fe <UART_SetConfig+0x346>
 8006418:	2304      	movs	r3, #4
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e06f      	b.n	80064fe <UART_SetConfig+0x346>
 800641e:	2308      	movs	r3, #8
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e06c      	b.n	80064fe <UART_SetConfig+0x346>
 8006424:	2310      	movs	r3, #16
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e069      	b.n	80064fe <UART_SetConfig+0x346>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <UART_SetConfig+0x2e8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d137      	bne.n	80064a4 <UART_SetConfig+0x2ec>
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <UART_SetConfig+0x2d0>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800643e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006442:	d017      	beq.n	8006474 <UART_SetConfig+0x2bc>
 8006444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006448:	d817      	bhi.n	800647a <UART_SetConfig+0x2c2>
 800644a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644e:	d00b      	beq.n	8006468 <UART_SetConfig+0x2b0>
 8006450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006454:	d811      	bhi.n	800647a <UART_SetConfig+0x2c2>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <UART_SetConfig+0x2aa>
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645e:	d006      	beq.n	800646e <UART_SetConfig+0x2b6>
 8006460:	e00b      	b.n	800647a <UART_SetConfig+0x2c2>
 8006462:	2300      	movs	r3, #0
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e04a      	b.n	80064fe <UART_SetConfig+0x346>
 8006468:	2302      	movs	r3, #2
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e047      	b.n	80064fe <UART_SetConfig+0x346>
 800646e:	2304      	movs	r3, #4
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e044      	b.n	80064fe <UART_SetConfig+0x346>
 8006474:	2308      	movs	r3, #8
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e041      	b.n	80064fe <UART_SetConfig+0x346>
 800647a:	2310      	movs	r3, #16
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e03e      	b.n	80064fe <UART_SetConfig+0x346>
 8006480:	efff69f3 	.word	0xefff69f3
 8006484:	40011000 	.word	0x40011000
 8006488:	40023800 	.word	0x40023800
 800648c:	40004400 	.word	0x40004400
 8006490:	40004800 	.word	0x40004800
 8006494:	40004c00 	.word	0x40004c00
 8006498:	40005000 	.word	0x40005000
 800649c:	40011400 	.word	0x40011400
 80064a0:	40007800 	.word	0x40007800
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a71      	ldr	r2, [pc, #452]	; (8006670 <UART_SetConfig+0x4b8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d125      	bne.n	80064fa <UART_SetConfig+0x342>
 80064ae:	4b71      	ldr	r3, [pc, #452]	; (8006674 <UART_SetConfig+0x4bc>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064bc:	d017      	beq.n	80064ee <UART_SetConfig+0x336>
 80064be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064c2:	d817      	bhi.n	80064f4 <UART_SetConfig+0x33c>
 80064c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c8:	d00b      	beq.n	80064e2 <UART_SetConfig+0x32a>
 80064ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ce:	d811      	bhi.n	80064f4 <UART_SetConfig+0x33c>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <UART_SetConfig+0x324>
 80064d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d8:	d006      	beq.n	80064e8 <UART_SetConfig+0x330>
 80064da:	e00b      	b.n	80064f4 <UART_SetConfig+0x33c>
 80064dc:	2300      	movs	r3, #0
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e00d      	b.n	80064fe <UART_SetConfig+0x346>
 80064e2:	2302      	movs	r3, #2
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e00a      	b.n	80064fe <UART_SetConfig+0x346>
 80064e8:	2304      	movs	r3, #4
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e007      	b.n	80064fe <UART_SetConfig+0x346>
 80064ee:	2308      	movs	r3, #8
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e004      	b.n	80064fe <UART_SetConfig+0x346>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e001      	b.n	80064fe <UART_SetConfig+0x346>
 80064fa:	2310      	movs	r3, #16
 80064fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	d15a      	bne.n	80065be <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006508:	7ffb      	ldrb	r3, [r7, #31]
 800650a:	2b08      	cmp	r3, #8
 800650c:	d827      	bhi.n	800655e <UART_SetConfig+0x3a6>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <UART_SetConfig+0x35c>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006539 	.word	0x08006539
 8006518:	08006541 	.word	0x08006541
 800651c:	08006549 	.word	0x08006549
 8006520:	0800655f 	.word	0x0800655f
 8006524:	0800654f 	.word	0x0800654f
 8006528:	0800655f 	.word	0x0800655f
 800652c:	0800655f 	.word	0x0800655f
 8006530:	0800655f 	.word	0x0800655f
 8006534:	08006557 	.word	0x08006557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006538:	f7fd fac4 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 800653c:	61b8      	str	r0, [r7, #24]
        break;
 800653e:	e013      	b.n	8006568 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006540:	f7fd fad4 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 8006544:	61b8      	str	r0, [r7, #24]
        break;
 8006546:	e00f      	b.n	8006568 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006548:	4b4b      	ldr	r3, [pc, #300]	; (8006678 <UART_SetConfig+0x4c0>)
 800654a:	61bb      	str	r3, [r7, #24]
        break;
 800654c:	e00c      	b.n	8006568 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800654e:	f7fd f9cb 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8006552:	61b8      	str	r0, [r7, #24]
        break;
 8006554:	e008      	b.n	8006568 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655a:	61bb      	str	r3, [r7, #24]
        break;
 800655c:	e004      	b.n	8006568 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	77bb      	strb	r3, [r7, #30]
        break;
 8006566:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d074      	beq.n	8006658 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	005a      	lsls	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	441a      	add	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006582:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b0f      	cmp	r3, #15
 8006588:	d916      	bls.n	80065b8 <UART_SetConfig+0x400>
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006590:	d212      	bcs.n	80065b8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f023 030f 	bic.w	r3, r3, #15
 800659a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	89fb      	ldrh	r3, [r7, #14]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	89fa      	ldrh	r2, [r7, #14]
 80065b4:	60da      	str	r2, [r3, #12]
 80065b6:	e04f      	b.n	8006658 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	77bb      	strb	r3, [r7, #30]
 80065bc:	e04c      	b.n	8006658 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065be:	7ffb      	ldrb	r3, [r7, #31]
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d828      	bhi.n	8006616 <UART_SetConfig+0x45e>
 80065c4:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <UART_SetConfig+0x414>)
 80065c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ca:	bf00      	nop
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	08006601 	.word	0x08006601
 80065d8:	08006617 	.word	0x08006617
 80065dc:	08006607 	.word	0x08006607
 80065e0:	08006617 	.word	0x08006617
 80065e4:	08006617 	.word	0x08006617
 80065e8:	08006617 	.word	0x08006617
 80065ec:	0800660f 	.word	0x0800660f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7fd fa68 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80065f4:	61b8      	str	r0, [r7, #24]
        break;
 80065f6:	e013      	b.n	8006620 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f8:	f7fd fa78 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 80065fc:	61b8      	str	r0, [r7, #24]
        break;
 80065fe:	e00f      	b.n	8006620 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006600:	4b1d      	ldr	r3, [pc, #116]	; (8006678 <UART_SetConfig+0x4c0>)
 8006602:	61bb      	str	r3, [r7, #24]
        break;
 8006604:	e00c      	b.n	8006620 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006606:	f7fd f96f 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800660a:	61b8      	str	r0, [r7, #24]
        break;
 800660c:	e008      	b.n	8006620 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006612:	61bb      	str	r3, [r7, #24]
        break;
 8006614:	e004      	b.n	8006620 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	77bb      	strb	r3, [r7, #30]
        break;
 800661e:	bf00      	nop
    }

    if (pclk != 0U)
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d018      	beq.n	8006658 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	085a      	lsrs	r2, r3, #1
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	441a      	add	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	fbb2 f3f3 	udiv	r3, r2, r3
 8006638:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b0f      	cmp	r3, #15
 800663e:	d909      	bls.n	8006654 <UART_SetConfig+0x49c>
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006646:	d205      	bcs.n	8006654 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	b29a      	uxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e001      	b.n	8006658 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006664:	7fbb      	ldrb	r3, [r7, #30]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40007c00 	.word	0x40007c00
 8006674:	40023800 	.word	0x40023800
 8006678:	00f42400 	.word	0x00f42400

0800667c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01a      	beq.n	8006792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d10a      	bne.n	8006792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
  }
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067d0:	f7fb fb06 	bl	8001de0 <HAL_GetTick>
 80067d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d10e      	bne.n	8006802 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f82d 	bl	8006852 <UART_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e023      	b.n	800684a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b04      	cmp	r3, #4
 800680e:	d10e      	bne.n	800682e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f817 	bl	8006852 <UART_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e00d      	b.n	800684a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b09c      	sub	sp, #112	; 0x70
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006862:	e0a5      	b.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	f000 80a1 	beq.w	80069b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fb fab7 	bl	8001de0 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <UART_WaitOnFlagUntilTimeout+0x32>
 800687e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006880:	2b00      	cmp	r3, #0
 8006882:	d13e      	bne.n	8006902 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006898:	667b      	str	r3, [r7, #100]	; 0x64
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e6      	bne.n	8006884 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	663b      	str	r3, [r7, #96]	; 0x60
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80068d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e067      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d04f      	beq.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800691e:	d147      	bne.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006928:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800693e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
 800694a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800694e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e6      	bne.n	800692a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	613b      	str	r3, [r7, #16]
   return(result);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	66bb      	str	r3, [r7, #104]	; 0x68
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800697c:	623a      	str	r2, [r7, #32]
 800697e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	69f9      	ldr	r1, [r7, #28]
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	61bb      	str	r3, [r7, #24]
   return(result);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e5      	bne.n	800695c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e010      	b.n	80069d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69da      	ldr	r2, [r3, #28]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4013      	ands	r3, r2
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	f43f af4a 	beq.w	8006864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3770      	adds	r7, #112	; 0x70
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069dc:	b480      	push	{r7}
 80069de:	b097      	sub	sp, #92	; 0x5c
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	88fa      	ldrh	r2, [r7, #6]
 80069fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0e:	d10e      	bne.n	8006a2e <UART_Start_Receive_IT+0x52>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <UART_Start_Receive_IT+0x48>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a22:	e02d      	b.n	8006a80 <UART_Start_Receive_IT+0xa4>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a2c:	e028      	b.n	8006a80 <UART_Start_Receive_IT+0xa4>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10d      	bne.n	8006a52 <UART_Start_Receive_IT+0x76>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <UART_Start_Receive_IT+0x6c>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	22ff      	movs	r2, #255	; 0xff
 8006a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a46:	e01b      	b.n	8006a80 <UART_Start_Receive_IT+0xa4>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	227f      	movs	r2, #127	; 0x7f
 8006a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a50:	e016      	b.n	8006a80 <UART_Start_Receive_IT+0xa4>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a5a:	d10d      	bne.n	8006a78 <UART_Start_Receive_IT+0x9c>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d104      	bne.n	8006a6e <UART_Start_Receive_IT+0x92>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	227f      	movs	r2, #127	; 0x7f
 8006a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a6c:	e008      	b.n	8006a80 <UART_Start_Receive_IT+0xa4>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	223f      	movs	r2, #63	; 0x3f
 8006a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a76:	e003      	b.n	8006a80 <UART_Start_Receive_IT+0xa4>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2222      	movs	r2, #34	; 0x22
 8006a8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aca:	d107      	bne.n	8006adc <UART_Start_Receive_IT+0x100>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a24      	ldr	r2, [pc, #144]	; (8006b68 <UART_Start_Receive_IT+0x18c>)
 8006ad8:	665a      	str	r2, [r3, #100]	; 0x64
 8006ada:	e002      	b.n	8006ae2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <UART_Start_Receive_IT+0x190>)
 8006ae0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d019      	beq.n	8006b26 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
 8006b12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e6      	bne.n	8006af2 <UART_Start_Receive_IT+0x116>
 8006b24:	e018      	b.n	8006b58 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	613b      	str	r3, [r7, #16]
   return(result);
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f043 0320 	orr.w	r3, r3, #32
 8006b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	69f9      	ldr	r1, [r7, #28]
 8006b4a:	6a3a      	ldr	r2, [r7, #32]
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	375c      	adds	r7, #92	; 0x5c
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	08006e13 	.word	0x08006e13
 8006b6c:	08006cb7 	.word	0x08006cb7

08006b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b095      	sub	sp, #84	; 0x54
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b96:	643b      	str	r3, [r7, #64]	; 0x40
 8006b98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e6      	bne.n	8006b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e5      	bne.n	8006baa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d118      	bne.n	8006c18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6979      	ldr	r1, [r7, #20]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	613b      	str	r3, [r7, #16]
   return(result);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e6      	bne.n	8006be6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c2a:	bf00      	nop
 8006c2c:	3754      	adds	r7, #84	; 0x54
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff fa8f 	bl	8006178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5a:	bf00      	nop
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b088      	sub	sp, #32
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	613b      	str	r3, [r7, #16]
   return(result);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e6      	bne.n	8006c6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff fa5b 	bl	8006164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cae:	bf00      	nop
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b096      	sub	sp, #88	; 0x58
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ccc:	2b22      	cmp	r3, #34	; 0x22
 8006cce:	f040 8094 	bne.w	8006dfa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cdc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ce0:	b2d9      	uxtb	r1, r3
 8006ce2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	400a      	ands	r2, r1
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d177      	bne.n	8006e0a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d38:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e6      	bne.n	8006d1a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3308      	adds	r3, #8
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	f023 0301 	bic.w	r3, r3, #1
 8006d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d6c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e5      	bne.n	8006d4c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d12e      	bne.n	8006df2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0310 	bic.w	r3, r3, #16
 8006dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	69b9      	ldr	r1, [r7, #24]
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e6      	bne.n	8006d9a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	d103      	bne.n	8006de2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2210      	movs	r2, #16
 8006de0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff f9ce 	bl	800618c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006df0:	e00b      	b.n	8006e0a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fa f950 	bl	8001098 <HAL_UART_RxCpltCallback>
}
 8006df8:	e007      	b.n	8006e0a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0208 	orr.w	r2, r2, #8
 8006e08:	619a      	str	r2, [r3, #24]
}
 8006e0a:	bf00      	nop
 8006e0c:	3758      	adds	r7, #88	; 0x58
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b096      	sub	sp, #88	; 0x58
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e28:	2b22      	cmp	r3, #34	; 0x22
 8006e2a:	f040 8094 	bne.w	8006f56 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006e42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e46:	4013      	ands	r3, r2
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	1c9a      	adds	r2, r3, #2
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d177      	bne.n	8006f66 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e94:	643b      	str	r3, [r7, #64]	; 0x40
 8006e96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e6      	bne.n	8006e76 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d12e      	bne.n	8006f4e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f023 0310 	bic.w	r3, r3, #16
 8006f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6979      	ldr	r1, [r7, #20]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	613b      	str	r3, [r7, #16]
   return(result);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e6      	bne.n	8006ef6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d103      	bne.n	8006f3e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff f920 	bl	800618c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f4c:	e00b      	b.n	8006f66 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fa f8a2 	bl	8001098 <HAL_UART_RxCpltCallback>
}
 8006f54:	e007      	b.n	8006f66 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699a      	ldr	r2, [r3, #24]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0208 	orr.w	r2, r2, #8
 8006f64:	619a      	str	r2, [r3, #24]
}
 8006f66:	bf00      	nop
 8006f68:	3758      	adds	r7, #88	; 0x58
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f70:	b084      	sub	sp, #16
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	f107 001c 	add.w	r0, r7, #28
 8006f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d120      	bne.n	8006fca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	4b20      	ldr	r3, [pc, #128]	; (800701c <USB_CoreInit+0xac>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d105      	bne.n	8006fbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa92 	bl	80074e8 <USB_CoreReset>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	e010      	b.n	8006fec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa86 	bl	80074e8 <USB_CoreReset>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d10b      	bne.n	800700a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f043 0206 	orr.w	r2, r3, #6
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007016:	b004      	add	sp, #16
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	ffbdffbf 	.word	0xffbdffbf

08007020 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f023 0201 	bic.w	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d115      	bne.n	8007090 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007070:	2001      	movs	r0, #1
 8007072:	f7fa fec1 	bl	8001df8 <HAL_Delay>
      ms++;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa25 	bl	80074cc <USB_GetMode>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d01e      	beq.n	80070c6 <USB_SetCurrentMode+0x84>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b31      	cmp	r3, #49	; 0x31
 800708c:	d9f0      	bls.n	8007070 <USB_SetCurrentMode+0x2e>
 800708e:	e01a      	b.n	80070c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d115      	bne.n	80070c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070a2:	2001      	movs	r0, #1
 80070a4:	f7fa fea8 	bl	8001df8 <HAL_Delay>
      ms++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa0c 	bl	80074cc <USB_GetMode>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <USB_SetCurrentMode+0x84>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b31      	cmp	r3, #49	; 0x31
 80070be:	d9f0      	bls.n	80070a2 <USB_SetCurrentMode+0x60>
 80070c0:	e001      	b.n	80070c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e005      	b.n	80070d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b32      	cmp	r3, #50	; 0x32
 80070ca:	d101      	bne.n	80070d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070dc:	b084      	sub	sp, #16
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e009      	b.n	8007110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3340      	adds	r3, #64	; 0x40
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3301      	adds	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b0e      	cmp	r3, #14
 8007114:	d9f2      	bls.n	80070fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11c      	bne.n	8007156 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800712a:	f043 0302 	orr.w	r3, r3, #2
 800712e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e005      	b.n	8007162 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007168:	461a      	mov	r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	4619      	mov	r1, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717c:	461a      	mov	r2, r3
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	2b01      	cmp	r3, #1
 8007186:	d10c      	bne.n	80071a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800718e:	2100      	movs	r1, #0
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f961 	bl	8007458 <USB_SetDevSpeed>
 8007196:	e008      	b.n	80071aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007198:	2101      	movs	r1, #1
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f95c 	bl	8007458 <USB_SetDevSpeed>
 80071a0:	e003      	b.n	80071aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071a2:	2103      	movs	r1, #3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f957 	bl	8007458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071aa:	2110      	movs	r1, #16
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f8f3 	bl	8007398 <USB_FlushTxFifo>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f91d 	bl	80073fc <USB_FlushRxFifo>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	461a      	mov	r2, r3
 80071d4:	2300      	movs	r3, #0
 80071d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	461a      	mov	r2, r3
 80071e0:	2300      	movs	r3, #0
 80071e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	461a      	mov	r2, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	e043      	b.n	800727e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800720c:	d118      	bne.n	8007240 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007220:	461a      	mov	r2, r3
 8007222:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	e013      	b.n	8007252 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007236:	461a      	mov	r2, r3
 8007238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e008      	b.n	8007252 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724c:	461a      	mov	r2, r3
 800724e:	2300      	movs	r3, #0
 8007250:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725e:	461a      	mov	r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	461a      	mov	r2, r3
 8007272:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3301      	adds	r3, #1
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	429a      	cmp	r2, r3
 8007284:	d3b7      	bcc.n	80071f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	e043      	b.n	8007314 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800729e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a2:	d118      	bne.n	80072d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b6:	461a      	mov	r2, r3
 80072b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	e013      	b.n	80072e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072cc:	461a      	mov	r2, r3
 80072ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	e008      	b.n	80072e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	461a      	mov	r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	461a      	mov	r2, r3
 80072f6:	2300      	movs	r3, #0
 80072f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	461a      	mov	r2, r3
 8007308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800730c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3301      	adds	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d3b7      	bcc.n	800728c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800732e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800733c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f043 0210 	orr.w	r2, r3, #16
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <USB_DevInit+0x2b4>)
 8007356:	4313      	orrs	r3, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f043 0208 	orr.w	r2, r3, #8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800736e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007370:	2b01      	cmp	r3, #1
 8007372:	d105      	bne.n	8007380 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <USB_DevInit+0x2b8>)
 800737a:	4313      	orrs	r3, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800738c:	b004      	add	sp, #16
 800738e:	4770      	bx	lr
 8007390:	803c3800 	.word	0x803c3800
 8007394:	40000004 	.word	0x40000004

08007398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	4a12      	ldr	r2, [pc, #72]	; (80073f8 <USB_FlushTxFifo+0x60>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d901      	bls.n	80073b6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e01a      	b.n	80073ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	daf3      	bge.n	80073a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	019b      	lsls	r3, r3, #6
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <USB_FlushTxFifo+0x60>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d901      	bls.n	80073de <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e006      	b.n	80073ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d0f1      	beq.n	80073ce <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	00030d40 	.word	0x00030d40

080073fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	4a11      	ldr	r2, [pc, #68]	; (8007454 <USB_FlushRxFifo+0x58>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d901      	bls.n	8007418 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e017      	b.n	8007448 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	daf3      	bge.n	8007408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2210      	movs	r2, #16
 8007428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	4a08      	ldr	r2, [pc, #32]	; (8007454 <USB_FlushRxFifo+0x58>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e006      	b.n	8007448 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0310 	and.w	r3, r3, #16
 8007442:	2b10      	cmp	r3, #16
 8007444:	d0f1      	beq.n	800742a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	00030d40 	.word	0x00030d40

08007458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007478:	4313      	orrs	r3, r2
 800747a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074a4:	f023 0303 	bic.w	r3, r3, #3
 80074a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b8:	f043 0302 	orr.w	r3, r3, #2
 80074bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	f003 0301 	and.w	r3, r3, #1
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	4a13      	ldr	r2, [pc, #76]	; (8007548 <USB_CoreReset+0x60>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d901      	bls.n	8007504 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e01a      	b.n	800753a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	daf3      	bge.n	80074f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f043 0201 	orr.w	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	4a09      	ldr	r2, [pc, #36]	; (8007548 <USB_CoreReset+0x60>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d901      	bls.n	800752c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e006      	b.n	800753a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b01      	cmp	r3, #1
 8007536:	d0f1      	beq.n	800751c <USB_CoreReset+0x34>

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	00030d40 	.word	0x00030d40

0800754c <arm_pid_init_f32>:
 800754c:	ed90 7a08 	vldr	s14, [r0, #32]
 8007550:	edd0 7a06 	vldr	s15, [r0, #24]
 8007554:	ed90 6a07 	vldr	s12, [r0, #28]
 8007558:	eef1 6a67 	vneg.f32	s13, s15
 800755c:	ed80 7a02 	vstr	s14, [r0, #8]
 8007560:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007564:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800756c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007570:	edc0 7a00 	vstr	s15, [r0]
 8007574:	ed80 7a01 	vstr	s14, [r0, #4]
 8007578:	b901      	cbnz	r1, 800757c <arm_pid_init_f32+0x30>
 800757a:	4770      	bx	lr
 800757c:	2300      	movs	r3, #0
 800757e:	60c3      	str	r3, [r0, #12]
 8007580:	6103      	str	r3, [r0, #16]
 8007582:	6143      	str	r3, [r0, #20]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop

08007588 <atof>:
 8007588:	2100      	movs	r1, #0
 800758a:	f001 ba87 	b.w	8008a9c <strtod>
	...

08007590 <__errno>:
 8007590:	4b01      	ldr	r3, [pc, #4]	; (8007598 <__errno+0x8>)
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	2000000c 	.word	0x2000000c

0800759c <__libc_init_array>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	4d0d      	ldr	r5, [pc, #52]	; (80075d4 <__libc_init_array+0x38>)
 80075a0:	4c0d      	ldr	r4, [pc, #52]	; (80075d8 <__libc_init_array+0x3c>)
 80075a2:	1b64      	subs	r4, r4, r5
 80075a4:	10a4      	asrs	r4, r4, #2
 80075a6:	2600      	movs	r6, #0
 80075a8:	42a6      	cmp	r6, r4
 80075aa:	d109      	bne.n	80075c0 <__libc_init_array+0x24>
 80075ac:	4d0b      	ldr	r5, [pc, #44]	; (80075dc <__libc_init_array+0x40>)
 80075ae:	4c0c      	ldr	r4, [pc, #48]	; (80075e0 <__libc_init_array+0x44>)
 80075b0:	f004 f8ea 	bl	800b788 <_init>
 80075b4:	1b64      	subs	r4, r4, r5
 80075b6:	10a4      	asrs	r4, r4, #2
 80075b8:	2600      	movs	r6, #0
 80075ba:	42a6      	cmp	r6, r4
 80075bc:	d105      	bne.n	80075ca <__libc_init_array+0x2e>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c4:	4798      	blx	r3
 80075c6:	3601      	adds	r6, #1
 80075c8:	e7ee      	b.n	80075a8 <__libc_init_array+0xc>
 80075ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ce:	4798      	blx	r3
 80075d0:	3601      	adds	r6, #1
 80075d2:	e7f2      	b.n	80075ba <__libc_init_array+0x1e>
 80075d4:	0800bccc 	.word	0x0800bccc
 80075d8:	0800bccc 	.word	0x0800bccc
 80075dc:	0800bccc 	.word	0x0800bccc
 80075e0:	0800bcd0 	.word	0x0800bcd0

080075e4 <memset>:
 80075e4:	4402      	add	r2, r0
 80075e6:	4603      	mov	r3, r0
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d100      	bne.n	80075ee <memset+0xa>
 80075ec:	4770      	bx	lr
 80075ee:	f803 1b01 	strb.w	r1, [r3], #1
 80075f2:	e7f9      	b.n	80075e8 <memset+0x4>

080075f4 <__cvt>:
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f6:	ed2d 8b02 	vpush	{d8}
 80075fa:	eeb0 8b40 	vmov.f64	d8, d0
 80075fe:	b085      	sub	sp, #20
 8007600:	4617      	mov	r7, r2
 8007602:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007604:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007606:	ee18 2a90 	vmov	r2, s17
 800760a:	f025 0520 	bic.w	r5, r5, #32
 800760e:	2a00      	cmp	r2, #0
 8007610:	bfb6      	itet	lt
 8007612:	222d      	movlt	r2, #45	; 0x2d
 8007614:	2200      	movge	r2, #0
 8007616:	eeb1 8b40 	vneglt.f64	d8, d0
 800761a:	2d46      	cmp	r5, #70	; 0x46
 800761c:	460c      	mov	r4, r1
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	d004      	beq.n	800762c <__cvt+0x38>
 8007622:	2d45      	cmp	r5, #69	; 0x45
 8007624:	d100      	bne.n	8007628 <__cvt+0x34>
 8007626:	3401      	adds	r4, #1
 8007628:	2102      	movs	r1, #2
 800762a:	e000      	b.n	800762e <__cvt+0x3a>
 800762c:	2103      	movs	r1, #3
 800762e:	ab03      	add	r3, sp, #12
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	ab02      	add	r3, sp, #8
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4622      	mov	r2, r4
 8007638:	4633      	mov	r3, r6
 800763a:	eeb0 0b48 	vmov.f64	d0, d8
 800763e:	f001 fac7 	bl	8008bd0 <_dtoa_r>
 8007642:	2d47      	cmp	r5, #71	; 0x47
 8007644:	d109      	bne.n	800765a <__cvt+0x66>
 8007646:	07fb      	lsls	r3, r7, #31
 8007648:	d407      	bmi.n	800765a <__cvt+0x66>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800764e:	1a1b      	subs	r3, r3, r0
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	b005      	add	sp, #20
 8007654:	ecbd 8b02 	vpop	{d8}
 8007658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765a:	2d46      	cmp	r5, #70	; 0x46
 800765c:	eb00 0204 	add.w	r2, r0, r4
 8007660:	d10c      	bne.n	800767c <__cvt+0x88>
 8007662:	7803      	ldrb	r3, [r0, #0]
 8007664:	2b30      	cmp	r3, #48	; 0x30
 8007666:	d107      	bne.n	8007678 <__cvt+0x84>
 8007668:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	bf1c      	itt	ne
 8007672:	f1c4 0401 	rsbne	r4, r4, #1
 8007676:	6034      	strne	r4, [r6, #0]
 8007678:	6833      	ldr	r3, [r6, #0]
 800767a:	441a      	add	r2, r3
 800767c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007684:	bf08      	it	eq
 8007686:	9203      	streq	r2, [sp, #12]
 8007688:	2130      	movs	r1, #48	; 0x30
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	4293      	cmp	r3, r2
 800768e:	d2dc      	bcs.n	800764a <__cvt+0x56>
 8007690:	1c5c      	adds	r4, r3, #1
 8007692:	9403      	str	r4, [sp, #12]
 8007694:	7019      	strb	r1, [r3, #0]
 8007696:	e7f8      	b.n	800768a <__cvt+0x96>

08007698 <__exponent>:
 8007698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800769a:	4603      	mov	r3, r0
 800769c:	2900      	cmp	r1, #0
 800769e:	bfb8      	it	lt
 80076a0:	4249      	neglt	r1, r1
 80076a2:	f803 2b02 	strb.w	r2, [r3], #2
 80076a6:	bfb4      	ite	lt
 80076a8:	222d      	movlt	r2, #45	; 0x2d
 80076aa:	222b      	movge	r2, #43	; 0x2b
 80076ac:	2909      	cmp	r1, #9
 80076ae:	7042      	strb	r2, [r0, #1]
 80076b0:	dd2a      	ble.n	8007708 <__exponent+0x70>
 80076b2:	f10d 0407 	add.w	r4, sp, #7
 80076b6:	46a4      	mov	ip, r4
 80076b8:	270a      	movs	r7, #10
 80076ba:	46a6      	mov	lr, r4
 80076bc:	460a      	mov	r2, r1
 80076be:	fb91 f6f7 	sdiv	r6, r1, r7
 80076c2:	fb07 1516 	mls	r5, r7, r6, r1
 80076c6:	3530      	adds	r5, #48	; 0x30
 80076c8:	2a63      	cmp	r2, #99	; 0x63
 80076ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80076ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076d2:	4631      	mov	r1, r6
 80076d4:	dcf1      	bgt.n	80076ba <__exponent+0x22>
 80076d6:	3130      	adds	r1, #48	; 0x30
 80076d8:	f1ae 0502 	sub.w	r5, lr, #2
 80076dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076e0:	1c44      	adds	r4, r0, #1
 80076e2:	4629      	mov	r1, r5
 80076e4:	4561      	cmp	r1, ip
 80076e6:	d30a      	bcc.n	80076fe <__exponent+0x66>
 80076e8:	f10d 0209 	add.w	r2, sp, #9
 80076ec:	eba2 020e 	sub.w	r2, r2, lr
 80076f0:	4565      	cmp	r5, ip
 80076f2:	bf88      	it	hi
 80076f4:	2200      	movhi	r2, #0
 80076f6:	4413      	add	r3, r2
 80076f8:	1a18      	subs	r0, r3, r0
 80076fa:	b003      	add	sp, #12
 80076fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007702:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007706:	e7ed      	b.n	80076e4 <__exponent+0x4c>
 8007708:	2330      	movs	r3, #48	; 0x30
 800770a:	3130      	adds	r1, #48	; 0x30
 800770c:	7083      	strb	r3, [r0, #2]
 800770e:	70c1      	strb	r1, [r0, #3]
 8007710:	1d03      	adds	r3, r0, #4
 8007712:	e7f1      	b.n	80076f8 <__exponent+0x60>
 8007714:	0000      	movs	r0, r0
	...

08007718 <_printf_float>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	b08b      	sub	sp, #44	; 0x2c
 800771e:	460c      	mov	r4, r1
 8007720:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007724:	4616      	mov	r6, r2
 8007726:	461f      	mov	r7, r3
 8007728:	4605      	mov	r5, r0
 800772a:	f002 fb43 	bl	8009db4 <_localeconv_r>
 800772e:	f8d0 b000 	ldr.w	fp, [r0]
 8007732:	4658      	mov	r0, fp
 8007734:	f7f8 fd84 	bl	8000240 <strlen>
 8007738:	2300      	movs	r3, #0
 800773a:	9308      	str	r3, [sp, #32]
 800773c:	f8d8 3000 	ldr.w	r3, [r8]
 8007740:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	3307      	adds	r3, #7
 8007748:	f023 0307 	bic.w	r3, r3, #7
 800774c:	f103 0108 	add.w	r1, r3, #8
 8007750:	f8c8 1000 	str.w	r1, [r8]
 8007754:	4682      	mov	sl, r0
 8007756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800775a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800775e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80079c0 <_printf_float+0x2a8>
 8007762:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007766:	eeb0 6bc0 	vabs.f64	d6, d0
 800776a:	eeb4 6b47 	vcmp.f64	d6, d7
 800776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007772:	dd24      	ble.n	80077be <_printf_float+0xa6>
 8007774:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777c:	d502      	bpl.n	8007784 <_printf_float+0x6c>
 800777e:	232d      	movs	r3, #45	; 0x2d
 8007780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007784:	4b90      	ldr	r3, [pc, #576]	; (80079c8 <_printf_float+0x2b0>)
 8007786:	4891      	ldr	r0, [pc, #580]	; (80079cc <_printf_float+0x2b4>)
 8007788:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800778c:	bf94      	ite	ls
 800778e:	4698      	movls	r8, r3
 8007790:	4680      	movhi	r8, r0
 8007792:	2303      	movs	r3, #3
 8007794:	6123      	str	r3, [r4, #16]
 8007796:	f022 0204 	bic.w	r2, r2, #4
 800779a:	2300      	movs	r3, #0
 800779c:	6022      	str	r2, [r4, #0]
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	9700      	str	r7, [sp, #0]
 80077a2:	4633      	mov	r3, r6
 80077a4:	aa09      	add	r2, sp, #36	; 0x24
 80077a6:	4621      	mov	r1, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 f9d3 	bl	8007b54 <_printf_common>
 80077ae:	3001      	adds	r0, #1
 80077b0:	f040 808a 	bne.w	80078c8 <_printf_float+0x1b0>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295
 80077b8:	b00b      	add	sp, #44	; 0x2c
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	eeb4 0b40 	vcmp.f64	d0, d0
 80077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c6:	d709      	bvc.n	80077dc <_printf_float+0xc4>
 80077c8:	ee10 3a90 	vmov	r3, s1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	bfbc      	itt	lt
 80077d0:	232d      	movlt	r3, #45	; 0x2d
 80077d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077d6:	487e      	ldr	r0, [pc, #504]	; (80079d0 <_printf_float+0x2b8>)
 80077d8:	4b7e      	ldr	r3, [pc, #504]	; (80079d4 <_printf_float+0x2bc>)
 80077da:	e7d5      	b.n	8007788 <_printf_float+0x70>
 80077dc:	6863      	ldr	r3, [r4, #4]
 80077de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80077e2:	9104      	str	r1, [sp, #16]
 80077e4:	1c59      	adds	r1, r3, #1
 80077e6:	d13c      	bne.n	8007862 <_printf_float+0x14a>
 80077e8:	2306      	movs	r3, #6
 80077ea:	6063      	str	r3, [r4, #4]
 80077ec:	2300      	movs	r3, #0
 80077ee:	9303      	str	r3, [sp, #12]
 80077f0:	ab08      	add	r3, sp, #32
 80077f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80077f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077fa:	ab07      	add	r3, sp, #28
 80077fc:	6861      	ldr	r1, [r4, #4]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	6022      	str	r2, [r4, #0]
 8007802:	f10d 031b 	add.w	r3, sp, #27
 8007806:	4628      	mov	r0, r5
 8007808:	f7ff fef4 	bl	80075f4 <__cvt>
 800780c:	9b04      	ldr	r3, [sp, #16]
 800780e:	9907      	ldr	r1, [sp, #28]
 8007810:	2b47      	cmp	r3, #71	; 0x47
 8007812:	4680      	mov	r8, r0
 8007814:	d108      	bne.n	8007828 <_printf_float+0x110>
 8007816:	1cc8      	adds	r0, r1, #3
 8007818:	db02      	blt.n	8007820 <_printf_float+0x108>
 800781a:	6863      	ldr	r3, [r4, #4]
 800781c:	4299      	cmp	r1, r3
 800781e:	dd41      	ble.n	80078a4 <_printf_float+0x18c>
 8007820:	f1a9 0902 	sub.w	r9, r9, #2
 8007824:	fa5f f989 	uxtb.w	r9, r9
 8007828:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800782c:	d820      	bhi.n	8007870 <_printf_float+0x158>
 800782e:	3901      	subs	r1, #1
 8007830:	464a      	mov	r2, r9
 8007832:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007836:	9107      	str	r1, [sp, #28]
 8007838:	f7ff ff2e 	bl	8007698 <__exponent>
 800783c:	9a08      	ldr	r2, [sp, #32]
 800783e:	9004      	str	r0, [sp, #16]
 8007840:	1813      	adds	r3, r2, r0
 8007842:	2a01      	cmp	r2, #1
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	dc02      	bgt.n	800784e <_printf_float+0x136>
 8007848:	6822      	ldr	r2, [r4, #0]
 800784a:	07d2      	lsls	r2, r2, #31
 800784c:	d501      	bpl.n	8007852 <_printf_float+0x13a>
 800784e:	3301      	adds	r3, #1
 8007850:	6123      	str	r3, [r4, #16]
 8007852:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0a2      	beq.n	80077a0 <_printf_float+0x88>
 800785a:	232d      	movs	r3, #45	; 0x2d
 800785c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007860:	e79e      	b.n	80077a0 <_printf_float+0x88>
 8007862:	9904      	ldr	r1, [sp, #16]
 8007864:	2947      	cmp	r1, #71	; 0x47
 8007866:	d1c1      	bne.n	80077ec <_printf_float+0xd4>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1bf      	bne.n	80077ec <_printf_float+0xd4>
 800786c:	2301      	movs	r3, #1
 800786e:	e7bc      	b.n	80077ea <_printf_float+0xd2>
 8007870:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007874:	d118      	bne.n	80078a8 <_printf_float+0x190>
 8007876:	2900      	cmp	r1, #0
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	dd0b      	ble.n	8007894 <_printf_float+0x17c>
 800787c:	6121      	str	r1, [r4, #16]
 800787e:	b913      	cbnz	r3, 8007886 <_printf_float+0x16e>
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	07d0      	lsls	r0, r2, #31
 8007884:	d502      	bpl.n	800788c <_printf_float+0x174>
 8007886:	3301      	adds	r3, #1
 8007888:	440b      	add	r3, r1
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	2300      	movs	r3, #0
 800788e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007890:	9304      	str	r3, [sp, #16]
 8007892:	e7de      	b.n	8007852 <_printf_float+0x13a>
 8007894:	b913      	cbnz	r3, 800789c <_printf_float+0x184>
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	07d2      	lsls	r2, r2, #31
 800789a:	d501      	bpl.n	80078a0 <_printf_float+0x188>
 800789c:	3302      	adds	r3, #2
 800789e:	e7f4      	b.n	800788a <_printf_float+0x172>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e7f2      	b.n	800788a <_printf_float+0x172>
 80078a4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	4299      	cmp	r1, r3
 80078ac:	db05      	blt.n	80078ba <_printf_float+0x1a2>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	6121      	str	r1, [r4, #16]
 80078b2:	07d8      	lsls	r0, r3, #31
 80078b4:	d5ea      	bpl.n	800788c <_printf_float+0x174>
 80078b6:	1c4b      	adds	r3, r1, #1
 80078b8:	e7e7      	b.n	800788a <_printf_float+0x172>
 80078ba:	2900      	cmp	r1, #0
 80078bc:	bfd4      	ite	le
 80078be:	f1c1 0202 	rsble	r2, r1, #2
 80078c2:	2201      	movgt	r2, #1
 80078c4:	4413      	add	r3, r2
 80078c6:	e7e0      	b.n	800788a <_printf_float+0x172>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	055a      	lsls	r2, r3, #21
 80078cc:	d407      	bmi.n	80078de <_printf_float+0x1c6>
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	4642      	mov	r2, r8
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	d12a      	bne.n	8007932 <_printf_float+0x21a>
 80078dc:	e76a      	b.n	80077b4 <_printf_float+0x9c>
 80078de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80078e2:	f240 80e2 	bls.w	8007aaa <_printf_float+0x392>
 80078e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80078ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	d133      	bne.n	800795c <_printf_float+0x244>
 80078f4:	4a38      	ldr	r2, [pc, #224]	; (80079d8 <_printf_float+0x2c0>)
 80078f6:	2301      	movs	r3, #1
 80078f8:	4631      	mov	r1, r6
 80078fa:	4628      	mov	r0, r5
 80078fc:	47b8      	blx	r7
 80078fe:	3001      	adds	r0, #1
 8007900:	f43f af58 	beq.w	80077b4 <_printf_float+0x9c>
 8007904:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007908:	429a      	cmp	r2, r3
 800790a:	db02      	blt.n	8007912 <_printf_float+0x1fa>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	07d8      	lsls	r0, r3, #31
 8007910:	d50f      	bpl.n	8007932 <_printf_float+0x21a>
 8007912:	4653      	mov	r3, sl
 8007914:	465a      	mov	r2, fp
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	f43f af49 	beq.w	80077b4 <_printf_float+0x9c>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	f104 091a 	add.w	r9, r4, #26
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	3b01      	subs	r3, #1
 800792e:	4543      	cmp	r3, r8
 8007930:	dc09      	bgt.n	8007946 <_printf_float+0x22e>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	079b      	lsls	r3, r3, #30
 8007936:	f100 8108 	bmi.w	8007b4a <_printf_float+0x432>
 800793a:	68e0      	ldr	r0, [r4, #12]
 800793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793e:	4298      	cmp	r0, r3
 8007940:	bfb8      	it	lt
 8007942:	4618      	movlt	r0, r3
 8007944:	e738      	b.n	80077b8 <_printf_float+0xa0>
 8007946:	2301      	movs	r3, #1
 8007948:	464a      	mov	r2, r9
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	f43f af2f 	beq.w	80077b4 <_printf_float+0x9c>
 8007956:	f108 0801 	add.w	r8, r8, #1
 800795a:	e7e6      	b.n	800792a <_printf_float+0x212>
 800795c:	9b07      	ldr	r3, [sp, #28]
 800795e:	2b00      	cmp	r3, #0
 8007960:	dc3c      	bgt.n	80079dc <_printf_float+0x2c4>
 8007962:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <_printf_float+0x2c0>)
 8007964:	2301      	movs	r3, #1
 8007966:	4631      	mov	r1, r6
 8007968:	4628      	mov	r0, r5
 800796a:	47b8      	blx	r7
 800796c:	3001      	adds	r0, #1
 800796e:	f43f af21 	beq.w	80077b4 <_printf_float+0x9c>
 8007972:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007976:	4313      	orrs	r3, r2
 8007978:	d102      	bne.n	8007980 <_printf_float+0x268>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	07d9      	lsls	r1, r3, #31
 800797e:	d5d8      	bpl.n	8007932 <_printf_float+0x21a>
 8007980:	4653      	mov	r3, sl
 8007982:	465a      	mov	r2, fp
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	f43f af12 	beq.w	80077b4 <_printf_float+0x9c>
 8007990:	f04f 0900 	mov.w	r9, #0
 8007994:	f104 0a1a 	add.w	sl, r4, #26
 8007998:	9b07      	ldr	r3, [sp, #28]
 800799a:	425b      	negs	r3, r3
 800799c:	454b      	cmp	r3, r9
 800799e:	dc01      	bgt.n	80079a4 <_printf_float+0x28c>
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	e795      	b.n	80078d0 <_printf_float+0x1b8>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4652      	mov	r2, sl
 80079a8:	4631      	mov	r1, r6
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b8      	blx	r7
 80079ae:	3001      	adds	r0, #1
 80079b0:	f43f af00 	beq.w	80077b4 <_printf_float+0x9c>
 80079b4:	f109 0901 	add.w	r9, r9, #1
 80079b8:	e7ee      	b.n	8007998 <_printf_float+0x280>
 80079ba:	bf00      	nop
 80079bc:	f3af 8000 	nop.w
 80079c0:	ffffffff 	.word	0xffffffff
 80079c4:	7fefffff 	.word	0x7fefffff
 80079c8:	0800b818 	.word	0x0800b818
 80079cc:	0800b81c 	.word	0x0800b81c
 80079d0:	0800b824 	.word	0x0800b824
 80079d4:	0800b820 	.word	0x0800b820
 80079d8:	0800b828 	.word	0x0800b828
 80079dc:	9a08      	ldr	r2, [sp, #32]
 80079de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079e0:	429a      	cmp	r2, r3
 80079e2:	bfa8      	it	ge
 80079e4:	461a      	movge	r2, r3
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	4691      	mov	r9, r2
 80079ea:	dc38      	bgt.n	8007a5e <_printf_float+0x346>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079f4:	f104 021a 	add.w	r2, r4, #26
 80079f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079fa:	9905      	ldr	r1, [sp, #20]
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	eba3 0309 	sub.w	r3, r3, r9
 8007a02:	428b      	cmp	r3, r1
 8007a04:	dc33      	bgt.n	8007a6e <_printf_float+0x356>
 8007a06:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	db3c      	blt.n	8007a88 <_printf_float+0x370>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	07da      	lsls	r2, r3, #31
 8007a12:	d439      	bmi.n	8007a88 <_printf_float+0x370>
 8007a14:	9a08      	ldr	r2, [sp, #32]
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	9907      	ldr	r1, [sp, #28]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	eba2 0901 	sub.w	r9, r2, r1
 8007a20:	4599      	cmp	r9, r3
 8007a22:	bfa8      	it	ge
 8007a24:	4699      	movge	r9, r3
 8007a26:	f1b9 0f00 	cmp.w	r9, #0
 8007a2a:	dc35      	bgt.n	8007a98 <_printf_float+0x380>
 8007a2c:	f04f 0800 	mov.w	r8, #0
 8007a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a34:	f104 0a1a 	add.w	sl, r4, #26
 8007a38:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	eba3 0309 	sub.w	r3, r3, r9
 8007a42:	4543      	cmp	r3, r8
 8007a44:	f77f af75 	ble.w	8007932 <_printf_float+0x21a>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	f43f aeae 	beq.w	80077b4 <_printf_float+0x9c>
 8007a58:	f108 0801 	add.w	r8, r8, #1
 8007a5c:	e7ec      	b.n	8007a38 <_printf_float+0x320>
 8007a5e:	4613      	mov	r3, r2
 8007a60:	4631      	mov	r1, r6
 8007a62:	4642      	mov	r2, r8
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b8      	blx	r7
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1bf      	bne.n	80079ec <_printf_float+0x2d4>
 8007a6c:	e6a2      	b.n	80077b4 <_printf_float+0x9c>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	9204      	str	r2, [sp, #16]
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f ae9b 	beq.w	80077b4 <_printf_float+0x9c>
 8007a7e:	9b05      	ldr	r3, [sp, #20]
 8007a80:	9a04      	ldr	r2, [sp, #16]
 8007a82:	3301      	adds	r3, #1
 8007a84:	9305      	str	r3, [sp, #20]
 8007a86:	e7b7      	b.n	80079f8 <_printf_float+0x2e0>
 8007a88:	4653      	mov	r3, sl
 8007a8a:	465a      	mov	r2, fp
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	d1be      	bne.n	8007a14 <_printf_float+0x2fc>
 8007a96:	e68d      	b.n	80077b4 <_printf_float+0x9c>
 8007a98:	9a04      	ldr	r2, [sp, #16]
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	4442      	add	r2, r8
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d1c1      	bne.n	8007a2c <_printf_float+0x314>
 8007aa8:	e684      	b.n	80077b4 <_printf_float+0x9c>
 8007aaa:	9a08      	ldr	r2, [sp, #32]
 8007aac:	2a01      	cmp	r2, #1
 8007aae:	dc01      	bgt.n	8007ab4 <_printf_float+0x39c>
 8007ab0:	07db      	lsls	r3, r3, #31
 8007ab2:	d537      	bpl.n	8007b24 <_printf_float+0x40c>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f ae78 	beq.w	80077b4 <_printf_float+0x9c>
 8007ac4:	4653      	mov	r3, sl
 8007ac6:	465a      	mov	r2, fp
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f ae70 	beq.w	80077b4 <_printf_float+0x9c>
 8007ad4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007ad8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae0:	d01b      	beq.n	8007b1a <_printf_float+0x402>
 8007ae2:	9b08      	ldr	r3, [sp, #32]
 8007ae4:	f108 0201 	add.w	r2, r8, #1
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	d10e      	bne.n	8007b12 <_printf_float+0x3fa>
 8007af4:	e65e      	b.n	80077b4 <_printf_float+0x9c>
 8007af6:	2301      	movs	r3, #1
 8007af8:	464a      	mov	r2, r9
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	f43f ae57 	beq.w	80077b4 <_printf_float+0x9c>
 8007b06:	f108 0801 	add.w	r8, r8, #1
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	4543      	cmp	r3, r8
 8007b10:	dcf1      	bgt.n	8007af6 <_printf_float+0x3de>
 8007b12:	9b04      	ldr	r3, [sp, #16]
 8007b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b18:	e6db      	b.n	80078d2 <_printf_float+0x1ba>
 8007b1a:	f04f 0800 	mov.w	r8, #0
 8007b1e:	f104 091a 	add.w	r9, r4, #26
 8007b22:	e7f2      	b.n	8007b0a <_printf_float+0x3f2>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4642      	mov	r2, r8
 8007b28:	e7df      	b.n	8007aea <_printf_float+0x3d2>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	464a      	mov	r2, r9
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b8      	blx	r7
 8007b34:	3001      	adds	r0, #1
 8007b36:	f43f ae3d 	beq.w	80077b4 <_printf_float+0x9c>
 8007b3a:	f108 0801 	add.w	r8, r8, #1
 8007b3e:	68e3      	ldr	r3, [r4, #12]
 8007b40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b42:	1a5b      	subs	r3, r3, r1
 8007b44:	4543      	cmp	r3, r8
 8007b46:	dcf0      	bgt.n	8007b2a <_printf_float+0x412>
 8007b48:	e6f7      	b.n	800793a <_printf_float+0x222>
 8007b4a:	f04f 0800 	mov.w	r8, #0
 8007b4e:	f104 0919 	add.w	r9, r4, #25
 8007b52:	e7f4      	b.n	8007b3e <_printf_float+0x426>

08007b54 <_printf_common>:
 8007b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b58:	4616      	mov	r6, r2
 8007b5a:	4699      	mov	r9, r3
 8007b5c:	688a      	ldr	r2, [r1, #8]
 8007b5e:	690b      	ldr	r3, [r1, #16]
 8007b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	bfb8      	it	lt
 8007b68:	4613      	movlt	r3, r2
 8007b6a:	6033      	str	r3, [r6, #0]
 8007b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b70:	4607      	mov	r7, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b10a      	cbz	r2, 8007b7a <_printf_common+0x26>
 8007b76:	3301      	adds	r3, #1
 8007b78:	6033      	str	r3, [r6, #0]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	0699      	lsls	r1, r3, #26
 8007b7e:	bf42      	ittt	mi
 8007b80:	6833      	ldrmi	r3, [r6, #0]
 8007b82:	3302      	addmi	r3, #2
 8007b84:	6033      	strmi	r3, [r6, #0]
 8007b86:	6825      	ldr	r5, [r4, #0]
 8007b88:	f015 0506 	ands.w	r5, r5, #6
 8007b8c:	d106      	bne.n	8007b9c <_printf_common+0x48>
 8007b8e:	f104 0a19 	add.w	sl, r4, #25
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	6832      	ldr	r2, [r6, #0]
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	dc26      	bgt.n	8007bea <_printf_common+0x96>
 8007b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba0:	1e13      	subs	r3, r2, #0
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	bf18      	it	ne
 8007ba6:	2301      	movne	r3, #1
 8007ba8:	0692      	lsls	r2, r2, #26
 8007baa:	d42b      	bmi.n	8007c04 <_printf_common+0xb0>
 8007bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	47c0      	blx	r8
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d01e      	beq.n	8007bf8 <_printf_common+0xa4>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	68e5      	ldr	r5, [r4, #12]
 8007bbe:	6832      	ldr	r2, [r6, #0]
 8007bc0:	f003 0306 	and.w	r3, r3, #6
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	bf08      	it	eq
 8007bc8:	1aad      	subeq	r5, r5, r2
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	6922      	ldr	r2, [r4, #16]
 8007bce:	bf0c      	ite	eq
 8007bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd4:	2500      	movne	r5, #0
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	bfc4      	itt	gt
 8007bda:	1a9b      	subgt	r3, r3, r2
 8007bdc:	18ed      	addgt	r5, r5, r3
 8007bde:	2600      	movs	r6, #0
 8007be0:	341a      	adds	r4, #26
 8007be2:	42b5      	cmp	r5, r6
 8007be4:	d11a      	bne.n	8007c1c <_printf_common+0xc8>
 8007be6:	2000      	movs	r0, #0
 8007be8:	e008      	b.n	8007bfc <_printf_common+0xa8>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4652      	mov	r2, sl
 8007bee:	4649      	mov	r1, r9
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	47c0      	blx	r8
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d103      	bne.n	8007c00 <_printf_common+0xac>
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c00:	3501      	adds	r5, #1
 8007c02:	e7c6      	b.n	8007b92 <_printf_common+0x3e>
 8007c04:	18e1      	adds	r1, r4, r3
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	2030      	movs	r0, #48	; 0x30
 8007c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c0e:	4422      	add	r2, r4
 8007c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c18:	3302      	adds	r3, #2
 8007c1a:	e7c7      	b.n	8007bac <_printf_common+0x58>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4649      	mov	r1, r9
 8007c22:	4638      	mov	r0, r7
 8007c24:	47c0      	blx	r8
 8007c26:	3001      	adds	r0, #1
 8007c28:	d0e6      	beq.n	8007bf8 <_printf_common+0xa4>
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	e7d9      	b.n	8007be2 <_printf_common+0x8e>
	...

08007c30 <_printf_i>:
 8007c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	460c      	mov	r4, r1
 8007c36:	4691      	mov	r9, r2
 8007c38:	7e27      	ldrb	r7, [r4, #24]
 8007c3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c3c:	2f78      	cmp	r7, #120	; 0x78
 8007c3e:	4680      	mov	r8, r0
 8007c40:	469a      	mov	sl, r3
 8007c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c46:	d807      	bhi.n	8007c58 <_printf_i+0x28>
 8007c48:	2f62      	cmp	r7, #98	; 0x62
 8007c4a:	d80a      	bhi.n	8007c62 <_printf_i+0x32>
 8007c4c:	2f00      	cmp	r7, #0
 8007c4e:	f000 80d8 	beq.w	8007e02 <_printf_i+0x1d2>
 8007c52:	2f58      	cmp	r7, #88	; 0x58
 8007c54:	f000 80a3 	beq.w	8007d9e <_printf_i+0x16e>
 8007c58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c60:	e03a      	b.n	8007cd8 <_printf_i+0xa8>
 8007c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c66:	2b15      	cmp	r3, #21
 8007c68:	d8f6      	bhi.n	8007c58 <_printf_i+0x28>
 8007c6a:	a001      	add	r0, pc, #4	; (adr r0, 8007c70 <_printf_i+0x40>)
 8007c6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c70:	08007cc9 	.word	0x08007cc9
 8007c74:	08007cdd 	.word	0x08007cdd
 8007c78:	08007c59 	.word	0x08007c59
 8007c7c:	08007c59 	.word	0x08007c59
 8007c80:	08007c59 	.word	0x08007c59
 8007c84:	08007c59 	.word	0x08007c59
 8007c88:	08007cdd 	.word	0x08007cdd
 8007c8c:	08007c59 	.word	0x08007c59
 8007c90:	08007c59 	.word	0x08007c59
 8007c94:	08007c59 	.word	0x08007c59
 8007c98:	08007c59 	.word	0x08007c59
 8007c9c:	08007de9 	.word	0x08007de9
 8007ca0:	08007d0d 	.word	0x08007d0d
 8007ca4:	08007dcb 	.word	0x08007dcb
 8007ca8:	08007c59 	.word	0x08007c59
 8007cac:	08007c59 	.word	0x08007c59
 8007cb0:	08007e0b 	.word	0x08007e0b
 8007cb4:	08007c59 	.word	0x08007c59
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007c59 	.word	0x08007c59
 8007cc0:	08007c59 	.word	0x08007c59
 8007cc4:	08007dd3 	.word	0x08007dd3
 8007cc8:	680b      	ldr	r3, [r1, #0]
 8007cca:	1d1a      	adds	r2, r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	600a      	str	r2, [r1, #0]
 8007cd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0a3      	b.n	8007e24 <_printf_i+0x1f4>
 8007cdc:	6825      	ldr	r5, [r4, #0]
 8007cde:	6808      	ldr	r0, [r1, #0]
 8007ce0:	062e      	lsls	r6, r5, #24
 8007ce2:	f100 0304 	add.w	r3, r0, #4
 8007ce6:	d50a      	bpl.n	8007cfe <_printf_i+0xce>
 8007ce8:	6805      	ldr	r5, [r0, #0]
 8007cea:	600b      	str	r3, [r1, #0]
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	da03      	bge.n	8007cf8 <_printf_i+0xc8>
 8007cf0:	232d      	movs	r3, #45	; 0x2d
 8007cf2:	426d      	negs	r5, r5
 8007cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf8:	485e      	ldr	r0, [pc, #376]	; (8007e74 <_printf_i+0x244>)
 8007cfa:	230a      	movs	r3, #10
 8007cfc:	e019      	b.n	8007d32 <_printf_i+0x102>
 8007cfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d02:	6805      	ldr	r5, [r0, #0]
 8007d04:	600b      	str	r3, [r1, #0]
 8007d06:	bf18      	it	ne
 8007d08:	b22d      	sxthne	r5, r5
 8007d0a:	e7ef      	b.n	8007cec <_printf_i+0xbc>
 8007d0c:	680b      	ldr	r3, [r1, #0]
 8007d0e:	6825      	ldr	r5, [r4, #0]
 8007d10:	1d18      	adds	r0, r3, #4
 8007d12:	6008      	str	r0, [r1, #0]
 8007d14:	0628      	lsls	r0, r5, #24
 8007d16:	d501      	bpl.n	8007d1c <_printf_i+0xec>
 8007d18:	681d      	ldr	r5, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <_printf_i+0xf2>
 8007d1c:	0669      	lsls	r1, r5, #25
 8007d1e:	d5fb      	bpl.n	8007d18 <_printf_i+0xe8>
 8007d20:	881d      	ldrh	r5, [r3, #0]
 8007d22:	4854      	ldr	r0, [pc, #336]	; (8007e74 <_printf_i+0x244>)
 8007d24:	2f6f      	cmp	r7, #111	; 0x6f
 8007d26:	bf0c      	ite	eq
 8007d28:	2308      	moveq	r3, #8
 8007d2a:	230a      	movne	r3, #10
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d32:	6866      	ldr	r6, [r4, #4]
 8007d34:	60a6      	str	r6, [r4, #8]
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	bfa2      	ittt	ge
 8007d3a:	6821      	ldrge	r1, [r4, #0]
 8007d3c:	f021 0104 	bicge.w	r1, r1, #4
 8007d40:	6021      	strge	r1, [r4, #0]
 8007d42:	b90d      	cbnz	r5, 8007d48 <_printf_i+0x118>
 8007d44:	2e00      	cmp	r6, #0
 8007d46:	d04d      	beq.n	8007de4 <_printf_i+0x1b4>
 8007d48:	4616      	mov	r6, r2
 8007d4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d4e:	fb03 5711 	mls	r7, r3, r1, r5
 8007d52:	5dc7      	ldrb	r7, [r0, r7]
 8007d54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d58:	462f      	mov	r7, r5
 8007d5a:	42bb      	cmp	r3, r7
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	d9f4      	bls.n	8007d4a <_printf_i+0x11a>
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d10b      	bne.n	8007d7c <_printf_i+0x14c>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	07df      	lsls	r7, r3, #31
 8007d68:	d508      	bpl.n	8007d7c <_printf_i+0x14c>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6861      	ldr	r1, [r4, #4]
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	bfde      	ittt	le
 8007d72:	2330      	movle	r3, #48	; 0x30
 8007d74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d7c:	1b92      	subs	r2, r2, r6
 8007d7e:	6122      	str	r2, [r4, #16]
 8007d80:	f8cd a000 	str.w	sl, [sp]
 8007d84:	464b      	mov	r3, r9
 8007d86:	aa03      	add	r2, sp, #12
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f7ff fee2 	bl	8007b54 <_printf_common>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d14c      	bne.n	8007e2e <_printf_i+0x1fe>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	b004      	add	sp, #16
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	4835      	ldr	r0, [pc, #212]	; (8007e74 <_printf_i+0x244>)
 8007da0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	680e      	ldr	r6, [r1, #0]
 8007da8:	061f      	lsls	r7, r3, #24
 8007daa:	f856 5b04 	ldr.w	r5, [r6], #4
 8007dae:	600e      	str	r6, [r1, #0]
 8007db0:	d514      	bpl.n	8007ddc <_printf_i+0x1ac>
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	bf44      	itt	mi
 8007db6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dba:	6023      	strmi	r3, [r4, #0]
 8007dbc:	b91d      	cbnz	r5, 8007dc6 <_printf_i+0x196>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	f023 0320 	bic.w	r3, r3, #32
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	2310      	movs	r3, #16
 8007dc8:	e7b0      	b.n	8007d2c <_printf_i+0xfc>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	f043 0320 	orr.w	r3, r3, #32
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	2378      	movs	r3, #120	; 0x78
 8007dd4:	4828      	ldr	r0, [pc, #160]	; (8007e78 <_printf_i+0x248>)
 8007dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dda:	e7e3      	b.n	8007da4 <_printf_i+0x174>
 8007ddc:	065e      	lsls	r6, r3, #25
 8007dde:	bf48      	it	mi
 8007de0:	b2ad      	uxthmi	r5, r5
 8007de2:	e7e6      	b.n	8007db2 <_printf_i+0x182>
 8007de4:	4616      	mov	r6, r2
 8007de6:	e7bb      	b.n	8007d60 <_printf_i+0x130>
 8007de8:	680b      	ldr	r3, [r1, #0]
 8007dea:	6826      	ldr	r6, [r4, #0]
 8007dec:	6960      	ldr	r0, [r4, #20]
 8007dee:	1d1d      	adds	r5, r3, #4
 8007df0:	600d      	str	r5, [r1, #0]
 8007df2:	0635      	lsls	r5, r6, #24
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	d501      	bpl.n	8007dfc <_printf_i+0x1cc>
 8007df8:	6018      	str	r0, [r3, #0]
 8007dfa:	e002      	b.n	8007e02 <_printf_i+0x1d2>
 8007dfc:	0671      	lsls	r1, r6, #25
 8007dfe:	d5fb      	bpl.n	8007df8 <_printf_i+0x1c8>
 8007e00:	8018      	strh	r0, [r3, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	4616      	mov	r6, r2
 8007e08:	e7ba      	b.n	8007d80 <_printf_i+0x150>
 8007e0a:	680b      	ldr	r3, [r1, #0]
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	600a      	str	r2, [r1, #0]
 8007e10:	681e      	ldr	r6, [r3, #0]
 8007e12:	6862      	ldr	r2, [r4, #4]
 8007e14:	2100      	movs	r1, #0
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7f8 fa1a 	bl	8000250 <memchr>
 8007e1c:	b108      	cbz	r0, 8007e22 <_printf_i+0x1f2>
 8007e1e:	1b80      	subs	r0, r0, r6
 8007e20:	6060      	str	r0, [r4, #4]
 8007e22:	6863      	ldr	r3, [r4, #4]
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	2300      	movs	r3, #0
 8007e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2c:	e7a8      	b.n	8007d80 <_printf_i+0x150>
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	4632      	mov	r2, r6
 8007e32:	4649      	mov	r1, r9
 8007e34:	4640      	mov	r0, r8
 8007e36:	47d0      	blx	sl
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d0ab      	beq.n	8007d94 <_printf_i+0x164>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	079b      	lsls	r3, r3, #30
 8007e40:	d413      	bmi.n	8007e6a <_printf_i+0x23a>
 8007e42:	68e0      	ldr	r0, [r4, #12]
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	4298      	cmp	r0, r3
 8007e48:	bfb8      	it	lt
 8007e4a:	4618      	movlt	r0, r3
 8007e4c:	e7a4      	b.n	8007d98 <_printf_i+0x168>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4632      	mov	r2, r6
 8007e52:	4649      	mov	r1, r9
 8007e54:	4640      	mov	r0, r8
 8007e56:	47d0      	blx	sl
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d09b      	beq.n	8007d94 <_printf_i+0x164>
 8007e5c:	3501      	adds	r5, #1
 8007e5e:	68e3      	ldr	r3, [r4, #12]
 8007e60:	9903      	ldr	r1, [sp, #12]
 8007e62:	1a5b      	subs	r3, r3, r1
 8007e64:	42ab      	cmp	r3, r5
 8007e66:	dcf2      	bgt.n	8007e4e <_printf_i+0x21e>
 8007e68:	e7eb      	b.n	8007e42 <_printf_i+0x212>
 8007e6a:	2500      	movs	r5, #0
 8007e6c:	f104 0619 	add.w	r6, r4, #25
 8007e70:	e7f5      	b.n	8007e5e <_printf_i+0x22e>
 8007e72:	bf00      	nop
 8007e74:	0800b82a 	.word	0x0800b82a
 8007e78:	0800b83b 	.word	0x0800b83b

08007e7c <siprintf>:
 8007e7c:	b40e      	push	{r1, r2, r3}
 8007e7e:	b500      	push	{lr}
 8007e80:	b09c      	sub	sp, #112	; 0x70
 8007e82:	ab1d      	add	r3, sp, #116	; 0x74
 8007e84:	9002      	str	r0, [sp, #8]
 8007e86:	9006      	str	r0, [sp, #24]
 8007e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e8c:	4809      	ldr	r0, [pc, #36]	; (8007eb4 <siprintf+0x38>)
 8007e8e:	9107      	str	r1, [sp, #28]
 8007e90:	9104      	str	r1, [sp, #16]
 8007e92:	4909      	ldr	r1, [pc, #36]	; (8007eb8 <siprintf+0x3c>)
 8007e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e98:	9105      	str	r1, [sp, #20]
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	a902      	add	r1, sp, #8
 8007ea0:	f002 fd86 	bl	800a9b0 <_svfiprintf_r>
 8007ea4:	9b02      	ldr	r3, [sp, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	b01c      	add	sp, #112	; 0x70
 8007eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb0:	b003      	add	sp, #12
 8007eb2:	4770      	bx	lr
 8007eb4:	2000000c 	.word	0x2000000c
 8007eb8:	ffff0208 	.word	0xffff0208

08007ebc <sulp>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	4616      	mov	r6, r2
 8007ec4:	ec45 4b10 	vmov	d0, r4, r5
 8007ec8:	f002 fb0c 	bl	800a4e4 <__ulp>
 8007ecc:	b17e      	cbz	r6, 8007eee <sulp+0x32>
 8007ece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dd09      	ble.n	8007eee <sulp+0x32>
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007ee6:	ec41 0b17 	vmov	d7, r0, r1
 8007eea:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007eee:	bd70      	pop	{r4, r5, r6, pc}

08007ef0 <_strtod_l>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	ed2d 8b0c 	vpush	{d8-d13}
 8007ef8:	b09d      	sub	sp, #116	; 0x74
 8007efa:	461f      	mov	r7, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	9318      	str	r3, [sp, #96]	; 0x60
 8007f00:	4ba6      	ldr	r3, [pc, #664]	; (800819c <_strtod_l+0x2ac>)
 8007f02:	9213      	str	r2, [sp, #76]	; 0x4c
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	9308      	str	r3, [sp, #32]
 8007f08:	4604      	mov	r4, r0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	468a      	mov	sl, r1
 8007f0e:	f7f8 f997 	bl	8000240 <strlen>
 8007f12:	f04f 0800 	mov.w	r8, #0
 8007f16:	4605      	mov	r5, r0
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	2a2b      	cmp	r2, #43	; 0x2b
 8007f26:	d04d      	beq.n	8007fc4 <_strtod_l+0xd4>
 8007f28:	d83a      	bhi.n	8007fa0 <_strtod_l+0xb0>
 8007f2a:	2a0d      	cmp	r2, #13
 8007f2c:	d833      	bhi.n	8007f96 <_strtod_l+0xa6>
 8007f2e:	2a08      	cmp	r2, #8
 8007f30:	d833      	bhi.n	8007f9a <_strtod_l+0xaa>
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	d03d      	beq.n	8007fb2 <_strtod_l+0xc2>
 8007f36:	2300      	movs	r3, #0
 8007f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007f3c:	7833      	ldrb	r3, [r6, #0]
 8007f3e:	2b30      	cmp	r3, #48	; 0x30
 8007f40:	f040 80b6 	bne.w	80080b0 <_strtod_l+0x1c0>
 8007f44:	7873      	ldrb	r3, [r6, #1]
 8007f46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f4a:	2b58      	cmp	r3, #88	; 0x58
 8007f4c:	d16d      	bne.n	800802a <_strtod_l+0x13a>
 8007f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	ab18      	add	r3, sp, #96	; 0x60
 8007f54:	9702      	str	r7, [sp, #8]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4a91      	ldr	r2, [pc, #580]	; (80081a0 <_strtod_l+0x2b0>)
 8007f5a:	ab19      	add	r3, sp, #100	; 0x64
 8007f5c:	a917      	add	r1, sp, #92	; 0x5c
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f001 fc20 	bl	80097a4 <__gethex>
 8007f64:	f010 0507 	ands.w	r5, r0, #7
 8007f68:	4607      	mov	r7, r0
 8007f6a:	d005      	beq.n	8007f78 <_strtod_l+0x88>
 8007f6c:	2d06      	cmp	r5, #6
 8007f6e:	d12b      	bne.n	8007fc8 <_strtod_l+0xd8>
 8007f70:	3601      	adds	r6, #1
 8007f72:	2300      	movs	r3, #0
 8007f74:	9617      	str	r6, [sp, #92]	; 0x5c
 8007f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 856e 	bne.w	8008a5c <_strtod_l+0xb6c>
 8007f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f82:	b1e3      	cbz	r3, 8007fbe <_strtod_l+0xce>
 8007f84:	ec49 8b17 	vmov	d7, r8, r9
 8007f88:	eeb1 0b47 	vneg.f64	d0, d7
 8007f8c:	b01d      	add	sp, #116	; 0x74
 8007f8e:	ecbd 8b0c 	vpop	{d8-d13}
 8007f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f96:	2a20      	cmp	r2, #32
 8007f98:	d1cd      	bne.n	8007f36 <_strtod_l+0x46>
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f9e:	e7bf      	b.n	8007f20 <_strtod_l+0x30>
 8007fa0:	2a2d      	cmp	r2, #45	; 0x2d
 8007fa2:	d1c8      	bne.n	8007f36 <_strtod_l+0x46>
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1c3      	bne.n	8007f3a <_strtod_l+0x4a>
 8007fb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fb4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 854d 	bne.w	8008a58 <_strtod_l+0xb68>
 8007fbe:	ec49 8b10 	vmov	d0, r8, r9
 8007fc2:	e7e3      	b.n	8007f8c <_strtod_l+0x9c>
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	e7ee      	b.n	8007fa6 <_strtod_l+0xb6>
 8007fc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007fca:	b13a      	cbz	r2, 8007fdc <_strtod_l+0xec>
 8007fcc:	2135      	movs	r1, #53	; 0x35
 8007fce:	a81a      	add	r0, sp, #104	; 0x68
 8007fd0:	f002 fb94 	bl	800a6fc <__copybits>
 8007fd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f001 ff58 	bl	8009e8c <_Bfree>
 8007fdc:	3d01      	subs	r5, #1
 8007fde:	2d05      	cmp	r5, #5
 8007fe0:	d807      	bhi.n	8007ff2 <_strtod_l+0x102>
 8007fe2:	e8df f005 	tbb	[pc, r5]
 8007fe6:	0b0e      	.short	0x0b0e
 8007fe8:	030e1d18 	.word	0x030e1d18
 8007fec:	f04f 0900 	mov.w	r9, #0
 8007ff0:	46c8      	mov	r8, r9
 8007ff2:	073b      	lsls	r3, r7, #28
 8007ff4:	d5c0      	bpl.n	8007f78 <_strtod_l+0x88>
 8007ff6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007ffa:	e7bd      	b.n	8007f78 <_strtod_l+0x88>
 8007ffc:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8008000:	e7f7      	b.n	8007ff2 <_strtod_l+0x102>
 8008002:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8008006:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008008:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800800c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008010:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008014:	e7ed      	b.n	8007ff2 <_strtod_l+0x102>
 8008016:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80081a4 <_strtod_l+0x2b4>
 800801a:	f04f 0800 	mov.w	r8, #0
 800801e:	e7e8      	b.n	8007ff2 <_strtod_l+0x102>
 8008020:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008024:	f04f 38ff 	mov.w	r8, #4294967295
 8008028:	e7e3      	b.n	8007ff2 <_strtod_l+0x102>
 800802a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b30      	cmp	r3, #48	; 0x30
 8008034:	d0f9      	beq.n	800802a <_strtod_l+0x13a>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d09e      	beq.n	8007f78 <_strtod_l+0x88>
 800803a:	2301      	movs	r3, #1
 800803c:	9306      	str	r3, [sp, #24]
 800803e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008040:	930c      	str	r3, [sp, #48]	; 0x30
 8008042:	2300      	movs	r3, #0
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	930a      	str	r3, [sp, #40]	; 0x28
 8008048:	461e      	mov	r6, r3
 800804a:	220a      	movs	r2, #10
 800804c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800804e:	f890 b000 	ldrb.w	fp, [r0]
 8008052:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8008056:	b2d9      	uxtb	r1, r3
 8008058:	2909      	cmp	r1, #9
 800805a:	d92b      	bls.n	80080b4 <_strtod_l+0x1c4>
 800805c:	9908      	ldr	r1, [sp, #32]
 800805e:	462a      	mov	r2, r5
 8008060:	f002 fdbe 	bl	800abe0 <strncmp>
 8008064:	2800      	cmp	r0, #0
 8008066:	d035      	beq.n	80080d4 <_strtod_l+0x1e4>
 8008068:	2000      	movs	r0, #0
 800806a:	465a      	mov	r2, fp
 800806c:	4633      	mov	r3, r6
 800806e:	4683      	mov	fp, r0
 8008070:	4601      	mov	r1, r0
 8008072:	2a65      	cmp	r2, #101	; 0x65
 8008074:	d001      	beq.n	800807a <_strtod_l+0x18a>
 8008076:	2a45      	cmp	r2, #69	; 0x45
 8008078:	d118      	bne.n	80080ac <_strtod_l+0x1bc>
 800807a:	b91b      	cbnz	r3, 8008084 <_strtod_l+0x194>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	4303      	orrs	r3, r0
 8008080:	d097      	beq.n	8007fb2 <_strtod_l+0xc2>
 8008082:	2300      	movs	r3, #0
 8008084:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8008088:	f10a 0201 	add.w	r2, sl, #1
 800808c:	9217      	str	r2, [sp, #92]	; 0x5c
 800808e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008092:	2a2b      	cmp	r2, #43	; 0x2b
 8008094:	d077      	beq.n	8008186 <_strtod_l+0x296>
 8008096:	2a2d      	cmp	r2, #45	; 0x2d
 8008098:	d07d      	beq.n	8008196 <_strtod_l+0x2a6>
 800809a:	f04f 0e00 	mov.w	lr, #0
 800809e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80080a2:	2d09      	cmp	r5, #9
 80080a4:	f240 8084 	bls.w	80081b0 <_strtod_l+0x2c0>
 80080a8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80080ac:	2500      	movs	r5, #0
 80080ae:	e09f      	b.n	80081f0 <_strtod_l+0x300>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e7c3      	b.n	800803c <_strtod_l+0x14c>
 80080b4:	2e08      	cmp	r6, #8
 80080b6:	bfd5      	itete	le
 80080b8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80080ba:	9904      	ldrgt	r1, [sp, #16]
 80080bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80080c0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80080c4:	f100 0001 	add.w	r0, r0, #1
 80080c8:	bfd4      	ite	le
 80080ca:	930a      	strle	r3, [sp, #40]	; 0x28
 80080cc:	9304      	strgt	r3, [sp, #16]
 80080ce:	3601      	adds	r6, #1
 80080d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80080d2:	e7bb      	b.n	800804c <_strtod_l+0x15c>
 80080d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080d6:	195a      	adds	r2, r3, r5
 80080d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80080da:	5d5a      	ldrb	r2, [r3, r5]
 80080dc:	b3ae      	cbz	r6, 800814a <_strtod_l+0x25a>
 80080de:	4683      	mov	fp, r0
 80080e0:	4633      	mov	r3, r6
 80080e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80080e6:	2909      	cmp	r1, #9
 80080e8:	d912      	bls.n	8008110 <_strtod_l+0x220>
 80080ea:	2101      	movs	r1, #1
 80080ec:	e7c1      	b.n	8008072 <_strtod_l+0x182>
 80080ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	9217      	str	r2, [sp, #92]	; 0x5c
 80080f4:	785a      	ldrb	r2, [r3, #1]
 80080f6:	3001      	adds	r0, #1
 80080f8:	2a30      	cmp	r2, #48	; 0x30
 80080fa:	d0f8      	beq.n	80080ee <_strtod_l+0x1fe>
 80080fc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008100:	2b08      	cmp	r3, #8
 8008102:	f200 84b0 	bhi.w	8008a66 <_strtod_l+0xb76>
 8008106:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008108:	930c      	str	r3, [sp, #48]	; 0x30
 800810a:	4683      	mov	fp, r0
 800810c:	2000      	movs	r0, #0
 800810e:	4603      	mov	r3, r0
 8008110:	3a30      	subs	r2, #48	; 0x30
 8008112:	f100 0101 	add.w	r1, r0, #1
 8008116:	d012      	beq.n	800813e <_strtod_l+0x24e>
 8008118:	448b      	add	fp, r1
 800811a:	eb00 0c03 	add.w	ip, r0, r3
 800811e:	4619      	mov	r1, r3
 8008120:	250a      	movs	r5, #10
 8008122:	4561      	cmp	r1, ip
 8008124:	d113      	bne.n	800814e <_strtod_l+0x25e>
 8008126:	1819      	adds	r1, r3, r0
 8008128:	2908      	cmp	r1, #8
 800812a:	f103 0301 	add.w	r3, r3, #1
 800812e:	4403      	add	r3, r0
 8008130:	dc1d      	bgt.n	800816e <_strtod_l+0x27e>
 8008132:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008134:	210a      	movs	r1, #10
 8008136:	fb01 2200 	mla	r2, r1, r0, r2
 800813a:	920a      	str	r2, [sp, #40]	; 0x28
 800813c:	2100      	movs	r1, #0
 800813e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008140:	1c50      	adds	r0, r2, #1
 8008142:	9017      	str	r0, [sp, #92]	; 0x5c
 8008144:	7852      	ldrb	r2, [r2, #1]
 8008146:	4608      	mov	r0, r1
 8008148:	e7cb      	b.n	80080e2 <_strtod_l+0x1f2>
 800814a:	4630      	mov	r0, r6
 800814c:	e7d4      	b.n	80080f8 <_strtod_l+0x208>
 800814e:	2908      	cmp	r1, #8
 8008150:	dc04      	bgt.n	800815c <_strtod_l+0x26c>
 8008152:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008154:	436f      	muls	r7, r5
 8008156:	970a      	str	r7, [sp, #40]	; 0x28
 8008158:	3101      	adds	r1, #1
 800815a:	e7e2      	b.n	8008122 <_strtod_l+0x232>
 800815c:	f101 0e01 	add.w	lr, r1, #1
 8008160:	f1be 0f10 	cmp.w	lr, #16
 8008164:	bfde      	ittt	le
 8008166:	9f04      	ldrle	r7, [sp, #16]
 8008168:	436f      	mulle	r7, r5
 800816a:	9704      	strle	r7, [sp, #16]
 800816c:	e7f4      	b.n	8008158 <_strtod_l+0x268>
 800816e:	2b10      	cmp	r3, #16
 8008170:	bfdf      	itttt	le
 8008172:	9804      	ldrle	r0, [sp, #16]
 8008174:	210a      	movle	r1, #10
 8008176:	fb01 2200 	mlale	r2, r1, r0, r2
 800817a:	9204      	strle	r2, [sp, #16]
 800817c:	e7de      	b.n	800813c <_strtod_l+0x24c>
 800817e:	f04f 0b00 	mov.w	fp, #0
 8008182:	2101      	movs	r1, #1
 8008184:	e77a      	b.n	800807c <_strtod_l+0x18c>
 8008186:	f04f 0e00 	mov.w	lr, #0
 800818a:	f10a 0202 	add.w	r2, sl, #2
 800818e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008190:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008194:	e783      	b.n	800809e <_strtod_l+0x1ae>
 8008196:	f04f 0e01 	mov.w	lr, #1
 800819a:	e7f6      	b.n	800818a <_strtod_l+0x29a>
 800819c:	0800b9a0 	.word	0x0800b9a0
 80081a0:	0800b84c 	.word	0x0800b84c
 80081a4:	7ff00000 	.word	0x7ff00000
 80081a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081aa:	1c55      	adds	r5, r2, #1
 80081ac:	9517      	str	r5, [sp, #92]	; 0x5c
 80081ae:	7852      	ldrb	r2, [r2, #1]
 80081b0:	2a30      	cmp	r2, #48	; 0x30
 80081b2:	d0f9      	beq.n	80081a8 <_strtod_l+0x2b8>
 80081b4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80081b8:	2d08      	cmp	r5, #8
 80081ba:	f63f af77 	bhi.w	80080ac <_strtod_l+0x1bc>
 80081be:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80081c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081c4:	9208      	str	r2, [sp, #32]
 80081c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081c8:	1c55      	adds	r5, r2, #1
 80081ca:	9517      	str	r5, [sp, #92]	; 0x5c
 80081cc:	7852      	ldrb	r2, [r2, #1]
 80081ce:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80081d2:	2f09      	cmp	r7, #9
 80081d4:	d937      	bls.n	8008246 <_strtod_l+0x356>
 80081d6:	9f08      	ldr	r7, [sp, #32]
 80081d8:	1bed      	subs	r5, r5, r7
 80081da:	2d08      	cmp	r5, #8
 80081dc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80081e0:	dc02      	bgt.n	80081e8 <_strtod_l+0x2f8>
 80081e2:	4565      	cmp	r5, ip
 80081e4:	bfa8      	it	ge
 80081e6:	4665      	movge	r5, ip
 80081e8:	f1be 0f00 	cmp.w	lr, #0
 80081ec:	d000      	beq.n	80081f0 <_strtod_l+0x300>
 80081ee:	426d      	negs	r5, r5
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d14f      	bne.n	8008294 <_strtod_l+0x3a4>
 80081f4:	9b06      	ldr	r3, [sp, #24]
 80081f6:	4303      	orrs	r3, r0
 80081f8:	f47f aebe 	bne.w	8007f78 <_strtod_l+0x88>
 80081fc:	2900      	cmp	r1, #0
 80081fe:	f47f aed8 	bne.w	8007fb2 <_strtod_l+0xc2>
 8008202:	2a69      	cmp	r2, #105	; 0x69
 8008204:	d027      	beq.n	8008256 <_strtod_l+0x366>
 8008206:	dc24      	bgt.n	8008252 <_strtod_l+0x362>
 8008208:	2a49      	cmp	r2, #73	; 0x49
 800820a:	d024      	beq.n	8008256 <_strtod_l+0x366>
 800820c:	2a4e      	cmp	r2, #78	; 0x4e
 800820e:	f47f aed0 	bne.w	8007fb2 <_strtod_l+0xc2>
 8008212:	499b      	ldr	r1, [pc, #620]	; (8008480 <_strtod_l+0x590>)
 8008214:	a817      	add	r0, sp, #92	; 0x5c
 8008216:	f001 fd1d 	bl	8009c54 <__match>
 800821a:	2800      	cmp	r0, #0
 800821c:	f43f aec9 	beq.w	8007fb2 <_strtod_l+0xc2>
 8008220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b28      	cmp	r3, #40	; 0x28
 8008226:	d12d      	bne.n	8008284 <_strtod_l+0x394>
 8008228:	4996      	ldr	r1, [pc, #600]	; (8008484 <_strtod_l+0x594>)
 800822a:	aa1a      	add	r2, sp, #104	; 0x68
 800822c:	a817      	add	r0, sp, #92	; 0x5c
 800822e:	f001 fd25 	bl	8009c7c <__hexnan>
 8008232:	2805      	cmp	r0, #5
 8008234:	d126      	bne.n	8008284 <_strtod_l+0x394>
 8008236:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008238:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800823c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008240:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008244:	e698      	b.n	8007f78 <_strtod_l+0x88>
 8008246:	250a      	movs	r5, #10
 8008248:	fb05 250c 	mla	r5, r5, ip, r2
 800824c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008250:	e7b9      	b.n	80081c6 <_strtod_l+0x2d6>
 8008252:	2a6e      	cmp	r2, #110	; 0x6e
 8008254:	e7db      	b.n	800820e <_strtod_l+0x31e>
 8008256:	498c      	ldr	r1, [pc, #560]	; (8008488 <_strtod_l+0x598>)
 8008258:	a817      	add	r0, sp, #92	; 0x5c
 800825a:	f001 fcfb 	bl	8009c54 <__match>
 800825e:	2800      	cmp	r0, #0
 8008260:	f43f aea7 	beq.w	8007fb2 <_strtod_l+0xc2>
 8008264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008266:	4989      	ldr	r1, [pc, #548]	; (800848c <_strtod_l+0x59c>)
 8008268:	3b01      	subs	r3, #1
 800826a:	a817      	add	r0, sp, #92	; 0x5c
 800826c:	9317      	str	r3, [sp, #92]	; 0x5c
 800826e:	f001 fcf1 	bl	8009c54 <__match>
 8008272:	b910      	cbnz	r0, 800827a <_strtod_l+0x38a>
 8008274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008276:	3301      	adds	r3, #1
 8008278:	9317      	str	r3, [sp, #92]	; 0x5c
 800827a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80084a0 <_strtod_l+0x5b0>
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	e679      	b.n	8007f78 <_strtod_l+0x88>
 8008284:	4882      	ldr	r0, [pc, #520]	; (8008490 <_strtod_l+0x5a0>)
 8008286:	f002 fc93 	bl	800abb0 <nan>
 800828a:	ed8d 0b04 	vstr	d0, [sp, #16]
 800828e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008292:	e671      	b.n	8007f78 <_strtod_l+0x88>
 8008294:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8008298:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800829c:	eba5 020b 	sub.w	r2, r5, fp
 80082a0:	2e00      	cmp	r6, #0
 80082a2:	bf08      	it	eq
 80082a4:	461e      	moveq	r6, r3
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80082ac:	9206      	str	r2, [sp, #24]
 80082ae:	461a      	mov	r2, r3
 80082b0:	bfa8      	it	ge
 80082b2:	2210      	movge	r2, #16
 80082b4:	2b09      	cmp	r3, #9
 80082b6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80082ba:	dd0e      	ble.n	80082da <_strtod_l+0x3ea>
 80082bc:	4975      	ldr	r1, [pc, #468]	; (8008494 <_strtod_l+0x5a4>)
 80082be:	eddd 7a04 	vldr	s15, [sp, #16]
 80082c2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80082c6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80082ca:	ed9d 5b08 	vldr	d5, [sp, #32]
 80082ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80082d2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80082d6:	ec59 8b17 	vmov	r8, r9, d7
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	dc37      	bgt.n	800834e <_strtod_l+0x45e>
 80082de:	9906      	ldr	r1, [sp, #24]
 80082e0:	2900      	cmp	r1, #0
 80082e2:	f43f ae49 	beq.w	8007f78 <_strtod_l+0x88>
 80082e6:	dd23      	ble.n	8008330 <_strtod_l+0x440>
 80082e8:	2916      	cmp	r1, #22
 80082ea:	dc0b      	bgt.n	8008304 <_strtod_l+0x414>
 80082ec:	4b69      	ldr	r3, [pc, #420]	; (8008494 <_strtod_l+0x5a4>)
 80082ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80082f2:	ed93 7b00 	vldr	d7, [r3]
 80082f6:	ec49 8b16 	vmov	d6, r8, r9
 80082fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082fe:	ec59 8b17 	vmov	r8, r9, d7
 8008302:	e639      	b.n	8007f78 <_strtod_l+0x88>
 8008304:	9806      	ldr	r0, [sp, #24]
 8008306:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800830a:	4281      	cmp	r1, r0
 800830c:	db1f      	blt.n	800834e <_strtod_l+0x45e>
 800830e:	4a61      	ldr	r2, [pc, #388]	; (8008494 <_strtod_l+0x5a4>)
 8008310:	f1c3 030f 	rsb	r3, r3, #15
 8008314:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008318:	ed91 7b00 	vldr	d7, [r1]
 800831c:	ec49 8b16 	vmov	d6, r8, r9
 8008320:	1ac3      	subs	r3, r0, r3
 8008322:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800832a:	ed92 6b00 	vldr	d6, [r2]
 800832e:	e7e4      	b.n	80082fa <_strtod_l+0x40a>
 8008330:	9906      	ldr	r1, [sp, #24]
 8008332:	3116      	adds	r1, #22
 8008334:	db0b      	blt.n	800834e <_strtod_l+0x45e>
 8008336:	4b57      	ldr	r3, [pc, #348]	; (8008494 <_strtod_l+0x5a4>)
 8008338:	ebab 0505 	sub.w	r5, fp, r5
 800833c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008340:	ed95 7b00 	vldr	d7, [r5]
 8008344:	ec49 8b16 	vmov	d6, r8, r9
 8008348:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800834c:	e7d7      	b.n	80082fe <_strtod_l+0x40e>
 800834e:	9906      	ldr	r1, [sp, #24]
 8008350:	1a9a      	subs	r2, r3, r2
 8008352:	440a      	add	r2, r1
 8008354:	2a00      	cmp	r2, #0
 8008356:	dd74      	ble.n	8008442 <_strtod_l+0x552>
 8008358:	f012 000f 	ands.w	r0, r2, #15
 800835c:	d00a      	beq.n	8008374 <_strtod_l+0x484>
 800835e:	494d      	ldr	r1, [pc, #308]	; (8008494 <_strtod_l+0x5a4>)
 8008360:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008364:	ed91 7b00 	vldr	d7, [r1]
 8008368:	ec49 8b16 	vmov	d6, r8, r9
 800836c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008370:	ec59 8b17 	vmov	r8, r9, d7
 8008374:	f032 020f 	bics.w	r2, r2, #15
 8008378:	d04f      	beq.n	800841a <_strtod_l+0x52a>
 800837a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800837e:	dd22      	ble.n	80083c6 <_strtod_l+0x4d6>
 8008380:	2500      	movs	r5, #0
 8008382:	462e      	mov	r6, r5
 8008384:	950a      	str	r5, [sp, #40]	; 0x28
 8008386:	462f      	mov	r7, r5
 8008388:	2322      	movs	r3, #34	; 0x22
 800838a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80084a0 <_strtod_l+0x5b0>
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	f04f 0800 	mov.w	r8, #0
 8008394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	f43f adee 	beq.w	8007f78 <_strtod_l+0x88>
 800839c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800839e:	4620      	mov	r0, r4
 80083a0:	f001 fd74 	bl	8009e8c <_Bfree>
 80083a4:	4639      	mov	r1, r7
 80083a6:	4620      	mov	r0, r4
 80083a8:	f001 fd70 	bl	8009e8c <_Bfree>
 80083ac:	4631      	mov	r1, r6
 80083ae:	4620      	mov	r0, r4
 80083b0:	f001 fd6c 	bl	8009e8c <_Bfree>
 80083b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083b6:	4620      	mov	r0, r4
 80083b8:	f001 fd68 	bl	8009e8c <_Bfree>
 80083bc:	4629      	mov	r1, r5
 80083be:	4620      	mov	r0, r4
 80083c0:	f001 fd64 	bl	8009e8c <_Bfree>
 80083c4:	e5d8      	b.n	8007f78 <_strtod_l+0x88>
 80083c6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80083ca:	2000      	movs	r0, #0
 80083cc:	4f32      	ldr	r7, [pc, #200]	; (8008498 <_strtod_l+0x5a8>)
 80083ce:	1112      	asrs	r2, r2, #4
 80083d0:	4601      	mov	r1, r0
 80083d2:	2a01      	cmp	r2, #1
 80083d4:	dc24      	bgt.n	8008420 <_strtod_l+0x530>
 80083d6:	b108      	cbz	r0, 80083dc <_strtod_l+0x4ec>
 80083d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80083dc:	4a2e      	ldr	r2, [pc, #184]	; (8008498 <_strtod_l+0x5a8>)
 80083de:	482f      	ldr	r0, [pc, #188]	; (800849c <_strtod_l+0x5ac>)
 80083e0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80083e4:	ed91 7b00 	vldr	d7, [r1]
 80083e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80083ec:	ec49 8b16 	vmov	d6, r8, r9
 80083f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80083f8:	9905      	ldr	r1, [sp, #20]
 80083fa:	4a29      	ldr	r2, [pc, #164]	; (80084a0 <_strtod_l+0x5b0>)
 80083fc:	400a      	ands	r2, r1
 80083fe:	4282      	cmp	r2, r0
 8008400:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008404:	d8bc      	bhi.n	8008380 <_strtod_l+0x490>
 8008406:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800840a:	4282      	cmp	r2, r0
 800840c:	bf86      	itte	hi
 800840e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80084a4 <_strtod_l+0x5b4>
 8008412:	f04f 38ff 	movhi.w	r8, #4294967295
 8008416:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800841a:	2200      	movs	r2, #0
 800841c:	9204      	str	r2, [sp, #16]
 800841e:	e07f      	b.n	8008520 <_strtod_l+0x630>
 8008420:	f012 0f01 	tst.w	r2, #1
 8008424:	d00a      	beq.n	800843c <_strtod_l+0x54c>
 8008426:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800842a:	ed90 7b00 	vldr	d7, [r0]
 800842e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8008432:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008436:	ed8d 7b04 	vstr	d7, [sp, #16]
 800843a:	2001      	movs	r0, #1
 800843c:	3101      	adds	r1, #1
 800843e:	1052      	asrs	r2, r2, #1
 8008440:	e7c7      	b.n	80083d2 <_strtod_l+0x4e2>
 8008442:	d0ea      	beq.n	800841a <_strtod_l+0x52a>
 8008444:	4252      	negs	r2, r2
 8008446:	f012 000f 	ands.w	r0, r2, #15
 800844a:	d00a      	beq.n	8008462 <_strtod_l+0x572>
 800844c:	4911      	ldr	r1, [pc, #68]	; (8008494 <_strtod_l+0x5a4>)
 800844e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008452:	ed91 7b00 	vldr	d7, [r1]
 8008456:	ec49 8b16 	vmov	d6, r8, r9
 800845a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800845e:	ec59 8b17 	vmov	r8, r9, d7
 8008462:	1112      	asrs	r2, r2, #4
 8008464:	d0d9      	beq.n	800841a <_strtod_l+0x52a>
 8008466:	2a1f      	cmp	r2, #31
 8008468:	dd1e      	ble.n	80084a8 <_strtod_l+0x5b8>
 800846a:	2500      	movs	r5, #0
 800846c:	462e      	mov	r6, r5
 800846e:	950a      	str	r5, [sp, #40]	; 0x28
 8008470:	462f      	mov	r7, r5
 8008472:	2322      	movs	r3, #34	; 0x22
 8008474:	f04f 0800 	mov.w	r8, #0
 8008478:	f04f 0900 	mov.w	r9, #0
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	e789      	b.n	8008394 <_strtod_l+0x4a4>
 8008480:	0800b825 	.word	0x0800b825
 8008484:	0800b860 	.word	0x0800b860
 8008488:	0800b81d 	.word	0x0800b81d
 800848c:	0800b8a3 	.word	0x0800b8a3
 8008490:	0800bb60 	.word	0x0800bb60
 8008494:	0800ba40 	.word	0x0800ba40
 8008498:	0800ba18 	.word	0x0800ba18
 800849c:	7ca00000 	.word	0x7ca00000
 80084a0:	7ff00000 	.word	0x7ff00000
 80084a4:	7fefffff 	.word	0x7fefffff
 80084a8:	f012 0110 	ands.w	r1, r2, #16
 80084ac:	bf18      	it	ne
 80084ae:	216a      	movne	r1, #106	; 0x6a
 80084b0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80084b4:	9104      	str	r1, [sp, #16]
 80084b6:	49c0      	ldr	r1, [pc, #768]	; (80087b8 <_strtod_l+0x8c8>)
 80084b8:	2000      	movs	r0, #0
 80084ba:	07d7      	lsls	r7, r2, #31
 80084bc:	d508      	bpl.n	80084d0 <_strtod_l+0x5e0>
 80084be:	ed9d 6b08 	vldr	d6, [sp, #32]
 80084c2:	ed91 7b00 	vldr	d7, [r1]
 80084c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80084ca:	ed8d 7b08 	vstr	d7, [sp, #32]
 80084ce:	2001      	movs	r0, #1
 80084d0:	1052      	asrs	r2, r2, #1
 80084d2:	f101 0108 	add.w	r1, r1, #8
 80084d6:	d1f0      	bne.n	80084ba <_strtod_l+0x5ca>
 80084d8:	b108      	cbz	r0, 80084de <_strtod_l+0x5ee>
 80084da:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80084de:	9a04      	ldr	r2, [sp, #16]
 80084e0:	b1ba      	cbz	r2, 8008512 <_strtod_l+0x622>
 80084e2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80084e6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80084ea:	2a00      	cmp	r2, #0
 80084ec:	4649      	mov	r1, r9
 80084ee:	dd10      	ble.n	8008512 <_strtod_l+0x622>
 80084f0:	2a1f      	cmp	r2, #31
 80084f2:	f340 8132 	ble.w	800875a <_strtod_l+0x86a>
 80084f6:	2a34      	cmp	r2, #52	; 0x34
 80084f8:	bfde      	ittt	le
 80084fa:	3a20      	suble	r2, #32
 80084fc:	f04f 30ff 	movle.w	r0, #4294967295
 8008500:	fa00 f202 	lslle.w	r2, r0, r2
 8008504:	f04f 0800 	mov.w	r8, #0
 8008508:	bfcc      	ite	gt
 800850a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800850e:	ea02 0901 	andle.w	r9, r2, r1
 8008512:	ec49 8b17 	vmov	d7, r8, r9
 8008516:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851e:	d0a4      	beq.n	800846a <_strtod_l+0x57a>
 8008520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008522:	9200      	str	r2, [sp, #0]
 8008524:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008526:	4632      	mov	r2, r6
 8008528:	4620      	mov	r0, r4
 800852a:	f001 fd1b 	bl	8009f64 <__s2b>
 800852e:	900a      	str	r0, [sp, #40]	; 0x28
 8008530:	2800      	cmp	r0, #0
 8008532:	f43f af25 	beq.w	8008380 <_strtod_l+0x490>
 8008536:	9b06      	ldr	r3, [sp, #24]
 8008538:	ebab 0505 	sub.w	r5, fp, r5
 800853c:	2b00      	cmp	r3, #0
 800853e:	bfb4      	ite	lt
 8008540:	462b      	movlt	r3, r5
 8008542:	2300      	movge	r3, #0
 8008544:	930c      	str	r3, [sp, #48]	; 0x30
 8008546:	9b06      	ldr	r3, [sp, #24]
 8008548:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80087a0 <_strtod_l+0x8b0>
 800854c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80087a8 <_strtod_l+0x8b8>
 8008550:	ed9f bb97 	vldr	d11, [pc, #604]	; 80087b0 <_strtod_l+0x8c0>
 8008554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008558:	2500      	movs	r5, #0
 800855a:	9312      	str	r3, [sp, #72]	; 0x48
 800855c:	462e      	mov	r6, r5
 800855e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008560:	4620      	mov	r0, r4
 8008562:	6859      	ldr	r1, [r3, #4]
 8008564:	f001 fc52 	bl	8009e0c <_Balloc>
 8008568:	4607      	mov	r7, r0
 800856a:	2800      	cmp	r0, #0
 800856c:	f43f af0c 	beq.w	8008388 <_strtod_l+0x498>
 8008570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	3202      	adds	r2, #2
 8008576:	f103 010c 	add.w	r1, r3, #12
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	300c      	adds	r0, #12
 800857e:	f001 fc37 	bl	8009df0 <memcpy>
 8008582:	ec49 8b10 	vmov	d0, r8, r9
 8008586:	aa1a      	add	r2, sp, #104	; 0x68
 8008588:	a919      	add	r1, sp, #100	; 0x64
 800858a:	4620      	mov	r0, r4
 800858c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008590:	f002 f824 	bl	800a5dc <__d2b>
 8008594:	9018      	str	r0, [sp, #96]	; 0x60
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f aef6 	beq.w	8008388 <_strtod_l+0x498>
 800859c:	2101      	movs	r1, #1
 800859e:	4620      	mov	r0, r4
 80085a0:	f001 fd7a 	bl	800a098 <__i2b>
 80085a4:	4606      	mov	r6, r0
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f43f aeee 	beq.w	8008388 <_strtod_l+0x498>
 80085ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfab      	itete	ge
 80085b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80085b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80085b8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80085bc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80085c0:	bfac      	ite	ge
 80085c2:	eb03 0b02 	addge.w	fp, r3, r2
 80085c6:	eba2 0a03 	sublt.w	sl, r2, r3
 80085ca:	9a04      	ldr	r2, [sp, #16]
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	440b      	add	r3, r1
 80085d0:	4a7a      	ldr	r2, [pc, #488]	; (80087bc <_strtod_l+0x8cc>)
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4293      	cmp	r3, r2
 80085d6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80085da:	f280 80d1 	bge.w	8008780 <_strtod_l+0x890>
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	2a1f      	cmp	r2, #31
 80085e2:	eba1 0102 	sub.w	r1, r1, r2
 80085e6:	f04f 0001 	mov.w	r0, #1
 80085ea:	f300 80bd 	bgt.w	8008768 <_strtod_l+0x878>
 80085ee:	fa00 f302 	lsl.w	r3, r0, r2
 80085f2:	930e      	str	r3, [sp, #56]	; 0x38
 80085f4:	2300      	movs	r3, #0
 80085f6:	930d      	str	r3, [sp, #52]	; 0x34
 80085f8:	eb0b 0301 	add.w	r3, fp, r1
 80085fc:	9a04      	ldr	r2, [sp, #16]
 80085fe:	459b      	cmp	fp, r3
 8008600:	448a      	add	sl, r1
 8008602:	4492      	add	sl, r2
 8008604:	465a      	mov	r2, fp
 8008606:	bfa8      	it	ge
 8008608:	461a      	movge	r2, r3
 800860a:	4552      	cmp	r2, sl
 800860c:	bfa8      	it	ge
 800860e:	4652      	movge	r2, sl
 8008610:	2a00      	cmp	r2, #0
 8008612:	bfc2      	ittt	gt
 8008614:	1a9b      	subgt	r3, r3, r2
 8008616:	ebaa 0a02 	subgt.w	sl, sl, r2
 800861a:	ebab 0b02 	subgt.w	fp, fp, r2
 800861e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008620:	2a00      	cmp	r2, #0
 8008622:	dd18      	ble.n	8008656 <_strtod_l+0x766>
 8008624:	4631      	mov	r1, r6
 8008626:	4620      	mov	r0, r4
 8008628:	9315      	str	r3, [sp, #84]	; 0x54
 800862a:	f001 fdf1 	bl	800a210 <__pow5mult>
 800862e:	4606      	mov	r6, r0
 8008630:	2800      	cmp	r0, #0
 8008632:	f43f aea9 	beq.w	8008388 <_strtod_l+0x498>
 8008636:	4601      	mov	r1, r0
 8008638:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800863a:	4620      	mov	r0, r4
 800863c:	f001 fd42 	bl	800a0c4 <__multiply>
 8008640:	9014      	str	r0, [sp, #80]	; 0x50
 8008642:	2800      	cmp	r0, #0
 8008644:	f43f aea0 	beq.w	8008388 <_strtod_l+0x498>
 8008648:	9918      	ldr	r1, [sp, #96]	; 0x60
 800864a:	4620      	mov	r0, r4
 800864c:	f001 fc1e 	bl	8009e8c <_Bfree>
 8008650:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008654:	9218      	str	r2, [sp, #96]	; 0x60
 8008656:	2b00      	cmp	r3, #0
 8008658:	f300 8097 	bgt.w	800878a <_strtod_l+0x89a>
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	2b00      	cmp	r3, #0
 8008660:	dd08      	ble.n	8008674 <_strtod_l+0x784>
 8008662:	4639      	mov	r1, r7
 8008664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008666:	4620      	mov	r0, r4
 8008668:	f001 fdd2 	bl	800a210 <__pow5mult>
 800866c:	4607      	mov	r7, r0
 800866e:	2800      	cmp	r0, #0
 8008670:	f43f ae8a 	beq.w	8008388 <_strtod_l+0x498>
 8008674:	f1ba 0f00 	cmp.w	sl, #0
 8008678:	dd08      	ble.n	800868c <_strtod_l+0x79c>
 800867a:	4639      	mov	r1, r7
 800867c:	4652      	mov	r2, sl
 800867e:	4620      	mov	r0, r4
 8008680:	f001 fe20 	bl	800a2c4 <__lshift>
 8008684:	4607      	mov	r7, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f ae7e 	beq.w	8008388 <_strtod_l+0x498>
 800868c:	f1bb 0f00 	cmp.w	fp, #0
 8008690:	dd08      	ble.n	80086a4 <_strtod_l+0x7b4>
 8008692:	4631      	mov	r1, r6
 8008694:	465a      	mov	r2, fp
 8008696:	4620      	mov	r0, r4
 8008698:	f001 fe14 	bl	800a2c4 <__lshift>
 800869c:	4606      	mov	r6, r0
 800869e:	2800      	cmp	r0, #0
 80086a0:	f43f ae72 	beq.w	8008388 <_strtod_l+0x498>
 80086a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086a6:	463a      	mov	r2, r7
 80086a8:	4620      	mov	r0, r4
 80086aa:	f001 fe93 	bl	800a3d4 <__mdiff>
 80086ae:	4605      	mov	r5, r0
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f43f ae69 	beq.w	8008388 <_strtod_l+0x498>
 80086b6:	2300      	movs	r3, #0
 80086b8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80086bc:	60c3      	str	r3, [r0, #12]
 80086be:	4631      	mov	r1, r6
 80086c0:	f001 fe6c 	bl	800a39c <__mcmp>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	da7f      	bge.n	80087c8 <_strtod_l+0x8d8>
 80086c8:	ea5a 0308 	orrs.w	r3, sl, r8
 80086cc:	f040 80a5 	bne.w	800881a <_strtod_l+0x92a>
 80086d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 80a0 	bne.w	800881a <_strtod_l+0x92a>
 80086da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086de:	0d1b      	lsrs	r3, r3, #20
 80086e0:	051b      	lsls	r3, r3, #20
 80086e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80086e6:	f240 8098 	bls.w	800881a <_strtod_l+0x92a>
 80086ea:	696b      	ldr	r3, [r5, #20]
 80086ec:	b91b      	cbnz	r3, 80086f6 <_strtod_l+0x806>
 80086ee:	692b      	ldr	r3, [r5, #16]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	f340 8092 	ble.w	800881a <_strtod_l+0x92a>
 80086f6:	4629      	mov	r1, r5
 80086f8:	2201      	movs	r2, #1
 80086fa:	4620      	mov	r0, r4
 80086fc:	f001 fde2 	bl	800a2c4 <__lshift>
 8008700:	4631      	mov	r1, r6
 8008702:	4605      	mov	r5, r0
 8008704:	f001 fe4a 	bl	800a39c <__mcmp>
 8008708:	2800      	cmp	r0, #0
 800870a:	f340 8086 	ble.w	800881a <_strtod_l+0x92a>
 800870e:	9904      	ldr	r1, [sp, #16]
 8008710:	4a2b      	ldr	r2, [pc, #172]	; (80087c0 <_strtod_l+0x8d0>)
 8008712:	464b      	mov	r3, r9
 8008714:	2900      	cmp	r1, #0
 8008716:	f000 80a1 	beq.w	800885c <_strtod_l+0x96c>
 800871a:	ea02 0109 	and.w	r1, r2, r9
 800871e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008722:	f300 809b 	bgt.w	800885c <_strtod_l+0x96c>
 8008726:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800872a:	f77f aea2 	ble.w	8008472 <_strtod_l+0x582>
 800872e:	4a25      	ldr	r2, [pc, #148]	; (80087c4 <_strtod_l+0x8d4>)
 8008730:	2300      	movs	r3, #0
 8008732:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8008736:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800873a:	ec49 8b17 	vmov	d7, r8, r9
 800873e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008742:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008746:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	bf08      	it	eq
 800874e:	2322      	moveq	r3, #34	; 0x22
 8008750:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008754:	bf08      	it	eq
 8008756:	6023      	streq	r3, [r4, #0]
 8008758:	e620      	b.n	800839c <_strtod_l+0x4ac>
 800875a:	f04f 31ff 	mov.w	r1, #4294967295
 800875e:	fa01 f202 	lsl.w	r2, r1, r2
 8008762:	ea02 0808 	and.w	r8, r2, r8
 8008766:	e6d4      	b.n	8008512 <_strtod_l+0x622>
 8008768:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800876c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008770:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008774:	33e2      	adds	r3, #226	; 0xe2
 8008776:	fa00 f303 	lsl.w	r3, r0, r3
 800877a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800877e:	e73b      	b.n	80085f8 <_strtod_l+0x708>
 8008780:	2000      	movs	r0, #0
 8008782:	2301      	movs	r3, #1
 8008784:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008788:	e736      	b.n	80085f8 <_strtod_l+0x708>
 800878a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800878c:	461a      	mov	r2, r3
 800878e:	4620      	mov	r0, r4
 8008790:	f001 fd98 	bl	800a2c4 <__lshift>
 8008794:	9018      	str	r0, [sp, #96]	; 0x60
 8008796:	2800      	cmp	r0, #0
 8008798:	f47f af60 	bne.w	800865c <_strtod_l+0x76c>
 800879c:	e5f4      	b.n	8008388 <_strtod_l+0x498>
 800879e:	bf00      	nop
 80087a0:	94a03595 	.word	0x94a03595
 80087a4:	3fcfffff 	.word	0x3fcfffff
 80087a8:	94a03595 	.word	0x94a03595
 80087ac:	3fdfffff 	.word	0x3fdfffff
 80087b0:	35afe535 	.word	0x35afe535
 80087b4:	3fe00000 	.word	0x3fe00000
 80087b8:	0800b878 	.word	0x0800b878
 80087bc:	fffffc02 	.word	0xfffffc02
 80087c0:	7ff00000 	.word	0x7ff00000
 80087c4:	39500000 	.word	0x39500000
 80087c8:	46cb      	mov	fp, r9
 80087ca:	d165      	bne.n	8008898 <_strtod_l+0x9a8>
 80087cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087d0:	f1ba 0f00 	cmp.w	sl, #0
 80087d4:	d02a      	beq.n	800882c <_strtod_l+0x93c>
 80087d6:	4aaa      	ldr	r2, [pc, #680]	; (8008a80 <_strtod_l+0xb90>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d12b      	bne.n	8008834 <_strtod_l+0x944>
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	4641      	mov	r1, r8
 80087e0:	b1fb      	cbz	r3, 8008822 <_strtod_l+0x932>
 80087e2:	4aa8      	ldr	r2, [pc, #672]	; (8008a84 <_strtod_l+0xb94>)
 80087e4:	ea09 0202 	and.w	r2, r9, r2
 80087e8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	d81a      	bhi.n	8008828 <_strtod_l+0x938>
 80087f2:	0d12      	lsrs	r2, r2, #20
 80087f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80087f8:	fa00 f303 	lsl.w	r3, r0, r3
 80087fc:	4299      	cmp	r1, r3
 80087fe:	d119      	bne.n	8008834 <_strtod_l+0x944>
 8008800:	4ba1      	ldr	r3, [pc, #644]	; (8008a88 <_strtod_l+0xb98>)
 8008802:	459b      	cmp	fp, r3
 8008804:	d102      	bne.n	800880c <_strtod_l+0x91c>
 8008806:	3101      	adds	r1, #1
 8008808:	f43f adbe 	beq.w	8008388 <_strtod_l+0x498>
 800880c:	4b9d      	ldr	r3, [pc, #628]	; (8008a84 <_strtod_l+0xb94>)
 800880e:	ea0b 0303 	and.w	r3, fp, r3
 8008812:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	9b04      	ldr	r3, [sp, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d186      	bne.n	800872e <_strtod_l+0x83e>
 8008820:	e5bc      	b.n	800839c <_strtod_l+0x4ac>
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	e7e9      	b.n	80087fc <_strtod_l+0x90c>
 8008828:	4603      	mov	r3, r0
 800882a:	e7e7      	b.n	80087fc <_strtod_l+0x90c>
 800882c:	ea53 0308 	orrs.w	r3, r3, r8
 8008830:	f43f af6d 	beq.w	800870e <_strtod_l+0x81e>
 8008834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008836:	b1db      	cbz	r3, 8008870 <_strtod_l+0x980>
 8008838:	ea13 0f0b 	tst.w	r3, fp
 800883c:	d0ed      	beq.n	800881a <_strtod_l+0x92a>
 800883e:	9a04      	ldr	r2, [sp, #16]
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f1ba 0f00 	cmp.w	sl, #0
 8008848:	d016      	beq.n	8008878 <_strtod_l+0x988>
 800884a:	f7ff fb37 	bl	8007ebc <sulp>
 800884e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008852:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008856:	ec59 8b17 	vmov	r8, r9, d7
 800885a:	e7de      	b.n	800881a <_strtod_l+0x92a>
 800885c:	4013      	ands	r3, r2
 800885e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008862:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008866:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800886a:	f04f 38ff 	mov.w	r8, #4294967295
 800886e:	e7d4      	b.n	800881a <_strtod_l+0x92a>
 8008870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008872:	ea13 0f08 	tst.w	r3, r8
 8008876:	e7e1      	b.n	800883c <_strtod_l+0x94c>
 8008878:	f7ff fb20 	bl	8007ebc <sulp>
 800887c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008880:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008884:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008888:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800888c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008890:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008894:	d1c1      	bne.n	800881a <_strtod_l+0x92a>
 8008896:	e5ec      	b.n	8008472 <_strtod_l+0x582>
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	f001 fefa 	bl	800a694 <__ratio>
 80088a0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80088a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80088a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ac:	d867      	bhi.n	800897e <_strtod_l+0xa8e>
 80088ae:	f1ba 0f00 	cmp.w	sl, #0
 80088b2:	d044      	beq.n	800893e <_strtod_l+0xa4e>
 80088b4:	4b75      	ldr	r3, [pc, #468]	; (8008a8c <_strtod_l+0xb9c>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80088bc:	4971      	ldr	r1, [pc, #452]	; (8008a84 <_strtod_l+0xb94>)
 80088be:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008a98 <_strtod_l+0xba8>
 80088c2:	ea0b 0001 	and.w	r0, fp, r1
 80088c6:	4560      	cmp	r0, ip
 80088c8:	900d      	str	r0, [sp, #52]	; 0x34
 80088ca:	f040 808b 	bne.w	80089e4 <_strtod_l+0xaf4>
 80088ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088d2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80088d6:	ec49 8b10 	vmov	d0, r8, r9
 80088da:	ec43 2b1c 	vmov	d12, r2, r3
 80088de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088e2:	f001 fdff 	bl	800a4e4 <__ulp>
 80088e6:	ec49 8b1d 	vmov	d13, r8, r9
 80088ea:	eeac db00 	vfma.f64	d13, d12, d0
 80088ee:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80088f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f4:	4963      	ldr	r1, [pc, #396]	; (8008a84 <_strtod_l+0xb94>)
 80088f6:	4a66      	ldr	r2, [pc, #408]	; (8008a90 <_strtod_l+0xba0>)
 80088f8:	4019      	ands	r1, r3
 80088fa:	4291      	cmp	r1, r2
 80088fc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8008900:	d947      	bls.n	8008992 <_strtod_l+0xaa2>
 8008902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008904:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008908:	4293      	cmp	r3, r2
 800890a:	d103      	bne.n	8008914 <_strtod_l+0xa24>
 800890c:	9b08      	ldr	r3, [sp, #32]
 800890e:	3301      	adds	r3, #1
 8008910:	f43f ad3a 	beq.w	8008388 <_strtod_l+0x498>
 8008914:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8008a88 <_strtod_l+0xb98>
 8008918:	f04f 38ff 	mov.w	r8, #4294967295
 800891c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800891e:	4620      	mov	r0, r4
 8008920:	f001 fab4 	bl	8009e8c <_Bfree>
 8008924:	4639      	mov	r1, r7
 8008926:	4620      	mov	r0, r4
 8008928:	f001 fab0 	bl	8009e8c <_Bfree>
 800892c:	4631      	mov	r1, r6
 800892e:	4620      	mov	r0, r4
 8008930:	f001 faac 	bl	8009e8c <_Bfree>
 8008934:	4629      	mov	r1, r5
 8008936:	4620      	mov	r0, r4
 8008938:	f001 faa8 	bl	8009e8c <_Bfree>
 800893c:	e60f      	b.n	800855e <_strtod_l+0x66e>
 800893e:	f1b8 0f00 	cmp.w	r8, #0
 8008942:	d112      	bne.n	800896a <_strtod_l+0xa7a>
 8008944:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008948:	b9b3      	cbnz	r3, 8008978 <_strtod_l+0xa88>
 800894a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800894e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008956:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800895a:	d401      	bmi.n	8008960 <_strtod_l+0xa70>
 800895c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008960:	eeb1 7b48 	vneg.f64	d7, d8
 8008964:	ec53 2b17 	vmov	r2, r3, d7
 8008968:	e7a8      	b.n	80088bc <_strtod_l+0x9cc>
 800896a:	f1b8 0f01 	cmp.w	r8, #1
 800896e:	d103      	bne.n	8008978 <_strtod_l+0xa88>
 8008970:	f1b9 0f00 	cmp.w	r9, #0
 8008974:	f43f ad7d 	beq.w	8008472 <_strtod_l+0x582>
 8008978:	4b46      	ldr	r3, [pc, #280]	; (8008a94 <_strtod_l+0xba4>)
 800897a:	2200      	movs	r2, #0
 800897c:	e79c      	b.n	80088b8 <_strtod_l+0x9c8>
 800897e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008982:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008986:	f1ba 0f00 	cmp.w	sl, #0
 800898a:	d0e9      	beq.n	8008960 <_strtod_l+0xa70>
 800898c:	ec53 2b18 	vmov	r2, r3, d8
 8008990:	e794      	b.n	80088bc <_strtod_l+0x9cc>
 8008992:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008996:	9b04      	ldr	r3, [sp, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1bf      	bne.n	800891c <_strtod_l+0xa2c>
 800899c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089a2:	0d1b      	lsrs	r3, r3, #20
 80089a4:	051b      	lsls	r3, r3, #20
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d1b8      	bne.n	800891c <_strtod_l+0xa2c>
 80089aa:	ec51 0b18 	vmov	r0, r1, d8
 80089ae:	f7f7 fe73 	bl	8000698 <__aeabi_d2lz>
 80089b2:	f7f7 fe2b 	bl	800060c <__aeabi_l2d>
 80089b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089ba:	ec41 0b17 	vmov	d7, r0, r1
 80089be:	ea43 0308 	orr.w	r3, r3, r8
 80089c2:	ea53 030a 	orrs.w	r3, r3, sl
 80089c6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80089ca:	d03e      	beq.n	8008a4a <_strtod_l+0xb5a>
 80089cc:	eeb4 8bca 	vcmpe.f64	d8, d10
 80089d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d4:	f53f ace2 	bmi.w	800839c <_strtod_l+0x4ac>
 80089d8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80089dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e0:	dd9c      	ble.n	800891c <_strtod_l+0xa2c>
 80089e2:	e4db      	b.n	800839c <_strtod_l+0x4ac>
 80089e4:	9904      	ldr	r1, [sp, #16]
 80089e6:	b301      	cbz	r1, 8008a2a <_strtod_l+0xb3a>
 80089e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80089ea:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80089ee:	d81c      	bhi.n	8008a2a <_strtod_l+0xb3a>
 80089f0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008a78 <_strtod_l+0xb88>
 80089f4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80089f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fc:	d811      	bhi.n	8008a22 <_strtod_l+0xb32>
 80089fe:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8008a02:	ee18 3a10 	vmov	r3, s16
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	bf38      	it	cc
 8008a0a:	2301      	movcc	r3, #1
 8008a0c:	ee08 3a10 	vmov	s16, r3
 8008a10:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8008a14:	f1ba 0f00 	cmp.w	sl, #0
 8008a18:	d114      	bne.n	8008a44 <_strtod_l+0xb54>
 8008a1a:	eeb1 7b48 	vneg.f64	d7, d8
 8008a1e:	ec53 2b17 	vmov	r2, r3, d7
 8008a22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a24:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8008a28:	1a0b      	subs	r3, r1, r0
 8008a2a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008a2e:	ec43 2b1c 	vmov	d12, r2, r3
 8008a32:	f001 fd57 	bl	800a4e4 <__ulp>
 8008a36:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008a3a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8008a3e:	ec59 8b17 	vmov	r8, r9, d7
 8008a42:	e7a8      	b.n	8008996 <_strtod_l+0xaa6>
 8008a44:	ec53 2b18 	vmov	r2, r3, d8
 8008a48:	e7eb      	b.n	8008a22 <_strtod_l+0xb32>
 8008a4a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8008a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a52:	f57f af63 	bpl.w	800891c <_strtod_l+0xa2c>
 8008a56:	e4a1      	b.n	800839c <_strtod_l+0x4ac>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	f7ff ba8d 	b.w	8007f80 <_strtod_l+0x90>
 8008a66:	2a65      	cmp	r2, #101	; 0x65
 8008a68:	f43f ab89 	beq.w	800817e <_strtod_l+0x28e>
 8008a6c:	2a45      	cmp	r2, #69	; 0x45
 8008a6e:	f43f ab86 	beq.w	800817e <_strtod_l+0x28e>
 8008a72:	2101      	movs	r1, #1
 8008a74:	f7ff bbbe 	b.w	80081f4 <_strtod_l+0x304>
 8008a78:	ffc00000 	.word	0xffc00000
 8008a7c:	41dfffff 	.word	0x41dfffff
 8008a80:	000fffff 	.word	0x000fffff
 8008a84:	7ff00000 	.word	0x7ff00000
 8008a88:	7fefffff 	.word	0x7fefffff
 8008a8c:	3ff00000 	.word	0x3ff00000
 8008a90:	7c9fffff 	.word	0x7c9fffff
 8008a94:	bff00000 	.word	0xbff00000
 8008a98:	7fe00000 	.word	0x7fe00000

08008a9c <strtod>:
 8008a9c:	460a      	mov	r2, r1
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	4802      	ldr	r0, [pc, #8]	; (8008aac <strtod+0x10>)
 8008aa2:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <strtod+0x14>)
 8008aa4:	6800      	ldr	r0, [r0, #0]
 8008aa6:	f7ff ba23 	b.w	8007ef0 <_strtod_l>
 8008aaa:	bf00      	nop
 8008aac:	2000000c 	.word	0x2000000c
 8008ab0:	20000074 	.word	0x20000074

08008ab4 <quorem>:
 8008ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	6903      	ldr	r3, [r0, #16]
 8008aba:	690c      	ldr	r4, [r1, #16]
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	4607      	mov	r7, r0
 8008ac0:	f2c0 8081 	blt.w	8008bc6 <quorem+0x112>
 8008ac4:	3c01      	subs	r4, #1
 8008ac6:	f101 0814 	add.w	r8, r1, #20
 8008aca:	f100 0514 	add.w	r5, r0, #20
 8008ace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008adc:	3301      	adds	r3, #1
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ae8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008aec:	d331      	bcc.n	8008b52 <quorem+0x9e>
 8008aee:	f04f 0e00 	mov.w	lr, #0
 8008af2:	4640      	mov	r0, r8
 8008af4:	46ac      	mov	ip, r5
 8008af6:	46f2      	mov	sl, lr
 8008af8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008afc:	b293      	uxth	r3, r2
 8008afe:	fb06 e303 	mla	r3, r6, r3, lr
 8008b02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	ebaa 0303 	sub.w	r3, sl, r3
 8008b0c:	0c12      	lsrs	r2, r2, #16
 8008b0e:	f8dc a000 	ldr.w	sl, [ip]
 8008b12:	fb06 e202 	mla	r2, r6, r2, lr
 8008b16:	fa13 f38a 	uxtah	r3, r3, sl
 8008b1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b1e:	fa1f fa82 	uxth.w	sl, r2
 8008b22:	f8dc 2000 	ldr.w	r2, [ip]
 8008b26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b34:	4581      	cmp	r9, r0
 8008b36:	f84c 3b04 	str.w	r3, [ip], #4
 8008b3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b3e:	d2db      	bcs.n	8008af8 <quorem+0x44>
 8008b40:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b44:	b92b      	cbnz	r3, 8008b52 <quorem+0x9e>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	3b04      	subs	r3, #4
 8008b4a:	429d      	cmp	r5, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	d32e      	bcc.n	8008bae <quorem+0xfa>
 8008b50:	613c      	str	r4, [r7, #16]
 8008b52:	4638      	mov	r0, r7
 8008b54:	f001 fc22 	bl	800a39c <__mcmp>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	db24      	blt.n	8008ba6 <quorem+0xf2>
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f04f 0c00 	mov.w	ip, #0
 8008b64:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b68:	f8d0 e000 	ldr.w	lr, [r0]
 8008b6c:	b293      	uxth	r3, r2
 8008b6e:	ebac 0303 	sub.w	r3, ip, r3
 8008b72:	0c12      	lsrs	r2, r2, #16
 8008b74:	fa13 f38e 	uxtah	r3, r3, lr
 8008b78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b86:	45c1      	cmp	r9, r8
 8008b88:	f840 3b04 	str.w	r3, [r0], #4
 8008b8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b90:	d2e8      	bcs.n	8008b64 <quorem+0xb0>
 8008b92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b9a:	b922      	cbnz	r2, 8008ba6 <quorem+0xf2>
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	429d      	cmp	r5, r3
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	d30a      	bcc.n	8008bba <quorem+0x106>
 8008ba4:	613c      	str	r4, [r7, #16]
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	b003      	add	sp, #12
 8008baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	d1cc      	bne.n	8008b50 <quorem+0x9c>
 8008bb6:	3c01      	subs	r4, #1
 8008bb8:	e7c7      	b.n	8008b4a <quorem+0x96>
 8008bba:	6812      	ldr	r2, [r2, #0]
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	d1f0      	bne.n	8008ba4 <quorem+0xf0>
 8008bc2:	3c01      	subs	r4, #1
 8008bc4:	e7eb      	b.n	8008b9e <quorem+0xea>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	e7ee      	b.n	8008ba8 <quorem+0xf4>
 8008bca:	0000      	movs	r0, r0
 8008bcc:	0000      	movs	r0, r0
	...

08008bd0 <_dtoa_r>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	ec59 8b10 	vmov	r8, r9, d0
 8008bd8:	b095      	sub	sp, #84	; 0x54
 8008bda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bdc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008bde:	9107      	str	r1, [sp, #28]
 8008be0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008be4:	4606      	mov	r6, r0
 8008be6:	9209      	str	r2, [sp, #36]	; 0x24
 8008be8:	9310      	str	r3, [sp, #64]	; 0x40
 8008bea:	b975      	cbnz	r5, 8008c0a <_dtoa_r+0x3a>
 8008bec:	2010      	movs	r0, #16
 8008bee:	f001 f8e5 	bl	8009dbc <malloc>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	6270      	str	r0, [r6, #36]	; 0x24
 8008bf6:	b920      	cbnz	r0, 8008c02 <_dtoa_r+0x32>
 8008bf8:	4bab      	ldr	r3, [pc, #684]	; (8008ea8 <_dtoa_r+0x2d8>)
 8008bfa:	21ea      	movs	r1, #234	; 0xea
 8008bfc:	48ab      	ldr	r0, [pc, #684]	; (8008eac <_dtoa_r+0x2dc>)
 8008bfe:	f002 f80f 	bl	800ac20 <__assert_func>
 8008c02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c06:	6005      	str	r5, [r0, #0]
 8008c08:	60c5      	str	r5, [r0, #12]
 8008c0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c0c:	6819      	ldr	r1, [r3, #0]
 8008c0e:	b151      	cbz	r1, 8008c26 <_dtoa_r+0x56>
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	604a      	str	r2, [r1, #4]
 8008c14:	2301      	movs	r3, #1
 8008c16:	4093      	lsls	r3, r2
 8008c18:	608b      	str	r3, [r1, #8]
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f001 f936 	bl	8009e8c <_Bfree>
 8008c20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f1b9 0300 	subs.w	r3, r9, #0
 8008c2a:	bfbb      	ittet	lt
 8008c2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c30:	9303      	strlt	r3, [sp, #12]
 8008c32:	2300      	movge	r3, #0
 8008c34:	2201      	movlt	r2, #1
 8008c36:	bfac      	ite	ge
 8008c38:	6023      	strge	r3, [r4, #0]
 8008c3a:	6022      	strlt	r2, [r4, #0]
 8008c3c:	4b9c      	ldr	r3, [pc, #624]	; (8008eb0 <_dtoa_r+0x2e0>)
 8008c3e:	9c03      	ldr	r4, [sp, #12]
 8008c40:	43a3      	bics	r3, r4
 8008c42:	d11a      	bne.n	8008c7a <_dtoa_r+0xaa>
 8008c44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c46:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008c50:	ea53 0308 	orrs.w	r3, r3, r8
 8008c54:	f000 8512 	beq.w	800967c <_dtoa_r+0xaac>
 8008c58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c5a:	b953      	cbnz	r3, 8008c72 <_dtoa_r+0xa2>
 8008c5c:	4b95      	ldr	r3, [pc, #596]	; (8008eb4 <_dtoa_r+0x2e4>)
 8008c5e:	e01f      	b.n	8008ca0 <_dtoa_r+0xd0>
 8008c60:	4b95      	ldr	r3, [pc, #596]	; (8008eb8 <_dtoa_r+0x2e8>)
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	9800      	ldr	r0, [sp, #0]
 8008c6c:	b015      	add	sp, #84	; 0x54
 8008c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c72:	4b90      	ldr	r3, [pc, #576]	; (8008eb4 <_dtoa_r+0x2e4>)
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	3303      	adds	r3, #3
 8008c78:	e7f5      	b.n	8008c66 <_dtoa_r+0x96>
 8008c7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c86:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008c8a:	d10b      	bne.n	8008ca4 <_dtoa_r+0xd4>
 8008c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c8e:	2301      	movs	r3, #1
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 84ee 	beq.w	8009676 <_dtoa_r+0xaa6>
 8008c9a:	4888      	ldr	r0, [pc, #544]	; (8008ebc <_dtoa_r+0x2ec>)
 8008c9c:	6018      	str	r0, [r3, #0]
 8008c9e:	1e43      	subs	r3, r0, #1
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	e7e2      	b.n	8008c6a <_dtoa_r+0x9a>
 8008ca4:	a913      	add	r1, sp, #76	; 0x4c
 8008ca6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008caa:	aa12      	add	r2, sp, #72	; 0x48
 8008cac:	4630      	mov	r0, r6
 8008cae:	f001 fc95 	bl	800a5dc <__d2b>
 8008cb2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d047      	beq.n	8008d4e <_dtoa_r+0x17e>
 8008cbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008cc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008cc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cc8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008ccc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008cd0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008cd4:	2400      	movs	r4, #0
 8008cd6:	ec43 2b16 	vmov	d6, r2, r3
 8008cda:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008cde:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008e90 <_dtoa_r+0x2c0>
 8008ce2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008ce6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008e98 <_dtoa_r+0x2c8>
 8008cea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008cee:	eeb0 7b46 	vmov.f64	d7, d6
 8008cf2:	ee06 1a90 	vmov	s13, r1
 8008cf6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008cfa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008ea0 <_dtoa_r+0x2d0>
 8008cfe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008d02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008d06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0e:	ee16 ba90 	vmov	fp, s13
 8008d12:	9411      	str	r4, [sp, #68]	; 0x44
 8008d14:	d508      	bpl.n	8008d28 <_dtoa_r+0x158>
 8008d16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008d1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d22:	bf18      	it	ne
 8008d24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008d28:	f1bb 0f16 	cmp.w	fp, #22
 8008d2c:	d832      	bhi.n	8008d94 <_dtoa_r+0x1c4>
 8008d2e:	4b64      	ldr	r3, [pc, #400]	; (8008ec0 <_dtoa_r+0x2f0>)
 8008d30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d34:	ed93 7b00 	vldr	d7, [r3]
 8008d38:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008d3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d44:	d501      	bpl.n	8008d4a <_dtoa_r+0x17a>
 8008d46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e023      	b.n	8008d96 <_dtoa_r+0x1c6>
 8008d4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d50:	4401      	add	r1, r0
 8008d52:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	bfc3      	ittte	gt
 8008d5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d5e:	fa04 f303 	lslgt.w	r3, r4, r3
 8008d62:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008d66:	f1c3 0320 	rsble	r3, r3, #32
 8008d6a:	bfc6      	itte	gt
 8008d6c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008d70:	ea43 0308 	orrgt.w	r3, r3, r8
 8008d74:	fa08 f303 	lslle.w	r3, r8, r3
 8008d78:	ee07 3a90 	vmov	s15, r3
 8008d7c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008d80:	3901      	subs	r1, #1
 8008d82:	ed8d 7b00 	vstr	d7, [sp]
 8008d86:	9c01      	ldr	r4, [sp, #4]
 8008d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008d90:	2401      	movs	r4, #1
 8008d92:	e7a0      	b.n	8008cd6 <_dtoa_r+0x106>
 8008d94:	2301      	movs	r3, #1
 8008d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d98:	1a43      	subs	r3, r0, r1
 8008d9a:	1e5a      	subs	r2, r3, #1
 8008d9c:	bf45      	ittet	mi
 8008d9e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008da2:	9305      	strmi	r3, [sp, #20]
 8008da4:	2300      	movpl	r3, #0
 8008da6:	2300      	movmi	r3, #0
 8008da8:	9206      	str	r2, [sp, #24]
 8008daa:	bf54      	ite	pl
 8008dac:	9305      	strpl	r3, [sp, #20]
 8008dae:	9306      	strmi	r3, [sp, #24]
 8008db0:	f1bb 0f00 	cmp.w	fp, #0
 8008db4:	db18      	blt.n	8008de8 <_dtoa_r+0x218>
 8008db6:	9b06      	ldr	r3, [sp, #24]
 8008db8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008dbc:	445b      	add	r3, fp
 8008dbe:	9306      	str	r3, [sp, #24]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9a07      	ldr	r2, [sp, #28]
 8008dc4:	2a09      	cmp	r2, #9
 8008dc6:	d849      	bhi.n	8008e5c <_dtoa_r+0x28c>
 8008dc8:	2a05      	cmp	r2, #5
 8008dca:	bfc4      	itt	gt
 8008dcc:	3a04      	subgt	r2, #4
 8008dce:	9207      	strgt	r2, [sp, #28]
 8008dd0:	9a07      	ldr	r2, [sp, #28]
 8008dd2:	f1a2 0202 	sub.w	r2, r2, #2
 8008dd6:	bfcc      	ite	gt
 8008dd8:	2400      	movgt	r4, #0
 8008dda:	2401      	movle	r4, #1
 8008ddc:	2a03      	cmp	r2, #3
 8008dde:	d848      	bhi.n	8008e72 <_dtoa_r+0x2a2>
 8008de0:	e8df f002 	tbb	[pc, r2]
 8008de4:	3a2c2e0b 	.word	0x3a2c2e0b
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	2200      	movs	r2, #0
 8008dec:	eba3 030b 	sub.w	r3, r3, fp
 8008df0:	9305      	str	r3, [sp, #20]
 8008df2:	920e      	str	r2, [sp, #56]	; 0x38
 8008df4:	f1cb 0300 	rsb	r3, fp, #0
 8008df8:	e7e3      	b.n	8008dc2 <_dtoa_r+0x1f2>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	9208      	str	r2, [sp, #32]
 8008dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	dc39      	bgt.n	8008e78 <_dtoa_r+0x2a8>
 8008e04:	f04f 0a01 	mov.w	sl, #1
 8008e08:	46d1      	mov	r9, sl
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008e10:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008e12:	2100      	movs	r1, #0
 8008e14:	6079      	str	r1, [r7, #4]
 8008e16:	2004      	movs	r0, #4
 8008e18:	f100 0c14 	add.w	ip, r0, #20
 8008e1c:	4594      	cmp	ip, r2
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	d92f      	bls.n	8008e82 <_dtoa_r+0x2b2>
 8008e22:	4630      	mov	r0, r6
 8008e24:	930c      	str	r3, [sp, #48]	; 0x30
 8008e26:	f000 fff1 	bl	8009e0c <_Balloc>
 8008e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e2c:	9000      	str	r0, [sp, #0]
 8008e2e:	4602      	mov	r2, r0
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d149      	bne.n	8008ec8 <_dtoa_r+0x2f8>
 8008e34:	4b23      	ldr	r3, [pc, #140]	; (8008ec4 <_dtoa_r+0x2f4>)
 8008e36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e3a:	e6df      	b.n	8008bfc <_dtoa_r+0x2c>
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	e7dd      	b.n	8008dfc <_dtoa_r+0x22c>
 8008e40:	2200      	movs	r2, #0
 8008e42:	9208      	str	r2, [sp, #32]
 8008e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e46:	eb0b 0a02 	add.w	sl, fp, r2
 8008e4a:	f10a 0901 	add.w	r9, sl, #1
 8008e4e:	464a      	mov	r2, r9
 8008e50:	2a01      	cmp	r2, #1
 8008e52:	bfb8      	it	lt
 8008e54:	2201      	movlt	r2, #1
 8008e56:	e7db      	b.n	8008e10 <_dtoa_r+0x240>
 8008e58:	2201      	movs	r2, #1
 8008e5a:	e7f2      	b.n	8008e42 <_dtoa_r+0x272>
 8008e5c:	2401      	movs	r4, #1
 8008e5e:	2200      	movs	r2, #0
 8008e60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008e64:	f04f 3aff 	mov.w	sl, #4294967295
 8008e68:	2100      	movs	r1, #0
 8008e6a:	46d1      	mov	r9, sl
 8008e6c:	2212      	movs	r2, #18
 8008e6e:	9109      	str	r1, [sp, #36]	; 0x24
 8008e70:	e7ce      	b.n	8008e10 <_dtoa_r+0x240>
 8008e72:	2201      	movs	r2, #1
 8008e74:	9208      	str	r2, [sp, #32]
 8008e76:	e7f5      	b.n	8008e64 <_dtoa_r+0x294>
 8008e78:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008e7c:	46d1      	mov	r9, sl
 8008e7e:	4652      	mov	r2, sl
 8008e80:	e7c6      	b.n	8008e10 <_dtoa_r+0x240>
 8008e82:	3101      	adds	r1, #1
 8008e84:	6079      	str	r1, [r7, #4]
 8008e86:	0040      	lsls	r0, r0, #1
 8008e88:	e7c6      	b.n	8008e18 <_dtoa_r+0x248>
 8008e8a:	bf00      	nop
 8008e8c:	f3af 8000 	nop.w
 8008e90:	636f4361 	.word	0x636f4361
 8008e94:	3fd287a7 	.word	0x3fd287a7
 8008e98:	8b60c8b3 	.word	0x8b60c8b3
 8008e9c:	3fc68a28 	.word	0x3fc68a28
 8008ea0:	509f79fb 	.word	0x509f79fb
 8008ea4:	3fd34413 	.word	0x3fd34413
 8008ea8:	0800b8ad 	.word	0x0800b8ad
 8008eac:	0800b8c4 	.word	0x0800b8c4
 8008eb0:	7ff00000 	.word	0x7ff00000
 8008eb4:	0800b8a9 	.word	0x0800b8a9
 8008eb8:	0800b8a0 	.word	0x0800b8a0
 8008ebc:	0800b829 	.word	0x0800b829
 8008ec0:	0800ba40 	.word	0x0800ba40
 8008ec4:	0800b923 	.word	0x0800b923
 8008ec8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008eca:	9900      	ldr	r1, [sp, #0]
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	f1b9 0f0e 	cmp.w	r9, #14
 8008ed2:	d872      	bhi.n	8008fba <_dtoa_r+0x3ea>
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	d070      	beq.n	8008fba <_dtoa_r+0x3ea>
 8008ed8:	f1bb 0f00 	cmp.w	fp, #0
 8008edc:	f340 80a6 	ble.w	800902c <_dtoa_r+0x45c>
 8008ee0:	49ca      	ldr	r1, [pc, #808]	; (800920c <_dtoa_r+0x63c>)
 8008ee2:	f00b 020f 	and.w	r2, fp, #15
 8008ee6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008eea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008eee:	ed92 7b00 	vldr	d7, [r2]
 8008ef2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008ef6:	f000 808d 	beq.w	8009014 <_dtoa_r+0x444>
 8008efa:	4ac5      	ldr	r2, [pc, #788]	; (8009210 <_dtoa_r+0x640>)
 8008efc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008f00:	ed92 6b08 	vldr	d6, [r2, #32]
 8008f04:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008f08:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008f0c:	f001 010f 	and.w	r1, r1, #15
 8008f10:	2203      	movs	r2, #3
 8008f12:	48bf      	ldr	r0, [pc, #764]	; (8009210 <_dtoa_r+0x640>)
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d17f      	bne.n	8009018 <_dtoa_r+0x448>
 8008f18:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f1c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008f20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f26:	2900      	cmp	r1, #0
 8008f28:	f000 80b2 	beq.w	8009090 <_dtoa_r+0x4c0>
 8008f2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3c:	f140 80a8 	bpl.w	8009090 <_dtoa_r+0x4c0>
 8008f40:	f1b9 0f00 	cmp.w	r9, #0
 8008f44:	f000 80a4 	beq.w	8009090 <_dtoa_r+0x4c0>
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	dd31      	ble.n	8008fb2 <_dtoa_r+0x3e2>
 8008f4e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f5a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f5e:	3201      	adds	r2, #1
 8008f60:	4650      	mov	r0, sl
 8008f62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f66:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008f6a:	ee07 2a90 	vmov	s15, r2
 8008f6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f72:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008f76:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008f7a:	9c03      	ldr	r4, [sp, #12]
 8008f7c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008f80:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f040 8086 	bne.w	8009096 <_dtoa_r+0x4c6>
 8008f8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008f92:	ec42 1b17 	vmov	d7, r1, r2
 8008f96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9e:	f300 8272 	bgt.w	8009486 <_dtoa_r+0x8b6>
 8008fa2:	eeb1 7b47 	vneg.f64	d7, d7
 8008fa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fae:	f100 8267 	bmi.w	8009480 <_dtoa_r+0x8b0>
 8008fb2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008fb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008fba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fbc:	2a00      	cmp	r2, #0
 8008fbe:	f2c0 8129 	blt.w	8009214 <_dtoa_r+0x644>
 8008fc2:	f1bb 0f0e 	cmp.w	fp, #14
 8008fc6:	f300 8125 	bgt.w	8009214 <_dtoa_r+0x644>
 8008fca:	4b90      	ldr	r3, [pc, #576]	; (800920c <_dtoa_r+0x63c>)
 8008fcc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fd0:	ed93 6b00 	vldr	d6, [r3]
 8008fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f280 80c3 	bge.w	8009162 <_dtoa_r+0x592>
 8008fdc:	f1b9 0f00 	cmp.w	r9, #0
 8008fe0:	f300 80bf 	bgt.w	8009162 <_dtoa_r+0x592>
 8008fe4:	f040 824c 	bne.w	8009480 <_dtoa_r+0x8b0>
 8008fe8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008fec:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008ff0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffc:	464c      	mov	r4, r9
 8008ffe:	464f      	mov	r7, r9
 8009000:	f280 8222 	bge.w	8009448 <_dtoa_r+0x878>
 8009004:	f8dd 8000 	ldr.w	r8, [sp]
 8009008:	2331      	movs	r3, #49	; 0x31
 800900a:	f808 3b01 	strb.w	r3, [r8], #1
 800900e:	f10b 0b01 	add.w	fp, fp, #1
 8009012:	e21e      	b.n	8009452 <_dtoa_r+0x882>
 8009014:	2202      	movs	r2, #2
 8009016:	e77c      	b.n	8008f12 <_dtoa_r+0x342>
 8009018:	07cc      	lsls	r4, r1, #31
 800901a:	d504      	bpl.n	8009026 <_dtoa_r+0x456>
 800901c:	ed90 6b00 	vldr	d6, [r0]
 8009020:	3201      	adds	r2, #1
 8009022:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009026:	1049      	asrs	r1, r1, #1
 8009028:	3008      	adds	r0, #8
 800902a:	e773      	b.n	8008f14 <_dtoa_r+0x344>
 800902c:	d02e      	beq.n	800908c <_dtoa_r+0x4bc>
 800902e:	f1cb 0100 	rsb	r1, fp, #0
 8009032:	4a76      	ldr	r2, [pc, #472]	; (800920c <_dtoa_r+0x63c>)
 8009034:	f001 000f 	and.w	r0, r1, #15
 8009038:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800903c:	ed92 7b00 	vldr	d7, [r2]
 8009040:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009044:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009048:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800904c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009050:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009054:	486e      	ldr	r0, [pc, #440]	; (8009210 <_dtoa_r+0x640>)
 8009056:	1109      	asrs	r1, r1, #4
 8009058:	2400      	movs	r4, #0
 800905a:	2202      	movs	r2, #2
 800905c:	b939      	cbnz	r1, 800906e <_dtoa_r+0x49e>
 800905e:	2c00      	cmp	r4, #0
 8009060:	f43f af60 	beq.w	8008f24 <_dtoa_r+0x354>
 8009064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800906c:	e75a      	b.n	8008f24 <_dtoa_r+0x354>
 800906e:	07cf      	lsls	r7, r1, #31
 8009070:	d509      	bpl.n	8009086 <_dtoa_r+0x4b6>
 8009072:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009076:	ed90 7b00 	vldr	d7, [r0]
 800907a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800907e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009082:	3201      	adds	r2, #1
 8009084:	2401      	movs	r4, #1
 8009086:	1049      	asrs	r1, r1, #1
 8009088:	3008      	adds	r0, #8
 800908a:	e7e7      	b.n	800905c <_dtoa_r+0x48c>
 800908c:	2202      	movs	r2, #2
 800908e:	e749      	b.n	8008f24 <_dtoa_r+0x354>
 8009090:	465f      	mov	r7, fp
 8009092:	4648      	mov	r0, r9
 8009094:	e765      	b.n	8008f62 <_dtoa_r+0x392>
 8009096:	ec42 1b17 	vmov	d7, r1, r2
 800909a:	4a5c      	ldr	r2, [pc, #368]	; (800920c <_dtoa_r+0x63c>)
 800909c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80090a0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80090a4:	9a00      	ldr	r2, [sp, #0]
 80090a6:	1814      	adds	r4, r2, r0
 80090a8:	9a08      	ldr	r2, [sp, #32]
 80090aa:	b352      	cbz	r2, 8009102 <_dtoa_r+0x532>
 80090ac:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80090b0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80090b4:	f8dd 8000 	ldr.w	r8, [sp]
 80090b8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80090bc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80090c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80090c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80090c8:	ee14 2a90 	vmov	r2, s9
 80090cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80090d0:	3230      	adds	r2, #48	; 0x30
 80090d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80090d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090de:	f808 2b01 	strb.w	r2, [r8], #1
 80090e2:	d439      	bmi.n	8009158 <_dtoa_r+0x588>
 80090e4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80090e8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80090ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f0:	d472      	bmi.n	80091d8 <_dtoa_r+0x608>
 80090f2:	45a0      	cmp	r8, r4
 80090f4:	f43f af5d 	beq.w	8008fb2 <_dtoa_r+0x3e2>
 80090f8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80090fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009100:	e7e0      	b.n	80090c4 <_dtoa_r+0x4f4>
 8009102:	f8dd 8000 	ldr.w	r8, [sp]
 8009106:	ee27 7b04 	vmul.f64	d7, d7, d4
 800910a:	4621      	mov	r1, r4
 800910c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009110:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009114:	ee14 2a90 	vmov	r2, s9
 8009118:	3230      	adds	r2, #48	; 0x30
 800911a:	f808 2b01 	strb.w	r2, [r8], #1
 800911e:	45a0      	cmp	r8, r4
 8009120:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009124:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009128:	d118      	bne.n	800915c <_dtoa_r+0x58c>
 800912a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800912e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009132:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913a:	dc4d      	bgt.n	80091d8 <_dtoa_r+0x608>
 800913c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009140:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009148:	f57f af33 	bpl.w	8008fb2 <_dtoa_r+0x3e2>
 800914c:	4688      	mov	r8, r1
 800914e:	3901      	subs	r1, #1
 8009150:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009154:	2b30      	cmp	r3, #48	; 0x30
 8009156:	d0f9      	beq.n	800914c <_dtoa_r+0x57c>
 8009158:	46bb      	mov	fp, r7
 800915a:	e02a      	b.n	80091b2 <_dtoa_r+0x5e2>
 800915c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009160:	e7d6      	b.n	8009110 <_dtoa_r+0x540>
 8009162:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009166:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800916a:	f8dd 8000 	ldr.w	r8, [sp]
 800916e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009172:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009176:	ee15 3a10 	vmov	r3, s10
 800917a:	3330      	adds	r3, #48	; 0x30
 800917c:	f808 3b01 	strb.w	r3, [r8], #1
 8009180:	9b00      	ldr	r3, [sp, #0]
 8009182:	eba8 0303 	sub.w	r3, r8, r3
 8009186:	4599      	cmp	r9, r3
 8009188:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800918c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009190:	d133      	bne.n	80091fa <_dtoa_r+0x62a>
 8009192:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009196:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800919a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919e:	dc1a      	bgt.n	80091d6 <_dtoa_r+0x606>
 80091a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80091a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a8:	d103      	bne.n	80091b2 <_dtoa_r+0x5e2>
 80091aa:	ee15 3a10 	vmov	r3, s10
 80091ae:	07d9      	lsls	r1, r3, #31
 80091b0:	d411      	bmi.n	80091d6 <_dtoa_r+0x606>
 80091b2:	4629      	mov	r1, r5
 80091b4:	4630      	mov	r0, r6
 80091b6:	f000 fe69 	bl	8009e8c <_Bfree>
 80091ba:	2300      	movs	r3, #0
 80091bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091be:	f888 3000 	strb.w	r3, [r8]
 80091c2:	f10b 0301 	add.w	r3, fp, #1
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f43f ad4d 	beq.w	8008c6a <_dtoa_r+0x9a>
 80091d0:	f8c3 8000 	str.w	r8, [r3]
 80091d4:	e549      	b.n	8008c6a <_dtoa_r+0x9a>
 80091d6:	465f      	mov	r7, fp
 80091d8:	4643      	mov	r3, r8
 80091da:	4698      	mov	r8, r3
 80091dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091e0:	2a39      	cmp	r2, #57	; 0x39
 80091e2:	d106      	bne.n	80091f2 <_dtoa_r+0x622>
 80091e4:	9a00      	ldr	r2, [sp, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d1f7      	bne.n	80091da <_dtoa_r+0x60a>
 80091ea:	9900      	ldr	r1, [sp, #0]
 80091ec:	2230      	movs	r2, #48	; 0x30
 80091ee:	3701      	adds	r7, #1
 80091f0:	700a      	strb	r2, [r1, #0]
 80091f2:	781a      	ldrb	r2, [r3, #0]
 80091f4:	3201      	adds	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	e7ae      	b.n	8009158 <_dtoa_r+0x588>
 80091fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80091fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009206:	d1b2      	bne.n	800916e <_dtoa_r+0x59e>
 8009208:	e7d3      	b.n	80091b2 <_dtoa_r+0x5e2>
 800920a:	bf00      	nop
 800920c:	0800ba40 	.word	0x0800ba40
 8009210:	0800ba18 	.word	0x0800ba18
 8009214:	9908      	ldr	r1, [sp, #32]
 8009216:	2900      	cmp	r1, #0
 8009218:	f000 80d1 	beq.w	80093be <_dtoa_r+0x7ee>
 800921c:	9907      	ldr	r1, [sp, #28]
 800921e:	2901      	cmp	r1, #1
 8009220:	f300 80b4 	bgt.w	800938c <_dtoa_r+0x7bc>
 8009224:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009226:	2900      	cmp	r1, #0
 8009228:	f000 80ac 	beq.w	8009384 <_dtoa_r+0x7b4>
 800922c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009230:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009234:	461c      	mov	r4, r3
 8009236:	930a      	str	r3, [sp, #40]	; 0x28
 8009238:	9b05      	ldr	r3, [sp, #20]
 800923a:	4413      	add	r3, r2
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	9b06      	ldr	r3, [sp, #24]
 8009240:	2101      	movs	r1, #1
 8009242:	4413      	add	r3, r2
 8009244:	4630      	mov	r0, r6
 8009246:	9306      	str	r3, [sp, #24]
 8009248:	f000 ff26 	bl	800a098 <__i2b>
 800924c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924e:	4607      	mov	r7, r0
 8009250:	f1b8 0f00 	cmp.w	r8, #0
 8009254:	dd0d      	ble.n	8009272 <_dtoa_r+0x6a2>
 8009256:	9a06      	ldr	r2, [sp, #24]
 8009258:	2a00      	cmp	r2, #0
 800925a:	dd0a      	ble.n	8009272 <_dtoa_r+0x6a2>
 800925c:	4542      	cmp	r2, r8
 800925e:	9905      	ldr	r1, [sp, #20]
 8009260:	bfa8      	it	ge
 8009262:	4642      	movge	r2, r8
 8009264:	1a89      	subs	r1, r1, r2
 8009266:	9105      	str	r1, [sp, #20]
 8009268:	9906      	ldr	r1, [sp, #24]
 800926a:	eba8 0802 	sub.w	r8, r8, r2
 800926e:	1a8a      	subs	r2, r1, r2
 8009270:	9206      	str	r2, [sp, #24]
 8009272:	b303      	cbz	r3, 80092b6 <_dtoa_r+0x6e6>
 8009274:	9a08      	ldr	r2, [sp, #32]
 8009276:	2a00      	cmp	r2, #0
 8009278:	f000 80a6 	beq.w	80093c8 <_dtoa_r+0x7f8>
 800927c:	2c00      	cmp	r4, #0
 800927e:	dd13      	ble.n	80092a8 <_dtoa_r+0x6d8>
 8009280:	4639      	mov	r1, r7
 8009282:	4622      	mov	r2, r4
 8009284:	4630      	mov	r0, r6
 8009286:	930c      	str	r3, [sp, #48]	; 0x30
 8009288:	f000 ffc2 	bl	800a210 <__pow5mult>
 800928c:	462a      	mov	r2, r5
 800928e:	4601      	mov	r1, r0
 8009290:	4607      	mov	r7, r0
 8009292:	4630      	mov	r0, r6
 8009294:	f000 ff16 	bl	800a0c4 <__multiply>
 8009298:	4629      	mov	r1, r5
 800929a:	900a      	str	r0, [sp, #40]	; 0x28
 800929c:	4630      	mov	r0, r6
 800929e:	f000 fdf5 	bl	8009e8c <_Bfree>
 80092a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a6:	4615      	mov	r5, r2
 80092a8:	1b1a      	subs	r2, r3, r4
 80092aa:	d004      	beq.n	80092b6 <_dtoa_r+0x6e6>
 80092ac:	4629      	mov	r1, r5
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 ffae 	bl	800a210 <__pow5mult>
 80092b4:	4605      	mov	r5, r0
 80092b6:	2101      	movs	r1, #1
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 feed 	bl	800a098 <__i2b>
 80092be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	f340 8082 	ble.w	80093cc <_dtoa_r+0x7fc>
 80092c8:	461a      	mov	r2, r3
 80092ca:	4601      	mov	r1, r0
 80092cc:	4630      	mov	r0, r6
 80092ce:	f000 ff9f 	bl	800a210 <__pow5mult>
 80092d2:	9b07      	ldr	r3, [sp, #28]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	4604      	mov	r4, r0
 80092d8:	dd7b      	ble.n	80093d2 <_dtoa_r+0x802>
 80092da:	2300      	movs	r3, #0
 80092dc:	930a      	str	r3, [sp, #40]	; 0x28
 80092de:	6922      	ldr	r2, [r4, #16]
 80092e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80092e4:	6910      	ldr	r0, [r2, #16]
 80092e6:	f000 fe87 	bl	8009ff8 <__hi0bits>
 80092ea:	f1c0 0020 	rsb	r0, r0, #32
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	4418      	add	r0, r3
 80092f2:	f010 001f 	ands.w	r0, r0, #31
 80092f6:	f000 808d 	beq.w	8009414 <_dtoa_r+0x844>
 80092fa:	f1c0 0220 	rsb	r2, r0, #32
 80092fe:	2a04      	cmp	r2, #4
 8009300:	f340 8086 	ble.w	8009410 <_dtoa_r+0x840>
 8009304:	f1c0 001c 	rsb	r0, r0, #28
 8009308:	9b05      	ldr	r3, [sp, #20]
 800930a:	4403      	add	r3, r0
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	9b06      	ldr	r3, [sp, #24]
 8009310:	4403      	add	r3, r0
 8009312:	4480      	add	r8, r0
 8009314:	9306      	str	r3, [sp, #24]
 8009316:	9b05      	ldr	r3, [sp, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dd05      	ble.n	8009328 <_dtoa_r+0x758>
 800931c:	4629      	mov	r1, r5
 800931e:	461a      	mov	r2, r3
 8009320:	4630      	mov	r0, r6
 8009322:	f000 ffcf 	bl	800a2c4 <__lshift>
 8009326:	4605      	mov	r5, r0
 8009328:	9b06      	ldr	r3, [sp, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	dd05      	ble.n	800933a <_dtoa_r+0x76a>
 800932e:	4621      	mov	r1, r4
 8009330:	461a      	mov	r2, r3
 8009332:	4630      	mov	r0, r6
 8009334:	f000 ffc6 	bl	800a2c4 <__lshift>
 8009338:	4604      	mov	r4, r0
 800933a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d06b      	beq.n	8009418 <_dtoa_r+0x848>
 8009340:	4621      	mov	r1, r4
 8009342:	4628      	mov	r0, r5
 8009344:	f001 f82a 	bl	800a39c <__mcmp>
 8009348:	2800      	cmp	r0, #0
 800934a:	da65      	bge.n	8009418 <_dtoa_r+0x848>
 800934c:	2300      	movs	r3, #0
 800934e:	4629      	mov	r1, r5
 8009350:	220a      	movs	r2, #10
 8009352:	4630      	mov	r0, r6
 8009354:	f000 fdbc 	bl	8009ed0 <__multadd>
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800935e:	4605      	mov	r5, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 8192 	beq.w	800968a <_dtoa_r+0xaba>
 8009366:	4639      	mov	r1, r7
 8009368:	2300      	movs	r3, #0
 800936a:	220a      	movs	r2, #10
 800936c:	4630      	mov	r0, r6
 800936e:	f000 fdaf 	bl	8009ed0 <__multadd>
 8009372:	f1ba 0f00 	cmp.w	sl, #0
 8009376:	4607      	mov	r7, r0
 8009378:	f300 808e 	bgt.w	8009498 <_dtoa_r+0x8c8>
 800937c:	9b07      	ldr	r3, [sp, #28]
 800937e:	2b02      	cmp	r3, #2
 8009380:	dc51      	bgt.n	8009426 <_dtoa_r+0x856>
 8009382:	e089      	b.n	8009498 <_dtoa_r+0x8c8>
 8009384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009386:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800938a:	e751      	b.n	8009230 <_dtoa_r+0x660>
 800938c:	f109 34ff 	add.w	r4, r9, #4294967295
 8009390:	42a3      	cmp	r3, r4
 8009392:	bfbf      	itttt	lt
 8009394:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009396:	1ae3      	sublt	r3, r4, r3
 8009398:	18d2      	addlt	r2, r2, r3
 800939a:	4613      	movlt	r3, r2
 800939c:	bfb7      	itett	lt
 800939e:	930e      	strlt	r3, [sp, #56]	; 0x38
 80093a0:	1b1c      	subge	r4, r3, r4
 80093a2:	4623      	movlt	r3, r4
 80093a4:	2400      	movlt	r4, #0
 80093a6:	f1b9 0f00 	cmp.w	r9, #0
 80093aa:	bfb5      	itete	lt
 80093ac:	9a05      	ldrlt	r2, [sp, #20]
 80093ae:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80093b2:	eba2 0809 	sublt.w	r8, r2, r9
 80093b6:	464a      	movge	r2, r9
 80093b8:	bfb8      	it	lt
 80093ba:	2200      	movlt	r2, #0
 80093bc:	e73b      	b.n	8009236 <_dtoa_r+0x666>
 80093be:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80093c2:	9f08      	ldr	r7, [sp, #32]
 80093c4:	461c      	mov	r4, r3
 80093c6:	e743      	b.n	8009250 <_dtoa_r+0x680>
 80093c8:	461a      	mov	r2, r3
 80093ca:	e76f      	b.n	80092ac <_dtoa_r+0x6dc>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	dc18      	bgt.n	8009404 <_dtoa_r+0x834>
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	b9b3      	cbnz	r3, 8009404 <_dtoa_r+0x834>
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80093dc:	b9a2      	cbnz	r2, 8009408 <_dtoa_r+0x838>
 80093de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093e2:	0d12      	lsrs	r2, r2, #20
 80093e4:	0512      	lsls	r2, r2, #20
 80093e6:	b18a      	cbz	r2, 800940c <_dtoa_r+0x83c>
 80093e8:	9b05      	ldr	r3, [sp, #20]
 80093ea:	3301      	adds	r3, #1
 80093ec:	9305      	str	r3, [sp, #20]
 80093ee:	9b06      	ldr	r3, [sp, #24]
 80093f0:	3301      	adds	r3, #1
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	2301      	movs	r3, #1
 80093f6:	930a      	str	r3, [sp, #40]	; 0x28
 80093f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f47f af6f 	bne.w	80092de <_dtoa_r+0x70e>
 8009400:	2001      	movs	r0, #1
 8009402:	e774      	b.n	80092ee <_dtoa_r+0x71e>
 8009404:	2300      	movs	r3, #0
 8009406:	e7f6      	b.n	80093f6 <_dtoa_r+0x826>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	e7f4      	b.n	80093f6 <_dtoa_r+0x826>
 800940c:	920a      	str	r2, [sp, #40]	; 0x28
 800940e:	e7f3      	b.n	80093f8 <_dtoa_r+0x828>
 8009410:	d081      	beq.n	8009316 <_dtoa_r+0x746>
 8009412:	4610      	mov	r0, r2
 8009414:	301c      	adds	r0, #28
 8009416:	e777      	b.n	8009308 <_dtoa_r+0x738>
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	dc37      	bgt.n	800948e <_dtoa_r+0x8be>
 800941e:	9b07      	ldr	r3, [sp, #28]
 8009420:	2b02      	cmp	r3, #2
 8009422:	dd34      	ble.n	800948e <_dtoa_r+0x8be>
 8009424:	46ca      	mov	sl, r9
 8009426:	f1ba 0f00 	cmp.w	sl, #0
 800942a:	d10d      	bne.n	8009448 <_dtoa_r+0x878>
 800942c:	4621      	mov	r1, r4
 800942e:	4653      	mov	r3, sl
 8009430:	2205      	movs	r2, #5
 8009432:	4630      	mov	r0, r6
 8009434:	f000 fd4c 	bl	8009ed0 <__multadd>
 8009438:	4601      	mov	r1, r0
 800943a:	4604      	mov	r4, r0
 800943c:	4628      	mov	r0, r5
 800943e:	f000 ffad 	bl	800a39c <__mcmp>
 8009442:	2800      	cmp	r0, #0
 8009444:	f73f adde 	bgt.w	8009004 <_dtoa_r+0x434>
 8009448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944a:	f8dd 8000 	ldr.w	r8, [sp]
 800944e:	ea6f 0b03 	mvn.w	fp, r3
 8009452:	f04f 0900 	mov.w	r9, #0
 8009456:	4621      	mov	r1, r4
 8009458:	4630      	mov	r0, r6
 800945a:	f000 fd17 	bl	8009e8c <_Bfree>
 800945e:	2f00      	cmp	r7, #0
 8009460:	f43f aea7 	beq.w	80091b2 <_dtoa_r+0x5e2>
 8009464:	f1b9 0f00 	cmp.w	r9, #0
 8009468:	d005      	beq.n	8009476 <_dtoa_r+0x8a6>
 800946a:	45b9      	cmp	r9, r7
 800946c:	d003      	beq.n	8009476 <_dtoa_r+0x8a6>
 800946e:	4649      	mov	r1, r9
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fd0b 	bl	8009e8c <_Bfree>
 8009476:	4639      	mov	r1, r7
 8009478:	4630      	mov	r0, r6
 800947a:	f000 fd07 	bl	8009e8c <_Bfree>
 800947e:	e698      	b.n	80091b2 <_dtoa_r+0x5e2>
 8009480:	2400      	movs	r4, #0
 8009482:	4627      	mov	r7, r4
 8009484:	e7e0      	b.n	8009448 <_dtoa_r+0x878>
 8009486:	46bb      	mov	fp, r7
 8009488:	4604      	mov	r4, r0
 800948a:	4607      	mov	r7, r0
 800948c:	e5ba      	b.n	8009004 <_dtoa_r+0x434>
 800948e:	9b08      	ldr	r3, [sp, #32]
 8009490:	46ca      	mov	sl, r9
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 8100 	beq.w	8009698 <_dtoa_r+0xac8>
 8009498:	f1b8 0f00 	cmp.w	r8, #0
 800949c:	dd05      	ble.n	80094aa <_dtoa_r+0x8da>
 800949e:	4639      	mov	r1, r7
 80094a0:	4642      	mov	r2, r8
 80094a2:	4630      	mov	r0, r6
 80094a4:	f000 ff0e 	bl	800a2c4 <__lshift>
 80094a8:	4607      	mov	r7, r0
 80094aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d05d      	beq.n	800956c <_dtoa_r+0x99c>
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 fcaa 	bl	8009e0c <_Balloc>
 80094b8:	4680      	mov	r8, r0
 80094ba:	b928      	cbnz	r0, 80094c8 <_dtoa_r+0x8f8>
 80094bc:	4b82      	ldr	r3, [pc, #520]	; (80096c8 <_dtoa_r+0xaf8>)
 80094be:	4602      	mov	r2, r0
 80094c0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094c4:	f7ff bb9a 	b.w	8008bfc <_dtoa_r+0x2c>
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	3202      	adds	r2, #2
 80094cc:	0092      	lsls	r2, r2, #2
 80094ce:	f107 010c 	add.w	r1, r7, #12
 80094d2:	300c      	adds	r0, #12
 80094d4:	f000 fc8c 	bl	8009df0 <memcpy>
 80094d8:	2201      	movs	r2, #1
 80094da:	4641      	mov	r1, r8
 80094dc:	4630      	mov	r0, r6
 80094de:	f000 fef1 	bl	800a2c4 <__lshift>
 80094e2:	9b00      	ldr	r3, [sp, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	9305      	str	r3, [sp, #20]
 80094e8:	9b00      	ldr	r3, [sp, #0]
 80094ea:	4453      	add	r3, sl
 80094ec:	9309      	str	r3, [sp, #36]	; 0x24
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	46b9      	mov	r9, r7
 80094f6:	9308      	str	r3, [sp, #32]
 80094f8:	4607      	mov	r7, r0
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	4621      	mov	r1, r4
 80094fe:	3b01      	subs	r3, #1
 8009500:	4628      	mov	r0, r5
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	f7ff fad6 	bl	8008ab4 <quorem>
 8009508:	4603      	mov	r3, r0
 800950a:	3330      	adds	r3, #48	; 0x30
 800950c:	9006      	str	r0, [sp, #24]
 800950e:	4649      	mov	r1, r9
 8009510:	4628      	mov	r0, r5
 8009512:	930a      	str	r3, [sp, #40]	; 0x28
 8009514:	f000 ff42 	bl	800a39c <__mcmp>
 8009518:	463a      	mov	r2, r7
 800951a:	4682      	mov	sl, r0
 800951c:	4621      	mov	r1, r4
 800951e:	4630      	mov	r0, r6
 8009520:	f000 ff58 	bl	800a3d4 <__mdiff>
 8009524:	68c2      	ldr	r2, [r0, #12]
 8009526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009528:	4680      	mov	r8, r0
 800952a:	bb0a      	cbnz	r2, 8009570 <_dtoa_r+0x9a0>
 800952c:	4601      	mov	r1, r0
 800952e:	4628      	mov	r0, r5
 8009530:	f000 ff34 	bl	800a39c <__mcmp>
 8009534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009536:	4602      	mov	r2, r0
 8009538:	4641      	mov	r1, r8
 800953a:	4630      	mov	r0, r6
 800953c:	920e      	str	r2, [sp, #56]	; 0x38
 800953e:	930a      	str	r3, [sp, #40]	; 0x28
 8009540:	f000 fca4 	bl	8009e8c <_Bfree>
 8009544:	9b07      	ldr	r3, [sp, #28]
 8009546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009548:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800954c:	ea43 0102 	orr.w	r1, r3, r2
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	430b      	orrs	r3, r1
 8009554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009556:	d10d      	bne.n	8009574 <_dtoa_r+0x9a4>
 8009558:	2b39      	cmp	r3, #57	; 0x39
 800955a:	d029      	beq.n	80095b0 <_dtoa_r+0x9e0>
 800955c:	f1ba 0f00 	cmp.w	sl, #0
 8009560:	dd01      	ble.n	8009566 <_dtoa_r+0x996>
 8009562:	9b06      	ldr	r3, [sp, #24]
 8009564:	3331      	adds	r3, #49	; 0x31
 8009566:	9a02      	ldr	r2, [sp, #8]
 8009568:	7013      	strb	r3, [r2, #0]
 800956a:	e774      	b.n	8009456 <_dtoa_r+0x886>
 800956c:	4638      	mov	r0, r7
 800956e:	e7b8      	b.n	80094e2 <_dtoa_r+0x912>
 8009570:	2201      	movs	r2, #1
 8009572:	e7e1      	b.n	8009538 <_dtoa_r+0x968>
 8009574:	f1ba 0f00 	cmp.w	sl, #0
 8009578:	db06      	blt.n	8009588 <_dtoa_r+0x9b8>
 800957a:	9907      	ldr	r1, [sp, #28]
 800957c:	ea41 0a0a 	orr.w	sl, r1, sl
 8009580:	9908      	ldr	r1, [sp, #32]
 8009582:	ea5a 0101 	orrs.w	r1, sl, r1
 8009586:	d120      	bne.n	80095ca <_dtoa_r+0x9fa>
 8009588:	2a00      	cmp	r2, #0
 800958a:	ddec      	ble.n	8009566 <_dtoa_r+0x996>
 800958c:	4629      	mov	r1, r5
 800958e:	2201      	movs	r2, #1
 8009590:	4630      	mov	r0, r6
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	f000 fe96 	bl	800a2c4 <__lshift>
 8009598:	4621      	mov	r1, r4
 800959a:	4605      	mov	r5, r0
 800959c:	f000 fefe 	bl	800a39c <__mcmp>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	9b05      	ldr	r3, [sp, #20]
 80095a4:	dc02      	bgt.n	80095ac <_dtoa_r+0x9dc>
 80095a6:	d1de      	bne.n	8009566 <_dtoa_r+0x996>
 80095a8:	07da      	lsls	r2, r3, #31
 80095aa:	d5dc      	bpl.n	8009566 <_dtoa_r+0x996>
 80095ac:	2b39      	cmp	r3, #57	; 0x39
 80095ae:	d1d8      	bne.n	8009562 <_dtoa_r+0x992>
 80095b0:	9a02      	ldr	r2, [sp, #8]
 80095b2:	2339      	movs	r3, #57	; 0x39
 80095b4:	7013      	strb	r3, [r2, #0]
 80095b6:	4643      	mov	r3, r8
 80095b8:	4698      	mov	r8, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80095c0:	2a39      	cmp	r2, #57	; 0x39
 80095c2:	d051      	beq.n	8009668 <_dtoa_r+0xa98>
 80095c4:	3201      	adds	r2, #1
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	e745      	b.n	8009456 <_dtoa_r+0x886>
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	dd03      	ble.n	80095d6 <_dtoa_r+0xa06>
 80095ce:	2b39      	cmp	r3, #57	; 0x39
 80095d0:	d0ee      	beq.n	80095b0 <_dtoa_r+0x9e0>
 80095d2:	3301      	adds	r3, #1
 80095d4:	e7c7      	b.n	8009566 <_dtoa_r+0x996>
 80095d6:	9a05      	ldr	r2, [sp, #20]
 80095d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095da:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095de:	428a      	cmp	r2, r1
 80095e0:	d02b      	beq.n	800963a <_dtoa_r+0xa6a>
 80095e2:	4629      	mov	r1, r5
 80095e4:	2300      	movs	r3, #0
 80095e6:	220a      	movs	r2, #10
 80095e8:	4630      	mov	r0, r6
 80095ea:	f000 fc71 	bl	8009ed0 <__multadd>
 80095ee:	45b9      	cmp	r9, r7
 80095f0:	4605      	mov	r5, r0
 80095f2:	f04f 0300 	mov.w	r3, #0
 80095f6:	f04f 020a 	mov.w	r2, #10
 80095fa:	4649      	mov	r1, r9
 80095fc:	4630      	mov	r0, r6
 80095fe:	d107      	bne.n	8009610 <_dtoa_r+0xa40>
 8009600:	f000 fc66 	bl	8009ed0 <__multadd>
 8009604:	4681      	mov	r9, r0
 8009606:	4607      	mov	r7, r0
 8009608:	9b05      	ldr	r3, [sp, #20]
 800960a:	3301      	adds	r3, #1
 800960c:	9305      	str	r3, [sp, #20]
 800960e:	e774      	b.n	80094fa <_dtoa_r+0x92a>
 8009610:	f000 fc5e 	bl	8009ed0 <__multadd>
 8009614:	4639      	mov	r1, r7
 8009616:	4681      	mov	r9, r0
 8009618:	2300      	movs	r3, #0
 800961a:	220a      	movs	r2, #10
 800961c:	4630      	mov	r0, r6
 800961e:	f000 fc57 	bl	8009ed0 <__multadd>
 8009622:	4607      	mov	r7, r0
 8009624:	e7f0      	b.n	8009608 <_dtoa_r+0xa38>
 8009626:	f1ba 0f00 	cmp.w	sl, #0
 800962a:	9a00      	ldr	r2, [sp, #0]
 800962c:	bfcc      	ite	gt
 800962e:	46d0      	movgt	r8, sl
 8009630:	f04f 0801 	movle.w	r8, #1
 8009634:	4490      	add	r8, r2
 8009636:	f04f 0900 	mov.w	r9, #0
 800963a:	4629      	mov	r1, r5
 800963c:	2201      	movs	r2, #1
 800963e:	4630      	mov	r0, r6
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	f000 fe3f 	bl	800a2c4 <__lshift>
 8009646:	4621      	mov	r1, r4
 8009648:	4605      	mov	r5, r0
 800964a:	f000 fea7 	bl	800a39c <__mcmp>
 800964e:	2800      	cmp	r0, #0
 8009650:	dcb1      	bgt.n	80095b6 <_dtoa_r+0x9e6>
 8009652:	d102      	bne.n	800965a <_dtoa_r+0xa8a>
 8009654:	9b02      	ldr	r3, [sp, #8]
 8009656:	07db      	lsls	r3, r3, #31
 8009658:	d4ad      	bmi.n	80095b6 <_dtoa_r+0x9e6>
 800965a:	4643      	mov	r3, r8
 800965c:	4698      	mov	r8, r3
 800965e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009662:	2a30      	cmp	r2, #48	; 0x30
 8009664:	d0fa      	beq.n	800965c <_dtoa_r+0xa8c>
 8009666:	e6f6      	b.n	8009456 <_dtoa_r+0x886>
 8009668:	9a00      	ldr	r2, [sp, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d1a4      	bne.n	80095b8 <_dtoa_r+0x9e8>
 800966e:	f10b 0b01 	add.w	fp, fp, #1
 8009672:	2331      	movs	r3, #49	; 0x31
 8009674:	e778      	b.n	8009568 <_dtoa_r+0x998>
 8009676:	4b15      	ldr	r3, [pc, #84]	; (80096cc <_dtoa_r+0xafc>)
 8009678:	f7ff bb12 	b.w	8008ca0 <_dtoa_r+0xd0>
 800967c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800967e:	2b00      	cmp	r3, #0
 8009680:	f47f aaee 	bne.w	8008c60 <_dtoa_r+0x90>
 8009684:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <_dtoa_r+0xb00>)
 8009686:	f7ff bb0b 	b.w	8008ca0 <_dtoa_r+0xd0>
 800968a:	f1ba 0f00 	cmp.w	sl, #0
 800968e:	dc03      	bgt.n	8009698 <_dtoa_r+0xac8>
 8009690:	9b07      	ldr	r3, [sp, #28]
 8009692:	2b02      	cmp	r3, #2
 8009694:	f73f aec7 	bgt.w	8009426 <_dtoa_r+0x856>
 8009698:	f8dd 8000 	ldr.w	r8, [sp]
 800969c:	4621      	mov	r1, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	f7ff fa08 	bl	8008ab4 <quorem>
 80096a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80096a8:	f808 3b01 	strb.w	r3, [r8], #1
 80096ac:	9a00      	ldr	r2, [sp, #0]
 80096ae:	eba8 0202 	sub.w	r2, r8, r2
 80096b2:	4592      	cmp	sl, r2
 80096b4:	ddb7      	ble.n	8009626 <_dtoa_r+0xa56>
 80096b6:	4629      	mov	r1, r5
 80096b8:	2300      	movs	r3, #0
 80096ba:	220a      	movs	r2, #10
 80096bc:	4630      	mov	r0, r6
 80096be:	f000 fc07 	bl	8009ed0 <__multadd>
 80096c2:	4605      	mov	r5, r0
 80096c4:	e7ea      	b.n	800969c <_dtoa_r+0xacc>
 80096c6:	bf00      	nop
 80096c8:	0800b923 	.word	0x0800b923
 80096cc:	0800b828 	.word	0x0800b828
 80096d0:	0800b8a0 	.word	0x0800b8a0

080096d4 <rshift>:
 80096d4:	6903      	ldr	r3, [r0, #16]
 80096d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096e2:	f100 0414 	add.w	r4, r0, #20
 80096e6:	dd45      	ble.n	8009774 <rshift+0xa0>
 80096e8:	f011 011f 	ands.w	r1, r1, #31
 80096ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80096f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80096f4:	d10c      	bne.n	8009710 <rshift+0x3c>
 80096f6:	f100 0710 	add.w	r7, r0, #16
 80096fa:	4629      	mov	r1, r5
 80096fc:	42b1      	cmp	r1, r6
 80096fe:	d334      	bcc.n	800976a <rshift+0x96>
 8009700:	1a9b      	subs	r3, r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	1eea      	subs	r2, r5, #3
 8009706:	4296      	cmp	r6, r2
 8009708:	bf38      	it	cc
 800970a:	2300      	movcc	r3, #0
 800970c:	4423      	add	r3, r4
 800970e:	e015      	b.n	800973c <rshift+0x68>
 8009710:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009714:	f1c1 0820 	rsb	r8, r1, #32
 8009718:	40cf      	lsrs	r7, r1
 800971a:	f105 0e04 	add.w	lr, r5, #4
 800971e:	46a1      	mov	r9, r4
 8009720:	4576      	cmp	r6, lr
 8009722:	46f4      	mov	ip, lr
 8009724:	d815      	bhi.n	8009752 <rshift+0x7e>
 8009726:	1a9b      	subs	r3, r3, r2
 8009728:	009a      	lsls	r2, r3, #2
 800972a:	3a04      	subs	r2, #4
 800972c:	3501      	adds	r5, #1
 800972e:	42ae      	cmp	r6, r5
 8009730:	bf38      	it	cc
 8009732:	2200      	movcc	r2, #0
 8009734:	18a3      	adds	r3, r4, r2
 8009736:	50a7      	str	r7, [r4, r2]
 8009738:	b107      	cbz	r7, 800973c <rshift+0x68>
 800973a:	3304      	adds	r3, #4
 800973c:	1b1a      	subs	r2, r3, r4
 800973e:	42a3      	cmp	r3, r4
 8009740:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009744:	bf08      	it	eq
 8009746:	2300      	moveq	r3, #0
 8009748:	6102      	str	r2, [r0, #16]
 800974a:	bf08      	it	eq
 800974c:	6143      	streq	r3, [r0, #20]
 800974e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009752:	f8dc c000 	ldr.w	ip, [ip]
 8009756:	fa0c fc08 	lsl.w	ip, ip, r8
 800975a:	ea4c 0707 	orr.w	r7, ip, r7
 800975e:	f849 7b04 	str.w	r7, [r9], #4
 8009762:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009766:	40cf      	lsrs	r7, r1
 8009768:	e7da      	b.n	8009720 <rshift+0x4c>
 800976a:	f851 cb04 	ldr.w	ip, [r1], #4
 800976e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009772:	e7c3      	b.n	80096fc <rshift+0x28>
 8009774:	4623      	mov	r3, r4
 8009776:	e7e1      	b.n	800973c <rshift+0x68>

08009778 <__hexdig_fun>:
 8009778:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800977c:	2b09      	cmp	r3, #9
 800977e:	d802      	bhi.n	8009786 <__hexdig_fun+0xe>
 8009780:	3820      	subs	r0, #32
 8009782:	b2c0      	uxtb	r0, r0
 8009784:	4770      	bx	lr
 8009786:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800978a:	2b05      	cmp	r3, #5
 800978c:	d801      	bhi.n	8009792 <__hexdig_fun+0x1a>
 800978e:	3847      	subs	r0, #71	; 0x47
 8009790:	e7f7      	b.n	8009782 <__hexdig_fun+0xa>
 8009792:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009796:	2b05      	cmp	r3, #5
 8009798:	d801      	bhi.n	800979e <__hexdig_fun+0x26>
 800979a:	3827      	subs	r0, #39	; 0x27
 800979c:	e7f1      	b.n	8009782 <__hexdig_fun+0xa>
 800979e:	2000      	movs	r0, #0
 80097a0:	4770      	bx	lr
	...

080097a4 <__gethex>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	ed2d 8b02 	vpush	{d8}
 80097ac:	b089      	sub	sp, #36	; 0x24
 80097ae:	ee08 0a10 	vmov	s16, r0
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	4bbc      	ldr	r3, [pc, #752]	; (8009aa8 <__gethex+0x304>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	4618      	mov	r0, r3
 80097bc:	468b      	mov	fp, r1
 80097be:	4690      	mov	r8, r2
 80097c0:	f7f6 fd3e 	bl	8000240 <strlen>
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	f8db 2000 	ldr.w	r2, [fp]
 80097ca:	4403      	add	r3, r0
 80097cc:	4682      	mov	sl, r0
 80097ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097d2:	9305      	str	r3, [sp, #20]
 80097d4:	1c93      	adds	r3, r2, #2
 80097d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097de:	32fe      	adds	r2, #254	; 0xfe
 80097e0:	18d1      	adds	r1, r2, r3
 80097e2:	461f      	mov	r7, r3
 80097e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097e8:	9100      	str	r1, [sp, #0]
 80097ea:	2830      	cmp	r0, #48	; 0x30
 80097ec:	d0f8      	beq.n	80097e0 <__gethex+0x3c>
 80097ee:	f7ff ffc3 	bl	8009778 <__hexdig_fun>
 80097f2:	4604      	mov	r4, r0
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d13a      	bne.n	800986e <__gethex+0xca>
 80097f8:	9901      	ldr	r1, [sp, #4]
 80097fa:	4652      	mov	r2, sl
 80097fc:	4638      	mov	r0, r7
 80097fe:	f001 f9ef 	bl	800abe0 <strncmp>
 8009802:	4605      	mov	r5, r0
 8009804:	2800      	cmp	r0, #0
 8009806:	d168      	bne.n	80098da <__gethex+0x136>
 8009808:	f817 000a 	ldrb.w	r0, [r7, sl]
 800980c:	eb07 060a 	add.w	r6, r7, sl
 8009810:	f7ff ffb2 	bl	8009778 <__hexdig_fun>
 8009814:	2800      	cmp	r0, #0
 8009816:	d062      	beq.n	80098de <__gethex+0x13a>
 8009818:	4633      	mov	r3, r6
 800981a:	7818      	ldrb	r0, [r3, #0]
 800981c:	2830      	cmp	r0, #48	; 0x30
 800981e:	461f      	mov	r7, r3
 8009820:	f103 0301 	add.w	r3, r3, #1
 8009824:	d0f9      	beq.n	800981a <__gethex+0x76>
 8009826:	f7ff ffa7 	bl	8009778 <__hexdig_fun>
 800982a:	2301      	movs	r3, #1
 800982c:	fab0 f480 	clz	r4, r0
 8009830:	0964      	lsrs	r4, r4, #5
 8009832:	4635      	mov	r5, r6
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	463a      	mov	r2, r7
 8009838:	4616      	mov	r6, r2
 800983a:	3201      	adds	r2, #1
 800983c:	7830      	ldrb	r0, [r6, #0]
 800983e:	f7ff ff9b 	bl	8009778 <__hexdig_fun>
 8009842:	2800      	cmp	r0, #0
 8009844:	d1f8      	bne.n	8009838 <__gethex+0x94>
 8009846:	9901      	ldr	r1, [sp, #4]
 8009848:	4652      	mov	r2, sl
 800984a:	4630      	mov	r0, r6
 800984c:	f001 f9c8 	bl	800abe0 <strncmp>
 8009850:	b980      	cbnz	r0, 8009874 <__gethex+0xd0>
 8009852:	b94d      	cbnz	r5, 8009868 <__gethex+0xc4>
 8009854:	eb06 050a 	add.w	r5, r6, sl
 8009858:	462a      	mov	r2, r5
 800985a:	4616      	mov	r6, r2
 800985c:	3201      	adds	r2, #1
 800985e:	7830      	ldrb	r0, [r6, #0]
 8009860:	f7ff ff8a 	bl	8009778 <__hexdig_fun>
 8009864:	2800      	cmp	r0, #0
 8009866:	d1f8      	bne.n	800985a <__gethex+0xb6>
 8009868:	1bad      	subs	r5, r5, r6
 800986a:	00ad      	lsls	r5, r5, #2
 800986c:	e004      	b.n	8009878 <__gethex+0xd4>
 800986e:	2400      	movs	r4, #0
 8009870:	4625      	mov	r5, r4
 8009872:	e7e0      	b.n	8009836 <__gethex+0x92>
 8009874:	2d00      	cmp	r5, #0
 8009876:	d1f7      	bne.n	8009868 <__gethex+0xc4>
 8009878:	7833      	ldrb	r3, [r6, #0]
 800987a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800987e:	2b50      	cmp	r3, #80	; 0x50
 8009880:	d13b      	bne.n	80098fa <__gethex+0x156>
 8009882:	7873      	ldrb	r3, [r6, #1]
 8009884:	2b2b      	cmp	r3, #43	; 0x2b
 8009886:	d02c      	beq.n	80098e2 <__gethex+0x13e>
 8009888:	2b2d      	cmp	r3, #45	; 0x2d
 800988a:	d02e      	beq.n	80098ea <__gethex+0x146>
 800988c:	1c71      	adds	r1, r6, #1
 800988e:	f04f 0900 	mov.w	r9, #0
 8009892:	7808      	ldrb	r0, [r1, #0]
 8009894:	f7ff ff70 	bl	8009778 <__hexdig_fun>
 8009898:	1e43      	subs	r3, r0, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b18      	cmp	r3, #24
 800989e:	d82c      	bhi.n	80098fa <__gethex+0x156>
 80098a0:	f1a0 0210 	sub.w	r2, r0, #16
 80098a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098a8:	f7ff ff66 	bl	8009778 <__hexdig_fun>
 80098ac:	1e43      	subs	r3, r0, #1
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b18      	cmp	r3, #24
 80098b2:	d91d      	bls.n	80098f0 <__gethex+0x14c>
 80098b4:	f1b9 0f00 	cmp.w	r9, #0
 80098b8:	d000      	beq.n	80098bc <__gethex+0x118>
 80098ba:	4252      	negs	r2, r2
 80098bc:	4415      	add	r5, r2
 80098be:	f8cb 1000 	str.w	r1, [fp]
 80098c2:	b1e4      	cbz	r4, 80098fe <__gethex+0x15a>
 80098c4:	9b00      	ldr	r3, [sp, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	bf14      	ite	ne
 80098ca:	2700      	movne	r7, #0
 80098cc:	2706      	moveq	r7, #6
 80098ce:	4638      	mov	r0, r7
 80098d0:	b009      	add	sp, #36	; 0x24
 80098d2:	ecbd 8b02 	vpop	{d8}
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	463e      	mov	r6, r7
 80098dc:	4625      	mov	r5, r4
 80098de:	2401      	movs	r4, #1
 80098e0:	e7ca      	b.n	8009878 <__gethex+0xd4>
 80098e2:	f04f 0900 	mov.w	r9, #0
 80098e6:	1cb1      	adds	r1, r6, #2
 80098e8:	e7d3      	b.n	8009892 <__gethex+0xee>
 80098ea:	f04f 0901 	mov.w	r9, #1
 80098ee:	e7fa      	b.n	80098e6 <__gethex+0x142>
 80098f0:	230a      	movs	r3, #10
 80098f2:	fb03 0202 	mla	r2, r3, r2, r0
 80098f6:	3a10      	subs	r2, #16
 80098f8:	e7d4      	b.n	80098a4 <__gethex+0x100>
 80098fa:	4631      	mov	r1, r6
 80098fc:	e7df      	b.n	80098be <__gethex+0x11a>
 80098fe:	1bf3      	subs	r3, r6, r7
 8009900:	3b01      	subs	r3, #1
 8009902:	4621      	mov	r1, r4
 8009904:	2b07      	cmp	r3, #7
 8009906:	dc0b      	bgt.n	8009920 <__gethex+0x17c>
 8009908:	ee18 0a10 	vmov	r0, s16
 800990c:	f000 fa7e 	bl	8009e0c <_Balloc>
 8009910:	4604      	mov	r4, r0
 8009912:	b940      	cbnz	r0, 8009926 <__gethex+0x182>
 8009914:	4b65      	ldr	r3, [pc, #404]	; (8009aac <__gethex+0x308>)
 8009916:	4602      	mov	r2, r0
 8009918:	21de      	movs	r1, #222	; 0xde
 800991a:	4865      	ldr	r0, [pc, #404]	; (8009ab0 <__gethex+0x30c>)
 800991c:	f001 f980 	bl	800ac20 <__assert_func>
 8009920:	3101      	adds	r1, #1
 8009922:	105b      	asrs	r3, r3, #1
 8009924:	e7ee      	b.n	8009904 <__gethex+0x160>
 8009926:	f100 0914 	add.w	r9, r0, #20
 800992a:	f04f 0b00 	mov.w	fp, #0
 800992e:	f1ca 0301 	rsb	r3, sl, #1
 8009932:	f8cd 9008 	str.w	r9, [sp, #8]
 8009936:	f8cd b000 	str.w	fp, [sp]
 800993a:	9306      	str	r3, [sp, #24]
 800993c:	42b7      	cmp	r7, r6
 800993e:	d340      	bcc.n	80099c2 <__gethex+0x21e>
 8009940:	9802      	ldr	r0, [sp, #8]
 8009942:	9b00      	ldr	r3, [sp, #0]
 8009944:	f840 3b04 	str.w	r3, [r0], #4
 8009948:	eba0 0009 	sub.w	r0, r0, r9
 800994c:	1080      	asrs	r0, r0, #2
 800994e:	0146      	lsls	r6, r0, #5
 8009950:	6120      	str	r0, [r4, #16]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fb50 	bl	8009ff8 <__hi0bits>
 8009958:	1a30      	subs	r0, r6, r0
 800995a:	f8d8 6000 	ldr.w	r6, [r8]
 800995e:	42b0      	cmp	r0, r6
 8009960:	dd63      	ble.n	8009a2a <__gethex+0x286>
 8009962:	1b87      	subs	r7, r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	4620      	mov	r0, r4
 8009968:	f000 feeb 	bl	800a742 <__any_on>
 800996c:	4682      	mov	sl, r0
 800996e:	b1a8      	cbz	r0, 800999c <__gethex+0x1f8>
 8009970:	1e7b      	subs	r3, r7, #1
 8009972:	1159      	asrs	r1, r3, #5
 8009974:	f003 021f 	and.w	r2, r3, #31
 8009978:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800997c:	f04f 0a01 	mov.w	sl, #1
 8009980:	fa0a f202 	lsl.w	r2, sl, r2
 8009984:	420a      	tst	r2, r1
 8009986:	d009      	beq.n	800999c <__gethex+0x1f8>
 8009988:	4553      	cmp	r3, sl
 800998a:	dd05      	ble.n	8009998 <__gethex+0x1f4>
 800998c:	1eb9      	subs	r1, r7, #2
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fed7 	bl	800a742 <__any_on>
 8009994:	2800      	cmp	r0, #0
 8009996:	d145      	bne.n	8009a24 <__gethex+0x280>
 8009998:	f04f 0a02 	mov.w	sl, #2
 800999c:	4639      	mov	r1, r7
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff fe98 	bl	80096d4 <rshift>
 80099a4:	443d      	add	r5, r7
 80099a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099aa:	42ab      	cmp	r3, r5
 80099ac:	da4c      	bge.n	8009a48 <__gethex+0x2a4>
 80099ae:	ee18 0a10 	vmov	r0, s16
 80099b2:	4621      	mov	r1, r4
 80099b4:	f000 fa6a 	bl	8009e8c <_Bfree>
 80099b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099ba:	2300      	movs	r3, #0
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	27a3      	movs	r7, #163	; 0xa3
 80099c0:	e785      	b.n	80098ce <__gethex+0x12a>
 80099c2:	1e73      	subs	r3, r6, #1
 80099c4:	9a05      	ldr	r2, [sp, #20]
 80099c6:	9303      	str	r3, [sp, #12]
 80099c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d019      	beq.n	8009a04 <__gethex+0x260>
 80099d0:	f1bb 0f20 	cmp.w	fp, #32
 80099d4:	d107      	bne.n	80099e6 <__gethex+0x242>
 80099d6:	9b02      	ldr	r3, [sp, #8]
 80099d8:	9a00      	ldr	r2, [sp, #0]
 80099da:	f843 2b04 	str.w	r2, [r3], #4
 80099de:	9302      	str	r3, [sp, #8]
 80099e0:	2300      	movs	r3, #0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	469b      	mov	fp, r3
 80099e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099ea:	f7ff fec5 	bl	8009778 <__hexdig_fun>
 80099ee:	9b00      	ldr	r3, [sp, #0]
 80099f0:	f000 000f 	and.w	r0, r0, #15
 80099f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80099f8:	4303      	orrs	r3, r0
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	f10b 0b04 	add.w	fp, fp, #4
 8009a00:	9b03      	ldr	r3, [sp, #12]
 8009a02:	e00d      	b.n	8009a20 <__gethex+0x27c>
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	9a06      	ldr	r2, [sp, #24]
 8009a08:	4413      	add	r3, r2
 8009a0a:	42bb      	cmp	r3, r7
 8009a0c:	d3e0      	bcc.n	80099d0 <__gethex+0x22c>
 8009a0e:	4618      	mov	r0, r3
 8009a10:	9901      	ldr	r1, [sp, #4]
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	4652      	mov	r2, sl
 8009a16:	f001 f8e3 	bl	800abe0 <strncmp>
 8009a1a:	9b07      	ldr	r3, [sp, #28]
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d1d7      	bne.n	80099d0 <__gethex+0x22c>
 8009a20:	461e      	mov	r6, r3
 8009a22:	e78b      	b.n	800993c <__gethex+0x198>
 8009a24:	f04f 0a03 	mov.w	sl, #3
 8009a28:	e7b8      	b.n	800999c <__gethex+0x1f8>
 8009a2a:	da0a      	bge.n	8009a42 <__gethex+0x29e>
 8009a2c:	1a37      	subs	r7, r6, r0
 8009a2e:	4621      	mov	r1, r4
 8009a30:	ee18 0a10 	vmov	r0, s16
 8009a34:	463a      	mov	r2, r7
 8009a36:	f000 fc45 	bl	800a2c4 <__lshift>
 8009a3a:	1bed      	subs	r5, r5, r7
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	f100 0914 	add.w	r9, r0, #20
 8009a42:	f04f 0a00 	mov.w	sl, #0
 8009a46:	e7ae      	b.n	80099a6 <__gethex+0x202>
 8009a48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a4c:	42a8      	cmp	r0, r5
 8009a4e:	dd72      	ble.n	8009b36 <__gethex+0x392>
 8009a50:	1b45      	subs	r5, r0, r5
 8009a52:	42ae      	cmp	r6, r5
 8009a54:	dc36      	bgt.n	8009ac4 <__gethex+0x320>
 8009a56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d02a      	beq.n	8009ab4 <__gethex+0x310>
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d02c      	beq.n	8009abc <__gethex+0x318>
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d115      	bne.n	8009a92 <__gethex+0x2ee>
 8009a66:	42ae      	cmp	r6, r5
 8009a68:	d113      	bne.n	8009a92 <__gethex+0x2ee>
 8009a6a:	2e01      	cmp	r6, #1
 8009a6c:	d10b      	bne.n	8009a86 <__gethex+0x2e2>
 8009a6e:	9a04      	ldr	r2, [sp, #16]
 8009a70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	2301      	movs	r3, #1
 8009a78:	6123      	str	r3, [r4, #16]
 8009a7a:	f8c9 3000 	str.w	r3, [r9]
 8009a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a80:	2762      	movs	r7, #98	; 0x62
 8009a82:	601c      	str	r4, [r3, #0]
 8009a84:	e723      	b.n	80098ce <__gethex+0x12a>
 8009a86:	1e71      	subs	r1, r6, #1
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fe5a 	bl	800a742 <__any_on>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d1ed      	bne.n	8009a6e <__gethex+0x2ca>
 8009a92:	ee18 0a10 	vmov	r0, s16
 8009a96:	4621      	mov	r1, r4
 8009a98:	f000 f9f8 	bl	8009e8c <_Bfree>
 8009a9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	2750      	movs	r7, #80	; 0x50
 8009aa4:	e713      	b.n	80098ce <__gethex+0x12a>
 8009aa6:	bf00      	nop
 8009aa8:	0800b9a0 	.word	0x0800b9a0
 8009aac:	0800b923 	.word	0x0800b923
 8009ab0:	0800b934 	.word	0x0800b934
 8009ab4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1eb      	bne.n	8009a92 <__gethex+0x2ee>
 8009aba:	e7d8      	b.n	8009a6e <__gethex+0x2ca>
 8009abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1d5      	bne.n	8009a6e <__gethex+0x2ca>
 8009ac2:	e7e6      	b.n	8009a92 <__gethex+0x2ee>
 8009ac4:	1e6f      	subs	r7, r5, #1
 8009ac6:	f1ba 0f00 	cmp.w	sl, #0
 8009aca:	d131      	bne.n	8009b30 <__gethex+0x38c>
 8009acc:	b127      	cbz	r7, 8009ad8 <__gethex+0x334>
 8009ace:	4639      	mov	r1, r7
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 fe36 	bl	800a742 <__any_on>
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	117b      	asrs	r3, r7, #5
 8009ada:	2101      	movs	r1, #1
 8009adc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ae0:	f007 071f 	and.w	r7, r7, #31
 8009ae4:	fa01 f707 	lsl.w	r7, r1, r7
 8009ae8:	421f      	tst	r7, r3
 8009aea:	4629      	mov	r1, r5
 8009aec:	4620      	mov	r0, r4
 8009aee:	bf18      	it	ne
 8009af0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009af4:	1b76      	subs	r6, r6, r5
 8009af6:	f7ff fded 	bl	80096d4 <rshift>
 8009afa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009afe:	2702      	movs	r7, #2
 8009b00:	f1ba 0f00 	cmp.w	sl, #0
 8009b04:	d048      	beq.n	8009b98 <__gethex+0x3f4>
 8009b06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d015      	beq.n	8009b3a <__gethex+0x396>
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d017      	beq.n	8009b42 <__gethex+0x39e>
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d109      	bne.n	8009b2a <__gethex+0x386>
 8009b16:	f01a 0f02 	tst.w	sl, #2
 8009b1a:	d006      	beq.n	8009b2a <__gethex+0x386>
 8009b1c:	f8d9 0000 	ldr.w	r0, [r9]
 8009b20:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b24:	f01a 0f01 	tst.w	sl, #1
 8009b28:	d10e      	bne.n	8009b48 <__gethex+0x3a4>
 8009b2a:	f047 0710 	orr.w	r7, r7, #16
 8009b2e:	e033      	b.n	8009b98 <__gethex+0x3f4>
 8009b30:	f04f 0a01 	mov.w	sl, #1
 8009b34:	e7d0      	b.n	8009ad8 <__gethex+0x334>
 8009b36:	2701      	movs	r7, #1
 8009b38:	e7e2      	b.n	8009b00 <__gethex+0x35c>
 8009b3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b3c:	f1c3 0301 	rsb	r3, r3, #1
 8009b40:	9315      	str	r3, [sp, #84]	; 0x54
 8009b42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0f0      	beq.n	8009b2a <__gethex+0x386>
 8009b48:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b4c:	f104 0314 	add.w	r3, r4, #20
 8009b50:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b54:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b58:	f04f 0c00 	mov.w	ip, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b62:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b66:	d01c      	beq.n	8009ba2 <__gethex+0x3fe>
 8009b68:	3201      	adds	r2, #1
 8009b6a:	6002      	str	r2, [r0, #0]
 8009b6c:	2f02      	cmp	r7, #2
 8009b6e:	f104 0314 	add.w	r3, r4, #20
 8009b72:	d13f      	bne.n	8009bf4 <__gethex+0x450>
 8009b74:	f8d8 2000 	ldr.w	r2, [r8]
 8009b78:	3a01      	subs	r2, #1
 8009b7a:	42b2      	cmp	r2, r6
 8009b7c:	d10a      	bne.n	8009b94 <__gethex+0x3f0>
 8009b7e:	1171      	asrs	r1, r6, #5
 8009b80:	2201      	movs	r2, #1
 8009b82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b86:	f006 061f 	and.w	r6, r6, #31
 8009b8a:	fa02 f606 	lsl.w	r6, r2, r6
 8009b8e:	421e      	tst	r6, r3
 8009b90:	bf18      	it	ne
 8009b92:	4617      	movne	r7, r2
 8009b94:	f047 0720 	orr.w	r7, r7, #32
 8009b98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b9a:	601c      	str	r4, [r3, #0]
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	601d      	str	r5, [r3, #0]
 8009ba0:	e695      	b.n	80098ce <__gethex+0x12a>
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ba8:	d8d8      	bhi.n	8009b5c <__gethex+0x3b8>
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	459b      	cmp	fp, r3
 8009bae:	db19      	blt.n	8009be4 <__gethex+0x440>
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	ee18 0a10 	vmov	r0, s16
 8009bb6:	3101      	adds	r1, #1
 8009bb8:	f000 f928 	bl	8009e0c <_Balloc>
 8009bbc:	4681      	mov	r9, r0
 8009bbe:	b918      	cbnz	r0, 8009bc8 <__gethex+0x424>
 8009bc0:	4b1a      	ldr	r3, [pc, #104]	; (8009c2c <__gethex+0x488>)
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	2184      	movs	r1, #132	; 0x84
 8009bc6:	e6a8      	b.n	800991a <__gethex+0x176>
 8009bc8:	6922      	ldr	r2, [r4, #16]
 8009bca:	3202      	adds	r2, #2
 8009bcc:	f104 010c 	add.w	r1, r4, #12
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	300c      	adds	r0, #12
 8009bd4:	f000 f90c 	bl	8009df0 <memcpy>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	ee18 0a10 	vmov	r0, s16
 8009bde:	f000 f955 	bl	8009e8c <_Bfree>
 8009be2:	464c      	mov	r4, r9
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bec:	6122      	str	r2, [r4, #16]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	615a      	str	r2, [r3, #20]
 8009bf2:	e7bb      	b.n	8009b6c <__gethex+0x3c8>
 8009bf4:	6922      	ldr	r2, [r4, #16]
 8009bf6:	455a      	cmp	r2, fp
 8009bf8:	dd0b      	ble.n	8009c12 <__gethex+0x46e>
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f7ff fd69 	bl	80096d4 <rshift>
 8009c02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c06:	3501      	adds	r5, #1
 8009c08:	42ab      	cmp	r3, r5
 8009c0a:	f6ff aed0 	blt.w	80099ae <__gethex+0x20a>
 8009c0e:	2701      	movs	r7, #1
 8009c10:	e7c0      	b.n	8009b94 <__gethex+0x3f0>
 8009c12:	f016 061f 	ands.w	r6, r6, #31
 8009c16:	d0fa      	beq.n	8009c0e <__gethex+0x46a>
 8009c18:	449a      	add	sl, r3
 8009c1a:	f1c6 0620 	rsb	r6, r6, #32
 8009c1e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009c22:	f000 f9e9 	bl	8009ff8 <__hi0bits>
 8009c26:	42b0      	cmp	r0, r6
 8009c28:	dbe7      	blt.n	8009bfa <__gethex+0x456>
 8009c2a:	e7f0      	b.n	8009c0e <__gethex+0x46a>
 8009c2c:	0800b923 	.word	0x0800b923

08009c30 <L_shift>:
 8009c30:	f1c2 0208 	rsb	r2, r2, #8
 8009c34:	0092      	lsls	r2, r2, #2
 8009c36:	b570      	push	{r4, r5, r6, lr}
 8009c38:	f1c2 0620 	rsb	r6, r2, #32
 8009c3c:	6843      	ldr	r3, [r0, #4]
 8009c3e:	6804      	ldr	r4, [r0, #0]
 8009c40:	fa03 f506 	lsl.w	r5, r3, r6
 8009c44:	432c      	orrs	r4, r5
 8009c46:	40d3      	lsrs	r3, r2
 8009c48:	6004      	str	r4, [r0, #0]
 8009c4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c4e:	4288      	cmp	r0, r1
 8009c50:	d3f4      	bcc.n	8009c3c <L_shift+0xc>
 8009c52:	bd70      	pop	{r4, r5, r6, pc}

08009c54 <__match>:
 8009c54:	b530      	push	{r4, r5, lr}
 8009c56:	6803      	ldr	r3, [r0, #0]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5e:	b914      	cbnz	r4, 8009c66 <__match+0x12>
 8009c60:	6003      	str	r3, [r0, #0]
 8009c62:	2001      	movs	r0, #1
 8009c64:	bd30      	pop	{r4, r5, pc}
 8009c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c6e:	2d19      	cmp	r5, #25
 8009c70:	bf98      	it	ls
 8009c72:	3220      	addls	r2, #32
 8009c74:	42a2      	cmp	r2, r4
 8009c76:	d0f0      	beq.n	8009c5a <__match+0x6>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e7f3      	b.n	8009c64 <__match+0x10>

08009c7c <__hexnan>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	680b      	ldr	r3, [r1, #0]
 8009c82:	6801      	ldr	r1, [r0, #0]
 8009c84:	115e      	asrs	r6, r3, #5
 8009c86:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c8a:	f013 031f 	ands.w	r3, r3, #31
 8009c8e:	b087      	sub	sp, #28
 8009c90:	bf18      	it	ne
 8009c92:	3604      	addne	r6, #4
 8009c94:	2500      	movs	r5, #0
 8009c96:	1f37      	subs	r7, r6, #4
 8009c98:	4682      	mov	sl, r0
 8009c9a:	4690      	mov	r8, r2
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ca2:	46b9      	mov	r9, r7
 8009ca4:	463c      	mov	r4, r7
 8009ca6:	9502      	str	r5, [sp, #8]
 8009ca8:	46ab      	mov	fp, r5
 8009caa:	784a      	ldrb	r2, [r1, #1]
 8009cac:	1c4b      	adds	r3, r1, #1
 8009cae:	9303      	str	r3, [sp, #12]
 8009cb0:	b342      	cbz	r2, 8009d04 <__hexnan+0x88>
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	9105      	str	r1, [sp, #20]
 8009cb6:	9204      	str	r2, [sp, #16]
 8009cb8:	f7ff fd5e 	bl	8009778 <__hexdig_fun>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d14f      	bne.n	8009d60 <__hexnan+0xe4>
 8009cc0:	9a04      	ldr	r2, [sp, #16]
 8009cc2:	9905      	ldr	r1, [sp, #20]
 8009cc4:	2a20      	cmp	r2, #32
 8009cc6:	d818      	bhi.n	8009cfa <__hexnan+0x7e>
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	459b      	cmp	fp, r3
 8009ccc:	dd13      	ble.n	8009cf6 <__hexnan+0x7a>
 8009cce:	454c      	cmp	r4, r9
 8009cd0:	d206      	bcs.n	8009ce0 <__hexnan+0x64>
 8009cd2:	2d07      	cmp	r5, #7
 8009cd4:	dc04      	bgt.n	8009ce0 <__hexnan+0x64>
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4649      	mov	r1, r9
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff ffa8 	bl	8009c30 <L_shift>
 8009ce0:	4544      	cmp	r4, r8
 8009ce2:	d950      	bls.n	8009d86 <__hexnan+0x10a>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f1a4 0904 	sub.w	r9, r4, #4
 8009cea:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cee:	f8cd b008 	str.w	fp, [sp, #8]
 8009cf2:	464c      	mov	r4, r9
 8009cf4:	461d      	mov	r5, r3
 8009cf6:	9903      	ldr	r1, [sp, #12]
 8009cf8:	e7d7      	b.n	8009caa <__hexnan+0x2e>
 8009cfa:	2a29      	cmp	r2, #41	; 0x29
 8009cfc:	d156      	bne.n	8009dac <__hexnan+0x130>
 8009cfe:	3102      	adds	r1, #2
 8009d00:	f8ca 1000 	str.w	r1, [sl]
 8009d04:	f1bb 0f00 	cmp.w	fp, #0
 8009d08:	d050      	beq.n	8009dac <__hexnan+0x130>
 8009d0a:	454c      	cmp	r4, r9
 8009d0c:	d206      	bcs.n	8009d1c <__hexnan+0xa0>
 8009d0e:	2d07      	cmp	r5, #7
 8009d10:	dc04      	bgt.n	8009d1c <__hexnan+0xa0>
 8009d12:	462a      	mov	r2, r5
 8009d14:	4649      	mov	r1, r9
 8009d16:	4620      	mov	r0, r4
 8009d18:	f7ff ff8a 	bl	8009c30 <L_shift>
 8009d1c:	4544      	cmp	r4, r8
 8009d1e:	d934      	bls.n	8009d8a <__hexnan+0x10e>
 8009d20:	f1a8 0204 	sub.w	r2, r8, #4
 8009d24:	4623      	mov	r3, r4
 8009d26:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d2a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d2e:	429f      	cmp	r7, r3
 8009d30:	d2f9      	bcs.n	8009d26 <__hexnan+0xaa>
 8009d32:	1b3b      	subs	r3, r7, r4
 8009d34:	f023 0303 	bic.w	r3, r3, #3
 8009d38:	3304      	adds	r3, #4
 8009d3a:	3401      	adds	r4, #1
 8009d3c:	3e03      	subs	r6, #3
 8009d3e:	42b4      	cmp	r4, r6
 8009d40:	bf88      	it	hi
 8009d42:	2304      	movhi	r3, #4
 8009d44:	4443      	add	r3, r8
 8009d46:	2200      	movs	r2, #0
 8009d48:	f843 2b04 	str.w	r2, [r3], #4
 8009d4c:	429f      	cmp	r7, r3
 8009d4e:	d2fb      	bcs.n	8009d48 <__hexnan+0xcc>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	b91b      	cbnz	r3, 8009d5c <__hexnan+0xe0>
 8009d54:	4547      	cmp	r7, r8
 8009d56:	d127      	bne.n	8009da8 <__hexnan+0x12c>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	2005      	movs	r0, #5
 8009d5e:	e026      	b.n	8009dae <__hexnan+0x132>
 8009d60:	3501      	adds	r5, #1
 8009d62:	2d08      	cmp	r5, #8
 8009d64:	f10b 0b01 	add.w	fp, fp, #1
 8009d68:	dd06      	ble.n	8009d78 <__hexnan+0xfc>
 8009d6a:	4544      	cmp	r4, r8
 8009d6c:	d9c3      	bls.n	8009cf6 <__hexnan+0x7a>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d74:	2501      	movs	r5, #1
 8009d76:	3c04      	subs	r4, #4
 8009d78:	6822      	ldr	r2, [r4, #0]
 8009d7a:	f000 000f 	and.w	r0, r0, #15
 8009d7e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d82:	6022      	str	r2, [r4, #0]
 8009d84:	e7b7      	b.n	8009cf6 <__hexnan+0x7a>
 8009d86:	2508      	movs	r5, #8
 8009d88:	e7b5      	b.n	8009cf6 <__hexnan+0x7a>
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0df      	beq.n	8009d50 <__hexnan+0xd4>
 8009d90:	f04f 32ff 	mov.w	r2, #4294967295
 8009d94:	f1c3 0320 	rsb	r3, r3, #32
 8009d98:	fa22 f303 	lsr.w	r3, r2, r3
 8009d9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009da0:	401a      	ands	r2, r3
 8009da2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009da6:	e7d3      	b.n	8009d50 <__hexnan+0xd4>
 8009da8:	3f04      	subs	r7, #4
 8009daa:	e7d1      	b.n	8009d50 <__hexnan+0xd4>
 8009dac:	2004      	movs	r0, #4
 8009dae:	b007      	add	sp, #28
 8009db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009db4 <_localeconv_r>:
 8009db4:	4800      	ldr	r0, [pc, #0]	; (8009db8 <_localeconv_r+0x4>)
 8009db6:	4770      	bx	lr
 8009db8:	20000164 	.word	0x20000164

08009dbc <malloc>:
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <malloc+0xc>)
 8009dbe:	4601      	mov	r1, r0
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	f000 bd3f 	b.w	800a844 <_malloc_r>
 8009dc6:	bf00      	nop
 8009dc8:	2000000c 	.word	0x2000000c

08009dcc <__ascii_mbtowc>:
 8009dcc:	b082      	sub	sp, #8
 8009dce:	b901      	cbnz	r1, 8009dd2 <__ascii_mbtowc+0x6>
 8009dd0:	a901      	add	r1, sp, #4
 8009dd2:	b142      	cbz	r2, 8009de6 <__ascii_mbtowc+0x1a>
 8009dd4:	b14b      	cbz	r3, 8009dea <__ascii_mbtowc+0x1e>
 8009dd6:	7813      	ldrb	r3, [r2, #0]
 8009dd8:	600b      	str	r3, [r1, #0]
 8009dda:	7812      	ldrb	r2, [r2, #0]
 8009ddc:	1e10      	subs	r0, r2, #0
 8009dde:	bf18      	it	ne
 8009de0:	2001      	movne	r0, #1
 8009de2:	b002      	add	sp, #8
 8009de4:	4770      	bx	lr
 8009de6:	4610      	mov	r0, r2
 8009de8:	e7fb      	b.n	8009de2 <__ascii_mbtowc+0x16>
 8009dea:	f06f 0001 	mvn.w	r0, #1
 8009dee:	e7f8      	b.n	8009de2 <__ascii_mbtowc+0x16>

08009df0 <memcpy>:
 8009df0:	440a      	add	r2, r1
 8009df2:	4291      	cmp	r1, r2
 8009df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009df8:	d100      	bne.n	8009dfc <memcpy+0xc>
 8009dfa:	4770      	bx	lr
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e06:	4291      	cmp	r1, r2
 8009e08:	d1f9      	bne.n	8009dfe <memcpy+0xe>
 8009e0a:	bd10      	pop	{r4, pc}

08009e0c <_Balloc>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e10:	4604      	mov	r4, r0
 8009e12:	460d      	mov	r5, r1
 8009e14:	b976      	cbnz	r6, 8009e34 <_Balloc+0x28>
 8009e16:	2010      	movs	r0, #16
 8009e18:	f7ff ffd0 	bl	8009dbc <malloc>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009e20:	b920      	cbnz	r0, 8009e2c <_Balloc+0x20>
 8009e22:	4b18      	ldr	r3, [pc, #96]	; (8009e84 <_Balloc+0x78>)
 8009e24:	4818      	ldr	r0, [pc, #96]	; (8009e88 <_Balloc+0x7c>)
 8009e26:	2166      	movs	r1, #102	; 0x66
 8009e28:	f000 fefa 	bl	800ac20 <__assert_func>
 8009e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e30:	6006      	str	r6, [r0, #0]
 8009e32:	60c6      	str	r6, [r0, #12]
 8009e34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e36:	68f3      	ldr	r3, [r6, #12]
 8009e38:	b183      	cbz	r3, 8009e5c <_Balloc+0x50>
 8009e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e42:	b9b8      	cbnz	r0, 8009e74 <_Balloc+0x68>
 8009e44:	2101      	movs	r1, #1
 8009e46:	fa01 f605 	lsl.w	r6, r1, r5
 8009e4a:	1d72      	adds	r2, r6, #5
 8009e4c:	0092      	lsls	r2, r2, #2
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 fc98 	bl	800a784 <_calloc_r>
 8009e54:	b160      	cbz	r0, 8009e70 <_Balloc+0x64>
 8009e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e5a:	e00e      	b.n	8009e7a <_Balloc+0x6e>
 8009e5c:	2221      	movs	r2, #33	; 0x21
 8009e5e:	2104      	movs	r1, #4
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 fc8f 	bl	800a784 <_calloc_r>
 8009e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e68:	60f0      	str	r0, [r6, #12]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1e4      	bne.n	8009e3a <_Balloc+0x2e>
 8009e70:	2000      	movs	r0, #0
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
 8009e74:	6802      	ldr	r2, [r0, #0]
 8009e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e80:	e7f7      	b.n	8009e72 <_Balloc+0x66>
 8009e82:	bf00      	nop
 8009e84:	0800b8ad 	.word	0x0800b8ad
 8009e88:	0800b9b4 	.word	0x0800b9b4

08009e8c <_Bfree>:
 8009e8c:	b570      	push	{r4, r5, r6, lr}
 8009e8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e90:	4605      	mov	r5, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	b976      	cbnz	r6, 8009eb4 <_Bfree+0x28>
 8009e96:	2010      	movs	r0, #16
 8009e98:	f7ff ff90 	bl	8009dbc <malloc>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009ea0:	b920      	cbnz	r0, 8009eac <_Bfree+0x20>
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <_Bfree+0x3c>)
 8009ea4:	4809      	ldr	r0, [pc, #36]	; (8009ecc <_Bfree+0x40>)
 8009ea6:	218a      	movs	r1, #138	; 0x8a
 8009ea8:	f000 feba 	bl	800ac20 <__assert_func>
 8009eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009eb0:	6006      	str	r6, [r0, #0]
 8009eb2:	60c6      	str	r6, [r0, #12]
 8009eb4:	b13c      	cbz	r4, 8009ec6 <_Bfree+0x3a>
 8009eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009eb8:	6862      	ldr	r2, [r4, #4]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ec0:	6021      	str	r1, [r4, #0]
 8009ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	0800b8ad 	.word	0x0800b8ad
 8009ecc:	0800b9b4 	.word	0x0800b9b4

08009ed0 <__multadd>:
 8009ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	690e      	ldr	r6, [r1, #16]
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	4698      	mov	r8, r3
 8009eda:	460c      	mov	r4, r1
 8009edc:	f101 0014 	add.w	r0, r1, #20
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	6805      	ldr	r5, [r0, #0]
 8009ee4:	b2a9      	uxth	r1, r5
 8009ee6:	fb02 8101 	mla	r1, r2, r1, r8
 8009eea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009eee:	0c2d      	lsrs	r5, r5, #16
 8009ef0:	fb02 c505 	mla	r5, r2, r5, ip
 8009ef4:	b289      	uxth	r1, r1
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009efc:	429e      	cmp	r6, r3
 8009efe:	f840 1b04 	str.w	r1, [r0], #4
 8009f02:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009f06:	dcec      	bgt.n	8009ee2 <__multadd+0x12>
 8009f08:	f1b8 0f00 	cmp.w	r8, #0
 8009f0c:	d022      	beq.n	8009f54 <__multadd+0x84>
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	42b3      	cmp	r3, r6
 8009f12:	dc19      	bgt.n	8009f48 <__multadd+0x78>
 8009f14:	6861      	ldr	r1, [r4, #4]
 8009f16:	4638      	mov	r0, r7
 8009f18:	3101      	adds	r1, #1
 8009f1a:	f7ff ff77 	bl	8009e0c <_Balloc>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b928      	cbnz	r0, 8009f2e <__multadd+0x5e>
 8009f22:	4602      	mov	r2, r0
 8009f24:	4b0d      	ldr	r3, [pc, #52]	; (8009f5c <__multadd+0x8c>)
 8009f26:	480e      	ldr	r0, [pc, #56]	; (8009f60 <__multadd+0x90>)
 8009f28:	21b5      	movs	r1, #181	; 0xb5
 8009f2a:	f000 fe79 	bl	800ac20 <__assert_func>
 8009f2e:	6922      	ldr	r2, [r4, #16]
 8009f30:	3202      	adds	r2, #2
 8009f32:	f104 010c 	add.w	r1, r4, #12
 8009f36:	0092      	lsls	r2, r2, #2
 8009f38:	300c      	adds	r0, #12
 8009f3a:	f7ff ff59 	bl	8009df0 <memcpy>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff ffa3 	bl	8009e8c <_Bfree>
 8009f46:	462c      	mov	r4, r5
 8009f48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009f4c:	3601      	adds	r6, #1
 8009f4e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009f52:	6126      	str	r6, [r4, #16]
 8009f54:	4620      	mov	r0, r4
 8009f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f5a:	bf00      	nop
 8009f5c:	0800b923 	.word	0x0800b923
 8009f60:	0800b9b4 	.word	0x0800b9b4

08009f64 <__s2b>:
 8009f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	4615      	mov	r5, r2
 8009f6c:	461f      	mov	r7, r3
 8009f6e:	2209      	movs	r2, #9
 8009f70:	3308      	adds	r3, #8
 8009f72:	4606      	mov	r6, r0
 8009f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f78:	2100      	movs	r1, #0
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	db09      	blt.n	8009f94 <__s2b+0x30>
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff ff43 	bl	8009e0c <_Balloc>
 8009f86:	b940      	cbnz	r0, 8009f9a <__s2b+0x36>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <__s2b+0x8c>)
 8009f8c:	4819      	ldr	r0, [pc, #100]	; (8009ff4 <__s2b+0x90>)
 8009f8e:	21ce      	movs	r1, #206	; 0xce
 8009f90:	f000 fe46 	bl	800ac20 <__assert_func>
 8009f94:	0052      	lsls	r2, r2, #1
 8009f96:	3101      	adds	r1, #1
 8009f98:	e7f0      	b.n	8009f7c <__s2b+0x18>
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	6143      	str	r3, [r0, #20]
 8009f9e:	2d09      	cmp	r5, #9
 8009fa0:	f04f 0301 	mov.w	r3, #1
 8009fa4:	6103      	str	r3, [r0, #16]
 8009fa6:	dd16      	ble.n	8009fd6 <__s2b+0x72>
 8009fa8:	f104 0909 	add.w	r9, r4, #9
 8009fac:	46c8      	mov	r8, r9
 8009fae:	442c      	add	r4, r5
 8009fb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fb4:	4601      	mov	r1, r0
 8009fb6:	3b30      	subs	r3, #48	; 0x30
 8009fb8:	220a      	movs	r2, #10
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ff88 	bl	8009ed0 <__multadd>
 8009fc0:	45a0      	cmp	r8, r4
 8009fc2:	d1f5      	bne.n	8009fb0 <__s2b+0x4c>
 8009fc4:	f1a5 0408 	sub.w	r4, r5, #8
 8009fc8:	444c      	add	r4, r9
 8009fca:	1b2d      	subs	r5, r5, r4
 8009fcc:	1963      	adds	r3, r4, r5
 8009fce:	42bb      	cmp	r3, r7
 8009fd0:	db04      	blt.n	8009fdc <__s2b+0x78>
 8009fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd6:	340a      	adds	r4, #10
 8009fd8:	2509      	movs	r5, #9
 8009fda:	e7f6      	b.n	8009fca <__s2b+0x66>
 8009fdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	3b30      	subs	r3, #48	; 0x30
 8009fe4:	220a      	movs	r2, #10
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f7ff ff72 	bl	8009ed0 <__multadd>
 8009fec:	e7ee      	b.n	8009fcc <__s2b+0x68>
 8009fee:	bf00      	nop
 8009ff0:	0800b923 	.word	0x0800b923
 8009ff4:	0800b9b4 	.word	0x0800b9b4

08009ff8 <__hi0bits>:
 8009ff8:	0c03      	lsrs	r3, r0, #16
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	b9d3      	cbnz	r3, 800a034 <__hi0bits+0x3c>
 8009ffe:	0400      	lsls	r0, r0, #16
 800a000:	2310      	movs	r3, #16
 800a002:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a006:	bf04      	itt	eq
 800a008:	0200      	lsleq	r0, r0, #8
 800a00a:	3308      	addeq	r3, #8
 800a00c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a010:	bf04      	itt	eq
 800a012:	0100      	lsleq	r0, r0, #4
 800a014:	3304      	addeq	r3, #4
 800a016:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a01a:	bf04      	itt	eq
 800a01c:	0080      	lsleq	r0, r0, #2
 800a01e:	3302      	addeq	r3, #2
 800a020:	2800      	cmp	r0, #0
 800a022:	db05      	blt.n	800a030 <__hi0bits+0x38>
 800a024:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a028:	f103 0301 	add.w	r3, r3, #1
 800a02c:	bf08      	it	eq
 800a02e:	2320      	moveq	r3, #32
 800a030:	4618      	mov	r0, r3
 800a032:	4770      	bx	lr
 800a034:	2300      	movs	r3, #0
 800a036:	e7e4      	b.n	800a002 <__hi0bits+0xa>

0800a038 <__lo0bits>:
 800a038:	6803      	ldr	r3, [r0, #0]
 800a03a:	f013 0207 	ands.w	r2, r3, #7
 800a03e:	4601      	mov	r1, r0
 800a040:	d00b      	beq.n	800a05a <__lo0bits+0x22>
 800a042:	07da      	lsls	r2, r3, #31
 800a044:	d424      	bmi.n	800a090 <__lo0bits+0x58>
 800a046:	0798      	lsls	r0, r3, #30
 800a048:	bf49      	itett	mi
 800a04a:	085b      	lsrmi	r3, r3, #1
 800a04c:	089b      	lsrpl	r3, r3, #2
 800a04e:	2001      	movmi	r0, #1
 800a050:	600b      	strmi	r3, [r1, #0]
 800a052:	bf5c      	itt	pl
 800a054:	600b      	strpl	r3, [r1, #0]
 800a056:	2002      	movpl	r0, #2
 800a058:	4770      	bx	lr
 800a05a:	b298      	uxth	r0, r3
 800a05c:	b9b0      	cbnz	r0, 800a08c <__lo0bits+0x54>
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	2010      	movs	r0, #16
 800a062:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a066:	bf04      	itt	eq
 800a068:	0a1b      	lsreq	r3, r3, #8
 800a06a:	3008      	addeq	r0, #8
 800a06c:	071a      	lsls	r2, r3, #28
 800a06e:	bf04      	itt	eq
 800a070:	091b      	lsreq	r3, r3, #4
 800a072:	3004      	addeq	r0, #4
 800a074:	079a      	lsls	r2, r3, #30
 800a076:	bf04      	itt	eq
 800a078:	089b      	lsreq	r3, r3, #2
 800a07a:	3002      	addeq	r0, #2
 800a07c:	07da      	lsls	r2, r3, #31
 800a07e:	d403      	bmi.n	800a088 <__lo0bits+0x50>
 800a080:	085b      	lsrs	r3, r3, #1
 800a082:	f100 0001 	add.w	r0, r0, #1
 800a086:	d005      	beq.n	800a094 <__lo0bits+0x5c>
 800a088:	600b      	str	r3, [r1, #0]
 800a08a:	4770      	bx	lr
 800a08c:	4610      	mov	r0, r2
 800a08e:	e7e8      	b.n	800a062 <__lo0bits+0x2a>
 800a090:	2000      	movs	r0, #0
 800a092:	4770      	bx	lr
 800a094:	2020      	movs	r0, #32
 800a096:	4770      	bx	lr

0800a098 <__i2b>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	2101      	movs	r1, #1
 800a09e:	f7ff feb5 	bl	8009e0c <_Balloc>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	b928      	cbnz	r0, 800a0b2 <__i2b+0x1a>
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <__i2b+0x24>)
 800a0a8:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <__i2b+0x28>)
 800a0aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0ae:	f000 fdb7 	bl	800ac20 <__assert_func>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	6144      	str	r4, [r0, #20]
 800a0b6:	6103      	str	r3, [r0, #16]
 800a0b8:	bd10      	pop	{r4, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0800b923 	.word	0x0800b923
 800a0c0:	0800b9b4 	.word	0x0800b9b4

0800a0c4 <__multiply>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	4614      	mov	r4, r2
 800a0ca:	690a      	ldr	r2, [r1, #16]
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	bfb8      	it	lt
 800a0d2:	460b      	movlt	r3, r1
 800a0d4:	460d      	mov	r5, r1
 800a0d6:	bfbc      	itt	lt
 800a0d8:	4625      	movlt	r5, r4
 800a0da:	461c      	movlt	r4, r3
 800a0dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a0e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a0e4:	68ab      	ldr	r3, [r5, #8]
 800a0e6:	6869      	ldr	r1, [r5, #4]
 800a0e8:	eb0a 0709 	add.w	r7, sl, r9
 800a0ec:	42bb      	cmp	r3, r7
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	bfb8      	it	lt
 800a0f2:	3101      	addlt	r1, #1
 800a0f4:	f7ff fe8a 	bl	8009e0c <_Balloc>
 800a0f8:	b930      	cbnz	r0, 800a108 <__multiply+0x44>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4b42      	ldr	r3, [pc, #264]	; (800a208 <__multiply+0x144>)
 800a0fe:	4843      	ldr	r0, [pc, #268]	; (800a20c <__multiply+0x148>)
 800a100:	f240 115d 	movw	r1, #349	; 0x15d
 800a104:	f000 fd8c 	bl	800ac20 <__assert_func>
 800a108:	f100 0614 	add.w	r6, r0, #20
 800a10c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a110:	4633      	mov	r3, r6
 800a112:	2200      	movs	r2, #0
 800a114:	4543      	cmp	r3, r8
 800a116:	d31e      	bcc.n	800a156 <__multiply+0x92>
 800a118:	f105 0c14 	add.w	ip, r5, #20
 800a11c:	f104 0314 	add.w	r3, r4, #20
 800a120:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a124:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a128:	9202      	str	r2, [sp, #8]
 800a12a:	ebac 0205 	sub.w	r2, ip, r5
 800a12e:	3a15      	subs	r2, #21
 800a130:	f022 0203 	bic.w	r2, r2, #3
 800a134:	3204      	adds	r2, #4
 800a136:	f105 0115 	add.w	r1, r5, #21
 800a13a:	458c      	cmp	ip, r1
 800a13c:	bf38      	it	cc
 800a13e:	2204      	movcc	r2, #4
 800a140:	9201      	str	r2, [sp, #4]
 800a142:	9a02      	ldr	r2, [sp, #8]
 800a144:	9303      	str	r3, [sp, #12]
 800a146:	429a      	cmp	r2, r3
 800a148:	d808      	bhi.n	800a15c <__multiply+0x98>
 800a14a:	2f00      	cmp	r7, #0
 800a14c:	dc55      	bgt.n	800a1fa <__multiply+0x136>
 800a14e:	6107      	str	r7, [r0, #16]
 800a150:	b005      	add	sp, #20
 800a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a156:	f843 2b04 	str.w	r2, [r3], #4
 800a15a:	e7db      	b.n	800a114 <__multiply+0x50>
 800a15c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a160:	f1ba 0f00 	cmp.w	sl, #0
 800a164:	d020      	beq.n	800a1a8 <__multiply+0xe4>
 800a166:	f105 0e14 	add.w	lr, r5, #20
 800a16a:	46b1      	mov	r9, r6
 800a16c:	2200      	movs	r2, #0
 800a16e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a172:	f8d9 b000 	ldr.w	fp, [r9]
 800a176:	b2a1      	uxth	r1, r4
 800a178:	fa1f fb8b 	uxth.w	fp, fp
 800a17c:	fb0a b101 	mla	r1, sl, r1, fp
 800a180:	4411      	add	r1, r2
 800a182:	f8d9 2000 	ldr.w	r2, [r9]
 800a186:	0c24      	lsrs	r4, r4, #16
 800a188:	0c12      	lsrs	r2, r2, #16
 800a18a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a18e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a192:	b289      	uxth	r1, r1
 800a194:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a198:	45f4      	cmp	ip, lr
 800a19a:	f849 1b04 	str.w	r1, [r9], #4
 800a19e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a1a2:	d8e4      	bhi.n	800a16e <__multiply+0xaa>
 800a1a4:	9901      	ldr	r1, [sp, #4]
 800a1a6:	5072      	str	r2, [r6, r1]
 800a1a8:	9a03      	ldr	r2, [sp, #12]
 800a1aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	f1b9 0f00 	cmp.w	r9, #0
 800a1b4:	d01f      	beq.n	800a1f6 <__multiply+0x132>
 800a1b6:	6834      	ldr	r4, [r6, #0]
 800a1b8:	f105 0114 	add.w	r1, r5, #20
 800a1bc:	46b6      	mov	lr, r6
 800a1be:	f04f 0a00 	mov.w	sl, #0
 800a1c2:	880a      	ldrh	r2, [r1, #0]
 800a1c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a1c8:	fb09 b202 	mla	r2, r9, r2, fp
 800a1cc:	4492      	add	sl, r2
 800a1ce:	b2a4      	uxth	r4, r4
 800a1d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a1d4:	f84e 4b04 	str.w	r4, [lr], #4
 800a1d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a1dc:	f8be 2000 	ldrh.w	r2, [lr]
 800a1e0:	0c24      	lsrs	r4, r4, #16
 800a1e2:	fb09 2404 	mla	r4, r9, r4, r2
 800a1e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a1ea:	458c      	cmp	ip, r1
 800a1ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a1f0:	d8e7      	bhi.n	800a1c2 <__multiply+0xfe>
 800a1f2:	9a01      	ldr	r2, [sp, #4]
 800a1f4:	50b4      	str	r4, [r6, r2]
 800a1f6:	3604      	adds	r6, #4
 800a1f8:	e7a3      	b.n	800a142 <__multiply+0x7e>
 800a1fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1a5      	bne.n	800a14e <__multiply+0x8a>
 800a202:	3f01      	subs	r7, #1
 800a204:	e7a1      	b.n	800a14a <__multiply+0x86>
 800a206:	bf00      	nop
 800a208:	0800b923 	.word	0x0800b923
 800a20c:	0800b9b4 	.word	0x0800b9b4

0800a210 <__pow5mult>:
 800a210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a214:	4615      	mov	r5, r2
 800a216:	f012 0203 	ands.w	r2, r2, #3
 800a21a:	4606      	mov	r6, r0
 800a21c:	460f      	mov	r7, r1
 800a21e:	d007      	beq.n	800a230 <__pow5mult+0x20>
 800a220:	4c25      	ldr	r4, [pc, #148]	; (800a2b8 <__pow5mult+0xa8>)
 800a222:	3a01      	subs	r2, #1
 800a224:	2300      	movs	r3, #0
 800a226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a22a:	f7ff fe51 	bl	8009ed0 <__multadd>
 800a22e:	4607      	mov	r7, r0
 800a230:	10ad      	asrs	r5, r5, #2
 800a232:	d03d      	beq.n	800a2b0 <__pow5mult+0xa0>
 800a234:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a236:	b97c      	cbnz	r4, 800a258 <__pow5mult+0x48>
 800a238:	2010      	movs	r0, #16
 800a23a:	f7ff fdbf 	bl	8009dbc <malloc>
 800a23e:	4602      	mov	r2, r0
 800a240:	6270      	str	r0, [r6, #36]	; 0x24
 800a242:	b928      	cbnz	r0, 800a250 <__pow5mult+0x40>
 800a244:	4b1d      	ldr	r3, [pc, #116]	; (800a2bc <__pow5mult+0xac>)
 800a246:	481e      	ldr	r0, [pc, #120]	; (800a2c0 <__pow5mult+0xb0>)
 800a248:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a24c:	f000 fce8 	bl	800ac20 <__assert_func>
 800a250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a254:	6004      	str	r4, [r0, #0]
 800a256:	60c4      	str	r4, [r0, #12]
 800a258:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a25c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a260:	b94c      	cbnz	r4, 800a276 <__pow5mult+0x66>
 800a262:	f240 2171 	movw	r1, #625	; 0x271
 800a266:	4630      	mov	r0, r6
 800a268:	f7ff ff16 	bl	800a098 <__i2b>
 800a26c:	2300      	movs	r3, #0
 800a26e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a272:	4604      	mov	r4, r0
 800a274:	6003      	str	r3, [r0, #0]
 800a276:	f04f 0900 	mov.w	r9, #0
 800a27a:	07eb      	lsls	r3, r5, #31
 800a27c:	d50a      	bpl.n	800a294 <__pow5mult+0x84>
 800a27e:	4639      	mov	r1, r7
 800a280:	4622      	mov	r2, r4
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ff1e 	bl	800a0c4 <__multiply>
 800a288:	4639      	mov	r1, r7
 800a28a:	4680      	mov	r8, r0
 800a28c:	4630      	mov	r0, r6
 800a28e:	f7ff fdfd 	bl	8009e8c <_Bfree>
 800a292:	4647      	mov	r7, r8
 800a294:	106d      	asrs	r5, r5, #1
 800a296:	d00b      	beq.n	800a2b0 <__pow5mult+0xa0>
 800a298:	6820      	ldr	r0, [r4, #0]
 800a29a:	b938      	cbnz	r0, 800a2ac <__pow5mult+0x9c>
 800a29c:	4622      	mov	r2, r4
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f7ff ff0f 	bl	800a0c4 <__multiply>
 800a2a6:	6020      	str	r0, [r4, #0]
 800a2a8:	f8c0 9000 	str.w	r9, [r0]
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	e7e4      	b.n	800a27a <__pow5mult+0x6a>
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800bb08 	.word	0x0800bb08
 800a2bc:	0800b8ad 	.word	0x0800b8ad
 800a2c0:	0800b9b4 	.word	0x0800b9b4

0800a2c4 <__lshift>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	6849      	ldr	r1, [r1, #4]
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2d2:	68a3      	ldr	r3, [r4, #8]
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	4691      	mov	r9, r2
 800a2d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2dc:	f108 0601 	add.w	r6, r8, #1
 800a2e0:	42b3      	cmp	r3, r6
 800a2e2:	db0b      	blt.n	800a2fc <__lshift+0x38>
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff fd91 	bl	8009e0c <_Balloc>
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	b948      	cbnz	r0, 800a302 <__lshift+0x3e>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	4b28      	ldr	r3, [pc, #160]	; (800a394 <__lshift+0xd0>)
 800a2f2:	4829      	ldr	r0, [pc, #164]	; (800a398 <__lshift+0xd4>)
 800a2f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a2f8:	f000 fc92 	bl	800ac20 <__assert_func>
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	e7ee      	b.n	800a2e0 <__lshift+0x1c>
 800a302:	2300      	movs	r3, #0
 800a304:	f100 0114 	add.w	r1, r0, #20
 800a308:	f100 0210 	add.w	r2, r0, #16
 800a30c:	4618      	mov	r0, r3
 800a30e:	4553      	cmp	r3, sl
 800a310:	db33      	blt.n	800a37a <__lshift+0xb6>
 800a312:	6920      	ldr	r0, [r4, #16]
 800a314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a318:	f104 0314 	add.w	r3, r4, #20
 800a31c:	f019 091f 	ands.w	r9, r9, #31
 800a320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a324:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a328:	d02b      	beq.n	800a382 <__lshift+0xbe>
 800a32a:	f1c9 0e20 	rsb	lr, r9, #32
 800a32e:	468a      	mov	sl, r1
 800a330:	2200      	movs	r2, #0
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	fa00 f009 	lsl.w	r0, r0, r9
 800a338:	4302      	orrs	r2, r0
 800a33a:	f84a 2b04 	str.w	r2, [sl], #4
 800a33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a342:	459c      	cmp	ip, r3
 800a344:	fa22 f20e 	lsr.w	r2, r2, lr
 800a348:	d8f3      	bhi.n	800a332 <__lshift+0x6e>
 800a34a:	ebac 0304 	sub.w	r3, ip, r4
 800a34e:	3b15      	subs	r3, #21
 800a350:	f023 0303 	bic.w	r3, r3, #3
 800a354:	3304      	adds	r3, #4
 800a356:	f104 0015 	add.w	r0, r4, #21
 800a35a:	4584      	cmp	ip, r0
 800a35c:	bf38      	it	cc
 800a35e:	2304      	movcc	r3, #4
 800a360:	50ca      	str	r2, [r1, r3]
 800a362:	b10a      	cbz	r2, 800a368 <__lshift+0xa4>
 800a364:	f108 0602 	add.w	r6, r8, #2
 800a368:	3e01      	subs	r6, #1
 800a36a:	4638      	mov	r0, r7
 800a36c:	612e      	str	r6, [r5, #16]
 800a36e:	4621      	mov	r1, r4
 800a370:	f7ff fd8c 	bl	8009e8c <_Bfree>
 800a374:	4628      	mov	r0, r5
 800a376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a37e:	3301      	adds	r3, #1
 800a380:	e7c5      	b.n	800a30e <__lshift+0x4a>
 800a382:	3904      	subs	r1, #4
 800a384:	f853 2b04 	ldr.w	r2, [r3], #4
 800a388:	f841 2f04 	str.w	r2, [r1, #4]!
 800a38c:	459c      	cmp	ip, r3
 800a38e:	d8f9      	bhi.n	800a384 <__lshift+0xc0>
 800a390:	e7ea      	b.n	800a368 <__lshift+0xa4>
 800a392:	bf00      	nop
 800a394:	0800b923 	.word	0x0800b923
 800a398:	0800b9b4 	.word	0x0800b9b4

0800a39c <__mcmp>:
 800a39c:	b530      	push	{r4, r5, lr}
 800a39e:	6902      	ldr	r2, [r0, #16]
 800a3a0:	690c      	ldr	r4, [r1, #16]
 800a3a2:	1b12      	subs	r2, r2, r4
 800a3a4:	d10e      	bne.n	800a3c4 <__mcmp+0x28>
 800a3a6:	f100 0314 	add.w	r3, r0, #20
 800a3aa:	3114      	adds	r1, #20
 800a3ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3bc:	42a5      	cmp	r5, r4
 800a3be:	d003      	beq.n	800a3c8 <__mcmp+0x2c>
 800a3c0:	d305      	bcc.n	800a3ce <__mcmp+0x32>
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	bd30      	pop	{r4, r5, pc}
 800a3c8:	4283      	cmp	r3, r0
 800a3ca:	d3f3      	bcc.n	800a3b4 <__mcmp+0x18>
 800a3cc:	e7fa      	b.n	800a3c4 <__mcmp+0x28>
 800a3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d2:	e7f7      	b.n	800a3c4 <__mcmp+0x28>

0800a3d4 <__mdiff>:
 800a3d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	460c      	mov	r4, r1
 800a3da:	4606      	mov	r6, r0
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4617      	mov	r7, r2
 800a3e2:	f7ff ffdb 	bl	800a39c <__mcmp>
 800a3e6:	1e05      	subs	r5, r0, #0
 800a3e8:	d110      	bne.n	800a40c <__mdiff+0x38>
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7ff fd0d 	bl	8009e0c <_Balloc>
 800a3f2:	b930      	cbnz	r0, 800a402 <__mdiff+0x2e>
 800a3f4:	4b39      	ldr	r3, [pc, #228]	; (800a4dc <__mdiff+0x108>)
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	f240 2132 	movw	r1, #562	; 0x232
 800a3fc:	4838      	ldr	r0, [pc, #224]	; (800a4e0 <__mdiff+0x10c>)
 800a3fe:	f000 fc0f 	bl	800ac20 <__assert_func>
 800a402:	2301      	movs	r3, #1
 800a404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40c:	bfa4      	itt	ge
 800a40e:	463b      	movge	r3, r7
 800a410:	4627      	movge	r7, r4
 800a412:	4630      	mov	r0, r6
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	bfa6      	itte	ge
 800a418:	461c      	movge	r4, r3
 800a41a:	2500      	movge	r5, #0
 800a41c:	2501      	movlt	r5, #1
 800a41e:	f7ff fcf5 	bl	8009e0c <_Balloc>
 800a422:	b920      	cbnz	r0, 800a42e <__mdiff+0x5a>
 800a424:	4b2d      	ldr	r3, [pc, #180]	; (800a4dc <__mdiff+0x108>)
 800a426:	4602      	mov	r2, r0
 800a428:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a42c:	e7e6      	b.n	800a3fc <__mdiff+0x28>
 800a42e:	693e      	ldr	r6, [r7, #16]
 800a430:	60c5      	str	r5, [r0, #12]
 800a432:	6925      	ldr	r5, [r4, #16]
 800a434:	f107 0114 	add.w	r1, r7, #20
 800a438:	f104 0914 	add.w	r9, r4, #20
 800a43c:	f100 0e14 	add.w	lr, r0, #20
 800a440:	f107 0210 	add.w	r2, r7, #16
 800a444:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a448:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a44c:	46f2      	mov	sl, lr
 800a44e:	2700      	movs	r7, #0
 800a450:	f859 3b04 	ldr.w	r3, [r9], #4
 800a454:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a458:	fa1f f883 	uxth.w	r8, r3
 800a45c:	fa17 f78b 	uxtah	r7, r7, fp
 800a460:	0c1b      	lsrs	r3, r3, #16
 800a462:	eba7 0808 	sub.w	r8, r7, r8
 800a466:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a46a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a46e:	fa1f f888 	uxth.w	r8, r8
 800a472:	141f      	asrs	r7, r3, #16
 800a474:	454d      	cmp	r5, r9
 800a476:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a47a:	f84a 3b04 	str.w	r3, [sl], #4
 800a47e:	d8e7      	bhi.n	800a450 <__mdiff+0x7c>
 800a480:	1b2b      	subs	r3, r5, r4
 800a482:	3b15      	subs	r3, #21
 800a484:	f023 0303 	bic.w	r3, r3, #3
 800a488:	3304      	adds	r3, #4
 800a48a:	3415      	adds	r4, #21
 800a48c:	42a5      	cmp	r5, r4
 800a48e:	bf38      	it	cc
 800a490:	2304      	movcc	r3, #4
 800a492:	4419      	add	r1, r3
 800a494:	4473      	add	r3, lr
 800a496:	469e      	mov	lr, r3
 800a498:	460d      	mov	r5, r1
 800a49a:	4565      	cmp	r5, ip
 800a49c:	d30e      	bcc.n	800a4bc <__mdiff+0xe8>
 800a49e:	f10c 0203 	add.w	r2, ip, #3
 800a4a2:	1a52      	subs	r2, r2, r1
 800a4a4:	f022 0203 	bic.w	r2, r2, #3
 800a4a8:	3903      	subs	r1, #3
 800a4aa:	458c      	cmp	ip, r1
 800a4ac:	bf38      	it	cc
 800a4ae:	2200      	movcc	r2, #0
 800a4b0:	441a      	add	r2, r3
 800a4b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4b6:	b17b      	cbz	r3, 800a4d8 <__mdiff+0x104>
 800a4b8:	6106      	str	r6, [r0, #16]
 800a4ba:	e7a5      	b.n	800a408 <__mdiff+0x34>
 800a4bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800a4c0:	fa17 f488 	uxtah	r4, r7, r8
 800a4c4:	1422      	asrs	r2, r4, #16
 800a4c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a4ca:	b2a4      	uxth	r4, r4
 800a4cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a4d0:	f84e 4b04 	str.w	r4, [lr], #4
 800a4d4:	1417      	asrs	r7, r2, #16
 800a4d6:	e7e0      	b.n	800a49a <__mdiff+0xc6>
 800a4d8:	3e01      	subs	r6, #1
 800a4da:	e7ea      	b.n	800a4b2 <__mdiff+0xde>
 800a4dc:	0800b923 	.word	0x0800b923
 800a4e0:	0800b9b4 	.word	0x0800b9b4

0800a4e4 <__ulp>:
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	ed8d 0b00 	vstr	d0, [sp]
 800a4ea:	9b01      	ldr	r3, [sp, #4]
 800a4ec:	4912      	ldr	r1, [pc, #72]	; (800a538 <__ulp+0x54>)
 800a4ee:	4019      	ands	r1, r3
 800a4f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	dd05      	ble.n	800a504 <__ulp+0x20>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	ec43 2b10 	vmov	d0, r2, r3
 800a500:	b002      	add	sp, #8
 800a502:	4770      	bx	lr
 800a504:	4249      	negs	r1, r1
 800a506:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a50a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a50e:	f04f 0200 	mov.w	r2, #0
 800a512:	f04f 0300 	mov.w	r3, #0
 800a516:	da04      	bge.n	800a522 <__ulp+0x3e>
 800a518:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a51c:	fa41 f300 	asr.w	r3, r1, r0
 800a520:	e7ec      	b.n	800a4fc <__ulp+0x18>
 800a522:	f1a0 0114 	sub.w	r1, r0, #20
 800a526:	291e      	cmp	r1, #30
 800a528:	bfda      	itte	le
 800a52a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a52e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a532:	2101      	movgt	r1, #1
 800a534:	460a      	mov	r2, r1
 800a536:	e7e1      	b.n	800a4fc <__ulp+0x18>
 800a538:	7ff00000 	.word	0x7ff00000

0800a53c <__b2d>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	6905      	ldr	r5, [r0, #16]
 800a540:	f100 0714 	add.w	r7, r0, #20
 800a544:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a548:	1f2e      	subs	r6, r5, #4
 800a54a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a54e:	4620      	mov	r0, r4
 800a550:	f7ff fd52 	bl	8009ff8 <__hi0bits>
 800a554:	f1c0 0320 	rsb	r3, r0, #32
 800a558:	280a      	cmp	r0, #10
 800a55a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a5d8 <__b2d+0x9c>
 800a55e:	600b      	str	r3, [r1, #0]
 800a560:	dc14      	bgt.n	800a58c <__b2d+0x50>
 800a562:	f1c0 0e0b 	rsb	lr, r0, #11
 800a566:	fa24 f10e 	lsr.w	r1, r4, lr
 800a56a:	42b7      	cmp	r7, r6
 800a56c:	ea41 030c 	orr.w	r3, r1, ip
 800a570:	bf34      	ite	cc
 800a572:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a576:	2100      	movcs	r1, #0
 800a578:	3015      	adds	r0, #21
 800a57a:	fa04 f000 	lsl.w	r0, r4, r0
 800a57e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a582:	ea40 0201 	orr.w	r2, r0, r1
 800a586:	ec43 2b10 	vmov	d0, r2, r3
 800a58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a58c:	42b7      	cmp	r7, r6
 800a58e:	bf3a      	itte	cc
 800a590:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a594:	f1a5 0608 	subcc.w	r6, r5, #8
 800a598:	2100      	movcs	r1, #0
 800a59a:	380b      	subs	r0, #11
 800a59c:	d017      	beq.n	800a5ce <__b2d+0x92>
 800a59e:	f1c0 0c20 	rsb	ip, r0, #32
 800a5a2:	fa04 f500 	lsl.w	r5, r4, r0
 800a5a6:	42be      	cmp	r6, r7
 800a5a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a5ac:	ea45 0504 	orr.w	r5, r5, r4
 800a5b0:	bf8c      	ite	hi
 800a5b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5b6:	2400      	movls	r4, #0
 800a5b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a5bc:	fa01 f000 	lsl.w	r0, r1, r0
 800a5c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a5c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5c8:	ea40 0204 	orr.w	r2, r0, r4
 800a5cc:	e7db      	b.n	800a586 <__b2d+0x4a>
 800a5ce:	ea44 030c 	orr.w	r3, r4, ip
 800a5d2:	460a      	mov	r2, r1
 800a5d4:	e7d7      	b.n	800a586 <__b2d+0x4a>
 800a5d6:	bf00      	nop
 800a5d8:	3ff00000 	.word	0x3ff00000

0800a5dc <__d2b>:
 800a5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5e0:	4689      	mov	r9, r1
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	ec57 6b10 	vmov	r6, r7, d0
 800a5e8:	4690      	mov	r8, r2
 800a5ea:	f7ff fc0f 	bl	8009e0c <_Balloc>
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	b930      	cbnz	r0, 800a600 <__d2b+0x24>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	4b25      	ldr	r3, [pc, #148]	; (800a68c <__d2b+0xb0>)
 800a5f6:	4826      	ldr	r0, [pc, #152]	; (800a690 <__d2b+0xb4>)
 800a5f8:	f240 310a 	movw	r1, #778	; 0x30a
 800a5fc:	f000 fb10 	bl	800ac20 <__assert_func>
 800a600:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a608:	bb35      	cbnz	r5, 800a658 <__d2b+0x7c>
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	d028      	beq.n	800a662 <__d2b+0x86>
 800a610:	4668      	mov	r0, sp
 800a612:	9600      	str	r6, [sp, #0]
 800a614:	f7ff fd10 	bl	800a038 <__lo0bits>
 800a618:	9900      	ldr	r1, [sp, #0]
 800a61a:	b300      	cbz	r0, 800a65e <__d2b+0x82>
 800a61c:	9a01      	ldr	r2, [sp, #4]
 800a61e:	f1c0 0320 	rsb	r3, r0, #32
 800a622:	fa02 f303 	lsl.w	r3, r2, r3
 800a626:	430b      	orrs	r3, r1
 800a628:	40c2      	lsrs	r2, r0
 800a62a:	6163      	str	r3, [r4, #20]
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	61a3      	str	r3, [r4, #24]
 800a632:	2b00      	cmp	r3, #0
 800a634:	bf14      	ite	ne
 800a636:	2202      	movne	r2, #2
 800a638:	2201      	moveq	r2, #1
 800a63a:	6122      	str	r2, [r4, #16]
 800a63c:	b1d5      	cbz	r5, 800a674 <__d2b+0x98>
 800a63e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a642:	4405      	add	r5, r0
 800a644:	f8c9 5000 	str.w	r5, [r9]
 800a648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a64c:	f8c8 0000 	str.w	r0, [r8]
 800a650:	4620      	mov	r0, r4
 800a652:	b003      	add	sp, #12
 800a654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a65c:	e7d5      	b.n	800a60a <__d2b+0x2e>
 800a65e:	6161      	str	r1, [r4, #20]
 800a660:	e7e5      	b.n	800a62e <__d2b+0x52>
 800a662:	a801      	add	r0, sp, #4
 800a664:	f7ff fce8 	bl	800a038 <__lo0bits>
 800a668:	9b01      	ldr	r3, [sp, #4]
 800a66a:	6163      	str	r3, [r4, #20]
 800a66c:	2201      	movs	r2, #1
 800a66e:	6122      	str	r2, [r4, #16]
 800a670:	3020      	adds	r0, #32
 800a672:	e7e3      	b.n	800a63c <__d2b+0x60>
 800a674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a67c:	f8c9 0000 	str.w	r0, [r9]
 800a680:	6918      	ldr	r0, [r3, #16]
 800a682:	f7ff fcb9 	bl	8009ff8 <__hi0bits>
 800a686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a68a:	e7df      	b.n	800a64c <__d2b+0x70>
 800a68c:	0800b923 	.word	0x0800b923
 800a690:	0800b9b4 	.word	0x0800b9b4

0800a694 <__ratio>:
 800a694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	468a      	mov	sl, r1
 800a69a:	4669      	mov	r1, sp
 800a69c:	4683      	mov	fp, r0
 800a69e:	f7ff ff4d 	bl	800a53c <__b2d>
 800a6a2:	a901      	add	r1, sp, #4
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	ec59 8b10 	vmov	r8, r9, d0
 800a6aa:	ee10 6a10 	vmov	r6, s0
 800a6ae:	f7ff ff45 	bl	800a53c <__b2d>
 800a6b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a6b6:	f8da 2010 	ldr.w	r2, [sl, #16]
 800a6ba:	eba3 0c02 	sub.w	ip, r3, r2
 800a6be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6c8:	ec55 4b10 	vmov	r4, r5, d0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	ee10 0a10 	vmov	r0, s0
 800a6d2:	bfce      	itee	gt
 800a6d4:	464a      	movgt	r2, r9
 800a6d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6da:	462a      	movle	r2, r5
 800a6dc:	464f      	mov	r7, r9
 800a6de:	4629      	mov	r1, r5
 800a6e0:	bfcc      	ite	gt
 800a6e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6e6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a6ea:	ec47 6b17 	vmov	d7, r6, r7
 800a6ee:	ec41 0b16 	vmov	d6, r0, r1
 800a6f2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800a6f6:	b003      	add	sp, #12
 800a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6fc <__copybits>:
 800a6fc:	3901      	subs	r1, #1
 800a6fe:	b570      	push	{r4, r5, r6, lr}
 800a700:	1149      	asrs	r1, r1, #5
 800a702:	6914      	ldr	r4, [r2, #16]
 800a704:	3101      	adds	r1, #1
 800a706:	f102 0314 	add.w	r3, r2, #20
 800a70a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a70e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a712:	1f05      	subs	r5, r0, #4
 800a714:	42a3      	cmp	r3, r4
 800a716:	d30c      	bcc.n	800a732 <__copybits+0x36>
 800a718:	1aa3      	subs	r3, r4, r2
 800a71a:	3b11      	subs	r3, #17
 800a71c:	f023 0303 	bic.w	r3, r3, #3
 800a720:	3211      	adds	r2, #17
 800a722:	42a2      	cmp	r2, r4
 800a724:	bf88      	it	hi
 800a726:	2300      	movhi	r3, #0
 800a728:	4418      	add	r0, r3
 800a72a:	2300      	movs	r3, #0
 800a72c:	4288      	cmp	r0, r1
 800a72e:	d305      	bcc.n	800a73c <__copybits+0x40>
 800a730:	bd70      	pop	{r4, r5, r6, pc}
 800a732:	f853 6b04 	ldr.w	r6, [r3], #4
 800a736:	f845 6f04 	str.w	r6, [r5, #4]!
 800a73a:	e7eb      	b.n	800a714 <__copybits+0x18>
 800a73c:	f840 3b04 	str.w	r3, [r0], #4
 800a740:	e7f4      	b.n	800a72c <__copybits+0x30>

0800a742 <__any_on>:
 800a742:	f100 0214 	add.w	r2, r0, #20
 800a746:	6900      	ldr	r0, [r0, #16]
 800a748:	114b      	asrs	r3, r1, #5
 800a74a:	4298      	cmp	r0, r3
 800a74c:	b510      	push	{r4, lr}
 800a74e:	db11      	blt.n	800a774 <__any_on+0x32>
 800a750:	dd0a      	ble.n	800a768 <__any_on+0x26>
 800a752:	f011 011f 	ands.w	r1, r1, #31
 800a756:	d007      	beq.n	800a768 <__any_on+0x26>
 800a758:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a75c:	fa24 f001 	lsr.w	r0, r4, r1
 800a760:	fa00 f101 	lsl.w	r1, r0, r1
 800a764:	428c      	cmp	r4, r1
 800a766:	d10b      	bne.n	800a780 <__any_on+0x3e>
 800a768:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d803      	bhi.n	800a778 <__any_on+0x36>
 800a770:	2000      	movs	r0, #0
 800a772:	bd10      	pop	{r4, pc}
 800a774:	4603      	mov	r3, r0
 800a776:	e7f7      	b.n	800a768 <__any_on+0x26>
 800a778:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a77c:	2900      	cmp	r1, #0
 800a77e:	d0f5      	beq.n	800a76c <__any_on+0x2a>
 800a780:	2001      	movs	r0, #1
 800a782:	e7f6      	b.n	800a772 <__any_on+0x30>

0800a784 <_calloc_r>:
 800a784:	b513      	push	{r0, r1, r4, lr}
 800a786:	434a      	muls	r2, r1
 800a788:	4611      	mov	r1, r2
 800a78a:	9201      	str	r2, [sp, #4]
 800a78c:	f000 f85a 	bl	800a844 <_malloc_r>
 800a790:	4604      	mov	r4, r0
 800a792:	b118      	cbz	r0, 800a79c <_calloc_r+0x18>
 800a794:	9a01      	ldr	r2, [sp, #4]
 800a796:	2100      	movs	r1, #0
 800a798:	f7fc ff24 	bl	80075e4 <memset>
 800a79c:	4620      	mov	r0, r4
 800a79e:	b002      	add	sp, #8
 800a7a0:	bd10      	pop	{r4, pc}
	...

0800a7a4 <_free_r>:
 800a7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	d048      	beq.n	800a83c <_free_r+0x98>
 800a7aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ae:	9001      	str	r0, [sp, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7b6:	bfb8      	it	lt
 800a7b8:	18e4      	addlt	r4, r4, r3
 800a7ba:	f000 fa7b 	bl	800acb4 <__malloc_lock>
 800a7be:	4a20      	ldr	r2, [pc, #128]	; (800a840 <_free_r+0x9c>)
 800a7c0:	9801      	ldr	r0, [sp, #4]
 800a7c2:	6813      	ldr	r3, [r2, #0]
 800a7c4:	4615      	mov	r5, r2
 800a7c6:	b933      	cbnz	r3, 800a7d6 <_free_r+0x32>
 800a7c8:	6063      	str	r3, [r4, #4]
 800a7ca:	6014      	str	r4, [r2, #0]
 800a7cc:	b003      	add	sp, #12
 800a7ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7d2:	f000 ba75 	b.w	800acc0 <__malloc_unlock>
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	d90b      	bls.n	800a7f2 <_free_r+0x4e>
 800a7da:	6821      	ldr	r1, [r4, #0]
 800a7dc:	1862      	adds	r2, r4, r1
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	bf04      	itt	eq
 800a7e2:	681a      	ldreq	r2, [r3, #0]
 800a7e4:	685b      	ldreq	r3, [r3, #4]
 800a7e6:	6063      	str	r3, [r4, #4]
 800a7e8:	bf04      	itt	eq
 800a7ea:	1852      	addeq	r2, r2, r1
 800a7ec:	6022      	streq	r2, [r4, #0]
 800a7ee:	602c      	str	r4, [r5, #0]
 800a7f0:	e7ec      	b.n	800a7cc <_free_r+0x28>
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	b10b      	cbz	r3, 800a7fc <_free_r+0x58>
 800a7f8:	42a3      	cmp	r3, r4
 800a7fa:	d9fa      	bls.n	800a7f2 <_free_r+0x4e>
 800a7fc:	6811      	ldr	r1, [r2, #0]
 800a7fe:	1855      	adds	r5, r2, r1
 800a800:	42a5      	cmp	r5, r4
 800a802:	d10b      	bne.n	800a81c <_free_r+0x78>
 800a804:	6824      	ldr	r4, [r4, #0]
 800a806:	4421      	add	r1, r4
 800a808:	1854      	adds	r4, r2, r1
 800a80a:	42a3      	cmp	r3, r4
 800a80c:	6011      	str	r1, [r2, #0]
 800a80e:	d1dd      	bne.n	800a7cc <_free_r+0x28>
 800a810:	681c      	ldr	r4, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	6053      	str	r3, [r2, #4]
 800a816:	4421      	add	r1, r4
 800a818:	6011      	str	r1, [r2, #0]
 800a81a:	e7d7      	b.n	800a7cc <_free_r+0x28>
 800a81c:	d902      	bls.n	800a824 <_free_r+0x80>
 800a81e:	230c      	movs	r3, #12
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	e7d3      	b.n	800a7cc <_free_r+0x28>
 800a824:	6825      	ldr	r5, [r4, #0]
 800a826:	1961      	adds	r1, r4, r5
 800a828:	428b      	cmp	r3, r1
 800a82a:	bf04      	itt	eq
 800a82c:	6819      	ldreq	r1, [r3, #0]
 800a82e:	685b      	ldreq	r3, [r3, #4]
 800a830:	6063      	str	r3, [r4, #4]
 800a832:	bf04      	itt	eq
 800a834:	1949      	addeq	r1, r1, r5
 800a836:	6021      	streq	r1, [r4, #0]
 800a838:	6054      	str	r4, [r2, #4]
 800a83a:	e7c7      	b.n	800a7cc <_free_r+0x28>
 800a83c:	b003      	add	sp, #12
 800a83e:	bd30      	pop	{r4, r5, pc}
 800a840:	2000022c 	.word	0x2000022c

0800a844 <_malloc_r>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	1ccd      	adds	r5, r1, #3
 800a848:	f025 0503 	bic.w	r5, r5, #3
 800a84c:	3508      	adds	r5, #8
 800a84e:	2d0c      	cmp	r5, #12
 800a850:	bf38      	it	cc
 800a852:	250c      	movcc	r5, #12
 800a854:	2d00      	cmp	r5, #0
 800a856:	4606      	mov	r6, r0
 800a858:	db01      	blt.n	800a85e <_malloc_r+0x1a>
 800a85a:	42a9      	cmp	r1, r5
 800a85c:	d903      	bls.n	800a866 <_malloc_r+0x22>
 800a85e:	230c      	movs	r3, #12
 800a860:	6033      	str	r3, [r6, #0]
 800a862:	2000      	movs	r0, #0
 800a864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a866:	f000 fa25 	bl	800acb4 <__malloc_lock>
 800a86a:	4921      	ldr	r1, [pc, #132]	; (800a8f0 <_malloc_r+0xac>)
 800a86c:	680a      	ldr	r2, [r1, #0]
 800a86e:	4614      	mov	r4, r2
 800a870:	b99c      	cbnz	r4, 800a89a <_malloc_r+0x56>
 800a872:	4f20      	ldr	r7, [pc, #128]	; (800a8f4 <_malloc_r+0xb0>)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	b923      	cbnz	r3, 800a882 <_malloc_r+0x3e>
 800a878:	4621      	mov	r1, r4
 800a87a:	4630      	mov	r0, r6
 800a87c:	f000 f9a0 	bl	800abc0 <_sbrk_r>
 800a880:	6038      	str	r0, [r7, #0]
 800a882:	4629      	mov	r1, r5
 800a884:	4630      	mov	r0, r6
 800a886:	f000 f99b 	bl	800abc0 <_sbrk_r>
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	d123      	bne.n	800a8d6 <_malloc_r+0x92>
 800a88e:	230c      	movs	r3, #12
 800a890:	6033      	str	r3, [r6, #0]
 800a892:	4630      	mov	r0, r6
 800a894:	f000 fa14 	bl	800acc0 <__malloc_unlock>
 800a898:	e7e3      	b.n	800a862 <_malloc_r+0x1e>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	1b5b      	subs	r3, r3, r5
 800a89e:	d417      	bmi.n	800a8d0 <_malloc_r+0x8c>
 800a8a0:	2b0b      	cmp	r3, #11
 800a8a2:	d903      	bls.n	800a8ac <_malloc_r+0x68>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	441c      	add	r4, r3
 800a8a8:	6025      	str	r5, [r4, #0]
 800a8aa:	e004      	b.n	800a8b6 <_malloc_r+0x72>
 800a8ac:	6863      	ldr	r3, [r4, #4]
 800a8ae:	42a2      	cmp	r2, r4
 800a8b0:	bf0c      	ite	eq
 800a8b2:	600b      	streq	r3, [r1, #0]
 800a8b4:	6053      	strne	r3, [r2, #4]
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f000 fa02 	bl	800acc0 <__malloc_unlock>
 800a8bc:	f104 000b 	add.w	r0, r4, #11
 800a8c0:	1d23      	adds	r3, r4, #4
 800a8c2:	f020 0007 	bic.w	r0, r0, #7
 800a8c6:	1ac2      	subs	r2, r0, r3
 800a8c8:	d0cc      	beq.n	800a864 <_malloc_r+0x20>
 800a8ca:	1a1b      	subs	r3, r3, r0
 800a8cc:	50a3      	str	r3, [r4, r2]
 800a8ce:	e7c9      	b.n	800a864 <_malloc_r+0x20>
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	6864      	ldr	r4, [r4, #4]
 800a8d4:	e7cc      	b.n	800a870 <_malloc_r+0x2c>
 800a8d6:	1cc4      	adds	r4, r0, #3
 800a8d8:	f024 0403 	bic.w	r4, r4, #3
 800a8dc:	42a0      	cmp	r0, r4
 800a8de:	d0e3      	beq.n	800a8a8 <_malloc_r+0x64>
 800a8e0:	1a21      	subs	r1, r4, r0
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f000 f96c 	bl	800abc0 <_sbrk_r>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d1dd      	bne.n	800a8a8 <_malloc_r+0x64>
 800a8ec:	e7cf      	b.n	800a88e <_malloc_r+0x4a>
 800a8ee:	bf00      	nop
 800a8f0:	2000022c 	.word	0x2000022c
 800a8f4:	20000230 	.word	0x20000230

0800a8f8 <__ssputs_r>:
 800a8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	688e      	ldr	r6, [r1, #8]
 800a8fe:	429e      	cmp	r6, r3
 800a900:	4682      	mov	sl, r0
 800a902:	460c      	mov	r4, r1
 800a904:	4690      	mov	r8, r2
 800a906:	461f      	mov	r7, r3
 800a908:	d838      	bhi.n	800a97c <__ssputs_r+0x84>
 800a90a:	898a      	ldrh	r2, [r1, #12]
 800a90c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a910:	d032      	beq.n	800a978 <__ssputs_r+0x80>
 800a912:	6825      	ldr	r5, [r4, #0]
 800a914:	6909      	ldr	r1, [r1, #16]
 800a916:	eba5 0901 	sub.w	r9, r5, r1
 800a91a:	6965      	ldr	r5, [r4, #20]
 800a91c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a924:	3301      	adds	r3, #1
 800a926:	444b      	add	r3, r9
 800a928:	106d      	asrs	r5, r5, #1
 800a92a:	429d      	cmp	r5, r3
 800a92c:	bf38      	it	cc
 800a92e:	461d      	movcc	r5, r3
 800a930:	0553      	lsls	r3, r2, #21
 800a932:	d531      	bpl.n	800a998 <__ssputs_r+0xa0>
 800a934:	4629      	mov	r1, r5
 800a936:	f7ff ff85 	bl	800a844 <_malloc_r>
 800a93a:	4606      	mov	r6, r0
 800a93c:	b950      	cbnz	r0, 800a954 <__ssputs_r+0x5c>
 800a93e:	230c      	movs	r3, #12
 800a940:	f8ca 3000 	str.w	r3, [sl]
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295
 800a950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a954:	6921      	ldr	r1, [r4, #16]
 800a956:	464a      	mov	r2, r9
 800a958:	f7ff fa4a 	bl	8009df0 <memcpy>
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a966:	81a3      	strh	r3, [r4, #12]
 800a968:	6126      	str	r6, [r4, #16]
 800a96a:	6165      	str	r5, [r4, #20]
 800a96c:	444e      	add	r6, r9
 800a96e:	eba5 0509 	sub.w	r5, r5, r9
 800a972:	6026      	str	r6, [r4, #0]
 800a974:	60a5      	str	r5, [r4, #8]
 800a976:	463e      	mov	r6, r7
 800a978:	42be      	cmp	r6, r7
 800a97a:	d900      	bls.n	800a97e <__ssputs_r+0x86>
 800a97c:	463e      	mov	r6, r7
 800a97e:	4632      	mov	r2, r6
 800a980:	6820      	ldr	r0, [r4, #0]
 800a982:	4641      	mov	r1, r8
 800a984:	f000 f97c 	bl	800ac80 <memmove>
 800a988:	68a3      	ldr	r3, [r4, #8]
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	1b9b      	subs	r3, r3, r6
 800a98e:	4432      	add	r2, r6
 800a990:	60a3      	str	r3, [r4, #8]
 800a992:	6022      	str	r2, [r4, #0]
 800a994:	2000      	movs	r0, #0
 800a996:	e7db      	b.n	800a950 <__ssputs_r+0x58>
 800a998:	462a      	mov	r2, r5
 800a99a:	f000 f997 	bl	800accc <_realloc_r>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d1e1      	bne.n	800a968 <__ssputs_r+0x70>
 800a9a4:	6921      	ldr	r1, [r4, #16]
 800a9a6:	4650      	mov	r0, sl
 800a9a8:	f7ff fefc 	bl	800a7a4 <_free_r>
 800a9ac:	e7c7      	b.n	800a93e <__ssputs_r+0x46>
	...

0800a9b0 <_svfiprintf_r>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	4698      	mov	r8, r3
 800a9b6:	898b      	ldrh	r3, [r1, #12]
 800a9b8:	061b      	lsls	r3, r3, #24
 800a9ba:	b09d      	sub	sp, #116	; 0x74
 800a9bc:	4607      	mov	r7, r0
 800a9be:	460d      	mov	r5, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	d50e      	bpl.n	800a9e2 <_svfiprintf_r+0x32>
 800a9c4:	690b      	ldr	r3, [r1, #16]
 800a9c6:	b963      	cbnz	r3, 800a9e2 <_svfiprintf_r+0x32>
 800a9c8:	2140      	movs	r1, #64	; 0x40
 800a9ca:	f7ff ff3b 	bl	800a844 <_malloc_r>
 800a9ce:	6028      	str	r0, [r5, #0]
 800a9d0:	6128      	str	r0, [r5, #16]
 800a9d2:	b920      	cbnz	r0, 800a9de <_svfiprintf_r+0x2e>
 800a9d4:	230c      	movs	r3, #12
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9dc:	e0d1      	b.n	800ab82 <_svfiprintf_r+0x1d2>
 800a9de:	2340      	movs	r3, #64	; 0x40
 800a9e0:	616b      	str	r3, [r5, #20]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e6:	2320      	movs	r3, #32
 800a9e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9f0:	2330      	movs	r3, #48	; 0x30
 800a9f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab9c <_svfiprintf_r+0x1ec>
 800a9f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9fa:	f04f 0901 	mov.w	r9, #1
 800a9fe:	4623      	mov	r3, r4
 800aa00:	469a      	mov	sl, r3
 800aa02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa06:	b10a      	cbz	r2, 800aa0c <_svfiprintf_r+0x5c>
 800aa08:	2a25      	cmp	r2, #37	; 0x25
 800aa0a:	d1f9      	bne.n	800aa00 <_svfiprintf_r+0x50>
 800aa0c:	ebba 0b04 	subs.w	fp, sl, r4
 800aa10:	d00b      	beq.n	800aa2a <_svfiprintf_r+0x7a>
 800aa12:	465b      	mov	r3, fp
 800aa14:	4622      	mov	r2, r4
 800aa16:	4629      	mov	r1, r5
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f7ff ff6d 	bl	800a8f8 <__ssputs_r>
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f000 80aa 	beq.w	800ab78 <_svfiprintf_r+0x1c8>
 800aa24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa26:	445a      	add	r2, fp
 800aa28:	9209      	str	r2, [sp, #36]	; 0x24
 800aa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 80a2 	beq.w	800ab78 <_svfiprintf_r+0x1c8>
 800aa34:	2300      	movs	r3, #0
 800aa36:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa3e:	f10a 0a01 	add.w	sl, sl, #1
 800aa42:	9304      	str	r3, [sp, #16]
 800aa44:	9307      	str	r3, [sp, #28]
 800aa46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa4a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa4c:	4654      	mov	r4, sl
 800aa4e:	2205      	movs	r2, #5
 800aa50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa54:	4851      	ldr	r0, [pc, #324]	; (800ab9c <_svfiprintf_r+0x1ec>)
 800aa56:	f7f5 fbfb 	bl	8000250 <memchr>
 800aa5a:	9a04      	ldr	r2, [sp, #16]
 800aa5c:	b9d8      	cbnz	r0, 800aa96 <_svfiprintf_r+0xe6>
 800aa5e:	06d0      	lsls	r0, r2, #27
 800aa60:	bf44      	itt	mi
 800aa62:	2320      	movmi	r3, #32
 800aa64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa68:	0711      	lsls	r1, r2, #28
 800aa6a:	bf44      	itt	mi
 800aa6c:	232b      	movmi	r3, #43	; 0x2b
 800aa6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa72:	f89a 3000 	ldrb.w	r3, [sl]
 800aa76:	2b2a      	cmp	r3, #42	; 0x2a
 800aa78:	d015      	beq.n	800aaa6 <_svfiprintf_r+0xf6>
 800aa7a:	9a07      	ldr	r2, [sp, #28]
 800aa7c:	4654      	mov	r4, sl
 800aa7e:	2000      	movs	r0, #0
 800aa80:	f04f 0c0a 	mov.w	ip, #10
 800aa84:	4621      	mov	r1, r4
 800aa86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa8a:	3b30      	subs	r3, #48	; 0x30
 800aa8c:	2b09      	cmp	r3, #9
 800aa8e:	d94e      	bls.n	800ab2e <_svfiprintf_r+0x17e>
 800aa90:	b1b0      	cbz	r0, 800aac0 <_svfiprintf_r+0x110>
 800aa92:	9207      	str	r2, [sp, #28]
 800aa94:	e014      	b.n	800aac0 <_svfiprintf_r+0x110>
 800aa96:	eba0 0308 	sub.w	r3, r0, r8
 800aa9a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	46a2      	mov	sl, r4
 800aaa4:	e7d2      	b.n	800aa4c <_svfiprintf_r+0x9c>
 800aaa6:	9b03      	ldr	r3, [sp, #12]
 800aaa8:	1d19      	adds	r1, r3, #4
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	9103      	str	r1, [sp, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfbb      	ittet	lt
 800aab2:	425b      	neglt	r3, r3
 800aab4:	f042 0202 	orrlt.w	r2, r2, #2
 800aab8:	9307      	strge	r3, [sp, #28]
 800aaba:	9307      	strlt	r3, [sp, #28]
 800aabc:	bfb8      	it	lt
 800aabe:	9204      	strlt	r2, [sp, #16]
 800aac0:	7823      	ldrb	r3, [r4, #0]
 800aac2:	2b2e      	cmp	r3, #46	; 0x2e
 800aac4:	d10c      	bne.n	800aae0 <_svfiprintf_r+0x130>
 800aac6:	7863      	ldrb	r3, [r4, #1]
 800aac8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaca:	d135      	bne.n	800ab38 <_svfiprintf_r+0x188>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	1d1a      	adds	r2, r3, #4
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	9203      	str	r2, [sp, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfb8      	it	lt
 800aad8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aadc:	3402      	adds	r4, #2
 800aade:	9305      	str	r3, [sp, #20]
 800aae0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abac <_svfiprintf_r+0x1fc>
 800aae4:	7821      	ldrb	r1, [r4, #0]
 800aae6:	2203      	movs	r2, #3
 800aae8:	4650      	mov	r0, sl
 800aaea:	f7f5 fbb1 	bl	8000250 <memchr>
 800aaee:	b140      	cbz	r0, 800ab02 <_svfiprintf_r+0x152>
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	eba0 000a 	sub.w	r0, r0, sl
 800aaf6:	fa03 f000 	lsl.w	r0, r3, r0
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	4303      	orrs	r3, r0
 800aafe:	3401      	adds	r4, #1
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab06:	4826      	ldr	r0, [pc, #152]	; (800aba0 <_svfiprintf_r+0x1f0>)
 800ab08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab0c:	2206      	movs	r2, #6
 800ab0e:	f7f5 fb9f 	bl	8000250 <memchr>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d038      	beq.n	800ab88 <_svfiprintf_r+0x1d8>
 800ab16:	4b23      	ldr	r3, [pc, #140]	; (800aba4 <_svfiprintf_r+0x1f4>)
 800ab18:	bb1b      	cbnz	r3, 800ab62 <_svfiprintf_r+0x1b2>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	3307      	adds	r3, #7
 800ab1e:	f023 0307 	bic.w	r3, r3, #7
 800ab22:	3308      	adds	r3, #8
 800ab24:	9303      	str	r3, [sp, #12]
 800ab26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab28:	4433      	add	r3, r6
 800ab2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2c:	e767      	b.n	800a9fe <_svfiprintf_r+0x4e>
 800ab2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab32:	460c      	mov	r4, r1
 800ab34:	2001      	movs	r0, #1
 800ab36:	e7a5      	b.n	800aa84 <_svfiprintf_r+0xd4>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	3401      	adds	r4, #1
 800ab3c:	9305      	str	r3, [sp, #20]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	f04f 0c0a 	mov.w	ip, #10
 800ab44:	4620      	mov	r0, r4
 800ab46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab4a:	3a30      	subs	r2, #48	; 0x30
 800ab4c:	2a09      	cmp	r2, #9
 800ab4e:	d903      	bls.n	800ab58 <_svfiprintf_r+0x1a8>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0c5      	beq.n	800aae0 <_svfiprintf_r+0x130>
 800ab54:	9105      	str	r1, [sp, #20]
 800ab56:	e7c3      	b.n	800aae0 <_svfiprintf_r+0x130>
 800ab58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e7f0      	b.n	800ab44 <_svfiprintf_r+0x194>
 800ab62:	ab03      	add	r3, sp, #12
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	462a      	mov	r2, r5
 800ab68:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <_svfiprintf_r+0x1f8>)
 800ab6a:	a904      	add	r1, sp, #16
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	f7fc fdd3 	bl	8007718 <_printf_float>
 800ab72:	1c42      	adds	r2, r0, #1
 800ab74:	4606      	mov	r6, r0
 800ab76:	d1d6      	bne.n	800ab26 <_svfiprintf_r+0x176>
 800ab78:	89ab      	ldrh	r3, [r5, #12]
 800ab7a:	065b      	lsls	r3, r3, #25
 800ab7c:	f53f af2c 	bmi.w	800a9d8 <_svfiprintf_r+0x28>
 800ab80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab82:	b01d      	add	sp, #116	; 0x74
 800ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab88:	ab03      	add	r3, sp, #12
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4b06      	ldr	r3, [pc, #24]	; (800aba8 <_svfiprintf_r+0x1f8>)
 800ab90:	a904      	add	r1, sp, #16
 800ab92:	4638      	mov	r0, r7
 800ab94:	f7fd f84c 	bl	8007c30 <_printf_i>
 800ab98:	e7eb      	b.n	800ab72 <_svfiprintf_r+0x1c2>
 800ab9a:	bf00      	nop
 800ab9c:	0800bb14 	.word	0x0800bb14
 800aba0:	0800bb1e 	.word	0x0800bb1e
 800aba4:	08007719 	.word	0x08007719
 800aba8:	0800a8f9 	.word	0x0800a8f9
 800abac:	0800bb1a 	.word	0x0800bb1a

0800abb0 <nan>:
 800abb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abb8 <nan+0x8>
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	00000000 	.word	0x00000000
 800abbc:	7ff80000 	.word	0x7ff80000

0800abc0 <_sbrk_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4d06      	ldr	r5, [pc, #24]	; (800abdc <_sbrk_r+0x1c>)
 800abc4:	2300      	movs	r3, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	602b      	str	r3, [r5, #0]
 800abcc:	f7f6 fcf4 	bl	80015b8 <_sbrk>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d102      	bne.n	800abda <_sbrk_r+0x1a>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	b103      	cbz	r3, 800abda <_sbrk_r+0x1a>
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	200008e4 	.word	0x200008e4

0800abe0 <strncmp>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	b16a      	cbz	r2, 800ac00 <strncmp+0x20>
 800abe4:	3901      	subs	r1, #1
 800abe6:	1884      	adds	r4, r0, r2
 800abe8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800abec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d103      	bne.n	800abfc <strncmp+0x1c>
 800abf4:	42a0      	cmp	r0, r4
 800abf6:	d001      	beq.n	800abfc <strncmp+0x1c>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1f5      	bne.n	800abe8 <strncmp+0x8>
 800abfc:	1a98      	subs	r0, r3, r2
 800abfe:	bd10      	pop	{r4, pc}
 800ac00:	4610      	mov	r0, r2
 800ac02:	e7fc      	b.n	800abfe <strncmp+0x1e>

0800ac04 <__ascii_wctomb>:
 800ac04:	b149      	cbz	r1, 800ac1a <__ascii_wctomb+0x16>
 800ac06:	2aff      	cmp	r2, #255	; 0xff
 800ac08:	bf85      	ittet	hi
 800ac0a:	238a      	movhi	r3, #138	; 0x8a
 800ac0c:	6003      	strhi	r3, [r0, #0]
 800ac0e:	700a      	strbls	r2, [r1, #0]
 800ac10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac14:	bf98      	it	ls
 800ac16:	2001      	movls	r0, #1
 800ac18:	4770      	bx	lr
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	4770      	bx	lr
	...

0800ac20 <__assert_func>:
 800ac20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac22:	4614      	mov	r4, r2
 800ac24:	461a      	mov	r2, r3
 800ac26:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <__assert_func+0x2c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	68d8      	ldr	r0, [r3, #12]
 800ac2e:	b14c      	cbz	r4, 800ac44 <__assert_func+0x24>
 800ac30:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <__assert_func+0x30>)
 800ac32:	9100      	str	r1, [sp, #0]
 800ac34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac38:	4906      	ldr	r1, [pc, #24]	; (800ac54 <__assert_func+0x34>)
 800ac3a:	462b      	mov	r3, r5
 800ac3c:	f000 f80e 	bl	800ac5c <fiprintf>
 800ac40:	f000 fa84 	bl	800b14c <abort>
 800ac44:	4b04      	ldr	r3, [pc, #16]	; (800ac58 <__assert_func+0x38>)
 800ac46:	461c      	mov	r4, r3
 800ac48:	e7f3      	b.n	800ac32 <__assert_func+0x12>
 800ac4a:	bf00      	nop
 800ac4c:	2000000c 	.word	0x2000000c
 800ac50:	0800bb25 	.word	0x0800bb25
 800ac54:	0800bb32 	.word	0x0800bb32
 800ac58:	0800bb60 	.word	0x0800bb60

0800ac5c <fiprintf>:
 800ac5c:	b40e      	push	{r1, r2, r3}
 800ac5e:	b503      	push	{r0, r1, lr}
 800ac60:	4601      	mov	r1, r0
 800ac62:	ab03      	add	r3, sp, #12
 800ac64:	4805      	ldr	r0, [pc, #20]	; (800ac7c <fiprintf+0x20>)
 800ac66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac6a:	6800      	ldr	r0, [r0, #0]
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	f000 f87d 	bl	800ad6c <_vfiprintf_r>
 800ac72:	b002      	add	sp, #8
 800ac74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac78:	b003      	add	sp, #12
 800ac7a:	4770      	bx	lr
 800ac7c:	2000000c 	.word	0x2000000c

0800ac80 <memmove>:
 800ac80:	4288      	cmp	r0, r1
 800ac82:	b510      	push	{r4, lr}
 800ac84:	eb01 0402 	add.w	r4, r1, r2
 800ac88:	d902      	bls.n	800ac90 <memmove+0x10>
 800ac8a:	4284      	cmp	r4, r0
 800ac8c:	4623      	mov	r3, r4
 800ac8e:	d807      	bhi.n	800aca0 <memmove+0x20>
 800ac90:	1e43      	subs	r3, r0, #1
 800ac92:	42a1      	cmp	r1, r4
 800ac94:	d008      	beq.n	800aca8 <memmove+0x28>
 800ac96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac9e:	e7f8      	b.n	800ac92 <memmove+0x12>
 800aca0:	4402      	add	r2, r0
 800aca2:	4601      	mov	r1, r0
 800aca4:	428a      	cmp	r2, r1
 800aca6:	d100      	bne.n	800acaa <memmove+0x2a>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acb2:	e7f7      	b.n	800aca4 <memmove+0x24>

0800acb4 <__malloc_lock>:
 800acb4:	4801      	ldr	r0, [pc, #4]	; (800acbc <__malloc_lock+0x8>)
 800acb6:	f000 bc09 	b.w	800b4cc <__retarget_lock_acquire_recursive>
 800acba:	bf00      	nop
 800acbc:	200008ec 	.word	0x200008ec

0800acc0 <__malloc_unlock>:
 800acc0:	4801      	ldr	r0, [pc, #4]	; (800acc8 <__malloc_unlock+0x8>)
 800acc2:	f000 bc04 	b.w	800b4ce <__retarget_lock_release_recursive>
 800acc6:	bf00      	nop
 800acc8:	200008ec 	.word	0x200008ec

0800accc <_realloc_r>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	4607      	mov	r7, r0
 800acd0:	4614      	mov	r4, r2
 800acd2:	460e      	mov	r6, r1
 800acd4:	b921      	cbnz	r1, 800ace0 <_realloc_r+0x14>
 800acd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acda:	4611      	mov	r1, r2
 800acdc:	f7ff bdb2 	b.w	800a844 <_malloc_r>
 800ace0:	b922      	cbnz	r2, 800acec <_realloc_r+0x20>
 800ace2:	f7ff fd5f 	bl	800a7a4 <_free_r>
 800ace6:	4625      	mov	r5, r4
 800ace8:	4628      	mov	r0, r5
 800acea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acec:	f000 fc54 	bl	800b598 <_malloc_usable_size_r>
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d20f      	bcs.n	800ad14 <_realloc_r+0x48>
 800acf4:	4621      	mov	r1, r4
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff fda4 	bl	800a844 <_malloc_r>
 800acfc:	4605      	mov	r5, r0
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d0f2      	beq.n	800ace8 <_realloc_r+0x1c>
 800ad02:	4631      	mov	r1, r6
 800ad04:	4622      	mov	r2, r4
 800ad06:	f7ff f873 	bl	8009df0 <memcpy>
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	f7ff fd49 	bl	800a7a4 <_free_r>
 800ad12:	e7e9      	b.n	800ace8 <_realloc_r+0x1c>
 800ad14:	4635      	mov	r5, r6
 800ad16:	e7e7      	b.n	800ace8 <_realloc_r+0x1c>

0800ad18 <__sfputc_r>:
 800ad18:	6893      	ldr	r3, [r2, #8]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	b410      	push	{r4}
 800ad20:	6093      	str	r3, [r2, #8]
 800ad22:	da08      	bge.n	800ad36 <__sfputc_r+0x1e>
 800ad24:	6994      	ldr	r4, [r2, #24]
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	db01      	blt.n	800ad2e <__sfputc_r+0x16>
 800ad2a:	290a      	cmp	r1, #10
 800ad2c:	d103      	bne.n	800ad36 <__sfputc_r+0x1e>
 800ad2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad32:	f000 b94b 	b.w	800afcc <__swbuf_r>
 800ad36:	6813      	ldr	r3, [r2, #0]
 800ad38:	1c58      	adds	r0, r3, #1
 800ad3a:	6010      	str	r0, [r2, #0]
 800ad3c:	7019      	strb	r1, [r3, #0]
 800ad3e:	4608      	mov	r0, r1
 800ad40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <__sfputs_r>:
 800ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad48:	4606      	mov	r6, r0
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	18d5      	adds	r5, r2, r3
 800ad50:	42ac      	cmp	r4, r5
 800ad52:	d101      	bne.n	800ad58 <__sfputs_r+0x12>
 800ad54:	2000      	movs	r0, #0
 800ad56:	e007      	b.n	800ad68 <__sfputs_r+0x22>
 800ad58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7ff ffda 	bl	800ad18 <__sfputc_r>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d1f3      	bne.n	800ad50 <__sfputs_r+0xa>
 800ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad6c <_vfiprintf_r>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	460d      	mov	r5, r1
 800ad72:	b09d      	sub	sp, #116	; 0x74
 800ad74:	4614      	mov	r4, r2
 800ad76:	4698      	mov	r8, r3
 800ad78:	4606      	mov	r6, r0
 800ad7a:	b118      	cbz	r0, 800ad84 <_vfiprintf_r+0x18>
 800ad7c:	6983      	ldr	r3, [r0, #24]
 800ad7e:	b90b      	cbnz	r3, 800ad84 <_vfiprintf_r+0x18>
 800ad80:	f000 fb06 	bl	800b390 <__sinit>
 800ad84:	4b89      	ldr	r3, [pc, #548]	; (800afac <_vfiprintf_r+0x240>)
 800ad86:	429d      	cmp	r5, r3
 800ad88:	d11b      	bne.n	800adc2 <_vfiprintf_r+0x56>
 800ad8a:	6875      	ldr	r5, [r6, #4]
 800ad8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad8e:	07d9      	lsls	r1, r3, #31
 800ad90:	d405      	bmi.n	800ad9e <_vfiprintf_r+0x32>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	059a      	lsls	r2, r3, #22
 800ad96:	d402      	bmi.n	800ad9e <_vfiprintf_r+0x32>
 800ad98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad9a:	f000 fb97 	bl	800b4cc <__retarget_lock_acquire_recursive>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	071b      	lsls	r3, r3, #28
 800ada2:	d501      	bpl.n	800ada8 <_vfiprintf_r+0x3c>
 800ada4:	692b      	ldr	r3, [r5, #16]
 800ada6:	b9eb      	cbnz	r3, 800ade4 <_vfiprintf_r+0x78>
 800ada8:	4629      	mov	r1, r5
 800adaa:	4630      	mov	r0, r6
 800adac:	f000 f960 	bl	800b070 <__swsetup_r>
 800adb0:	b1c0      	cbz	r0, 800ade4 <_vfiprintf_r+0x78>
 800adb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adb4:	07dc      	lsls	r4, r3, #31
 800adb6:	d50e      	bpl.n	800add6 <_vfiprintf_r+0x6a>
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295
 800adbc:	b01d      	add	sp, #116	; 0x74
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	4b7b      	ldr	r3, [pc, #492]	; (800afb0 <_vfiprintf_r+0x244>)
 800adc4:	429d      	cmp	r5, r3
 800adc6:	d101      	bne.n	800adcc <_vfiprintf_r+0x60>
 800adc8:	68b5      	ldr	r5, [r6, #8]
 800adca:	e7df      	b.n	800ad8c <_vfiprintf_r+0x20>
 800adcc:	4b79      	ldr	r3, [pc, #484]	; (800afb4 <_vfiprintf_r+0x248>)
 800adce:	429d      	cmp	r5, r3
 800add0:	bf08      	it	eq
 800add2:	68f5      	ldreq	r5, [r6, #12]
 800add4:	e7da      	b.n	800ad8c <_vfiprintf_r+0x20>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	0598      	lsls	r0, r3, #22
 800adda:	d4ed      	bmi.n	800adb8 <_vfiprintf_r+0x4c>
 800addc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adde:	f000 fb76 	bl	800b4ce <__retarget_lock_release_recursive>
 800ade2:	e7e9      	b.n	800adb8 <_vfiprintf_r+0x4c>
 800ade4:	2300      	movs	r3, #0
 800ade6:	9309      	str	r3, [sp, #36]	; 0x24
 800ade8:	2320      	movs	r3, #32
 800adea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adee:	f8cd 800c 	str.w	r8, [sp, #12]
 800adf2:	2330      	movs	r3, #48	; 0x30
 800adf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afb8 <_vfiprintf_r+0x24c>
 800adf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adfc:	f04f 0901 	mov.w	r9, #1
 800ae00:	4623      	mov	r3, r4
 800ae02:	469a      	mov	sl, r3
 800ae04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae08:	b10a      	cbz	r2, 800ae0e <_vfiprintf_r+0xa2>
 800ae0a:	2a25      	cmp	r2, #37	; 0x25
 800ae0c:	d1f9      	bne.n	800ae02 <_vfiprintf_r+0x96>
 800ae0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae12:	d00b      	beq.n	800ae2c <_vfiprintf_r+0xc0>
 800ae14:	465b      	mov	r3, fp
 800ae16:	4622      	mov	r2, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ff93 	bl	800ad46 <__sfputs_r>
 800ae20:	3001      	adds	r0, #1
 800ae22:	f000 80aa 	beq.w	800af7a <_vfiprintf_r+0x20e>
 800ae26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae28:	445a      	add	r2, fp
 800ae2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 80a2 	beq.w	800af7a <_vfiprintf_r+0x20e>
 800ae36:	2300      	movs	r3, #0
 800ae38:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae40:	f10a 0a01 	add.w	sl, sl, #1
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	9307      	str	r3, [sp, #28]
 800ae48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ae4e:	4654      	mov	r4, sl
 800ae50:	2205      	movs	r2, #5
 800ae52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae56:	4858      	ldr	r0, [pc, #352]	; (800afb8 <_vfiprintf_r+0x24c>)
 800ae58:	f7f5 f9fa 	bl	8000250 <memchr>
 800ae5c:	9a04      	ldr	r2, [sp, #16]
 800ae5e:	b9d8      	cbnz	r0, 800ae98 <_vfiprintf_r+0x12c>
 800ae60:	06d1      	lsls	r1, r2, #27
 800ae62:	bf44      	itt	mi
 800ae64:	2320      	movmi	r3, #32
 800ae66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae6a:	0713      	lsls	r3, r2, #28
 800ae6c:	bf44      	itt	mi
 800ae6e:	232b      	movmi	r3, #43	; 0x2b
 800ae70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae74:	f89a 3000 	ldrb.w	r3, [sl]
 800ae78:	2b2a      	cmp	r3, #42	; 0x2a
 800ae7a:	d015      	beq.n	800aea8 <_vfiprintf_r+0x13c>
 800ae7c:	9a07      	ldr	r2, [sp, #28]
 800ae7e:	4654      	mov	r4, sl
 800ae80:	2000      	movs	r0, #0
 800ae82:	f04f 0c0a 	mov.w	ip, #10
 800ae86:	4621      	mov	r1, r4
 800ae88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae8c:	3b30      	subs	r3, #48	; 0x30
 800ae8e:	2b09      	cmp	r3, #9
 800ae90:	d94e      	bls.n	800af30 <_vfiprintf_r+0x1c4>
 800ae92:	b1b0      	cbz	r0, 800aec2 <_vfiprintf_r+0x156>
 800ae94:	9207      	str	r2, [sp, #28]
 800ae96:	e014      	b.n	800aec2 <_vfiprintf_r+0x156>
 800ae98:	eba0 0308 	sub.w	r3, r0, r8
 800ae9c:	fa09 f303 	lsl.w	r3, r9, r3
 800aea0:	4313      	orrs	r3, r2
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	46a2      	mov	sl, r4
 800aea6:	e7d2      	b.n	800ae4e <_vfiprintf_r+0xe2>
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	1d19      	adds	r1, r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	9103      	str	r1, [sp, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	bfbb      	ittet	lt
 800aeb4:	425b      	neglt	r3, r3
 800aeb6:	f042 0202 	orrlt.w	r2, r2, #2
 800aeba:	9307      	strge	r3, [sp, #28]
 800aebc:	9307      	strlt	r3, [sp, #28]
 800aebe:	bfb8      	it	lt
 800aec0:	9204      	strlt	r2, [sp, #16]
 800aec2:	7823      	ldrb	r3, [r4, #0]
 800aec4:	2b2e      	cmp	r3, #46	; 0x2e
 800aec6:	d10c      	bne.n	800aee2 <_vfiprintf_r+0x176>
 800aec8:	7863      	ldrb	r3, [r4, #1]
 800aeca:	2b2a      	cmp	r3, #42	; 0x2a
 800aecc:	d135      	bne.n	800af3a <_vfiprintf_r+0x1ce>
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	1d1a      	adds	r2, r3, #4
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	9203      	str	r2, [sp, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfb8      	it	lt
 800aeda:	f04f 33ff 	movlt.w	r3, #4294967295
 800aede:	3402      	adds	r4, #2
 800aee0:	9305      	str	r3, [sp, #20]
 800aee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afc8 <_vfiprintf_r+0x25c>
 800aee6:	7821      	ldrb	r1, [r4, #0]
 800aee8:	2203      	movs	r2, #3
 800aeea:	4650      	mov	r0, sl
 800aeec:	f7f5 f9b0 	bl	8000250 <memchr>
 800aef0:	b140      	cbz	r0, 800af04 <_vfiprintf_r+0x198>
 800aef2:	2340      	movs	r3, #64	; 0x40
 800aef4:	eba0 000a 	sub.w	r0, r0, sl
 800aef8:	fa03 f000 	lsl.w	r0, r3, r0
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	4303      	orrs	r3, r0
 800af00:	3401      	adds	r4, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af08:	482c      	ldr	r0, [pc, #176]	; (800afbc <_vfiprintf_r+0x250>)
 800af0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af0e:	2206      	movs	r2, #6
 800af10:	f7f5 f99e 	bl	8000250 <memchr>
 800af14:	2800      	cmp	r0, #0
 800af16:	d03f      	beq.n	800af98 <_vfiprintf_r+0x22c>
 800af18:	4b29      	ldr	r3, [pc, #164]	; (800afc0 <_vfiprintf_r+0x254>)
 800af1a:	bb1b      	cbnz	r3, 800af64 <_vfiprintf_r+0x1f8>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	3307      	adds	r3, #7
 800af20:	f023 0307 	bic.w	r3, r3, #7
 800af24:	3308      	adds	r3, #8
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2a:	443b      	add	r3, r7
 800af2c:	9309      	str	r3, [sp, #36]	; 0x24
 800af2e:	e767      	b.n	800ae00 <_vfiprintf_r+0x94>
 800af30:	fb0c 3202 	mla	r2, ip, r2, r3
 800af34:	460c      	mov	r4, r1
 800af36:	2001      	movs	r0, #1
 800af38:	e7a5      	b.n	800ae86 <_vfiprintf_r+0x11a>
 800af3a:	2300      	movs	r3, #0
 800af3c:	3401      	adds	r4, #1
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	4619      	mov	r1, r3
 800af42:	f04f 0c0a 	mov.w	ip, #10
 800af46:	4620      	mov	r0, r4
 800af48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af4c:	3a30      	subs	r2, #48	; 0x30
 800af4e:	2a09      	cmp	r2, #9
 800af50:	d903      	bls.n	800af5a <_vfiprintf_r+0x1ee>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0c5      	beq.n	800aee2 <_vfiprintf_r+0x176>
 800af56:	9105      	str	r1, [sp, #20]
 800af58:	e7c3      	b.n	800aee2 <_vfiprintf_r+0x176>
 800af5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af5e:	4604      	mov	r4, r0
 800af60:	2301      	movs	r3, #1
 800af62:	e7f0      	b.n	800af46 <_vfiprintf_r+0x1da>
 800af64:	ab03      	add	r3, sp, #12
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	462a      	mov	r2, r5
 800af6a:	4b16      	ldr	r3, [pc, #88]	; (800afc4 <_vfiprintf_r+0x258>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	4630      	mov	r0, r6
 800af70:	f7fc fbd2 	bl	8007718 <_printf_float>
 800af74:	4607      	mov	r7, r0
 800af76:	1c78      	adds	r0, r7, #1
 800af78:	d1d6      	bne.n	800af28 <_vfiprintf_r+0x1bc>
 800af7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af7c:	07d9      	lsls	r1, r3, #31
 800af7e:	d405      	bmi.n	800af8c <_vfiprintf_r+0x220>
 800af80:	89ab      	ldrh	r3, [r5, #12]
 800af82:	059a      	lsls	r2, r3, #22
 800af84:	d402      	bmi.n	800af8c <_vfiprintf_r+0x220>
 800af86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af88:	f000 faa1 	bl	800b4ce <__retarget_lock_release_recursive>
 800af8c:	89ab      	ldrh	r3, [r5, #12]
 800af8e:	065b      	lsls	r3, r3, #25
 800af90:	f53f af12 	bmi.w	800adb8 <_vfiprintf_r+0x4c>
 800af94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af96:	e711      	b.n	800adbc <_vfiprintf_r+0x50>
 800af98:	ab03      	add	r3, sp, #12
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	462a      	mov	r2, r5
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <_vfiprintf_r+0x258>)
 800afa0:	a904      	add	r1, sp, #16
 800afa2:	4630      	mov	r0, r6
 800afa4:	f7fc fe44 	bl	8007c30 <_printf_i>
 800afa8:	e7e4      	b.n	800af74 <_vfiprintf_r+0x208>
 800afaa:	bf00      	nop
 800afac:	0800bc84 	.word	0x0800bc84
 800afb0:	0800bca4 	.word	0x0800bca4
 800afb4:	0800bc64 	.word	0x0800bc64
 800afb8:	0800bb14 	.word	0x0800bb14
 800afbc:	0800bb1e 	.word	0x0800bb1e
 800afc0:	08007719 	.word	0x08007719
 800afc4:	0800ad47 	.word	0x0800ad47
 800afc8:	0800bb1a 	.word	0x0800bb1a

0800afcc <__swbuf_r>:
 800afcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afce:	460e      	mov	r6, r1
 800afd0:	4614      	mov	r4, r2
 800afd2:	4605      	mov	r5, r0
 800afd4:	b118      	cbz	r0, 800afde <__swbuf_r+0x12>
 800afd6:	6983      	ldr	r3, [r0, #24]
 800afd8:	b90b      	cbnz	r3, 800afde <__swbuf_r+0x12>
 800afda:	f000 f9d9 	bl	800b390 <__sinit>
 800afde:	4b21      	ldr	r3, [pc, #132]	; (800b064 <__swbuf_r+0x98>)
 800afe0:	429c      	cmp	r4, r3
 800afe2:	d12b      	bne.n	800b03c <__swbuf_r+0x70>
 800afe4:	686c      	ldr	r4, [r5, #4]
 800afe6:	69a3      	ldr	r3, [r4, #24]
 800afe8:	60a3      	str	r3, [r4, #8]
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	071a      	lsls	r2, r3, #28
 800afee:	d52f      	bpl.n	800b050 <__swbuf_r+0x84>
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	b36b      	cbz	r3, 800b050 <__swbuf_r+0x84>
 800aff4:	6923      	ldr	r3, [r4, #16]
 800aff6:	6820      	ldr	r0, [r4, #0]
 800aff8:	1ac0      	subs	r0, r0, r3
 800affa:	6963      	ldr	r3, [r4, #20]
 800affc:	b2f6      	uxtb	r6, r6
 800affe:	4283      	cmp	r3, r0
 800b000:	4637      	mov	r7, r6
 800b002:	dc04      	bgt.n	800b00e <__swbuf_r+0x42>
 800b004:	4621      	mov	r1, r4
 800b006:	4628      	mov	r0, r5
 800b008:	f000 f92e 	bl	800b268 <_fflush_r>
 800b00c:	bb30      	cbnz	r0, 800b05c <__swbuf_r+0x90>
 800b00e:	68a3      	ldr	r3, [r4, #8]
 800b010:	3b01      	subs	r3, #1
 800b012:	60a3      	str	r3, [r4, #8]
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	701e      	strb	r6, [r3, #0]
 800b01c:	6963      	ldr	r3, [r4, #20]
 800b01e:	3001      	adds	r0, #1
 800b020:	4283      	cmp	r3, r0
 800b022:	d004      	beq.n	800b02e <__swbuf_r+0x62>
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	07db      	lsls	r3, r3, #31
 800b028:	d506      	bpl.n	800b038 <__swbuf_r+0x6c>
 800b02a:	2e0a      	cmp	r6, #10
 800b02c:	d104      	bne.n	800b038 <__swbuf_r+0x6c>
 800b02e:	4621      	mov	r1, r4
 800b030:	4628      	mov	r0, r5
 800b032:	f000 f919 	bl	800b268 <_fflush_r>
 800b036:	b988      	cbnz	r0, 800b05c <__swbuf_r+0x90>
 800b038:	4638      	mov	r0, r7
 800b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b03c:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <__swbuf_r+0x9c>)
 800b03e:	429c      	cmp	r4, r3
 800b040:	d101      	bne.n	800b046 <__swbuf_r+0x7a>
 800b042:	68ac      	ldr	r4, [r5, #8]
 800b044:	e7cf      	b.n	800afe6 <__swbuf_r+0x1a>
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <__swbuf_r+0xa0>)
 800b048:	429c      	cmp	r4, r3
 800b04a:	bf08      	it	eq
 800b04c:	68ec      	ldreq	r4, [r5, #12]
 800b04e:	e7ca      	b.n	800afe6 <__swbuf_r+0x1a>
 800b050:	4621      	mov	r1, r4
 800b052:	4628      	mov	r0, r5
 800b054:	f000 f80c 	bl	800b070 <__swsetup_r>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d0cb      	beq.n	800aff4 <__swbuf_r+0x28>
 800b05c:	f04f 37ff 	mov.w	r7, #4294967295
 800b060:	e7ea      	b.n	800b038 <__swbuf_r+0x6c>
 800b062:	bf00      	nop
 800b064:	0800bc84 	.word	0x0800bc84
 800b068:	0800bca4 	.word	0x0800bca4
 800b06c:	0800bc64 	.word	0x0800bc64

0800b070 <__swsetup_r>:
 800b070:	4b32      	ldr	r3, [pc, #200]	; (800b13c <__swsetup_r+0xcc>)
 800b072:	b570      	push	{r4, r5, r6, lr}
 800b074:	681d      	ldr	r5, [r3, #0]
 800b076:	4606      	mov	r6, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	b125      	cbz	r5, 800b086 <__swsetup_r+0x16>
 800b07c:	69ab      	ldr	r3, [r5, #24]
 800b07e:	b913      	cbnz	r3, 800b086 <__swsetup_r+0x16>
 800b080:	4628      	mov	r0, r5
 800b082:	f000 f985 	bl	800b390 <__sinit>
 800b086:	4b2e      	ldr	r3, [pc, #184]	; (800b140 <__swsetup_r+0xd0>)
 800b088:	429c      	cmp	r4, r3
 800b08a:	d10f      	bne.n	800b0ac <__swsetup_r+0x3c>
 800b08c:	686c      	ldr	r4, [r5, #4]
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b094:	0719      	lsls	r1, r3, #28
 800b096:	d42c      	bmi.n	800b0f2 <__swsetup_r+0x82>
 800b098:	06dd      	lsls	r5, r3, #27
 800b09a:	d411      	bmi.n	800b0c0 <__swsetup_r+0x50>
 800b09c:	2309      	movs	r3, #9
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0a4:	81a3      	strh	r3, [r4, #12]
 800b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0aa:	e03e      	b.n	800b12a <__swsetup_r+0xba>
 800b0ac:	4b25      	ldr	r3, [pc, #148]	; (800b144 <__swsetup_r+0xd4>)
 800b0ae:	429c      	cmp	r4, r3
 800b0b0:	d101      	bne.n	800b0b6 <__swsetup_r+0x46>
 800b0b2:	68ac      	ldr	r4, [r5, #8]
 800b0b4:	e7eb      	b.n	800b08e <__swsetup_r+0x1e>
 800b0b6:	4b24      	ldr	r3, [pc, #144]	; (800b148 <__swsetup_r+0xd8>)
 800b0b8:	429c      	cmp	r4, r3
 800b0ba:	bf08      	it	eq
 800b0bc:	68ec      	ldreq	r4, [r5, #12]
 800b0be:	e7e6      	b.n	800b08e <__swsetup_r+0x1e>
 800b0c0:	0758      	lsls	r0, r3, #29
 800b0c2:	d512      	bpl.n	800b0ea <__swsetup_r+0x7a>
 800b0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c6:	b141      	cbz	r1, 800b0da <__swsetup_r+0x6a>
 800b0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0cc:	4299      	cmp	r1, r3
 800b0ce:	d002      	beq.n	800b0d6 <__swsetup_r+0x66>
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f7ff fb67 	bl	800a7a4 <_free_r>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	6363      	str	r3, [r4, #52]	; 0x34
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	6063      	str	r3, [r4, #4]
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f043 0308 	orr.w	r3, r3, #8
 800b0f0:	81a3      	strh	r3, [r4, #12]
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	b94b      	cbnz	r3, 800b10a <__swsetup_r+0x9a>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b100:	d003      	beq.n	800b10a <__swsetup_r+0x9a>
 800b102:	4621      	mov	r1, r4
 800b104:	4630      	mov	r0, r6
 800b106:	f000 fa07 	bl	800b518 <__smakebuf_r>
 800b10a:	89a0      	ldrh	r0, [r4, #12]
 800b10c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b110:	f010 0301 	ands.w	r3, r0, #1
 800b114:	d00a      	beq.n	800b12c <__swsetup_r+0xbc>
 800b116:	2300      	movs	r3, #0
 800b118:	60a3      	str	r3, [r4, #8]
 800b11a:	6963      	ldr	r3, [r4, #20]
 800b11c:	425b      	negs	r3, r3
 800b11e:	61a3      	str	r3, [r4, #24]
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	b943      	cbnz	r3, 800b136 <__swsetup_r+0xc6>
 800b124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b128:	d1ba      	bne.n	800b0a0 <__swsetup_r+0x30>
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	0781      	lsls	r1, r0, #30
 800b12e:	bf58      	it	pl
 800b130:	6963      	ldrpl	r3, [r4, #20]
 800b132:	60a3      	str	r3, [r4, #8]
 800b134:	e7f4      	b.n	800b120 <__swsetup_r+0xb0>
 800b136:	2000      	movs	r0, #0
 800b138:	e7f7      	b.n	800b12a <__swsetup_r+0xba>
 800b13a:	bf00      	nop
 800b13c:	2000000c 	.word	0x2000000c
 800b140:	0800bc84 	.word	0x0800bc84
 800b144:	0800bca4 	.word	0x0800bca4
 800b148:	0800bc64 	.word	0x0800bc64

0800b14c <abort>:
 800b14c:	b508      	push	{r3, lr}
 800b14e:	2006      	movs	r0, #6
 800b150:	f000 fa52 	bl	800b5f8 <raise>
 800b154:	2001      	movs	r0, #1
 800b156:	f7f6 f9b7 	bl	80014c8 <_exit>
	...

0800b15c <__sflush_r>:
 800b15c:	898a      	ldrh	r2, [r1, #12]
 800b15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b162:	4605      	mov	r5, r0
 800b164:	0710      	lsls	r0, r2, #28
 800b166:	460c      	mov	r4, r1
 800b168:	d458      	bmi.n	800b21c <__sflush_r+0xc0>
 800b16a:	684b      	ldr	r3, [r1, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dc05      	bgt.n	800b17c <__sflush_r+0x20>
 800b170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	dc02      	bgt.n	800b17c <__sflush_r+0x20>
 800b176:	2000      	movs	r0, #0
 800b178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b17c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b17e:	2e00      	cmp	r6, #0
 800b180:	d0f9      	beq.n	800b176 <__sflush_r+0x1a>
 800b182:	2300      	movs	r3, #0
 800b184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b188:	682f      	ldr	r7, [r5, #0]
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	d032      	beq.n	800b1f4 <__sflush_r+0x98>
 800b18e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	075a      	lsls	r2, r3, #29
 800b194:	d505      	bpl.n	800b1a2 <__sflush_r+0x46>
 800b196:	6863      	ldr	r3, [r4, #4]
 800b198:	1ac0      	subs	r0, r0, r3
 800b19a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b19c:	b10b      	cbz	r3, 800b1a2 <__sflush_r+0x46>
 800b19e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1a0:	1ac0      	subs	r0, r0, r3
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1a8:	6a21      	ldr	r1, [r4, #32]
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	47b0      	blx	r6
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	d106      	bne.n	800b1c2 <__sflush_r+0x66>
 800b1b4:	6829      	ldr	r1, [r5, #0]
 800b1b6:	291d      	cmp	r1, #29
 800b1b8:	d82c      	bhi.n	800b214 <__sflush_r+0xb8>
 800b1ba:	4a2a      	ldr	r2, [pc, #168]	; (800b264 <__sflush_r+0x108>)
 800b1bc:	40ca      	lsrs	r2, r1
 800b1be:	07d6      	lsls	r6, r2, #31
 800b1c0:	d528      	bpl.n	800b214 <__sflush_r+0xb8>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	6062      	str	r2, [r4, #4]
 800b1c6:	04d9      	lsls	r1, r3, #19
 800b1c8:	6922      	ldr	r2, [r4, #16]
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	d504      	bpl.n	800b1d8 <__sflush_r+0x7c>
 800b1ce:	1c42      	adds	r2, r0, #1
 800b1d0:	d101      	bne.n	800b1d6 <__sflush_r+0x7a>
 800b1d2:	682b      	ldr	r3, [r5, #0]
 800b1d4:	b903      	cbnz	r3, 800b1d8 <__sflush_r+0x7c>
 800b1d6:	6560      	str	r0, [r4, #84]	; 0x54
 800b1d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1da:	602f      	str	r7, [r5, #0]
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	d0ca      	beq.n	800b176 <__sflush_r+0x1a>
 800b1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1e4:	4299      	cmp	r1, r3
 800b1e6:	d002      	beq.n	800b1ee <__sflush_r+0x92>
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f7ff fadb 	bl	800a7a4 <_free_r>
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	6360      	str	r0, [r4, #52]	; 0x34
 800b1f2:	e7c1      	b.n	800b178 <__sflush_r+0x1c>
 800b1f4:	6a21      	ldr	r1, [r4, #32]
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b0      	blx	r6
 800b1fc:	1c41      	adds	r1, r0, #1
 800b1fe:	d1c7      	bne.n	800b190 <__sflush_r+0x34>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0c4      	beq.n	800b190 <__sflush_r+0x34>
 800b206:	2b1d      	cmp	r3, #29
 800b208:	d001      	beq.n	800b20e <__sflush_r+0xb2>
 800b20a:	2b16      	cmp	r3, #22
 800b20c:	d101      	bne.n	800b212 <__sflush_r+0xb6>
 800b20e:	602f      	str	r7, [r5, #0]
 800b210:	e7b1      	b.n	800b176 <__sflush_r+0x1a>
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	e7ad      	b.n	800b178 <__sflush_r+0x1c>
 800b21c:	690f      	ldr	r7, [r1, #16]
 800b21e:	2f00      	cmp	r7, #0
 800b220:	d0a9      	beq.n	800b176 <__sflush_r+0x1a>
 800b222:	0793      	lsls	r3, r2, #30
 800b224:	680e      	ldr	r6, [r1, #0]
 800b226:	bf08      	it	eq
 800b228:	694b      	ldreq	r3, [r1, #20]
 800b22a:	600f      	str	r7, [r1, #0]
 800b22c:	bf18      	it	ne
 800b22e:	2300      	movne	r3, #0
 800b230:	eba6 0807 	sub.w	r8, r6, r7
 800b234:	608b      	str	r3, [r1, #8]
 800b236:	f1b8 0f00 	cmp.w	r8, #0
 800b23a:	dd9c      	ble.n	800b176 <__sflush_r+0x1a>
 800b23c:	6a21      	ldr	r1, [r4, #32]
 800b23e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b240:	4643      	mov	r3, r8
 800b242:	463a      	mov	r2, r7
 800b244:	4628      	mov	r0, r5
 800b246:	47b0      	blx	r6
 800b248:	2800      	cmp	r0, #0
 800b24a:	dc06      	bgt.n	800b25a <__sflush_r+0xfe>
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	e78e      	b.n	800b178 <__sflush_r+0x1c>
 800b25a:	4407      	add	r7, r0
 800b25c:	eba8 0800 	sub.w	r8, r8, r0
 800b260:	e7e9      	b.n	800b236 <__sflush_r+0xda>
 800b262:	bf00      	nop
 800b264:	20400001 	.word	0x20400001

0800b268 <_fflush_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	690b      	ldr	r3, [r1, #16]
 800b26c:	4605      	mov	r5, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	b913      	cbnz	r3, 800b278 <_fflush_r+0x10>
 800b272:	2500      	movs	r5, #0
 800b274:	4628      	mov	r0, r5
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	b118      	cbz	r0, 800b282 <_fflush_r+0x1a>
 800b27a:	6983      	ldr	r3, [r0, #24]
 800b27c:	b90b      	cbnz	r3, 800b282 <_fflush_r+0x1a>
 800b27e:	f000 f887 	bl	800b390 <__sinit>
 800b282:	4b14      	ldr	r3, [pc, #80]	; (800b2d4 <_fflush_r+0x6c>)
 800b284:	429c      	cmp	r4, r3
 800b286:	d11b      	bne.n	800b2c0 <_fflush_r+0x58>
 800b288:	686c      	ldr	r4, [r5, #4]
 800b28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0ef      	beq.n	800b272 <_fflush_r+0xa>
 800b292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b294:	07d0      	lsls	r0, r2, #31
 800b296:	d404      	bmi.n	800b2a2 <_fflush_r+0x3a>
 800b298:	0599      	lsls	r1, r3, #22
 800b29a:	d402      	bmi.n	800b2a2 <_fflush_r+0x3a>
 800b29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b29e:	f000 f915 	bl	800b4cc <__retarget_lock_acquire_recursive>
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	f7ff ff59 	bl	800b15c <__sflush_r>
 800b2aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2ac:	07da      	lsls	r2, r3, #31
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	d4e0      	bmi.n	800b274 <_fflush_r+0xc>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	059b      	lsls	r3, r3, #22
 800b2b6:	d4dd      	bmi.n	800b274 <_fflush_r+0xc>
 800b2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ba:	f000 f908 	bl	800b4ce <__retarget_lock_release_recursive>
 800b2be:	e7d9      	b.n	800b274 <_fflush_r+0xc>
 800b2c0:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <_fflush_r+0x70>)
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	d101      	bne.n	800b2ca <_fflush_r+0x62>
 800b2c6:	68ac      	ldr	r4, [r5, #8]
 800b2c8:	e7df      	b.n	800b28a <_fflush_r+0x22>
 800b2ca:	4b04      	ldr	r3, [pc, #16]	; (800b2dc <_fflush_r+0x74>)
 800b2cc:	429c      	cmp	r4, r3
 800b2ce:	bf08      	it	eq
 800b2d0:	68ec      	ldreq	r4, [r5, #12]
 800b2d2:	e7da      	b.n	800b28a <_fflush_r+0x22>
 800b2d4:	0800bc84 	.word	0x0800bc84
 800b2d8:	0800bca4 	.word	0x0800bca4
 800b2dc:	0800bc64 	.word	0x0800bc64

0800b2e0 <std>:
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2ee:	6083      	str	r3, [r0, #8]
 800b2f0:	8181      	strh	r1, [r0, #12]
 800b2f2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2f4:	81c2      	strh	r2, [r0, #14]
 800b2f6:	6183      	str	r3, [r0, #24]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	2208      	movs	r2, #8
 800b2fc:	305c      	adds	r0, #92	; 0x5c
 800b2fe:	f7fc f971 	bl	80075e4 <memset>
 800b302:	4b05      	ldr	r3, [pc, #20]	; (800b318 <std+0x38>)
 800b304:	6263      	str	r3, [r4, #36]	; 0x24
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <std+0x3c>)
 800b308:	62a3      	str	r3, [r4, #40]	; 0x28
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <std+0x40>)
 800b30c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <std+0x44>)
 800b310:	6224      	str	r4, [r4, #32]
 800b312:	6323      	str	r3, [r4, #48]	; 0x30
 800b314:	bd10      	pop	{r4, pc}
 800b316:	bf00      	nop
 800b318:	0800b631 	.word	0x0800b631
 800b31c:	0800b653 	.word	0x0800b653
 800b320:	0800b68b 	.word	0x0800b68b
 800b324:	0800b6af 	.word	0x0800b6af

0800b328 <_cleanup_r>:
 800b328:	4901      	ldr	r1, [pc, #4]	; (800b330 <_cleanup_r+0x8>)
 800b32a:	f000 b8af 	b.w	800b48c <_fwalk_reent>
 800b32e:	bf00      	nop
 800b330:	0800b269 	.word	0x0800b269

0800b334 <__sfmoreglue>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	1e4a      	subs	r2, r1, #1
 800b338:	2568      	movs	r5, #104	; 0x68
 800b33a:	4355      	muls	r5, r2
 800b33c:	460e      	mov	r6, r1
 800b33e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b342:	f7ff fa7f 	bl	800a844 <_malloc_r>
 800b346:	4604      	mov	r4, r0
 800b348:	b140      	cbz	r0, 800b35c <__sfmoreglue+0x28>
 800b34a:	2100      	movs	r1, #0
 800b34c:	e9c0 1600 	strd	r1, r6, [r0]
 800b350:	300c      	adds	r0, #12
 800b352:	60a0      	str	r0, [r4, #8]
 800b354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b358:	f7fc f944 	bl	80075e4 <memset>
 800b35c:	4620      	mov	r0, r4
 800b35e:	bd70      	pop	{r4, r5, r6, pc}

0800b360 <__sfp_lock_acquire>:
 800b360:	4801      	ldr	r0, [pc, #4]	; (800b368 <__sfp_lock_acquire+0x8>)
 800b362:	f000 b8b3 	b.w	800b4cc <__retarget_lock_acquire_recursive>
 800b366:	bf00      	nop
 800b368:	200008f0 	.word	0x200008f0

0800b36c <__sfp_lock_release>:
 800b36c:	4801      	ldr	r0, [pc, #4]	; (800b374 <__sfp_lock_release+0x8>)
 800b36e:	f000 b8ae 	b.w	800b4ce <__retarget_lock_release_recursive>
 800b372:	bf00      	nop
 800b374:	200008f0 	.word	0x200008f0

0800b378 <__sinit_lock_acquire>:
 800b378:	4801      	ldr	r0, [pc, #4]	; (800b380 <__sinit_lock_acquire+0x8>)
 800b37a:	f000 b8a7 	b.w	800b4cc <__retarget_lock_acquire_recursive>
 800b37e:	bf00      	nop
 800b380:	200008eb 	.word	0x200008eb

0800b384 <__sinit_lock_release>:
 800b384:	4801      	ldr	r0, [pc, #4]	; (800b38c <__sinit_lock_release+0x8>)
 800b386:	f000 b8a2 	b.w	800b4ce <__retarget_lock_release_recursive>
 800b38a:	bf00      	nop
 800b38c:	200008eb 	.word	0x200008eb

0800b390 <__sinit>:
 800b390:	b510      	push	{r4, lr}
 800b392:	4604      	mov	r4, r0
 800b394:	f7ff fff0 	bl	800b378 <__sinit_lock_acquire>
 800b398:	69a3      	ldr	r3, [r4, #24]
 800b39a:	b11b      	cbz	r3, 800b3a4 <__sinit+0x14>
 800b39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a0:	f7ff bff0 	b.w	800b384 <__sinit_lock_release>
 800b3a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3a8:	6523      	str	r3, [r4, #80]	; 0x50
 800b3aa:	4b13      	ldr	r3, [pc, #76]	; (800b3f8 <__sinit+0x68>)
 800b3ac:	4a13      	ldr	r2, [pc, #76]	; (800b3fc <__sinit+0x6c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	bf04      	itt	eq
 800b3b6:	2301      	moveq	r3, #1
 800b3b8:	61a3      	streq	r3, [r4, #24]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f820 	bl	800b400 <__sfp>
 800b3c0:	6060      	str	r0, [r4, #4]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 f81c 	bl	800b400 <__sfp>
 800b3c8:	60a0      	str	r0, [r4, #8]
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 f818 	bl	800b400 <__sfp>
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	60e0      	str	r0, [r4, #12]
 800b3d4:	2104      	movs	r1, #4
 800b3d6:	6860      	ldr	r0, [r4, #4]
 800b3d8:	f7ff ff82 	bl	800b2e0 <std>
 800b3dc:	68a0      	ldr	r0, [r4, #8]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	2109      	movs	r1, #9
 800b3e2:	f7ff ff7d 	bl	800b2e0 <std>
 800b3e6:	68e0      	ldr	r0, [r4, #12]
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	2112      	movs	r1, #18
 800b3ec:	f7ff ff78 	bl	800b2e0 <std>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	61a3      	str	r3, [r4, #24]
 800b3f4:	e7d2      	b.n	800b39c <__sinit+0xc>
 800b3f6:	bf00      	nop
 800b3f8:	0800b814 	.word	0x0800b814
 800b3fc:	0800b329 	.word	0x0800b329

0800b400 <__sfp>:
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	4607      	mov	r7, r0
 800b404:	f7ff ffac 	bl	800b360 <__sfp_lock_acquire>
 800b408:	4b1e      	ldr	r3, [pc, #120]	; (800b484 <__sfp+0x84>)
 800b40a:	681e      	ldr	r6, [r3, #0]
 800b40c:	69b3      	ldr	r3, [r6, #24]
 800b40e:	b913      	cbnz	r3, 800b416 <__sfp+0x16>
 800b410:	4630      	mov	r0, r6
 800b412:	f7ff ffbd 	bl	800b390 <__sinit>
 800b416:	3648      	adds	r6, #72	; 0x48
 800b418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	d503      	bpl.n	800b428 <__sfp+0x28>
 800b420:	6833      	ldr	r3, [r6, #0]
 800b422:	b30b      	cbz	r3, 800b468 <__sfp+0x68>
 800b424:	6836      	ldr	r6, [r6, #0]
 800b426:	e7f7      	b.n	800b418 <__sfp+0x18>
 800b428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b42c:	b9d5      	cbnz	r5, 800b464 <__sfp+0x64>
 800b42e:	4b16      	ldr	r3, [pc, #88]	; (800b488 <__sfp+0x88>)
 800b430:	60e3      	str	r3, [r4, #12]
 800b432:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b436:	6665      	str	r5, [r4, #100]	; 0x64
 800b438:	f000 f847 	bl	800b4ca <__retarget_lock_init_recursive>
 800b43c:	f7ff ff96 	bl	800b36c <__sfp_lock_release>
 800b440:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b444:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b448:	6025      	str	r5, [r4, #0]
 800b44a:	61a5      	str	r5, [r4, #24]
 800b44c:	2208      	movs	r2, #8
 800b44e:	4629      	mov	r1, r5
 800b450:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b454:	f7fc f8c6 	bl	80075e4 <memset>
 800b458:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b45c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b460:	4620      	mov	r0, r4
 800b462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b464:	3468      	adds	r4, #104	; 0x68
 800b466:	e7d9      	b.n	800b41c <__sfp+0x1c>
 800b468:	2104      	movs	r1, #4
 800b46a:	4638      	mov	r0, r7
 800b46c:	f7ff ff62 	bl	800b334 <__sfmoreglue>
 800b470:	4604      	mov	r4, r0
 800b472:	6030      	str	r0, [r6, #0]
 800b474:	2800      	cmp	r0, #0
 800b476:	d1d5      	bne.n	800b424 <__sfp+0x24>
 800b478:	f7ff ff78 	bl	800b36c <__sfp_lock_release>
 800b47c:	230c      	movs	r3, #12
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	e7ee      	b.n	800b460 <__sfp+0x60>
 800b482:	bf00      	nop
 800b484:	0800b814 	.word	0x0800b814
 800b488:	ffff0001 	.word	0xffff0001

0800b48c <_fwalk_reent>:
 800b48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b490:	4606      	mov	r6, r0
 800b492:	4688      	mov	r8, r1
 800b494:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b498:	2700      	movs	r7, #0
 800b49a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b49e:	f1b9 0901 	subs.w	r9, r9, #1
 800b4a2:	d505      	bpl.n	800b4b0 <_fwalk_reent+0x24>
 800b4a4:	6824      	ldr	r4, [r4, #0]
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	d1f7      	bne.n	800b49a <_fwalk_reent+0xe>
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b0:	89ab      	ldrh	r3, [r5, #12]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d907      	bls.n	800b4c6 <_fwalk_reent+0x3a>
 800b4b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	d003      	beq.n	800b4c6 <_fwalk_reent+0x3a>
 800b4be:	4629      	mov	r1, r5
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	47c0      	blx	r8
 800b4c4:	4307      	orrs	r7, r0
 800b4c6:	3568      	adds	r5, #104	; 0x68
 800b4c8:	e7e9      	b.n	800b49e <_fwalk_reent+0x12>

0800b4ca <__retarget_lock_init_recursive>:
 800b4ca:	4770      	bx	lr

0800b4cc <__retarget_lock_acquire_recursive>:
 800b4cc:	4770      	bx	lr

0800b4ce <__retarget_lock_release_recursive>:
 800b4ce:	4770      	bx	lr

0800b4d0 <__swhatbuf_r>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	460e      	mov	r6, r1
 800b4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d8:	2900      	cmp	r1, #0
 800b4da:	b096      	sub	sp, #88	; 0x58
 800b4dc:	4614      	mov	r4, r2
 800b4de:	461d      	mov	r5, r3
 800b4e0:	da07      	bge.n	800b4f2 <__swhatbuf_r+0x22>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	602b      	str	r3, [r5, #0]
 800b4e6:	89b3      	ldrh	r3, [r6, #12]
 800b4e8:	061a      	lsls	r2, r3, #24
 800b4ea:	d410      	bmi.n	800b50e <__swhatbuf_r+0x3e>
 800b4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f0:	e00e      	b.n	800b510 <__swhatbuf_r+0x40>
 800b4f2:	466a      	mov	r2, sp
 800b4f4:	f000 f902 	bl	800b6fc <_fstat_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dbf2      	blt.n	800b4e2 <__swhatbuf_r+0x12>
 800b4fc:	9a01      	ldr	r2, [sp, #4]
 800b4fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b502:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b506:	425a      	negs	r2, r3
 800b508:	415a      	adcs	r2, r3
 800b50a:	602a      	str	r2, [r5, #0]
 800b50c:	e7ee      	b.n	800b4ec <__swhatbuf_r+0x1c>
 800b50e:	2340      	movs	r3, #64	; 0x40
 800b510:	2000      	movs	r0, #0
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	b016      	add	sp, #88	; 0x58
 800b516:	bd70      	pop	{r4, r5, r6, pc}

0800b518 <__smakebuf_r>:
 800b518:	898b      	ldrh	r3, [r1, #12]
 800b51a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b51c:	079d      	lsls	r5, r3, #30
 800b51e:	4606      	mov	r6, r0
 800b520:	460c      	mov	r4, r1
 800b522:	d507      	bpl.n	800b534 <__smakebuf_r+0x1c>
 800b524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	6123      	str	r3, [r4, #16]
 800b52c:	2301      	movs	r3, #1
 800b52e:	6163      	str	r3, [r4, #20]
 800b530:	b002      	add	sp, #8
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	ab01      	add	r3, sp, #4
 800b536:	466a      	mov	r2, sp
 800b538:	f7ff ffca 	bl	800b4d0 <__swhatbuf_r>
 800b53c:	9900      	ldr	r1, [sp, #0]
 800b53e:	4605      	mov	r5, r0
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff f97f 	bl	800a844 <_malloc_r>
 800b546:	b948      	cbnz	r0, 800b55c <__smakebuf_r+0x44>
 800b548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54c:	059a      	lsls	r2, r3, #22
 800b54e:	d4ef      	bmi.n	800b530 <__smakebuf_r+0x18>
 800b550:	f023 0303 	bic.w	r3, r3, #3
 800b554:	f043 0302 	orr.w	r3, r3, #2
 800b558:	81a3      	strh	r3, [r4, #12]
 800b55a:	e7e3      	b.n	800b524 <__smakebuf_r+0xc>
 800b55c:	4b0d      	ldr	r3, [pc, #52]	; (800b594 <__smakebuf_r+0x7c>)
 800b55e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	6020      	str	r0, [r4, #0]
 800b564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	9b00      	ldr	r3, [sp, #0]
 800b56c:	6163      	str	r3, [r4, #20]
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	6120      	str	r0, [r4, #16]
 800b572:	b15b      	cbz	r3, 800b58c <__smakebuf_r+0x74>
 800b574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b578:	4630      	mov	r0, r6
 800b57a:	f000 f8d1 	bl	800b720 <_isatty_r>
 800b57e:	b128      	cbz	r0, 800b58c <__smakebuf_r+0x74>
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	f023 0303 	bic.w	r3, r3, #3
 800b586:	f043 0301 	orr.w	r3, r3, #1
 800b58a:	81a3      	strh	r3, [r4, #12]
 800b58c:	89a0      	ldrh	r0, [r4, #12]
 800b58e:	4305      	orrs	r5, r0
 800b590:	81a5      	strh	r5, [r4, #12]
 800b592:	e7cd      	b.n	800b530 <__smakebuf_r+0x18>
 800b594:	0800b329 	.word	0x0800b329

0800b598 <_malloc_usable_size_r>:
 800b598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b59c:	1f18      	subs	r0, r3, #4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bfbc      	itt	lt
 800b5a2:	580b      	ldrlt	r3, [r1, r0]
 800b5a4:	18c0      	addlt	r0, r0, r3
 800b5a6:	4770      	bx	lr

0800b5a8 <_raise_r>:
 800b5a8:	291f      	cmp	r1, #31
 800b5aa:	b538      	push	{r3, r4, r5, lr}
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	460d      	mov	r5, r1
 800b5b0:	d904      	bls.n	800b5bc <_raise_r+0x14>
 800b5b2:	2316      	movs	r3, #22
 800b5b4:	6003      	str	r3, [r0, #0]
 800b5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5be:	b112      	cbz	r2, 800b5c6 <_raise_r+0x1e>
 800b5c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5c4:	b94b      	cbnz	r3, 800b5da <_raise_r+0x32>
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 f830 	bl	800b62c <_getpid_r>
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5d6:	f000 b817 	b.w	800b608 <_kill_r>
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d00a      	beq.n	800b5f4 <_raise_r+0x4c>
 800b5de:	1c59      	adds	r1, r3, #1
 800b5e0:	d103      	bne.n	800b5ea <_raise_r+0x42>
 800b5e2:	2316      	movs	r3, #22
 800b5e4:	6003      	str	r3, [r0, #0]
 800b5e6:	2001      	movs	r0, #1
 800b5e8:	e7e7      	b.n	800b5ba <_raise_r+0x12>
 800b5ea:	2400      	movs	r4, #0
 800b5ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	4798      	blx	r3
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	e7e0      	b.n	800b5ba <_raise_r+0x12>

0800b5f8 <raise>:
 800b5f8:	4b02      	ldr	r3, [pc, #8]	; (800b604 <raise+0xc>)
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	f7ff bfd3 	b.w	800b5a8 <_raise_r>
 800b602:	bf00      	nop
 800b604:	2000000c 	.word	0x2000000c

0800b608 <_kill_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d07      	ldr	r5, [pc, #28]	; (800b628 <_kill_r+0x20>)
 800b60c:	2300      	movs	r3, #0
 800b60e:	4604      	mov	r4, r0
 800b610:	4608      	mov	r0, r1
 800b612:	4611      	mov	r1, r2
 800b614:	602b      	str	r3, [r5, #0]
 800b616:	f7f5 ff47 	bl	80014a8 <_kill>
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	d102      	bne.n	800b624 <_kill_r+0x1c>
 800b61e:	682b      	ldr	r3, [r5, #0]
 800b620:	b103      	cbz	r3, 800b624 <_kill_r+0x1c>
 800b622:	6023      	str	r3, [r4, #0]
 800b624:	bd38      	pop	{r3, r4, r5, pc}
 800b626:	bf00      	nop
 800b628:	200008e4 	.word	0x200008e4

0800b62c <_getpid_r>:
 800b62c:	f7f5 bf34 	b.w	8001498 <_getpid>

0800b630 <__sread>:
 800b630:	b510      	push	{r4, lr}
 800b632:	460c      	mov	r4, r1
 800b634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b638:	f000 f894 	bl	800b764 <_read_r>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	bfab      	itete	ge
 800b640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b642:	89a3      	ldrhlt	r3, [r4, #12]
 800b644:	181b      	addge	r3, r3, r0
 800b646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b64a:	bfac      	ite	ge
 800b64c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b64e:	81a3      	strhlt	r3, [r4, #12]
 800b650:	bd10      	pop	{r4, pc}

0800b652 <__swrite>:
 800b652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b656:	461f      	mov	r7, r3
 800b658:	898b      	ldrh	r3, [r1, #12]
 800b65a:	05db      	lsls	r3, r3, #23
 800b65c:	4605      	mov	r5, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	4616      	mov	r6, r2
 800b662:	d505      	bpl.n	800b670 <__swrite+0x1e>
 800b664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b668:	2302      	movs	r3, #2
 800b66a:	2200      	movs	r2, #0
 800b66c:	f000 f868 	bl	800b740 <_lseek_r>
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	4632      	mov	r2, r6
 800b67e:	463b      	mov	r3, r7
 800b680:	4628      	mov	r0, r5
 800b682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b686:	f000 b817 	b.w	800b6b8 <_write_r>

0800b68a <__sseek>:
 800b68a:	b510      	push	{r4, lr}
 800b68c:	460c      	mov	r4, r1
 800b68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b692:	f000 f855 	bl	800b740 <_lseek_r>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	bf15      	itete	ne
 800b69c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b69e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6a6:	81a3      	strheq	r3, [r4, #12]
 800b6a8:	bf18      	it	ne
 800b6aa:	81a3      	strhne	r3, [r4, #12]
 800b6ac:	bd10      	pop	{r4, pc}

0800b6ae <__sclose>:
 800b6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b2:	f000 b813 	b.w	800b6dc <_close_r>
	...

0800b6b8 <_write_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d07      	ldr	r5, [pc, #28]	; (800b6d8 <_write_r+0x20>)
 800b6bc:	4604      	mov	r4, r0
 800b6be:	4608      	mov	r0, r1
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	602a      	str	r2, [r5, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f7f5 ff25 	bl	8001516 <_write>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_write_r+0x1e>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_write_r+0x1e>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	200008e4 	.word	0x200008e4

0800b6dc <_close_r>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	4d06      	ldr	r5, [pc, #24]	; (800b6f8 <_close_r+0x1c>)
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	4608      	mov	r0, r1
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	f7f5 ff31 	bl	800154e <_close>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_close_r+0x1a>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_close_r+0x1a>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	200008e4 	.word	0x200008e4

0800b6fc <_fstat_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_fstat_r+0x20>)
 800b700:	2300      	movs	r3, #0
 800b702:	4604      	mov	r4, r0
 800b704:	4608      	mov	r0, r1
 800b706:	4611      	mov	r1, r2
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	f7f5 ff2c 	bl	8001566 <_fstat>
 800b70e:	1c43      	adds	r3, r0, #1
 800b710:	d102      	bne.n	800b718 <_fstat_r+0x1c>
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	b103      	cbz	r3, 800b718 <_fstat_r+0x1c>
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	bd38      	pop	{r3, r4, r5, pc}
 800b71a:	bf00      	nop
 800b71c:	200008e4 	.word	0x200008e4

0800b720 <_isatty_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_isatty_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7f5 ff2b 	bl	8001586 <_isatty>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_isatty_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_isatty_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	200008e4 	.word	0x200008e4

0800b740 <_lseek_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d07      	ldr	r5, [pc, #28]	; (800b760 <_lseek_r+0x20>)
 800b744:	4604      	mov	r4, r0
 800b746:	4608      	mov	r0, r1
 800b748:	4611      	mov	r1, r2
 800b74a:	2200      	movs	r2, #0
 800b74c:	602a      	str	r2, [r5, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	f7f5 ff24 	bl	800159c <_lseek>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_lseek_r+0x1e>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_lseek_r+0x1e>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	200008e4 	.word	0x200008e4

0800b764 <_read_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	; (800b784 <_read_r+0x20>)
 800b768:	4604      	mov	r4, r0
 800b76a:	4608      	mov	r0, r1
 800b76c:	4611      	mov	r1, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	602a      	str	r2, [r5, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	f7f5 feb2 	bl	80014dc <_read>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_read_r+0x1e>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_read_r+0x1e>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	200008e4 	.word	0x200008e4

0800b788 <_init>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	bf00      	nop
 800b78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78e:	bc08      	pop	{r3}
 800b790:	469e      	mov	lr, r3
 800b792:	4770      	bx	lr

0800b794 <_fini>:
 800b794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b796:	bf00      	nop
 800b798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79a:	bc08      	pop	{r3}
 800b79c:	469e      	mov	lr, r3
 800b79e:	4770      	bx	lr
